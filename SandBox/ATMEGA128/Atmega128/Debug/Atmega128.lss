
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00002e5c  00002ef0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010b  00800136  00800136  00002f26  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002f58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006b0  00000000  00000000  00002f98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000062de  00000000  00000000  00003648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016e5  00000000  00000000  00009926  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000382d  00000000  00000000  0000b00b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e40  00000000  00000000  0000e838  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000116d  00000000  00000000  0000f678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004408  00000000  00000000  000107e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d0  00000000  00000000  00014bed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a1 c0       	rjmp	.+322    	; 0x144 <__ctors_end>
       2:	00 00       	nop
       4:	bf c0       	rjmp	.+382    	; 0x184 <__vector_1>
       6:	00 00       	nop
       8:	bc c0       	rjmp	.+376    	; 0x182 <__bad_interrupt>
       a:	00 00       	nop
       c:	c5 c0       	rjmp	.+394    	; 0x198 <__vector_3>
       e:	00 00       	nop
      10:	cd c0       	rjmp	.+410    	; 0x1ac <__vector_4>
      12:	00 00       	nop
      14:	d5 c0       	rjmp	.+426    	; 0x1c0 <__vector_5>
      16:	00 00       	nop
      18:	dd c0       	rjmp	.+442    	; 0x1d4 <__vector_6>
      1a:	00 00       	nop
      1c:	e5 c0       	rjmp	.+458    	; 0x1e8 <__vector_7>
      1e:	00 00       	nop
      20:	ed c0       	rjmp	.+474    	; 0x1fc <__vector_8>
      22:	00 00       	nop
      24:	ae c0       	rjmp	.+348    	; 0x182 <__bad_interrupt>
      26:	00 00       	nop
      28:	6e c3       	rjmp	.+1756   	; 0x706 <__vector_10>
      2a:	00 00       	nop
      2c:	44 c3       	rjmp	.+1672   	; 0x6b6 <__vector_11>
      2e:	00 00       	nop
      30:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__vector_12>
      34:	4a c3       	rjmp	.+1684   	; 0x6ca <__vector_13>
      36:	00 00       	nop
      38:	5c c3       	rjmp	.+1720   	; 0x6f2 <__vector_14>
      3a:	00 00       	nop
      3c:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__vector_15>
      40:	30 c3       	rjmp	.+1632   	; 0x6a2 <__vector_16>
      42:	00 00       	nop
      44:	9e c0       	rjmp	.+316    	; 0x182 <__bad_interrupt>
      46:	00 00       	nop
      48:	9c c0       	rjmp	.+312    	; 0x182 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9a c0       	rjmp	.+308    	; 0x182 <__bad_interrupt>
      4e:	00 00       	nop
      50:	98 c0       	rjmp	.+304    	; 0x182 <__bad_interrupt>
      52:	00 00       	nop
      54:	96 c0       	rjmp	.+300    	; 0x182 <__bad_interrupt>
      56:	00 00       	nop
      58:	94 c0       	rjmp	.+296    	; 0x182 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	92 c0       	rjmp	.+292    	; 0x182 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3e c3       	rjmp	.+1660   	; 0x6de <__vector_24>
      62:	00 00       	nop
      64:	5a c3       	rjmp	.+1716   	; 0x71a <__vector_25>
      66:	00 00       	nop
      68:	62 c3       	rjmp	.+1732   	; 0x72e <__vector_26>
      6a:	00 00       	nop
      6c:	6a c3       	rjmp	.+1748   	; 0x742 <__vector_27>
      6e:	00 00       	nop
      70:	72 c3       	rjmp	.+1764   	; 0x756 <__vector_28>
      72:	00 00       	nop
      74:	7a c3       	rjmp	.+1780   	; 0x76a <__vector_29>
      76:	00 00       	nop
      78:	84 c0       	rjmp	.+264    	; 0x182 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	82 c0       	rjmp	.+260    	; 0x182 <__bad_interrupt>
      7e:	00 00       	nop
      80:	80 c0       	rjmp	.+256    	; 0x182 <__bad_interrupt>
      82:	00 00       	nop
      84:	7e c0       	rjmp	.+252    	; 0x182 <__bad_interrupt>
      86:	00 00       	nop
      88:	7c c0       	rjmp	.+248    	; 0x182 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	72 02       	muls	r23, r18
      8e:	76 02       	muls	r23, r22
      90:	7a 02       	muls	r23, r26
      92:	7e 02       	muls	r23, r30
      94:	82 02       	muls	r24, r18
      96:	89 02       	muls	r24, r25
      98:	90 02       	muls	r25, r16
      9a:	97 02       	muls	r25, r23
      9c:	9b 02       	muls	r25, r27
      9e:	a2 02       	muls	r26, r18
      a0:	a9 02       	muls	r26, r25
      a2:	b0 02       	muls	r27, r16
      a4:	b4 02       	muls	r27, r20
      a6:	bb 02       	muls	r27, r27
      a8:	c2 02       	muls	r28, r18
      aa:	de 02       	muls	r29, r30
      ac:	e2 02       	muls	r30, r18
      ae:	e6 02       	muls	r30, r22
      b0:	ea 02       	muls	r30, r26
      b2:	f0 02       	muls	r31, r16
      b4:	f4 02       	muls	r31, r20
      b6:	f8 02       	muls	r31, r24
      b8:	fc 02       	muls	r31, r28
      ba:	05 03       	mulsu	r16, r21
      bc:	09 03       	fmul	r16, r17
      be:	0d 03       	fmul	r16, r21
      c0:	16 03       	mulsu	r17, r22
      c2:	07 63       	ori	r16, 0x37	; 55
      c4:	42 36       	cpi	r20, 0x62	; 98
      c6:	b7 9b       	sbis	0x16, 7	; 22
      c8:	d8 a7       	std	Y+40, r29	; 0x28
      ca:	1a 39       	cpi	r17, 0x9A	; 154
      cc:	68 56       	subi	r22, 0x68	; 104
      ce:	18 ae       	std	Y+56, r1	; 0x38
      d0:	ba ab       	std	Y+50, r27	; 0x32
      d2:	55 8c       	ldd	r5, Z+29	; 0x1d
      d4:	1d 3c       	cpi	r17, 0xCD	; 205
      d6:	b7 cc       	rjmp	.-1682   	; 0xfffffa46 <__eeprom_end+0xff7efa46>
      d8:	57 63       	ori	r21, 0x37	; 55
      da:	bd 6d       	ori	r27, 0xDD	; 221
      dc:	ed fd       	.word	0xfded	; ????
      de:	75 3e       	cpi	r23, 0xE5	; 229
      e0:	f6 17       	cp	r31, r22
      e2:	72 31       	cpi	r23, 0x12	; 18
      e4:	bf 00       	.word	0x00bf	; ????
      e6:	00 00       	nop
      e8:	80 3f       	cpi	r24, 0xF0	; 240
      ea:	08 00       	.word	0x0008	; ????
      ec:	00 00       	nop
      ee:	be 92       	st	-X, r11
      f0:	24 49       	sbci	r18, 0x94	; 148
      f2:	12 3e       	cpi	r17, 0xE2	; 226
      f4:	ab aa       	std	Y+51, r10	; 0x33
      f6:	aa 2a       	or	r10, r26
      f8:	be cd       	rjmp	.-1156   	; 0xfffffc76 <__eeprom_end+0xff7efc76>
      fa:	cc cc       	rjmp	.-1640   	; 0xfffffa94 <__eeprom_end+0xff7efa94>
      fc:	4c 3e       	cpi	r20, 0xEC	; 236
      fe:	00 00       	nop
     100:	00 80       	ld	r0, Z
     102:	be ab       	std	Y+54, r27	; 0x36
     104:	aa aa       	std	Y+50, r10	; 0x32
     106:	aa 3e       	cpi	r26, 0xEA	; 234
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	bf 00       	.word	0x00bf	; ????
     10e:	00 00       	nop
     110:	80 3f       	cpi	r24, 0xF0	; 240
     112:	00 00       	nop
     114:	00 00       	nop
     116:	00 08       	sbc	r0, r0
     118:	41 78       	andi	r20, 0x81	; 129
     11a:	d3 bb       	out	0x13, r29	; 19
     11c:	43 87       	std	Z+11, r20	; 0x0b
     11e:	d1 13       	cpse	r29, r17
     120:	3d 19       	sub	r19, r13
     122:	0e 3c       	cpi	r16, 0xCE	; 206
     124:	c3 bd       	out	0x23, r28	; 35
     126:	42 82       	std	Z+2, r4	; 0x02
     128:	ad 2b       	or	r26, r29
     12a:	3e 68       	ori	r19, 0x8E	; 142
     12c:	ec 82       	std	Y+4, r14	; 0x04
     12e:	76 be       	out	0x36, r7	; 54
     130:	d9 8f       	std	Y+25, r29	; 0x19
     132:	e1 a9       	ldd	r30, Z+49	; 0x31
     134:	3e 4c       	sbci	r19, 0xCE	; 206
     136:	80 ef       	ldi	r24, 0xF0	; 240
     138:	ff be       	out	0x3f, r15	; 63
     13a:	01 c4       	rjmp	.+2050   	; 0x93e <FUNCswap+0x24>
     13c:	ff 7f       	andi	r31, 0xFF	; 255
     13e:	3f 00       	.word	0x003f	; ????
     140:	00 00       	nop
	...

00000144 <__ctors_end>:
     144:	11 24       	eor	r1, r1
     146:	1f be       	out	0x3f, r1	; 63
     148:	cf ef       	ldi	r28, 0xFF	; 255
     14a:	d0 e1       	ldi	r29, 0x10	; 16
     14c:	de bf       	out	0x3e, r29	; 62
     14e:	cd bf       	out	0x3d, r28	; 61

00000150 <__do_copy_data>:
     150:	11 e0       	ldi	r17, 0x01	; 1
     152:	a0 e0       	ldi	r26, 0x00	; 0
     154:	b1 e0       	ldi	r27, 0x01	; 1
     156:	ec e5       	ldi	r30, 0x5C	; 92
     158:	fe e2       	ldi	r31, 0x2E	; 46
     15a:	00 e0       	ldi	r16, 0x00	; 0
     15c:	0b bf       	out	0x3b, r16	; 59
     15e:	02 c0       	rjmp	.+4      	; 0x164 <__do_copy_data+0x14>
     160:	07 90       	elpm	r0, Z+
     162:	0d 92       	st	X+, r0
     164:	a6 33       	cpi	r26, 0x36	; 54
     166:	b1 07       	cpc	r27, r17
     168:	d9 f7       	brne	.-10     	; 0x160 <__do_copy_data+0x10>

0000016a <__do_clear_bss>:
     16a:	22 e0       	ldi	r18, 0x02	; 2
     16c:	a6 e3       	ldi	r26, 0x36	; 54
     16e:	b1 e0       	ldi	r27, 0x01	; 1
     170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
     172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
     174:	a1 34       	cpi	r26, 0x41	; 65
     176:	b2 07       	cpc	r27, r18
     178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>
     17a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <main>
     17e:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <_exit>

00000182 <__bad_interrupt>:
     182:	3e cf       	rjmp	.-388    	; 0x0 <__vectors>

00000184 <__vector_1>:
			break;
	}
}
/***Interrupt***/
// cross out the ones being used and redefine in main
ISR(INT0_vect){ }
     184:	1f 92       	push	r1
     186:	0f 92       	push	r0
     188:	0f b6       	in	r0, 0x3f	; 63
     18a:	0f 92       	push	r0
     18c:	11 24       	eor	r1, r1
     18e:	0f 90       	pop	r0
     190:	0f be       	out	0x3f, r0	; 63
     192:	0f 90       	pop	r0
     194:	1f 90       	pop	r1
     196:	18 95       	reti

00000198 <__vector_3>:
//ISR(INT1_vect){ }
ISR(INT2_vect){ }
     198:	1f 92       	push	r1
     19a:	0f 92       	push	r0
     19c:	0f b6       	in	r0, 0x3f	; 63
     19e:	0f 92       	push	r0
     1a0:	11 24       	eor	r1, r1
     1a2:	0f 90       	pop	r0
     1a4:	0f be       	out	0x3f, r0	; 63
     1a6:	0f 90       	pop	r0
     1a8:	1f 90       	pop	r1
     1aa:	18 95       	reti

000001ac <__vector_4>:
ISR(INT3_vect){ }
     1ac:	1f 92       	push	r1
     1ae:	0f 92       	push	r0
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	0f 92       	push	r0
     1b4:	11 24       	eor	r1, r1
     1b6:	0f 90       	pop	r0
     1b8:	0f be       	out	0x3f, r0	; 63
     1ba:	0f 90       	pop	r0
     1bc:	1f 90       	pop	r1
     1be:	18 95       	reti

000001c0 <__vector_5>:
ISR(INT4_vect){ }
     1c0:	1f 92       	push	r1
     1c2:	0f 92       	push	r0
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	0f 92       	push	r0
     1c8:	11 24       	eor	r1, r1
     1ca:	0f 90       	pop	r0
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	0f 90       	pop	r0
     1d0:	1f 90       	pop	r1
     1d2:	18 95       	reti

000001d4 <__vector_6>:
ISR(INT5_vect){ }
     1d4:	1f 92       	push	r1
     1d6:	0f 92       	push	r0
     1d8:	0f b6       	in	r0, 0x3f	; 63
     1da:	0f 92       	push	r0
     1dc:	11 24       	eor	r1, r1
     1de:	0f 90       	pop	r0
     1e0:	0f be       	out	0x3f, r0	; 63
     1e2:	0f 90       	pop	r0
     1e4:	1f 90       	pop	r1
     1e6:	18 95       	reti

000001e8 <__vector_7>:
ISR(INT6_vect){ }
     1e8:	1f 92       	push	r1
     1ea:	0f 92       	push	r0
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	0f 92       	push	r0
     1f0:	11 24       	eor	r1, r1
     1f2:	0f 90       	pop	r0
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	0f 90       	pop	r0
     1f8:	1f 90       	pop	r1
     1fa:	18 95       	reti

000001fc <__vector_8>:
ISR(INT7_vect){ }
     1fc:	1f 92       	push	r1
     1fe:	0f 92       	push	r0
     200:	0f b6       	in	r0, 0x3f	; 63
     202:	0f 92       	push	r0
     204:	11 24       	eor	r1, r1
     206:	0f 90       	pop	r0
     208:	0f be       	out	0x3f, r0	; 63
     20a:	0f 90       	pop	r0
     20c:	1f 90       	pop	r1
     20e:	18 95       	reti

00000210 <TIMER_COUNTER0_start>:
	timer3.compareB=TIMER_COUNTER3_compareB;
	timer3.compareC=TIMER_COUNTER3_compareC;
	timer3.start=TIMER_COUNTER3_start;
	timer3.stop=TIMER_COUNTER3_stop;
	return timer3;
}
     210:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <timer0_state>
     214:	21 11       	cpse	r18, r1
     216:	41 c0       	rjmp	.+130    	; 0x29a <TIMER_COUNTER0_start+0x8a>
     218:	23 b7       	in	r18, 0x33	; 51
     21a:	28 7f       	andi	r18, 0xF8	; 248
     21c:	23 bf       	out	0x33, r18	; 51
     21e:	80 34       	cpi	r24, 0x40	; 64
     220:	91 05       	cpc	r25, r1
     222:	11 f1       	breq	.+68     	; 0x268 <TIMER_COUNTER0_start+0x58>
     224:	48 f4       	brcc	.+18     	; 0x238 <TIMER_COUNTER0_start+0x28>
     226:	88 30       	cpi	r24, 0x08	; 8
     228:	91 05       	cpc	r25, r1
     22a:	b1 f0       	breq	.+44     	; 0x258 <TIMER_COUNTER0_start+0x48>
     22c:	80 32       	cpi	r24, 0x20	; 32
     22e:	91 05       	cpc	r25, r1
     230:	b9 f0       	breq	.+46     	; 0x260 <TIMER_COUNTER0_start+0x50>
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	49 f5       	brne	.+82     	; 0x288 <TIMER_COUNTER0_start+0x78>
     236:	0c c0       	rjmp	.+24     	; 0x250 <TIMER_COUNTER0_start+0x40>
     238:	81 15       	cp	r24, r1
     23a:	21 e0       	ldi	r18, 0x01	; 1
     23c:	92 07       	cpc	r25, r18
     23e:	e1 f0       	breq	.+56     	; 0x278 <TIMER_COUNTER0_start+0x68>
     240:	81 15       	cp	r24, r1
     242:	24 e0       	ldi	r18, 0x04	; 4
     244:	92 07       	cpc	r25, r18
     246:	e1 f0       	breq	.+56     	; 0x280 <TIMER_COUNTER0_start+0x70>
     248:	80 38       	cpi	r24, 0x80	; 128
     24a:	91 05       	cpc	r25, r1
     24c:	e9 f4       	brne	.+58     	; 0x288 <TIMER_COUNTER0_start+0x78>
     24e:	10 c0       	rjmp	.+32     	; 0x270 <TIMER_COUNTER0_start+0x60>
     250:	83 b7       	in	r24, 0x33	; 51
     252:	81 60       	ori	r24, 0x01	; 1
     254:	83 bf       	out	0x33, r24	; 51
     256:	1b c0       	rjmp	.+54     	; 0x28e <TIMER_COUNTER0_start+0x7e>
     258:	83 b7       	in	r24, 0x33	; 51
     25a:	82 60       	ori	r24, 0x02	; 2
     25c:	83 bf       	out	0x33, r24	; 51
     25e:	17 c0       	rjmp	.+46     	; 0x28e <TIMER_COUNTER0_start+0x7e>
     260:	83 b7       	in	r24, 0x33	; 51
     262:	83 60       	ori	r24, 0x03	; 3
     264:	83 bf       	out	0x33, r24	; 51
     266:	13 c0       	rjmp	.+38     	; 0x28e <TIMER_COUNTER0_start+0x7e>
     268:	83 b7       	in	r24, 0x33	; 51
     26a:	84 60       	ori	r24, 0x04	; 4
     26c:	83 bf       	out	0x33, r24	; 51
     26e:	0f c0       	rjmp	.+30     	; 0x28e <TIMER_COUNTER0_start+0x7e>
     270:	83 b7       	in	r24, 0x33	; 51
     272:	85 60       	ori	r24, 0x05	; 5
     274:	83 bf       	out	0x33, r24	; 51
     276:	0b c0       	rjmp	.+22     	; 0x28e <TIMER_COUNTER0_start+0x7e>
     278:	83 b7       	in	r24, 0x33	; 51
     27a:	86 60       	ori	r24, 0x06	; 6
     27c:	83 bf       	out	0x33, r24	; 51
     27e:	07 c0       	rjmp	.+14     	; 0x28e <TIMER_COUNTER0_start+0x7e>
     280:	83 b7       	in	r24, 0x33	; 51
     282:	87 60       	ori	r24, 0x07	; 7
     284:	83 bf       	out	0x33, r24	; 51
     286:	03 c0       	rjmp	.+6      	; 0x28e <TIMER_COUNTER0_start+0x7e>
     288:	83 b7       	in	r24, 0x33	; 51
     28a:	87 60       	ori	r24, 0x07	; 7
     28c:	83 bf       	out	0x33, r24	; 51
     28e:	8f b7       	in	r24, 0x3f	; 63
     290:	80 68       	ori	r24, 0x80	; 128
     292:	8f bf       	out	0x3f, r24	; 63
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timer0_state>
     29a:	08 95       	ret

0000029c <TIMER_COUNTER0_compoutmode>:
     29c:	93 b7       	in	r25, 0x33	; 51
     29e:	9f 7c       	andi	r25, 0xCF	; 207
     2a0:	93 bf       	out	0x33, r25	; 51
     2a2:	82 30       	cpi	r24, 0x02	; 2
     2a4:	51 f0       	breq	.+20     	; 0x2ba <TIMER_COUNTER0_compoutmode+0x1e>
     2a6:	83 30       	cpi	r24, 0x03	; 3
     2a8:	71 f0       	breq	.+28     	; 0x2c6 <TIMER_COUNTER0_compoutmode+0x2a>
     2aa:	81 30       	cpi	r24, 0x01	; 1
     2ac:	89 f4       	brne	.+34     	; 0x2d0 <TIMER_COUNTER0_compoutmode+0x34>
     2ae:	80 e1       	ldi	r24, 0x10	; 16
     2b0:	87 bb       	out	0x17, r24	; 23
     2b2:	83 b7       	in	r24, 0x33	; 51
     2b4:	80 61       	ori	r24, 0x10	; 16
     2b6:	83 bf       	out	0x33, r24	; 51
     2b8:	08 95       	ret
     2ba:	80 e1       	ldi	r24, 0x10	; 16
     2bc:	87 bb       	out	0x17, r24	; 23
     2be:	83 b7       	in	r24, 0x33	; 51
     2c0:	80 62       	ori	r24, 0x20	; 32
     2c2:	83 bf       	out	0x33, r24	; 51
     2c4:	08 95       	ret
     2c6:	80 e1       	ldi	r24, 0x10	; 16
     2c8:	87 bb       	out	0x17, r24	; 23
     2ca:	83 b7       	in	r24, 0x33	; 51
     2cc:	80 63       	ori	r24, 0x30	; 48
     2ce:	83 bf       	out	0x33, r24	; 51
     2d0:	08 95       	ret

000002d2 <TIMER_COUNTER0_compare>:
     2d2:	81 bf       	out	0x31, r24	; 49
     2d4:	08 95       	ret

000002d6 <TIMER_COUNTER0_stop>:
     2d6:	83 b7       	in	r24, 0x33	; 51
     2d8:	88 7f       	andi	r24, 0xF8	; 248
     2da:	83 bf       	out	0x33, r24	; 51
     2dc:	12 be       	out	0x32, r1	; 50
     2de:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <timer0_state>
     2e2:	08 95       	ret

000002e4 <TIMER_COUNTER1_start>:
     2e4:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <timer1_state>
     2e8:	21 11       	cpse	r18, r1
     2ea:	41 c0       	rjmp	.+130    	; 0x36e <TIMER_COUNTER1_start+0x8a>
     2ec:	2e b5       	in	r18, 0x2e	; 46
     2ee:	28 7f       	andi	r18, 0xF8	; 248
     2f0:	2e bd       	out	0x2e, r18	; 46
     2f2:	88 30       	cpi	r24, 0x08	; 8
     2f4:	91 05       	cpc	r25, r1
     2f6:	d1 f0       	breq	.+52     	; 0x32c <TIMER_COUNTER1_start+0x48>
     2f8:	48 f4       	brcc	.+18     	; 0x30c <TIMER_COUNTER1_start+0x28>
     2fa:	83 30       	cpi	r24, 0x03	; 3
     2fc:	91 05       	cpc	r25, r1
     2fe:	31 f1       	breq	.+76     	; 0x34c <TIMER_COUNTER1_start+0x68>
     300:	85 30       	cpi	r24, 0x05	; 5
     302:	91 05       	cpc	r25, r1
     304:	39 f1       	breq	.+78     	; 0x354 <TIMER_COUNTER1_start+0x70>
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	49 f5       	brne	.+82     	; 0x35c <TIMER_COUNTER1_start+0x78>
     30a:	0c c0       	rjmp	.+24     	; 0x324 <TIMER_COUNTER1_start+0x40>
     30c:	81 15       	cp	r24, r1
     30e:	21 e0       	ldi	r18, 0x01	; 1
     310:	92 07       	cpc	r25, r18
     312:	a1 f0       	breq	.+40     	; 0x33c <TIMER_COUNTER1_start+0x58>
     314:	81 15       	cp	r24, r1
     316:	24 e0       	ldi	r18, 0x04	; 4
     318:	92 07       	cpc	r25, r18
     31a:	a1 f0       	breq	.+40     	; 0x344 <TIMER_COUNTER1_start+0x60>
     31c:	80 34       	cpi	r24, 0x40	; 64
     31e:	91 05       	cpc	r25, r1
     320:	e9 f4       	brne	.+58     	; 0x35c <TIMER_COUNTER1_start+0x78>
     322:	08 c0       	rjmp	.+16     	; 0x334 <TIMER_COUNTER1_start+0x50>
     324:	8e b5       	in	r24, 0x2e	; 46
     326:	81 60       	ori	r24, 0x01	; 1
     328:	8e bd       	out	0x2e, r24	; 46
     32a:	1b c0       	rjmp	.+54     	; 0x362 <TIMER_COUNTER1_start+0x7e>
     32c:	8e b5       	in	r24, 0x2e	; 46
     32e:	82 60       	ori	r24, 0x02	; 2
     330:	8e bd       	out	0x2e, r24	; 46
     332:	17 c0       	rjmp	.+46     	; 0x362 <TIMER_COUNTER1_start+0x7e>
     334:	8e b5       	in	r24, 0x2e	; 46
     336:	83 60       	ori	r24, 0x03	; 3
     338:	8e bd       	out	0x2e, r24	; 46
     33a:	13 c0       	rjmp	.+38     	; 0x362 <TIMER_COUNTER1_start+0x7e>
     33c:	8e b5       	in	r24, 0x2e	; 46
     33e:	84 60       	ori	r24, 0x04	; 4
     340:	8e bd       	out	0x2e, r24	; 46
     342:	0f c0       	rjmp	.+30     	; 0x362 <TIMER_COUNTER1_start+0x7e>
     344:	8e b5       	in	r24, 0x2e	; 46
     346:	85 60       	ori	r24, 0x05	; 5
     348:	8e bd       	out	0x2e, r24	; 46
     34a:	0b c0       	rjmp	.+22     	; 0x362 <TIMER_COUNTER1_start+0x7e>
     34c:	8e b5       	in	r24, 0x2e	; 46
     34e:	86 60       	ori	r24, 0x06	; 6
     350:	8e bd       	out	0x2e, r24	; 46
     352:	07 c0       	rjmp	.+14     	; 0x362 <TIMER_COUNTER1_start+0x7e>
     354:	8e b5       	in	r24, 0x2e	; 46
     356:	87 60       	ori	r24, 0x07	; 7
     358:	8e bd       	out	0x2e, r24	; 46
     35a:	03 c0       	rjmp	.+6      	; 0x362 <TIMER_COUNTER1_start+0x7e>
     35c:	8e b5       	in	r24, 0x2e	; 46
     35e:	85 60       	ori	r24, 0x05	; 5
     360:	8e bd       	out	0x2e, r24	; 46
     362:	8f b7       	in	r24, 0x3f	; 63
     364:	80 68       	ori	r24, 0x80	; 128
     366:	8f bf       	out	0x3f, r24	; 63
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <timer1_state>
     36e:	08 95       	ret

00000370 <TIMER_COUNTER1_compoutmodeA>:
     370:	9f b5       	in	r25, 0x2f	; 47
     372:	9f 73       	andi	r25, 0x3F	; 63
     374:	9f bd       	out	0x2f, r25	; 47
     376:	82 30       	cpi	r24, 0x02	; 2
     378:	49 f0       	breq	.+18     	; 0x38c <TIMER_COUNTER1_compoutmodeA+0x1c>
     37a:	83 30       	cpi	r24, 0x03	; 3
     37c:	61 f0       	breq	.+24     	; 0x396 <TIMER_COUNTER1_compoutmodeA+0x26>
     37e:	81 30       	cpi	r24, 0x01	; 1
     380:	71 f4       	brne	.+28     	; 0x39e <TIMER_COUNTER1_compoutmodeA+0x2e>
     382:	bd 9a       	sbi	0x17, 5	; 23
     384:	8f b5       	in	r24, 0x2f	; 47
     386:	80 64       	ori	r24, 0x40	; 64
     388:	8f bd       	out	0x2f, r24	; 47
     38a:	08 95       	ret
     38c:	bd 9a       	sbi	0x17, 5	; 23
     38e:	8f b5       	in	r24, 0x2f	; 47
     390:	80 68       	ori	r24, 0x80	; 128
     392:	8f bd       	out	0x2f, r24	; 47
     394:	08 95       	ret
     396:	bd 9a       	sbi	0x17, 5	; 23
     398:	8f b5       	in	r24, 0x2f	; 47
     39a:	80 6c       	ori	r24, 0xC0	; 192
     39c:	8f bd       	out	0x2f, r24	; 47
     39e:	08 95       	ret

000003a0 <TIMER_COUNTER1_compoutmodeB>:
     3a0:	9f b5       	in	r25, 0x2f	; 47
     3a2:	9f 7c       	andi	r25, 0xCF	; 207
     3a4:	9f bd       	out	0x2f, r25	; 47
     3a6:	82 30       	cpi	r24, 0x02	; 2
     3a8:	49 f0       	breq	.+18     	; 0x3bc <TIMER_COUNTER1_compoutmodeB+0x1c>
     3aa:	83 30       	cpi	r24, 0x03	; 3
     3ac:	61 f0       	breq	.+24     	; 0x3c6 <TIMER_COUNTER1_compoutmodeB+0x26>
     3ae:	81 30       	cpi	r24, 0x01	; 1
     3b0:	71 f4       	brne	.+28     	; 0x3ce <TIMER_COUNTER1_compoutmodeB+0x2e>
     3b2:	be 9a       	sbi	0x17, 6	; 23
     3b4:	8f b5       	in	r24, 0x2f	; 47
     3b6:	80 61       	ori	r24, 0x10	; 16
     3b8:	8f bd       	out	0x2f, r24	; 47
     3ba:	08 95       	ret
     3bc:	be 9a       	sbi	0x17, 6	; 23
     3be:	8f b5       	in	r24, 0x2f	; 47
     3c0:	80 62       	ori	r24, 0x20	; 32
     3c2:	8f bd       	out	0x2f, r24	; 47
     3c4:	08 95       	ret
     3c6:	be 9a       	sbi	0x17, 6	; 23
     3c8:	8f b5       	in	r24, 0x2f	; 47
     3ca:	80 63       	ori	r24, 0x30	; 48
     3cc:	8f bd       	out	0x2f, r24	; 47
     3ce:	08 95       	ret

000003d0 <TIMER_COUNTER1_compoutmodeC>:
     3d0:	9f b5       	in	r25, 0x2f	; 47
     3d2:	93 7f       	andi	r25, 0xF3	; 243
     3d4:	9f bd       	out	0x2f, r25	; 47
     3d6:	82 30       	cpi	r24, 0x02	; 2
     3d8:	49 f0       	breq	.+18     	; 0x3ec <TIMER_COUNTER1_compoutmodeC+0x1c>
     3da:	83 30       	cpi	r24, 0x03	; 3
     3dc:	61 f0       	breq	.+24     	; 0x3f6 <TIMER_COUNTER1_compoutmodeC+0x26>
     3de:	81 30       	cpi	r24, 0x01	; 1
     3e0:	71 f4       	brne	.+28     	; 0x3fe <TIMER_COUNTER1_compoutmodeC+0x2e>
     3e2:	bf 9a       	sbi	0x17, 7	; 23
     3e4:	8f b5       	in	r24, 0x2f	; 47
     3e6:	84 60       	ori	r24, 0x04	; 4
     3e8:	8f bd       	out	0x2f, r24	; 47
     3ea:	08 95       	ret
     3ec:	bf 9a       	sbi	0x17, 7	; 23
     3ee:	8f b5       	in	r24, 0x2f	; 47
     3f0:	88 60       	ori	r24, 0x08	; 8
     3f2:	8f bd       	out	0x2f, r24	; 47
     3f4:	08 95       	ret
     3f6:	bf 9a       	sbi	0x17, 7	; 23
     3f8:	8f b5       	in	r24, 0x2f	; 47
     3fa:	8c 60       	ori	r24, 0x0C	; 12
     3fc:	8f bd       	out	0x2f, r24	; 47
     3fe:	08 95       	ret

00000400 <TIMER_COUNTER1_compareA>:
     400:	9b bd       	out	0x2b, r25	; 43
     402:	8a bd       	out	0x2a, r24	; 42
     404:	08 95       	ret

00000406 <TIMER_COUNTER1_compareB>:
     406:	99 bd       	out	0x29, r25	; 41
     408:	88 bd       	out	0x28, r24	; 40
     40a:	08 95       	ret

0000040c <TIMER_COUNTER1_compareC>:
     40c:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     410:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     414:	08 95       	ret

00000416 <TIMER_COUNTER1_stop>:
     416:	8e b5       	in	r24, 0x2e	; 46
     418:	88 7f       	andi	r24, 0xF8	; 248
     41a:	8e bd       	out	0x2e, r24	; 46
     41c:	1d bc       	out	0x2d, r1	; 45
     41e:	1c bc       	out	0x2c, r1	; 44
     420:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <timer1_state>
     424:	08 95       	ret

00000426 <TIMER_COUNTER0enable>:
     426:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <timer0_state>
     42a:	2f ef       	ldi	r18, 0xFF	; 255
     42c:	21 bf       	out	0x31, r18	; 49
     42e:	23 b7       	in	r18, 0x33	; 51
     430:	27 7b       	andi	r18, 0xB7	; 183
     432:	23 bf       	out	0x33, r18	; 51
     434:	62 30       	cpi	r22, 0x02	; 2
     436:	41 f0       	breq	.+16     	; 0x448 <TIMER_COUNTER0enable+0x22>
     438:	63 30       	cpi	r22, 0x03	; 3
     43a:	51 f0       	breq	.+20     	; 0x450 <TIMER_COUNTER0enable+0x2a>
     43c:	61 30       	cpi	r22, 0x01	; 1
     43e:	59 f4       	brne	.+22     	; 0x456 <TIMER_COUNTER0enable+0x30>
     440:	23 b7       	in	r18, 0x33	; 51
     442:	20 64       	ori	r18, 0x40	; 64
     444:	23 bf       	out	0x33, r18	; 51
     446:	07 c0       	rjmp	.+14     	; 0x456 <TIMER_COUNTER0enable+0x30>
     448:	23 b7       	in	r18, 0x33	; 51
     44a:	28 60       	ori	r18, 0x08	; 8
     44c:	23 bf       	out	0x33, r18	; 51
     44e:	03 c0       	rjmp	.+6      	; 0x456 <TIMER_COUNTER0enable+0x30>
     450:	23 b7       	in	r18, 0x33	; 51
     452:	28 64       	ori	r18, 0x48	; 72
     454:	23 bf       	out	0x33, r18	; 51
     456:	27 b7       	in	r18, 0x37	; 55
     458:	2e 7f       	andi	r18, 0xFE	; 254
     45a:	27 bf       	out	0x37, r18	; 55
     45c:	27 b7       	in	r18, 0x37	; 55
     45e:	2d 7f       	andi	r18, 0xFD	; 253
     460:	27 bf       	out	0x37, r18	; 55
     462:	42 30       	cpi	r20, 0x02	; 2
     464:	41 f0       	breq	.+16     	; 0x476 <TIMER_COUNTER0enable+0x50>
     466:	43 30       	cpi	r20, 0x03	; 3
     468:	51 f0       	breq	.+20     	; 0x47e <TIMER_COUNTER0enable+0x58>
     46a:	41 30       	cpi	r20, 0x01	; 1
     46c:	71 f4       	brne	.+28     	; 0x48a <TIMER_COUNTER0enable+0x64>
     46e:	27 b7       	in	r18, 0x37	; 55
     470:	21 60       	ori	r18, 0x01	; 1
     472:	27 bf       	out	0x37, r18	; 55
     474:	0a c0       	rjmp	.+20     	; 0x48a <TIMER_COUNTER0enable+0x64>
     476:	27 b7       	in	r18, 0x37	; 55
     478:	22 60       	ori	r18, 0x02	; 2
     47a:	27 bf       	out	0x37, r18	; 55
     47c:	06 c0       	rjmp	.+12     	; 0x48a <TIMER_COUNTER0enable+0x64>
     47e:	27 b7       	in	r18, 0x37	; 55
     480:	21 60       	ori	r18, 0x01	; 1
     482:	27 bf       	out	0x37, r18	; 55
     484:	27 b7       	in	r18, 0x37	; 55
     486:	22 60       	ori	r18, 0x02	; 2
     488:	27 bf       	out	0x37, r18	; 55
     48a:	2e e4       	ldi	r18, 0x4E	; 78
     48c:	31 e0       	ldi	r19, 0x01	; 1
     48e:	fc 01       	movw	r30, r24
     490:	31 83       	std	Z+1, r19	; 0x01
     492:	20 83       	st	Z, r18
     494:	29 e6       	ldi	r18, 0x69	; 105
     496:	31 e0       	ldi	r19, 0x01	; 1
     498:	37 83       	std	Z+7, r19	; 0x07
     49a:	26 83       	std	Z+6, r18	; 0x06
     49c:	28 e0       	ldi	r18, 0x08	; 8
     49e:	31 e0       	ldi	r19, 0x01	; 1
     4a0:	35 87       	std	Z+13, r19	; 0x0d
     4a2:	24 87       	std	Z+12, r18	; 0x0c
     4a4:	2b e6       	ldi	r18, 0x6B	; 107
     4a6:	31 e0       	ldi	r19, 0x01	; 1
     4a8:	37 87       	std	Z+15, r19	; 0x0f
     4aa:	26 87       	std	Z+14, r18	; 0x0e
     4ac:	08 95       	ret

000004ae <TIMER_COUNTER1enable>:
     4ae:	0f 93       	push	r16
     4b0:	1f 93       	push	r17
     4b2:	dc 01       	movw	r26, r24
     4b4:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <timer1_state>
     4b8:	8f ef       	ldi	r24, 0xFF	; 255
     4ba:	9f ef       	ldi	r25, 0xFF	; 255
     4bc:	9b bd       	out	0x2b, r25	; 43
     4be:	8a bd       	out	0x2a, r24	; 42
     4c0:	8f b5       	in	r24, 0x2f	; 47
     4c2:	8c 7f       	andi	r24, 0xFC	; 252
     4c4:	8f bd       	out	0x2f, r24	; 47
     4c6:	8e b5       	in	r24, 0x2e	; 46
     4c8:	87 7e       	andi	r24, 0xE7	; 231
     4ca:	8e bd       	out	0x2e, r24	; 46
     4cc:	06 2f       	mov	r16, r22
     4ce:	10 e0       	ldi	r17, 0x00	; 0
     4d0:	f8 01       	movw	r30, r16
     4d2:	31 97       	sbiw	r30, 0x01	; 1
     4d4:	ef 30       	cpi	r30, 0x0F	; 15
     4d6:	f1 05       	cpc	r31, r1
     4d8:	08 f0       	brcs	.+2      	; 0x4dc <TIMER_COUNTER1enable+0x2e>
     4da:	5a c0       	rjmp	.+180    	; 0x590 <TIMER_COUNTER1enable+0xe2>
     4dc:	ea 5b       	subi	r30, 0xBA	; 186
     4de:	ff 4f       	sbci	r31, 0xFF	; 255
     4e0:	0c 94 6d 16 	jmp	0x2cda	; 0x2cda <__tablejump2__>
     4e4:	8f b5       	in	r24, 0x2f	; 47
     4e6:	81 60       	ori	r24, 0x01	; 1
     4e8:	8f bd       	out	0x2f, r24	; 47
     4ea:	52 c0       	rjmp	.+164    	; 0x590 <TIMER_COUNTER1enable+0xe2>
     4ec:	8f b5       	in	r24, 0x2f	; 47
     4ee:	82 60       	ori	r24, 0x02	; 2
     4f0:	8f bd       	out	0x2f, r24	; 47
     4f2:	4e c0       	rjmp	.+156    	; 0x590 <TIMER_COUNTER1enable+0xe2>
     4f4:	8f b5       	in	r24, 0x2f	; 47
     4f6:	83 60       	ori	r24, 0x03	; 3
     4f8:	8f bd       	out	0x2f, r24	; 47
     4fa:	4a c0       	rjmp	.+148    	; 0x590 <TIMER_COUNTER1enable+0xe2>
     4fc:	8e b5       	in	r24, 0x2e	; 46
     4fe:	88 60       	ori	r24, 0x08	; 8
     500:	8e bd       	out	0x2e, r24	; 46
     502:	46 c0       	rjmp	.+140    	; 0x590 <TIMER_COUNTER1enable+0xe2>
     504:	8f b5       	in	r24, 0x2f	; 47
     506:	81 60       	ori	r24, 0x01	; 1
     508:	8f bd       	out	0x2f, r24	; 47
     50a:	8e b5       	in	r24, 0x2e	; 46
     50c:	88 60       	ori	r24, 0x08	; 8
     50e:	8e bd       	out	0x2e, r24	; 46
     510:	3f c0       	rjmp	.+126    	; 0x590 <TIMER_COUNTER1enable+0xe2>
     512:	8f b5       	in	r24, 0x2f	; 47
     514:	82 60       	ori	r24, 0x02	; 2
     516:	8f bd       	out	0x2f, r24	; 47
     518:	8e b5       	in	r24, 0x2e	; 46
     51a:	88 60       	ori	r24, 0x08	; 8
     51c:	8e bd       	out	0x2e, r24	; 46
     51e:	38 c0       	rjmp	.+112    	; 0x590 <TIMER_COUNTER1enable+0xe2>
     520:	8f b5       	in	r24, 0x2f	; 47
     522:	83 60       	ori	r24, 0x03	; 3
     524:	8f bd       	out	0x2f, r24	; 47
     526:	8e b5       	in	r24, 0x2e	; 46
     528:	88 60       	ori	r24, 0x08	; 8
     52a:	8e bd       	out	0x2e, r24	; 46
     52c:	31 c0       	rjmp	.+98     	; 0x590 <TIMER_COUNTER1enable+0xe2>
     52e:	8e b5       	in	r24, 0x2e	; 46
     530:	80 61       	ori	r24, 0x10	; 16
     532:	8e bd       	out	0x2e, r24	; 46
     534:	2d c0       	rjmp	.+90     	; 0x590 <TIMER_COUNTER1enable+0xe2>
     536:	8f b5       	in	r24, 0x2f	; 47
     538:	81 60       	ori	r24, 0x01	; 1
     53a:	8f bd       	out	0x2f, r24	; 47
     53c:	8e b5       	in	r24, 0x2e	; 46
     53e:	80 61       	ori	r24, 0x10	; 16
     540:	8e bd       	out	0x2e, r24	; 46
     542:	26 c0       	rjmp	.+76     	; 0x590 <TIMER_COUNTER1enable+0xe2>
     544:	8f b5       	in	r24, 0x2f	; 47
     546:	82 60       	ori	r24, 0x02	; 2
     548:	8f bd       	out	0x2f, r24	; 47
     54a:	8e b5       	in	r24, 0x2e	; 46
     54c:	80 61       	ori	r24, 0x10	; 16
     54e:	8e bd       	out	0x2e, r24	; 46
     550:	1f c0       	rjmp	.+62     	; 0x590 <TIMER_COUNTER1enable+0xe2>
     552:	8f b5       	in	r24, 0x2f	; 47
     554:	83 60       	ori	r24, 0x03	; 3
     556:	8f bd       	out	0x2f, r24	; 47
     558:	8e b5       	in	r24, 0x2e	; 46
     55a:	80 61       	ori	r24, 0x10	; 16
     55c:	8e bd       	out	0x2e, r24	; 46
     55e:	18 c0       	rjmp	.+48     	; 0x590 <TIMER_COUNTER1enable+0xe2>
     560:	8e b5       	in	r24, 0x2e	; 46
     562:	88 61       	ori	r24, 0x18	; 24
     564:	8e bd       	out	0x2e, r24	; 46
     566:	14 c0       	rjmp	.+40     	; 0x590 <TIMER_COUNTER1enable+0xe2>
     568:	8f b5       	in	r24, 0x2f	; 47
     56a:	81 60       	ori	r24, 0x01	; 1
     56c:	8f bd       	out	0x2f, r24	; 47
     56e:	8e b5       	in	r24, 0x2e	; 46
     570:	88 61       	ori	r24, 0x18	; 24
     572:	8e bd       	out	0x2e, r24	; 46
     574:	0d c0       	rjmp	.+26     	; 0x590 <TIMER_COUNTER1enable+0xe2>
     576:	8f b5       	in	r24, 0x2f	; 47
     578:	82 60       	ori	r24, 0x02	; 2
     57a:	8f bd       	out	0x2f, r24	; 47
     57c:	8e b5       	in	r24, 0x2e	; 46
     57e:	88 61       	ori	r24, 0x18	; 24
     580:	8e bd       	out	0x2e, r24	; 46
     582:	06 c0       	rjmp	.+12     	; 0x590 <TIMER_COUNTER1enable+0xe2>
     584:	8f b5       	in	r24, 0x2f	; 47
     586:	83 60       	ori	r24, 0x03	; 3
     588:	8f bd       	out	0x2f, r24	; 47
     58a:	8e b5       	in	r24, 0x2e	; 46
     58c:	88 61       	ori	r24, 0x18	; 24
     58e:	8e bd       	out	0x2e, r24	; 46
     590:	8f b5       	in	r24, 0x2f	; 47
     592:	83 70       	andi	r24, 0x03	; 3
     594:	8f bd       	out	0x2f, r24	; 47
     596:	87 b7       	in	r24, 0x37	; 55
     598:	83 7c       	andi	r24, 0xC3	; 195
     59a:	87 bf       	out	0x37, r24	; 55
     59c:	ed e7       	ldi	r30, 0x7D	; 125
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	80 81       	ld	r24, Z
     5a2:	8e 7f       	andi	r24, 0xFE	; 254
     5a4:	80 83       	st	Z, r24
     5a6:	50 e0       	ldi	r21, 0x00	; 0
     5a8:	fa 01       	movw	r30, r20
     5aa:	31 97       	sbiw	r30, 0x01	; 1
     5ac:	ec 30       	cpi	r30, 0x0C	; 12
     5ae:	f1 05       	cpc	r31, r1
     5b0:	08 f0       	brcs	.+2      	; 0x5b4 <TIMER_COUNTER1enable+0x106>
     5b2:	44 c0       	rjmp	.+136    	; 0x63c <TIMER_COUNTER1enable+0x18e>
     5b4:	eb 5a       	subi	r30, 0xAB	; 171
     5b6:	ff 4f       	sbci	r31, 0xFF	; 255
     5b8:	0c 94 6d 16 	jmp	0x2cda	; 0x2cda <__tablejump2__>
     5bc:	87 b7       	in	r24, 0x37	; 55
     5be:	84 60       	ori	r24, 0x04	; 4
     5c0:	87 bf       	out	0x37, r24	; 55
     5c2:	3c c0       	rjmp	.+120    	; 0x63c <TIMER_COUNTER1enable+0x18e>
     5c4:	87 b7       	in	r24, 0x37	; 55
     5c6:	80 61       	ori	r24, 0x10	; 16
     5c8:	87 bf       	out	0x37, r24	; 55
     5ca:	38 c0       	rjmp	.+112    	; 0x63c <TIMER_COUNTER1enable+0x18e>
     5cc:	87 b7       	in	r24, 0x37	; 55
     5ce:	88 60       	ori	r24, 0x08	; 8
     5d0:	87 bf       	out	0x37, r24	; 55
     5d2:	34 c0       	rjmp	.+104    	; 0x63c <TIMER_COUNTER1enable+0x18e>
     5d4:	ed e7       	ldi	r30, 0x7D	; 125
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	80 81       	ld	r24, Z
     5da:	81 60       	ori	r24, 0x01	; 1
     5dc:	80 83       	st	Z, r24
     5de:	2e c0       	rjmp	.+92     	; 0x63c <TIMER_COUNTER1enable+0x18e>
     5e0:	87 b7       	in	r24, 0x37	; 55
     5e2:	80 62       	ori	r24, 0x20	; 32
     5e4:	87 bf       	out	0x37, r24	; 55
     5e6:	2a c0       	rjmp	.+84     	; 0x63c <TIMER_COUNTER1enable+0x18e>
     5e8:	87 b7       	in	r24, 0x37	; 55
     5ea:	84 61       	ori	r24, 0x14	; 20
     5ec:	87 bf       	out	0x37, r24	; 55
     5ee:	26 c0       	rjmp	.+76     	; 0x63c <TIMER_COUNTER1enable+0x18e>
     5f0:	87 b7       	in	r24, 0x37	; 55
     5f2:	8c 60       	ori	r24, 0x0C	; 12
     5f4:	87 bf       	out	0x37, r24	; 55
     5f6:	22 c0       	rjmp	.+68     	; 0x63c <TIMER_COUNTER1enable+0x18e>
     5f8:	87 b7       	in	r24, 0x37	; 55
     5fa:	84 60       	ori	r24, 0x04	; 4
     5fc:	87 bf       	out	0x37, r24	; 55
     5fe:	ed e7       	ldi	r30, 0x7D	; 125
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	80 81       	ld	r24, Z
     604:	81 60       	ori	r24, 0x01	; 1
     606:	80 83       	st	Z, r24
     608:	19 c0       	rjmp	.+50     	; 0x63c <TIMER_COUNTER1enable+0x18e>
     60a:	87 b7       	in	r24, 0x37	; 55
     60c:	84 62       	ori	r24, 0x24	; 36
     60e:	87 bf       	out	0x37, r24	; 55
     610:	15 c0       	rjmp	.+42     	; 0x63c <TIMER_COUNTER1enable+0x18e>
     612:	87 b7       	in	r24, 0x37	; 55
     614:	8c 61       	ori	r24, 0x1C	; 28
     616:	87 bf       	out	0x37, r24	; 55
     618:	11 c0       	rjmp	.+34     	; 0x63c <TIMER_COUNTER1enable+0x18e>
     61a:	87 b7       	in	r24, 0x37	; 55
     61c:	8c 61       	ori	r24, 0x1C	; 28
     61e:	87 bf       	out	0x37, r24	; 55
     620:	ed e7       	ldi	r30, 0x7D	; 125
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	80 81       	ld	r24, Z
     626:	81 60       	ori	r24, 0x01	; 1
     628:	80 83       	st	Z, r24
     62a:	08 c0       	rjmp	.+16     	; 0x63c <TIMER_COUNTER1enable+0x18e>
     62c:	87 b7       	in	r24, 0x37	; 55
     62e:	88 61       	ori	r24, 0x18	; 24
     630:	87 bf       	out	0x37, r24	; 55
     632:	ed e7       	ldi	r30, 0x7D	; 125
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	80 81       	ld	r24, Z
     638:	81 60       	ori	r24, 0x01	; 1
     63a:	80 83       	st	Z, r24
     63c:	88 eb       	ldi	r24, 0xB8	; 184
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	11 96       	adiw	r26, 0x01	; 1
     642:	9c 93       	st	X, r25
     644:	8e 93       	st	-X, r24
     646:	80 ed       	ldi	r24, 0xD0	; 208
     648:	91 e0       	ldi	r25, 0x01	; 1
     64a:	13 96       	adiw	r26, 0x03	; 3
     64c:	9c 93       	st	X, r25
     64e:	8e 93       	st	-X, r24
     650:	12 97       	sbiw	r26, 0x02	; 2
     652:	88 ee       	ldi	r24, 0xE8	; 232
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	15 96       	adiw	r26, 0x05	; 5
     658:	9c 93       	st	X, r25
     65a:	8e 93       	st	-X, r24
     65c:	14 97       	sbiw	r26, 0x04	; 4
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	92 e0       	ldi	r25, 0x02	; 2
     662:	17 96       	adiw	r26, 0x07	; 7
     664:	9c 93       	st	X, r25
     666:	8e 93       	st	-X, r24
     668:	16 97       	sbiw	r26, 0x06	; 6
     66a:	83 e0       	ldi	r24, 0x03	; 3
     66c:	92 e0       	ldi	r25, 0x02	; 2
     66e:	19 96       	adiw	r26, 0x09	; 9
     670:	9c 93       	st	X, r25
     672:	8e 93       	st	-X, r24
     674:	18 97       	sbiw	r26, 0x08	; 8
     676:	86 e0       	ldi	r24, 0x06	; 6
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	1b 96       	adiw	r26, 0x0b	; 11
     67c:	9c 93       	st	X, r25
     67e:	8e 93       	st	-X, r24
     680:	1a 97       	sbiw	r26, 0x0a	; 10
     682:	82 e7       	ldi	r24, 0x72	; 114
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	1d 96       	adiw	r26, 0x0d	; 13
     688:	9c 93       	st	X, r25
     68a:	8e 93       	st	-X, r24
     68c:	1c 97       	sbiw	r26, 0x0c	; 12
     68e:	8b e0       	ldi	r24, 0x0B	; 11
     690:	92 e0       	ldi	r25, 0x02	; 2
     692:	1f 96       	adiw	r26, 0x0f	; 15
     694:	9c 93       	st	X, r25
     696:	8e 93       	st	-X, r24
     698:	1e 97       	sbiw	r26, 0x0e	; 14
     69a:	cd 01       	movw	r24, r26
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	08 95       	ret

000006a2 <__vector_16>:
	timer3_state=0;
}
/***Interrupt***/
// So that main will not freeze when not defined, therefore exclude here! before use.
//ISR(TIMER0_COMP_vect){ }
ISR(TIMER0_OVF_vect){ }
     6a2:	1f 92       	push	r1
     6a4:	0f 92       	push	r0
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	0f 92       	push	r0
     6aa:	11 24       	eor	r1, r1
     6ac:	0f 90       	pop	r0
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	0f 90       	pop	r0
     6b2:	1f 90       	pop	r1
     6b4:	18 95       	reti

000006b6 <__vector_11>:
ISR(TIMER1_CAPT_vect){ }
     6b6:	1f 92       	push	r1
     6b8:	0f 92       	push	r0
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	0f 92       	push	r0
     6be:	11 24       	eor	r1, r1
     6c0:	0f 90       	pop	r0
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	0f 90       	pop	r0
     6c6:	1f 90       	pop	r1
     6c8:	18 95       	reti

000006ca <__vector_13>:
//ISR(TIMER1_COMPA_vect){ }
ISR(TIMER1_COMPB_vect){ }
     6ca:	1f 92       	push	r1
     6cc:	0f 92       	push	r0
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	0f 92       	push	r0
     6d2:	11 24       	eor	r1, r1
     6d4:	0f 90       	pop	r0
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	0f 90       	pop	r0
     6da:	1f 90       	pop	r1
     6dc:	18 95       	reti

000006de <__vector_24>:
ISR(TIMER1_COMPC_vect){ }
     6de:	1f 92       	push	r1
     6e0:	0f 92       	push	r0
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	0f 92       	push	r0
     6e6:	11 24       	eor	r1, r1
     6e8:	0f 90       	pop	r0
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	0f 90       	pop	r0
     6ee:	1f 90       	pop	r1
     6f0:	18 95       	reti

000006f2 <__vector_14>:
ISR(TIMER1_OVF_vect){ }
     6f2:	1f 92       	push	r1
     6f4:	0f 92       	push	r0
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	0f 92       	push	r0
     6fa:	11 24       	eor	r1, r1
     6fc:	0f 90       	pop	r0
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	0f 90       	pop	r0
     702:	1f 90       	pop	r1
     704:	18 95       	reti

00000706 <__vector_10>:
ISR(TIMER2_OVF_vect){ }
     706:	1f 92       	push	r1
     708:	0f 92       	push	r0
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	0f 92       	push	r0
     70e:	11 24       	eor	r1, r1
     710:	0f 90       	pop	r0
     712:	0f be       	out	0x3f, r0	; 63
     714:	0f 90       	pop	r0
     716:	1f 90       	pop	r1
     718:	18 95       	reti

0000071a <__vector_25>:
ISR(TIMER3_CAPT_vect){ }
     71a:	1f 92       	push	r1
     71c:	0f 92       	push	r0
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	0f 92       	push	r0
     722:	11 24       	eor	r1, r1
     724:	0f 90       	pop	r0
     726:	0f be       	out	0x3f, r0	; 63
     728:	0f 90       	pop	r0
     72a:	1f 90       	pop	r1
     72c:	18 95       	reti

0000072e <__vector_26>:
ISR(TIMER3_COMPA_vect){ }
     72e:	1f 92       	push	r1
     730:	0f 92       	push	r0
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	0f 92       	push	r0
     736:	11 24       	eor	r1, r1
     738:	0f 90       	pop	r0
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	0f 90       	pop	r0
     73e:	1f 90       	pop	r1
     740:	18 95       	reti

00000742 <__vector_27>:
ISR(TIMER3_COMPB_vect){ }
     742:	1f 92       	push	r1
     744:	0f 92       	push	r0
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	0f 92       	push	r0
     74a:	11 24       	eor	r1, r1
     74c:	0f 90       	pop	r0
     74e:	0f be       	out	0x3f, r0	; 63
     750:	0f 90       	pop	r0
     752:	1f 90       	pop	r1
     754:	18 95       	reti

00000756 <__vector_28>:
ISR(TIMER3_COMPC_vect){ }
     756:	1f 92       	push	r1
     758:	0f 92       	push	r0
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	0f 92       	push	r0
     75e:	11 24       	eor	r1, r1
     760:	0f 90       	pop	r0
     762:	0f be       	out	0x3f, r0	; 63
     764:	0f 90       	pop	r0
     766:	1f 90       	pop	r1
     768:	18 95       	reti

0000076a <__vector_29>:
ISR(TIMER3_OVF_vect){ }
     76a:	1f 92       	push	r1
     76c:	0f 92       	push	r0
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	0f 92       	push	r0
     772:	11 24       	eor	r1, r1
     774:	0f 90       	pop	r0
     776:	0f be       	out	0x3f, r0	; 63
     778:	0f 90       	pop	r0
     77a:	1f 90       	pop	r1
     77c:	18 95       	reti

0000077e <EEPROMenable>:
#include "eeprom.h"
/***Constant & Macro***/
/***Global File Variable***/
/***Header***/
/***Procedure & Function***/
EEPROM EEPROMenable(void){
     77e:	fc 01       	movw	r30, r24
	eprom.write_float=eeprom_write_float;
	eprom.update_float=eeprom_update_float;
	eprom.read_block=eeprom_read_block;
	eprom.write_block=eeprom_write_block;
	eprom.update_block=eeprom_update_block;
	return eprom;
     780:	85 ed       	ldi	r24, 0xD5	; 213
     782:	96 e1       	ldi	r25, 0x16	; 22
     784:	91 83       	std	Z+1, r25	; 0x01
     786:	80 83       	st	Z, r24
     788:	87 e1       	ldi	r24, 0x17	; 23
     78a:	97 e1       	ldi	r25, 0x17	; 23
     78c:	93 83       	std	Z+3, r25	; 0x03
     78e:	82 83       	std	Z+2, r24	; 0x02
     790:	81 ef       	ldi	r24, 0xF1	; 241
     792:	96 e1       	ldi	r25, 0x16	; 22
     794:	95 83       	std	Z+5, r25	; 0x05
     796:	84 83       	std	Z+4, r24	; 0x04
     798:	8d ed       	ldi	r24, 0xDD	; 221
     79a:	96 e1       	ldi	r25, 0x16	; 22
     79c:	97 83       	std	Z+7, r25	; 0x07
     79e:	86 83       	std	Z+6, r24	; 0x06
     7a0:	89 e2       	ldi	r24, 0x29	; 41
     7a2:	97 e1       	ldi	r25, 0x17	; 23
     7a4:	91 87       	std	Z+9, r25	; 0x09
     7a6:	80 87       	std	Z+8, r24	; 0x08
     7a8:	8a e0       	ldi	r24, 0x0A	; 10
     7aa:	97 e1       	ldi	r25, 0x17	; 23
     7ac:	93 87       	std	Z+11, r25	; 0x0b
     7ae:	82 87       	std	Z+10, r24	; 0x0a
     7b0:	84 e2       	ldi	r24, 0x24	; 36
     7b2:	97 e1       	ldi	r25, 0x17	; 23
     7b4:	97 87       	std	Z+15, r25	; 0x0f
     7b6:	86 87       	std	Z+14, r24	; 0x0e
     7b8:	84 e2       	ldi	r24, 0x24	; 36
     7ba:	97 e1       	ldi	r25, 0x17	; 23
     7bc:	95 8b       	std	Z+21, r25	; 0x15
     7be:	84 8b       	std	Z+20, r24	; 0x14
     7c0:	82 e0       	ldi	r24, 0x02	; 2
     7c2:	97 e1       	ldi	r25, 0x17	; 23
     7c4:	97 8b       	std	Z+23, r25	; 0x17
     7c6:	86 8b       	std	Z+22, r24	; 0x16
     7c8:	85 ec       	ldi	r24, 0xC5	; 197
     7ca:	96 e1       	ldi	r25, 0x16	; 22
     7cc:	91 8f       	std	Z+25, r25	; 0x19
     7ce:	80 8f       	std	Z+24, r24	; 0x18
     7d0:	8e e0       	ldi	r24, 0x0E	; 14
     7d2:	97 e1       	ldi	r25, 0x17	; 23
     7d4:	93 8f       	std	Z+27, r25	; 0x1b
     7d6:	82 8f       	std	Z+26, r24	; 0x1a
     7d8:	82 ee       	ldi	r24, 0xE2	; 226
     7da:	96 e1       	ldi	r25, 0x16	; 22
     7dc:	95 8f       	std	Z+29, r25	; 0x1d
     7de:	84 8f       	std	Z+28, r24	; 0x1c
}
     7e0:	cf 01       	movw	r24, r30
     7e2:	08 95       	ret

000007e4 <EXPLODEboot>:
	/******/
	return explode;
}
// boot
void EXPLODEboot(EXPLODE* self, uint8_t x)
{
     7e4:	fc 01       	movw	r30, r24
	self->XI = self->XF;
     7e6:	82 81       	ldd	r24, Z+2	; 0x02
     7e8:	93 81       	ldd	r25, Z+3	; 0x03
     7ea:	91 83       	std	Z+1, r25	; 0x01
     7ec:	80 83       	st	Z, r24
	self->XF = x;
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	73 83       	std	Z+3, r23	; 0x03
     7f2:	62 83       	std	Z+2, r22	; 0x02
     7f4:	08 95       	ret

000007f6 <EXPLODEhh>:
	trans = diff & self->XF;
	return (trans << nbits) | diff;
}
// hh
uint8_t EXPLODEhh(EXPLODE* self)
{
     7f6:	fc 01       	movw	r30, r24
	uint8_t i;
	i = self->XI & self->XF;
	return i;
     7f8:	90 81       	ld	r25, Z
     7fa:	82 81       	ldd	r24, Z+2	; 0x02
}
     7fc:	89 23       	and	r24, r25
     7fe:	08 95       	ret

00000800 <EXPLODEll>:
// ll
uint8_t EXPLODEll(EXPLODE* self)
{
     800:	fc 01       	movw	r30, r24
	uint8_t i;
	i = self->XI | self->XF;
	return ~i;
     802:	90 81       	ld	r25, Z
     804:	82 81       	ldd	r24, Z+2	; 0x02
     806:	89 2b       	or	r24, r25
}
     808:	80 95       	com	r24
     80a:	08 95       	ret

0000080c <EXPLODElh>:
// lh
uint8_t EXPLODElh(EXPLODE* self)
{
     80c:	fc 01       	movw	r30, r24
	uint8_t i;
	i = self->XI ^ self->XF;
     80e:	92 81       	ldd	r25, Z+2	; 0x02
     810:	80 81       	ld	r24, Z
     812:	89 27       	eor	r24, r25
	i &= self->XF;
	return i;
}
     814:	89 23       	and	r24, r25
     816:	08 95       	ret

00000818 <EXPLODEhl>:
// hl
uint8_t EXPLODEhl(EXPLODE* self)
{
     818:	fc 01       	movw	r30, r24
	uint8_t i;
	i = self->XF ^ self->XI;
     81a:	90 81       	ld	r25, Z
     81c:	82 81       	ldd	r24, Z+2	; 0x02
     81e:	89 27       	eor	r24, r25
	i &= self->XI;
	return i;
}
     820:	89 23       	and	r24, r25
     822:	08 95       	ret

00000824 <EXPLODEdiff>:
// diff
uint8_t EXPLODEdiff(EXPLODE* self)
{
     824:	fc 01       	movw	r30, r24
	return self->XF ^ self->XI;
     826:	92 81       	ldd	r25, Z+2	; 0x02
     828:	80 81       	ld	r24, Z
}
     82a:	89 27       	eor	r24, r25
     82c:	08 95       	ret

0000082e <EXPLODEdata>:
uint8_t EXPLODEdata(EXPLODE* self)
{
	return self->XF;	
}
     82e:	fc 01       	movw	r30, r24
     830:	82 81       	ldd	r24, Z+2	; 0x02
     832:	08 95       	ret

00000834 <EXPLODEmayia>:
	self->XI = self->XF;
	self->XF = x;
}
// mayia
uint8_t EXPLODEmayia(EXPLODE* self, uint8_t nbits)
{//magic formula
     834:	dc 01       	movw	r26, r24
// power: raise base to n-th power; n >= 0
uint8_t EXPLODEPwr(uint8_t bs, uint8_t n)
{
	uint8_t i, p;
	p = ONE;
	for (i = ONE; i <= n; ++i)
     836:	66 23       	and	r22, r22
     838:	39 f0       	breq	.+14     	; 0x848 <EXPLODEmayia+0x14>
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	21 e0       	ldi	r18, 0x01	; 1
	p = p * bs;
     83e:	22 0f       	add	r18, r18
// power: raise base to n-th power; n >= 0
uint8_t EXPLODEPwr(uint8_t bs, uint8_t n)
{
	uint8_t i, p;
	p = ONE;
	for (i = ONE; i <= n; ++i)
     840:	9f 5f       	subi	r25, 0xFF	; 255
     842:	69 17       	cp	r22, r25
     844:	e0 f7       	brcc	.-8      	; 0x83e <EXPLODEmayia+0xa>
     846:	01 c0       	rjmp	.+2      	; 0x84a <EXPLODEmayia+0x16>
/*******************************************************************/
// power: raise base to n-th power; n >= 0
uint8_t EXPLODEPwr(uint8_t bs, uint8_t n)
{
	uint8_t i, p;
	p = ONE;
     848:	21 e0       	ldi	r18, 0x01	; 1
uint8_t EXPLODEmayia(EXPLODE* self, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask = EXPLODEPwr(2,nbits)-ONE;
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	21 50       	subi	r18, 0x01	; 1
     84e:	31 09       	sbc	r19, r1
	self->XI &= mask;
     850:	ed 91       	ld	r30, X+
     852:	fc 91       	ld	r31, X
     854:	11 97       	sbiw	r26, 0x01	; 1
     856:	e2 23       	and	r30, r18
     858:	f3 23       	and	r31, r19
     85a:	11 96       	adiw	r26, 0x01	; 1
     85c:	fc 93       	st	X, r31
     85e:	ee 93       	st	-X, r30
	self->XF &= mask;
     860:	12 96       	adiw	r26, 0x02	; 2
     862:	4d 91       	ld	r20, X+
     864:	5c 91       	ld	r21, X
     866:	13 97       	sbiw	r26, 0x03	; 3
     868:	24 23       	and	r18, r20
     86a:	35 23       	and	r19, r21
     86c:	13 96       	adiw	r26, 0x03	; 3
     86e:	3c 93       	st	X, r19
     870:	2e 93       	st	-X, r18
     872:	12 97       	sbiw	r26, 0x02	; 2
	diff = self->XF ^ self->XI;
     874:	cf 01       	movw	r24, r30
     876:	82 27       	eor	r24, r18
     878:	93 27       	eor	r25, r19
	trans = diff & self->XF;
	return (trans << nbits) | diff;
     87a:	28 23       	and	r18, r24
     87c:	39 23       	and	r19, r25
     87e:	02 c0       	rjmp	.+4      	; 0x884 <EXPLODEmayia+0x50>
     880:	22 0f       	add	r18, r18
     882:	33 1f       	adc	r19, r19
     884:	6a 95       	dec	r22
     886:	e2 f7       	brpl	.-8      	; 0x880 <EXPLODEmayia+0x4c>
}
     888:	82 2b       	or	r24, r18
     88a:	08 95       	ret

0000088c <EXPLODEenable>:
uint8_t EXPLODEhl(EXPLODE* self);
uint8_t EXPLODEdiff(EXPLODE* self);
uint8_t EXPLODEdata(EXPLODE* self);
/***Procedure & Function***/
EXPLODE EXPLODEenable( void )
{
     88c:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG = STATUS_REGISTER;
     88e:	9f b7       	in	r25, 0x3f	; 63
	STATUS_REGISTER &= ~(ONE<<GLOBAL_INTERRUPT_ENABLE);
     890:	8f b7       	in	r24, 0x3f	; 63
     892:	8f 77       	andi	r24, 0x7F	; 127
     894:	8f bf       	out	0x3f, r24	; 63
	explode.ll = EXPLODEll;
	explode.lh = EXPLODElh;
	explode.hl = EXPLODEhl;
	explode.diff = EXPLODEdiff;
	explode.data = EXPLODEdata;
	STATUS_REGISTER = tSREG;
     896:	9f bf       	out	0x3f, r25	; 63
	/******/
	return explode;
     898:	11 82       	std	Z+1, r1	; 0x01
     89a:	10 82       	st	Z, r1
     89c:	13 82       	std	Z+3, r1	; 0x03
     89e:	12 82       	std	Z+2, r1	; 0x02
     8a0:	82 ef       	ldi	r24, 0xF2	; 242
     8a2:	93 e0       	ldi	r25, 0x03	; 3
     8a4:	95 83       	std	Z+5, r25	; 0x05
     8a6:	84 83       	std	Z+4, r24	; 0x04
     8a8:	8a e1       	ldi	r24, 0x1A	; 26
     8aa:	94 e0       	ldi	r25, 0x04	; 4
     8ac:	97 83       	std	Z+7, r25	; 0x07
     8ae:	86 83       	std	Z+6, r24	; 0x06
     8b0:	8b ef       	ldi	r24, 0xFB	; 251
     8b2:	93 e0       	ldi	r25, 0x03	; 3
     8b4:	91 87       	std	Z+9, r25	; 0x09
     8b6:	80 87       	std	Z+8, r24	; 0x08
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	94 e0       	ldi	r25, 0x04	; 4
     8bc:	93 87       	std	Z+11, r25	; 0x0b
     8be:	82 87       	std	Z+10, r24	; 0x0a
     8c0:	86 e0       	ldi	r24, 0x06	; 6
     8c2:	94 e0       	ldi	r25, 0x04	; 4
     8c4:	95 87       	std	Z+13, r25	; 0x0d
     8c6:	84 87       	std	Z+12, r24	; 0x0c
     8c8:	8c e0       	ldi	r24, 0x0C	; 12
     8ca:	94 e0       	ldi	r25, 0x04	; 4
     8cc:	97 87       	std	Z+15, r25	; 0x0f
     8ce:	86 87       	std	Z+14, r24	; 0x0e
     8d0:	82 e1       	ldi	r24, 0x12	; 18
     8d2:	94 e0       	ldi	r25, 0x04	; 4
     8d4:	91 8b       	std	Z+17, r25	; 0x11
     8d6:	80 8b       	std	Z+16, r24	; 0x10
     8d8:	87 e1       	ldi	r24, 0x17	; 23
     8da:	94 e0       	ldi	r25, 0x04	; 4
     8dc:	93 8b       	std	Z+19, r25	; 0x13
     8de:	82 8b       	std	Z+18, r24	; 0x12
}
     8e0:	cf 01       	movw	r24, r30
     8e2:	08 95       	ret

000008e4 <FUNCpinmatch>:
	return i;
}
uint8_t  bintobcd(uint8_t bin)
{
	return (((bin) / 10) << 4) + ((bin) % 10);
}
     8e4:	68 23       	and	r22, r24
     8e6:	44 23       	and	r20, r20
     8e8:	21 f0       	breq	.+8      	; 0x8f2 <FUNCpinmatch+0xe>
     8ea:	86 17       	cp	r24, r22
     8ec:	21 f0       	breq	.+8      	; 0x8f6 <FUNCpinmatch+0x12>
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	08 95       	ret
     8f2:	61 11       	cpse	r22, r1
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	08 95       	ret

000008f8 <FUNChmerge>:
     8f8:	86 2b       	or	r24, r22
     8fa:	08 95       	ret

000008fc <FUNClmerge>:
     8fc:	86 23       	and	r24, r22
     8fe:	08 95       	ret

00000900 <FUNChh>:
     900:	86 23       	and	r24, r22
     902:	08 95       	ret

00000904 <FUNCll>:
     904:	86 2b       	or	r24, r22
     906:	80 95       	com	r24
     908:	08 95       	ret

0000090a <FUNClh>:
     90a:	86 27       	eor	r24, r22
     90c:	86 23       	and	r24, r22
     90e:	08 95       	ret

00000910 <FUNChl>:
     910:	60 95       	com	r22
     912:	86 23       	and	r24, r22
     914:	08 95       	ret

00000916 <FUNCdiff>:
     916:	86 27       	eor	r24, r22
     918:	08 95       	ret

0000091a <FUNCswap>:
     91a:	cf 92       	push	r12
     91c:	df 92       	push	r13
     91e:	ef 92       	push	r14
     920:	ff 92       	push	r15
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	fc 01       	movw	r30, r24
     928:	00 81       	ld	r16, Z
     92a:	11 81       	ldd	r17, Z+1	; 0x01
     92c:	22 81       	ldd	r18, Z+2	; 0x02
     92e:	33 81       	ldd	r19, Z+3	; 0x03
     930:	fb 01       	movw	r30, r22
     932:	c0 80       	ld	r12, Z
     934:	d1 80       	ldd	r13, Z+1	; 0x01
     936:	e2 80       	ldd	r14, Z+2	; 0x02
     938:	f3 80       	ldd	r15, Z+3	; 0x03
     93a:	fc 01       	movw	r30, r24
     93c:	c0 82       	st	Z, r12
     93e:	d1 82       	std	Z+1, r13	; 0x01
     940:	e2 82       	std	Z+2, r14	; 0x02
     942:	f3 82       	std	Z+3, r15	; 0x03
     944:	fb 01       	movw	r30, r22
     946:	00 83       	st	Z, r16
     948:	11 83       	std	Z+1, r17	; 0x01
     94a:	22 83       	std	Z+2, r18	; 0x02
     94c:	33 83       	std	Z+3, r19	; 0x03
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	df 90       	pop	r13
     958:	cf 90       	pop	r12
     95a:	08 95       	ret

0000095c <FUNCcopy>:
     95c:	fb 01       	movw	r30, r22
     95e:	20 81       	ld	r18, Z
     960:	fc 01       	movw	r30, r24
     962:	20 83       	st	Z, r18
     964:	22 23       	and	r18, r18
     966:	39 f0       	breq	.+14     	; 0x976 <FUNCcopy+0x1a>
     968:	db 01       	movw	r26, r22
     96a:	11 96       	adiw	r26, 0x01	; 1
     96c:	31 96       	adiw	r30, 0x01	; 1
     96e:	9d 91       	ld	r25, X+
     970:	91 93       	st	Z+, r25
     972:	91 11       	cpse	r25, r1
     974:	fc cf       	rjmp	.-8      	; 0x96e <FUNCcopy+0x12>
     976:	08 95       	ret

00000978 <FUNCsqueeze>:
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	ec 01       	movw	r28, r24
     97e:	98 81       	ld	r25, Y
     980:	99 23       	and	r25, r25
     982:	99 f0       	breq	.+38     	; 0x9aa <FUNCsqueeze+0x32>
     984:	fe 01       	movw	r30, r28
     986:	31 96       	adiw	r30, 0x01	; 1
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	49 2f       	mov	r20, r25
     98e:	50 e0       	ldi	r21, 0x00	; 0
     990:	46 17       	cp	r20, r22
     992:	57 07       	cpc	r21, r23
     994:	31 f0       	breq	.+12     	; 0x9a2 <FUNCsqueeze+0x2a>
     996:	de 01       	movw	r26, r28
     998:	a2 0f       	add	r26, r18
     99a:	b3 1f       	adc	r27, r19
     99c:	9c 93       	st	X, r25
     99e:	2f 5f       	subi	r18, 0xFF	; 255
     9a0:	3f 4f       	sbci	r19, 0xFF	; 255
     9a2:	91 91       	ld	r25, Z+
     9a4:	91 11       	cpse	r25, r1
     9a6:	f2 cf       	rjmp	.-28     	; 0x98c <FUNCsqueeze+0x14>
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <FUNCsqueeze+0x36>
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	fe 01       	movw	r30, r28
     9b0:	e2 0f       	add	r30, r18
     9b2:	f3 1f       	adc	r31, r19
     9b4:	10 82       	st	Z, r1
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	08 95       	ret

000009bc <FUNCshellsort>:
     9bc:	2f 92       	push	r2
     9be:	3f 92       	push	r3
     9c0:	4f 92       	push	r4
     9c2:	5f 92       	push	r5
     9c4:	6f 92       	push	r6
     9c6:	7f 92       	push	r7
     9c8:	8f 92       	push	r8
     9ca:	9f 92       	push	r9
     9cc:	af 92       	push	r10
     9ce:	bf 92       	push	r11
     9d0:	cf 92       	push	r12
     9d2:	df 92       	push	r13
     9d4:	ef 92       	push	r14
     9d6:	ff 92       	push	r15
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	00 d0       	rcall	.+0      	; 0x9e2 <FUNCshellsort+0x26>
     9e2:	00 d0       	rcall	.+0      	; 0x9e4 <FUNCshellsort+0x28>
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
     9e8:	2c 01       	movw	r4, r24
     9ea:	1b 01       	movw	r2, r22
     9ec:	4b 01       	movw	r8, r22
     9ee:	77 23       	and	r23, r23
     9f0:	1c f4       	brge	.+6      	; 0x9f8 <FUNCshellsort+0x3c>
     9f2:	2f ef       	ldi	r18, 0xFF	; 255
     9f4:	82 1a       	sub	r8, r18
     9f6:	92 0a       	sbc	r9, r18
     9f8:	95 94       	asr	r9
     9fa:	87 94       	ror	r8
     9fc:	18 14       	cp	r1, r8
     9fe:	19 04       	cpc	r1, r9
     a00:	0c f4       	brge	.+2      	; 0xa04 <FUNCshellsort+0x48>
     a02:	51 c0       	rjmp	.+162    	; 0xaa6 <FUNCshellsort+0xea>
     a04:	6a c0       	rjmp	.+212    	; 0xada <FUNCshellsort+0x11e>
     a06:	96 01       	movw	r18, r12
     a08:	dd 20       	and	r13, r13
     a0a:	9c f1       	brlt	.+102    	; 0xa72 <FUNCshellsort+0xb6>
     a0c:	f5 01       	movw	r30, r10
     a0e:	40 81       	ld	r20, Z
     a10:	51 81       	ldd	r21, Z+1	; 0x01
     a12:	f4 01       	movw	r30, r8
     a14:	60 81       	ld	r22, Z
     a16:	71 81       	ldd	r23, Z+1	; 0x01
     a18:	64 17       	cp	r22, r20
     a1a:	75 07       	cpc	r23, r21
     a1c:	54 f5       	brge	.+84     	; 0xa72 <FUNCshellsort+0xb6>
     a1e:	8c 01       	movw	r16, r24
     a20:	0a 0d       	add	r16, r10
     a22:	1b 1d       	adc	r17, r11
     a24:	d4 01       	movw	r26, r8
     a26:	bc 82       	std	Y+4, r11	; 0x04
     a28:	ab 82       	std	Y+3, r10	; 0x03
     a2a:	ba 82       	std	Y+2, r11	; 0x02
     a2c:	a9 82       	std	Y+1, r10	; 0x01
     a2e:	eb 81       	ldd	r30, Y+3	; 0x03
     a30:	fc 81       	ldd	r31, Y+4	; 0x04
     a32:	71 83       	std	Z+1, r23	; 0x01
     a34:	60 83       	st	Z, r22
     a36:	11 96       	adiw	r26, 0x01	; 1
     a38:	5c 93       	st	X, r21
     a3a:	4e 93       	st	-X, r20
     a3c:	2e 19       	sub	r18, r14
     a3e:	3f 09       	sbc	r19, r15
     a40:	c2 f0       	brmi	.+48     	; 0xa72 <FUNCshellsort+0xb6>
     a42:	f8 01       	movw	r30, r16
     a44:	40 81       	ld	r20, Z
     a46:	51 81       	ldd	r21, Z+1	; 0x01
     a48:	e9 81       	ldd	r30, Y+1	; 0x01
     a4a:	fa 81       	ldd	r31, Y+2	; 0x02
     a4c:	60 81       	ld	r22, Z
     a4e:	71 81       	ldd	r23, Z+1	; 0x01
     a50:	08 0f       	add	r16, r24
     a52:	19 1f       	adc	r17, r25
     a54:	e8 0f       	add	r30, r24
     a56:	f9 1f       	adc	r31, r25
     a58:	fa 83       	std	Y+2, r31	; 0x02
     a5a:	e9 83       	std	Y+1, r30	; 0x01
     a5c:	eb 81       	ldd	r30, Y+3	; 0x03
     a5e:	fc 81       	ldd	r31, Y+4	; 0x04
     a60:	e8 0f       	add	r30, r24
     a62:	f9 1f       	adc	r31, r25
     a64:	fc 83       	std	Y+4, r31	; 0x04
     a66:	eb 83       	std	Y+3, r30	; 0x03
     a68:	a8 0f       	add	r26, r24
     a6a:	b9 1f       	adc	r27, r25
     a6c:	64 17       	cp	r22, r20
     a6e:	75 07       	cpc	r23, r21
     a70:	f4 f2       	brlt	.-68     	; 0xa2e <FUNCshellsort+0x72>
     a72:	ff ef       	ldi	r31, 0xFF	; 255
     a74:	cf 1a       	sub	r12, r31
     a76:	df 0a       	sbc	r13, r31
     a78:	22 e0       	ldi	r18, 0x02	; 2
     a7a:	a2 0e       	add	r10, r18
     a7c:	b1 1c       	adc	r11, r1
     a7e:	e2 e0       	ldi	r30, 0x02	; 2
     a80:	8e 0e       	add	r8, r30
     a82:	91 1c       	adc	r9, r1
     a84:	c6 14       	cp	r12, r6
     a86:	d7 04       	cpc	r13, r7
     a88:	09 f0       	breq	.+2      	; 0xa8c <FUNCshellsort+0xd0>
     a8a:	bd cf       	rjmp	.-134    	; 0xa06 <FUNCshellsort+0x4a>
     a8c:	47 01       	movw	r8, r14
     a8e:	ff 20       	and	r15, r15
     a90:	1c f4       	brge	.+6      	; 0xa98 <FUNCshellsort+0xdc>
     a92:	ff ef       	ldi	r31, 0xFF	; 255
     a94:	8f 1a       	sub	r8, r31
     a96:	9f 0a       	sbc	r9, r31
     a98:	95 94       	asr	r9
     a9a:	87 94       	ror	r8
     a9c:	18 14       	cp	r1, r8
     a9e:	19 04       	cpc	r1, r9
     aa0:	e4 f4       	brge	.+56     	; 0xada <FUNCshellsort+0x11e>
     aa2:	74 01       	movw	r14, r8
     aa4:	01 c0       	rjmp	.+2      	; 0xaa8 <FUNCshellsort+0xec>
     aa6:	74 01       	movw	r14, r8
     aa8:	82 14       	cp	r8, r2
     aaa:	93 04       	cpc	r9, r3
     aac:	7c f7       	brge	.-34     	; 0xa8c <FUNCshellsort+0xd0>
     aae:	64 01       	movw	r12, r8
     ab0:	ce 18       	sub	r12, r14
     ab2:	df 08       	sbc	r13, r15
     ab4:	56 01       	movw	r10, r12
     ab6:	aa 0c       	add	r10, r10
     ab8:	bb 1c       	adc	r11, r11
     aba:	a4 0c       	add	r10, r4
     abc:	b5 1c       	adc	r11, r5
     abe:	88 0c       	add	r8, r8
     ac0:	99 1c       	adc	r9, r9
     ac2:	84 0c       	add	r8, r4
     ac4:	95 1c       	adc	r9, r5
     ac6:	31 01       	movw	r6, r2
     ac8:	6e 18       	sub	r6, r14
     aca:	7f 08       	sbc	r7, r15
     acc:	c7 01       	movw	r24, r14
     ace:	88 0f       	add	r24, r24
     ad0:	99 1f       	adc	r25, r25
     ad2:	91 95       	neg	r25
     ad4:	81 95       	neg	r24
     ad6:	91 09       	sbc	r25, r1
     ad8:	96 cf       	rjmp	.-212    	; 0xa06 <FUNCshellsort+0x4a>
     ada:	0f 90       	pop	r0
     adc:	0f 90       	pop	r0
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	bf 90       	pop	r11
     af4:	af 90       	pop	r10
     af6:	9f 90       	pop	r9
     af8:	8f 90       	pop	r8
     afa:	7f 90       	pop	r7
     afc:	6f 90       	pop	r6
     afe:	5f 90       	pop	r5
     b00:	4f 90       	pop	r4
     b02:	3f 90       	pop	r3
     b04:	2f 90       	pop	r2
     b06:	08 95       	ret

00000b08 <FUNCpmax>:
     b08:	86 17       	cp	r24, r22
     b0a:	97 07       	cpc	r25, r23
     b0c:	0c f4       	brge	.+2      	; 0xb10 <FUNCpmax+0x8>
     b0e:	cb 01       	movw	r24, r22
     b10:	08 95       	ret

00000b12 <FUNCgcd>:
     b12:	9b 01       	movw	r18, r22
     b14:	67 2b       	or	r22, r23
     b16:	11 f4       	brne	.+4      	; 0xb1c <FUNCgcd+0xa>
     b18:	08 95       	ret
     b1a:	9a 01       	movw	r18, r20
     b1c:	b9 01       	movw	r22, r18
     b1e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__divmodhi4>
     b22:	ac 01       	movw	r20, r24
     b24:	82 2f       	mov	r24, r18
     b26:	93 2f       	mov	r25, r19
     b28:	41 15       	cp	r20, r1
     b2a:	51 05       	cpc	r21, r1
     b2c:	b1 f7       	brne	.-20     	; 0xb1a <FUNCgcd+0x8>
     b2e:	08 95       	ret

00000b30 <FUNCstrToInt>:
     b30:	fc 01       	movw	r30, r24
     b32:	90 81       	ld	r25, Z
     b34:	80 ed       	ldi	r24, 0xD0	; 208
     b36:	89 0f       	add	r24, r25
     b38:	8a 30       	cpi	r24, 0x0A	; 10
     b3a:	d0 f4       	brcc	.+52     	; 0xb70 <FUNCstrToInt+0x40>
     b3c:	31 96       	adiw	r30, 0x01	; 1
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	a9 01       	movw	r20, r18
     b44:	44 0f       	add	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	22 0f       	add	r18, r18
     b4a:	33 1f       	adc	r19, r19
     b4c:	22 0f       	add	r18, r18
     b4e:	33 1f       	adc	r19, r19
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	42 0f       	add	r20, r18
     b56:	53 1f       	adc	r21, r19
     b58:	29 2f       	mov	r18, r25
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	20 53       	subi	r18, 0x30	; 48
     b5e:	31 09       	sbc	r19, r1
     b60:	24 0f       	add	r18, r20
     b62:	35 1f       	adc	r19, r21
     b64:	91 91       	ld	r25, Z+
     b66:	80 ed       	ldi	r24, 0xD0	; 208
     b68:	89 0f       	add	r24, r25
     b6a:	8a 30       	cpi	r24, 0x0A	; 10
     b6c:	50 f3       	brcs	.-44     	; 0xb42 <FUNCstrToInt+0x12>
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <FUNCstrToInt+0x44>
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	c9 01       	movw	r24, r18
     b76:	08 95       	ret

00000b78 <FUNCfilter>:
     b78:	86 23       	and	r24, r22
     b7a:	08 95       	ret

00000b7c <FUNCticks>:
     b7c:	00 97       	sbiw	r24, 0x00	; 0
     b7e:	39 f0       	breq	.+14     	; 0xb8e <FUNCticks+0x12>
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	2f 5f       	subi	r18, 0xFF	; 255
     b86:	3f 4f       	sbci	r19, 0xFF	; 255
     b88:	82 17       	cp	r24, r18
     b8a:	93 07       	cpc	r25, r19
     b8c:	d9 f7       	brne	.-10     	; 0xb84 <FUNCticks+0x8>
     b8e:	08 95       	ret

00000b90 <FUNCtwocomptoint8bit>:
     b90:	87 ff       	sbrs	r24, 7
     b92:	08 c0       	rjmp	.+16     	; 0xba4 <FUNCtwocomptoint8bit+0x14>
     b94:	91 95       	neg	r25
     b96:	81 95       	neg	r24
     b98:	91 09       	sbc	r25, r1
     b9a:	99 27       	eor	r25, r25
     b9c:	91 95       	neg	r25
     b9e:	81 95       	neg	r24
     ba0:	91 09       	sbc	r25, r1
     ba2:	08 95       	ret
     ba4:	8f 77       	andi	r24, 0x7F	; 127
     ba6:	99 27       	eor	r25, r25
     ba8:	08 95       	ret

00000baa <FUNCtwocomptoint10bit>:
     baa:	91 ff       	sbrs	r25, 1
     bac:	08 c0       	rjmp	.+16     	; 0xbbe <FUNCtwocomptoint10bit+0x14>
     bae:	91 95       	neg	r25
     bb0:	81 95       	neg	r24
     bb2:	91 09       	sbc	r25, r1
     bb4:	93 70       	andi	r25, 0x03	; 3
     bb6:	91 95       	neg	r25
     bb8:	81 95       	neg	r24
     bba:	91 09       	sbc	r25, r1
     bbc:	08 95       	ret
     bbe:	91 70       	andi	r25, 0x01	; 1
     bc0:	08 95       	ret

00000bc2 <FUNCtwocomptointnbit>:
     bc2:	61 50       	subi	r22, 0x01	; 1
     bc4:	21 e0       	ldi	r18, 0x01	; 1
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <FUNCtwocomptointnbit+0xc>
     bca:	22 0f       	add	r18, r18
     bcc:	33 1f       	adc	r19, r19
     bce:	6a 95       	dec	r22
     bd0:	e2 f7       	brpl	.-8      	; 0xbca <FUNCtwocomptointnbit+0x8>
     bd2:	a9 01       	movw	r20, r18
     bd4:	41 50       	subi	r20, 0x01	; 1
     bd6:	51 09       	sbc	r21, r1
     bd8:	b9 01       	movw	r22, r18
     bda:	68 23       	and	r22, r24
     bdc:	79 23       	and	r23, r25
     bde:	67 2b       	or	r22, r23
     be0:	29 f0       	breq	.+10     	; 0xbec <FUNCtwocomptointnbit+0x2a>
     be2:	84 23       	and	r24, r20
     be4:	95 23       	and	r25, r21
     be6:	82 1b       	sub	r24, r18
     be8:	93 0b       	sbc	r25, r19
     bea:	08 95       	ret
     bec:	84 23       	and	r24, r20
     bee:	95 23       	and	r25, r21
     bf0:	08 95       	ret

00000bf2 <FUNCdec2bcd>:
     bf2:	9d ec       	ldi	r25, 0xCD	; 205
     bf4:	89 9f       	mul	r24, r25
     bf6:	91 2d       	mov	r25, r1
     bf8:	11 24       	eor	r1, r1
     bfa:	96 95       	lsr	r25
     bfc:	96 95       	lsr	r25
     bfe:	96 95       	lsr	r25
     c00:	39 2f       	mov	r19, r25
     c02:	33 0f       	add	r19, r19
     c04:	23 2f       	mov	r18, r19
     c06:	22 0f       	add	r18, r18
     c08:	22 0f       	add	r18, r18
     c0a:	23 0f       	add	r18, r19
     c0c:	82 1b       	sub	r24, r18
     c0e:	20 e1       	ldi	r18, 0x10	; 16
     c10:	92 9f       	mul	r25, r18
     c12:	80 0d       	add	r24, r0
     c14:	11 24       	eor	r1, r1
     c16:	08 95       	ret

00000c18 <FUNCbcd2dec>:
     c18:	98 2f       	mov	r25, r24
     c1a:	92 95       	swap	r25
     c1c:	9f 70       	andi	r25, 0x0F	; 15
     c1e:	99 0f       	add	r25, r25
     c20:	29 2f       	mov	r18, r25
     c22:	22 0f       	add	r18, r18
     c24:	22 0f       	add	r18, r18
     c26:	92 0f       	add	r25, r18
     c28:	8f 70       	andi	r24, 0x0F	; 15
     c2a:	89 0f       	add	r24, r25
     c2c:	08 95       	ret

00000c2e <FUNCresizestr>:
     c2e:	fc 01       	movw	r30, r24
     c30:	db 01       	movw	r26, r22
     c32:	a3 5c       	subi	r26, 0xC3	; 195
     c34:	be 4f       	sbci	r27, 0xFE	; 254
     c36:	1c 92       	st	X, r1
     c38:	16 16       	cp	r1, r22
     c3a:	17 06       	cpc	r1, r23
     c3c:	14 f5       	brge	.+68     	; 0xc82 <FUNCresizestr+0x54>
     c3e:	90 81       	ld	r25, Z
     c40:	91 11       	cpse	r25, r1
     c42:	0c c0       	rjmp	.+24     	; 0xc5c <FUNCresizestr+0x2e>
     c44:	17 c0       	rjmp	.+46     	; 0xc74 <FUNCresizestr+0x46>
     c46:	91 91       	ld	r25, Z+
     c48:	91 11       	cpse	r25, r1
     c4a:	0d c0       	rjmp	.+26     	; 0xc66 <FUNCresizestr+0x38>
     c4c:	15 c0       	rjmp	.+42     	; 0xc78 <FUNCresizestr+0x4a>
     c4e:	81 93       	st	Z+, r24
     c50:	2f 5f       	subi	r18, 0xFF	; 255
     c52:	3f 4f       	sbci	r19, 0xFF	; 255
     c54:	26 17       	cp	r18, r22
     c56:	37 07       	cpc	r19, r23
     c58:	d4 f3       	brlt	.-12     	; 0xc4e <FUNCresizestr+0x20>
     c5a:	13 c0       	rjmp	.+38     	; 0xc82 <FUNCresizestr+0x54>
     c5c:	ad e3       	ldi	r26, 0x3D	; 61
     c5e:	b1 e0       	ldi	r27, 0x01	; 1
     c60:	31 96       	adiw	r30, 0x01	; 1
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	9d 93       	st	X+, r25
     c68:	2f 5f       	subi	r18, 0xFF	; 255
     c6a:	3f 4f       	sbci	r19, 0xFF	; 255
     c6c:	62 17       	cp	r22, r18
     c6e:	73 07       	cpc	r23, r19
     c70:	51 f7       	brne	.-44     	; 0xc46 <FUNCresizestr+0x18>
     c72:	07 c0       	rjmp	.+14     	; 0xc82 <FUNCresizestr+0x54>
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	f9 01       	movw	r30, r18
     c7a:	e3 5c       	subi	r30, 0xC3	; 195
     c7c:	fe 4f       	sbci	r31, 0xFE	; 254
     c7e:	80 e2       	ldi	r24, 0x20	; 32
     c80:	e6 cf       	rjmp	.-52     	; 0xc4e <FUNCresizestr+0x20>
     c82:	8d e3       	ldi	r24, 0x3D	; 61
     c84:	91 e0       	ldi	r25, 0x01	; 1
     c86:	08 95       	ret

00000c88 <FUNCtrimmer>:
     c88:	4f 92       	push	r4
     c8a:	5f 92       	push	r5
     c8c:	6f 92       	push	r6
     c8e:	7f 92       	push	r7
     c90:	af 92       	push	r10
     c92:	bf 92       	push	r11
     c94:	cf 92       	push	r12
     c96:	df 92       	push	r13
     c98:	ef 92       	push	r14
     c9a:	ff 92       	push	r15
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	29 01       	movw	r4, r18
     caa:	3a 01       	movw	r6, r20
     cac:	9b 01       	movw	r18, r22
     cae:	ac 01       	movw	r20, r24
     cb0:	24 19       	sub	r18, r4
     cb2:	35 09       	sbc	r19, r5
     cb4:	46 09       	sbc	r20, r6
     cb6:	57 09       	sbc	r21, r7
     cb8:	89 89       	ldd	r24, Y+17	; 0x11
     cba:	9a 89       	ldd	r25, Y+18	; 0x12
     cbc:	ab 89       	ldd	r26, Y+19	; 0x13
     cbe:	bc 89       	ldd	r27, Y+20	; 0x14
     cc0:	bc 01       	movw	r22, r24
     cc2:	cd 01       	movw	r24, r26
     cc4:	6a 19       	sub	r22, r10
     cc6:	7b 09       	sbc	r23, r11
     cc8:	8c 09       	sbc	r24, r12
     cca:	9d 09       	sbc	r25, r13
     ccc:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <__mulsi3>
     cd0:	a8 01       	movw	r20, r16
     cd2:	97 01       	movw	r18, r14
     cd4:	24 19       	sub	r18, r4
     cd6:	35 09       	sbc	r19, r5
     cd8:	46 09       	sbc	r20, r6
     cda:	57 09       	sbc	r21, r7
     cdc:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__divmodsi4>
     ce0:	ca 01       	movw	r24, r20
     ce2:	b9 01       	movw	r22, r18
     ce4:	6a 0d       	add	r22, r10
     ce6:	7b 1d       	adc	r23, r11
     ce8:	8c 1d       	adc	r24, r12
     cea:	9d 1d       	adc	r25, r13
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	1f 91       	pop	r17
     cf2:	0f 91       	pop	r16
     cf4:	ff 90       	pop	r15
     cf6:	ef 90       	pop	r14
     cf8:	df 90       	pop	r13
     cfa:	cf 90       	pop	r12
     cfc:	bf 90       	pop	r11
     cfe:	af 90       	pop	r10
     d00:	7f 90       	pop	r7
     d02:	6f 90       	pop	r6
     d04:	5f 90       	pop	r5
     d06:	4f 90       	pop	r4
     d08:	08 95       	ret

00000d0a <Pwr>:
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	61 15       	cp	r22, r1
     d0e:	71 05       	cpc	r23, r1
     d10:	99 f0       	breq	.+38     	; 0xd38 <Pwr+0x2e>
     d12:	41 e0       	ldi	r20, 0x01	; 1
     d14:	50 e0       	ldi	r21, 0x00	; 0
     d16:	21 e0       	ldi	r18, 0x01	; 1
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	fa 01       	movw	r30, r20
     d1e:	e8 9f       	mul	r30, r24
     d20:	a0 01       	movw	r20, r0
     d22:	e9 9f       	mul	r30, r25
     d24:	50 0d       	add	r21, r0
     d26:	f8 9f       	mul	r31, r24
     d28:	50 0d       	add	r21, r0
     d2a:	11 24       	eor	r1, r1
     d2c:	2f 5f       	subi	r18, 0xFF	; 255
     d2e:	3f 4f       	sbci	r19, 0xFF	; 255
     d30:	62 17       	cp	r22, r18
     d32:	73 07       	cpc	r23, r19
     d34:	98 f7       	brcc	.-26     	; 0xd1c <Pwr+0x12>
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <Pwr+0x32>
     d38:	41 e0       	ldi	r20, 0x01	; 1
     d3a:	50 e0       	ldi	r21, 0x00	; 0
     d3c:	ca 01       	movw	r24, r20
     d3e:	08 95       	ret

00000d40 <StringLength>:
     d40:	fc 01       	movw	r30, r24
     d42:	20 81       	ld	r18, Z
     d44:	22 23       	and	r18, r18
     d46:	41 f0       	breq	.+16     	; 0xd58 <StringLength+0x18>
     d48:	31 96       	adiw	r30, 0x01	; 1
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	01 96       	adiw	r24, 0x01	; 1
     d50:	21 91       	ld	r18, Z+
     d52:	21 11       	cpse	r18, r1
     d54:	fc cf       	rjmp	.-8      	; 0xd4e <StringLength+0xe>
     d56:	08 95       	ret
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	08 95       	ret

00000d5e <FUNCtrim>:
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	ec 01       	movw	r28, r24
     d64:	ed df       	rcall	.-38     	; 0xd40 <StringLength>
     d66:	9c 01       	movw	r18, r24
     d68:	21 50       	subi	r18, 0x01	; 1
     d6a:	31 09       	sbc	r19, r1
     d6c:	62 f0       	brmi	.+24     	; 0xd86 <FUNCtrim+0x28>
     d6e:	fe 01       	movw	r30, r28
     d70:	e8 0f       	add	r30, r24
     d72:	f9 1f       	adc	r31, r25
     d74:	92 91       	ld	r25, -Z
     d76:	90 32       	cpi	r25, 0x20	; 32
     d78:	19 f0       	breq	.+6      	; 0xd80 <FUNCtrim+0x22>
     d7a:	99 50       	subi	r25, 0x09	; 9
     d7c:	92 30       	cpi	r25, 0x02	; 2
     d7e:	18 f4       	brcc	.+6      	; 0xd86 <FUNCtrim+0x28>
     d80:	21 50       	subi	r18, 0x01	; 1
     d82:	31 09       	sbc	r19, r1
     d84:	b8 f7       	brcc	.-18     	; 0xd74 <FUNCtrim+0x16>
     d86:	c2 0f       	add	r28, r18
     d88:	d3 1f       	adc	r29, r19
     d8a:	19 82       	std	Y+1, r1	; 0x01
     d8c:	c9 01       	movw	r24, r18
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	08 95       	ret

00000d94 <Reverse>:
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	ec 01       	movw	r28, r24
     d9a:	d2 df       	rcall	.-92     	; 0xd40 <StringLength>
     d9c:	9c 01       	movw	r18, r24
     d9e:	21 50       	subi	r18, 0x01	; 1
     da0:	31 09       	sbc	r19, r1
     da2:	12 16       	cp	r1, r18
     da4:	13 06       	cpc	r1, r19
     da6:	84 f4       	brge	.+32     	; 0xdc8 <Reverse+0x34>
     da8:	de 01       	movw	r26, r28
     daa:	a8 0f       	add	r26, r24
     dac:	b9 1f       	adc	r27, r25
     dae:	fe 01       	movw	r30, r28
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	40 81       	ld	r20, Z
     db6:	5e 91       	ld	r21, -X
     db8:	51 93       	st	Z+, r21
     dba:	4c 93       	st	X, r20
     dbc:	01 96       	adiw	r24, 0x01	; 1
     dbe:	21 50       	subi	r18, 0x01	; 1
     dc0:	31 09       	sbc	r19, r1
     dc2:	82 17       	cp	r24, r18
     dc4:	93 07       	cpc	r25, r19
     dc6:	b4 f3       	brlt	.-20     	; 0xdb4 <Reverse+0x20>
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	08 95       	ret

00000dce <FUNCi32toa>:
     dce:	8f 92       	push	r8
     dd0:	9f 92       	push	r9
     dd2:	af 92       	push	r10
     dd4:	bf 92       	push	r11
     dd6:	cf 92       	push	r12
     dd8:	df 92       	push	r13
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	6b 01       	movw	r12, r22
     de8:	7c 01       	movw	r14, r24
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	ff 20       	and	r15, r15
     df0:	3c f4       	brge	.+14     	; 0xe00 <FUNCi32toa+0x32>
     df2:	88 27       	eor	r24, r24
     df4:	99 27       	eor	r25, r25
     df6:	dc 01       	movw	r26, r24
     df8:	8c 19       	sub	r24, r12
     dfa:	9d 09       	sbc	r25, r13
     dfc:	ae 09       	sbc	r26, r14
     dfe:	bf 09       	sbc	r27, r15
     e00:	bc 01       	movw	r22, r24
     e02:	cd 01       	movw	r24, r26
     e04:	10 e0       	ldi	r17, 0x00	; 0
     e06:	0f 2e       	mov	r0, r31
     e08:	fa e0       	ldi	r31, 0x0A	; 10
     e0a:	8f 2e       	mov	r8, r31
     e0c:	91 2c       	mov	r9, r1
     e0e:	a1 2c       	mov	r10, r1
     e10:	b1 2c       	mov	r11, r1
     e12:	f0 2d       	mov	r31, r0
     e14:	01 c0       	rjmp	.+2      	; 0xe18 <FUNCi32toa+0x4a>
     e16:	10 2f       	mov	r17, r16
     e18:	01 e0       	ldi	r16, 0x01	; 1
     e1a:	01 0f       	add	r16, r17
     e1c:	c1 2f       	mov	r28, r17
     e1e:	d0 e0       	ldi	r29, 0x00	; 0
     e20:	c3 5c       	subi	r28, 0xC3	; 195
     e22:	de 4f       	sbci	r29, 0xFE	; 254
     e24:	a5 01       	movw	r20, r10
     e26:	94 01       	movw	r18, r8
     e28:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__divmodsi4>
     e2c:	60 5d       	subi	r22, 0xD0	; 208
     e2e:	68 83       	st	Y, r22
     e30:	62 2f       	mov	r22, r18
     e32:	73 2f       	mov	r23, r19
     e34:	84 2f       	mov	r24, r20
     e36:	95 2f       	mov	r25, r21
     e38:	16 16       	cp	r1, r22
     e3a:	17 06       	cpc	r1, r23
     e3c:	18 06       	cpc	r1, r24
     e3e:	19 06       	cpc	r1, r25
     e40:	54 f3       	brlt	.-44     	; 0xe16 <FUNCi32toa+0x48>
     e42:	ff 20       	and	r15, r15
     e44:	44 f4       	brge	.+16     	; 0xe56 <FUNCi32toa+0x88>
     e46:	e0 2f       	mov	r30, r16
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	e3 5c       	subi	r30, 0xC3	; 195
     e4c:	fe 4f       	sbci	r31, 0xFE	; 254
     e4e:	8d e2       	ldi	r24, 0x2D	; 45
     e50:	80 83       	st	Z, r24
     e52:	02 e0       	ldi	r16, 0x02	; 2
     e54:	01 0f       	add	r16, r17
     e56:	e0 2f       	mov	r30, r16
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	e3 5c       	subi	r30, 0xC3	; 195
     e5c:	fe 4f       	sbci	r31, 0xFE	; 254
     e5e:	10 82       	st	Z, r1
     e60:	8d e3       	ldi	r24, 0x3D	; 61
     e62:	91 e0       	ldi	r25, 0x01	; 1
     e64:	97 df       	rcall	.-210    	; 0xd94 <Reverse>
     e66:	8d e3       	ldi	r24, 0x3D	; 61
     e68:	91 e0       	ldi	r25, 0x01	; 1
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	ff 90       	pop	r15
     e74:	ef 90       	pop	r14
     e76:	df 90       	pop	r13
     e78:	cf 90       	pop	r12
     e7a:	bf 90       	pop	r11
     e7c:	af 90       	pop	r10
     e7e:	9f 90       	pop	r9
     e80:	8f 90       	pop	r8
     e82:	08 95       	ret

00000e84 <FUNCi16toa>:
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	ec 01       	movw	r28, r24
     e8e:	99 23       	and	r25, r25
     e90:	24 f4       	brge	.+8      	; 0xe9a <FUNCi16toa+0x16>
     e92:	88 27       	eor	r24, r24
     e94:	99 27       	eor	r25, r25
     e96:	8c 1b       	sub	r24, r28
     e98:	9d 0b       	sbc	r25, r29
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	0a e0       	ldi	r16, 0x0A	; 10
     e9e:	10 e0       	ldi	r17, 0x00	; 0
     ea0:	01 c0       	rjmp	.+2      	; 0xea4 <FUNCi16toa+0x20>
     ea2:	23 2f       	mov	r18, r19
     ea4:	31 e0       	ldi	r19, 0x01	; 1
     ea6:	32 0f       	add	r19, r18
     ea8:	e2 2f       	mov	r30, r18
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	e3 5c       	subi	r30, 0xC3	; 195
     eae:	fe 4f       	sbci	r31, 0xFE	; 254
     eb0:	b8 01       	movw	r22, r16
     eb2:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__divmodhi4>
     eb6:	80 5d       	subi	r24, 0xD0	; 208
     eb8:	80 83       	st	Z, r24
     eba:	86 2f       	mov	r24, r22
     ebc:	97 2f       	mov	r25, r23
     ebe:	18 16       	cp	r1, r24
     ec0:	19 06       	cpc	r1, r25
     ec2:	7c f3       	brlt	.-34     	; 0xea2 <FUNCi16toa+0x1e>
     ec4:	dd 23       	and	r29, r29
     ec6:	44 f4       	brge	.+16     	; 0xed8 <FUNCi16toa+0x54>
     ec8:	e3 2f       	mov	r30, r19
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	e3 5c       	subi	r30, 0xC3	; 195
     ece:	fe 4f       	sbci	r31, 0xFE	; 254
     ed0:	8d e2       	ldi	r24, 0x2D	; 45
     ed2:	80 83       	st	Z, r24
     ed4:	32 e0       	ldi	r19, 0x02	; 2
     ed6:	32 0f       	add	r19, r18
     ed8:	e3 2f       	mov	r30, r19
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	e3 5c       	subi	r30, 0xC3	; 195
     ede:	fe 4f       	sbci	r31, 0xFE	; 254
     ee0:	10 82       	st	Z, r1
     ee2:	8d e3       	ldi	r24, 0x3D	; 61
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	56 df       	rcall	.-340    	; 0xd94 <Reverse>
     ee8:	8d e3       	ldi	r24, 0x3D	; 61
     eea:	91 e0       	ldi	r25, 0x01	; 1
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	08 95       	ret

00000ef6 <FUNCui16toa>:
     ef6:	cf 93       	push	r28
     ef8:	ac 01       	movw	r20, r24
     efa:	e0 e0       	ldi	r30, 0x00	; 0
     efc:	c1 e0       	ldi	r28, 0x01	; 1
     efe:	ce 0f       	add	r28, r30
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	e3 5c       	subi	r30, 0xC3	; 195
     f04:	fe 4f       	sbci	r31, 0xFE	; 254
     f06:	9a 01       	movw	r18, r20
     f08:	ad ec       	ldi	r26, 0xCD	; 205
     f0a:	bc ec       	ldi	r27, 0xCC	; 204
     f0c:	0e 94 76 16 	call	0x2cec	; 0x2cec <__umulhisi3>
     f10:	96 95       	lsr	r25
     f12:	87 95       	ror	r24
     f14:	96 95       	lsr	r25
     f16:	87 95       	ror	r24
     f18:	96 95       	lsr	r25
     f1a:	87 95       	ror	r24
     f1c:	9c 01       	movw	r18, r24
     f1e:	22 0f       	add	r18, r18
     f20:	33 1f       	adc	r19, r19
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	82 0f       	add	r24, r18
     f30:	93 1f       	adc	r25, r19
     f32:	9a 01       	movw	r18, r20
     f34:	28 1b       	sub	r18, r24
     f36:	39 0b       	sbc	r19, r25
     f38:	c9 01       	movw	r24, r18
     f3a:	80 5d       	subi	r24, 0xD0	; 208
     f3c:	80 83       	st	Z, r24
     f3e:	9a 01       	movw	r18, r20
     f40:	0e 94 76 16 	call	0x2cec	; 0x2cec <__umulhisi3>
     f44:	ac 01       	movw	r20, r24
     f46:	56 95       	lsr	r21
     f48:	47 95       	ror	r20
     f4a:	56 95       	lsr	r21
     f4c:	47 95       	ror	r20
     f4e:	56 95       	lsr	r21
     f50:	47 95       	ror	r20
     f52:	ec 2f       	mov	r30, r28
     f54:	41 15       	cp	r20, r1
     f56:	51 05       	cpc	r21, r1
     f58:	89 f6       	brne	.-94     	; 0xefc <FUNCui16toa+0x6>
     f5a:	ec 2f       	mov	r30, r28
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	e3 5c       	subi	r30, 0xC3	; 195
     f60:	fe 4f       	sbci	r31, 0xFE	; 254
     f62:	10 82       	st	Z, r1
     f64:	8d e3       	ldi	r24, 0x3D	; 61
     f66:	91 e0       	ldi	r25, 0x01	; 1
     f68:	15 df       	rcall	.-470    	; 0xd94 <Reverse>
     f6a:	8d e3       	ldi	r24, 0x3D	; 61
     f6c:	91 e0       	ldi	r25, 0x01	; 1
     f6e:	cf 91       	pop	r28
     f70:	08 95       	ret

00000f72 <FUNCbcd2bin>:
     f72:	98 2f       	mov	r25, r24
     f74:	92 95       	swap	r25
     f76:	9f 70       	andi	r25, 0x0F	; 15
     f78:	99 0f       	add	r25, r25
     f7a:	29 2f       	mov	r18, r25
     f7c:	22 0f       	add	r18, r18
     f7e:	22 0f       	add	r18, r18
     f80:	92 0f       	add	r25, r18
     f82:	8f 70       	andi	r24, 0x0F	; 15
     f84:	89 0f       	add	r24, r25
     f86:	08 95       	ret

00000f88 <FUNCbin2bcd>:
     f88:	ac 01       	movw	r20, r24
     f8a:	9c 01       	movw	r18, r24
     f8c:	ad ec       	ldi	r26, 0xCD	; 205
     f8e:	bc ec       	ldi	r27, 0xCC	; 204
     f90:	0e 94 76 16 	call	0x2cec	; 0x2cec <__umulhisi3>
     f94:	96 95       	lsr	r25
     f96:	87 95       	ror	r24
     f98:	96 95       	lsr	r25
     f9a:	87 95       	ror	r24
     f9c:	96 95       	lsr	r25
     f9e:	87 95       	ror	r24
     fa0:	bc 01       	movw	r22, r24
     fa2:	66 0f       	add	r22, r22
     fa4:	77 1f       	adc	r23, r23
     fa6:	9c 01       	movw	r18, r24
     fa8:	22 0f       	add	r18, r18
     faa:	33 1f       	adc	r19, r19
     fac:	22 0f       	add	r18, r18
     fae:	33 1f       	adc	r19, r19
     fb0:	22 0f       	add	r18, r18
     fb2:	33 1f       	adc	r19, r19
     fb4:	26 0f       	add	r18, r22
     fb6:	37 1f       	adc	r19, r23
     fb8:	42 1b       	sub	r20, r18
     fba:	53 0b       	sbc	r21, r19
     fbc:	34 2f       	mov	r19, r20
     fbe:	20 e1       	ldi	r18, 0x10	; 16
     fc0:	82 9f       	mul	r24, r18
     fc2:	30 0d       	add	r19, r0
     fc4:	11 24       	eor	r1, r1
     fc6:	83 2f       	mov	r24, r19
     fc8:	08 95       	ret

00000fca <FUNCgcd1>:
     fca:	cf 92       	push	r12
     fcc:	df 92       	push	r13
     fce:	ef 92       	push	r14
     fd0:	ff 92       	push	r15
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	28 97       	sbiw	r28, 0x08	; 8
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	6b 01       	movw	r12, r22
     fe8:	7c 01       	movw	r14, r24
     fea:	69 83       	std	Y+1, r22	; 0x01
     fec:	7a 83       	std	Y+2, r23	; 0x02
     fee:	8b 83       	std	Y+3, r24	; 0x03
     ff0:	9c 83       	std	Y+4, r25	; 0x04
     ff2:	2d 83       	std	Y+5, r18	; 0x05
     ff4:	3e 83       	std	Y+6, r19	; 0x06
     ff6:	4f 83       	std	Y+7, r20	; 0x07
     ff8:	58 87       	std	Y+8, r21	; 0x08
     ffa:	c2 16       	cp	r12, r18
     ffc:	d3 06       	cpc	r13, r19
     ffe:	e4 06       	cpc	r14, r20
    1000:	f5 06       	cpc	r15, r21
    1002:	34 f4       	brge	.+12     	; 0x1010 <FUNCgcd1+0x46>
    1004:	be 01       	movw	r22, r28
    1006:	6b 5f       	subi	r22, 0xFB	; 251
    1008:	7f 4f       	sbci	r23, 0xFF	; 255
    100a:	ce 01       	movw	r24, r28
    100c:	01 96       	adiw	r24, 0x01	; 1
    100e:	85 dc       	rcall	.-1782   	; 0x91a <FUNCswap>
    1010:	8d 81       	ldd	r24, Y+5	; 0x05
    1012:	9e 81       	ldd	r25, Y+6	; 0x06
    1014:	af 81       	ldd	r26, Y+7	; 0x07
    1016:	b8 85       	ldd	r27, Y+8	; 0x08
    1018:	89 2b       	or	r24, r25
    101a:	8a 2b       	or	r24, r26
    101c:	8b 2b       	or	r24, r27
    101e:	71 f4       	brne	.+28     	; 0x103c <FUNCgcd1+0x72>
    1020:	69 81       	ldd	r22, Y+1	; 0x01
    1022:	7a 81       	ldd	r23, Y+2	; 0x02
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	9c 81       	ldd	r25, Y+4	; 0x04
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	a9 01       	movw	r20, r18
    102e:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__divmodsi4>
    1032:	61 15       	cp	r22, r1
    1034:	71 05       	cpc	r23, r1
    1036:	81 05       	cpc	r24, r1
    1038:	91 05       	cpc	r25, r1
    103a:	29 f4       	brne	.+10     	; 0x1046 <FUNCgcd1+0x7c>
    103c:	6d 81       	ldd	r22, Y+5	; 0x05
    103e:	7e 81       	ldd	r23, Y+6	; 0x06
    1040:	8f 81       	ldd	r24, Y+7	; 0x07
    1042:	98 85       	ldd	r25, Y+8	; 0x08
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <FUNCgcd1+0x86>
    1046:	6d 83       	std	Y+5, r22	; 0x05
    1048:	7e 83       	std	Y+6, r23	; 0x06
    104a:	8f 83       	std	Y+7, r24	; 0x07
    104c:	98 87       	std	Y+8, r25	; 0x08
    104e:	f6 cf       	rjmp	.-20     	; 0x103c <FUNCgcd1+0x72>
    1050:	28 96       	adiw	r28, 0x08	; 8
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	ff 90       	pop	r15
    1062:	ef 90       	pop	r14
    1064:	df 90       	pop	r13
    1066:	cf 90       	pop	r12
    1068:	08 95       	ret

0000106a <FUNCpincheck>:
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <FUNCpincheck+0x8>
    106e:	95 95       	asr	r25
    1070:	87 95       	ror	r24
    1072:	6a 95       	dec	r22
    1074:	e2 f7       	brpl	.-8      	; 0x106e <FUNCpincheck+0x4>
    1076:	81 70       	andi	r24, 0x01	; 1
    1078:	08 95       	ret

0000107a <FUNCprint_binary>:
    107a:	ed e3       	ldi	r30, 0x3D	; 61
    107c:	f1 e0       	ldi	r31, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	20 e8       	ldi	r18, 0x80	; 128
    1082:	50 e3       	ldi	r21, 0x30	; 48
    1084:	41 e3       	ldi	r20, 0x31	; 49
    1086:	38 2f       	mov	r19, r24
    1088:	32 23       	and	r19, r18
    108a:	11 f0       	breq	.+4      	; 0x1090 <FUNCprint_binary+0x16>
    108c:	40 83       	st	Z, r20
    108e:	01 c0       	rjmp	.+2      	; 0x1092 <FUNCprint_binary+0x18>
    1090:	50 83       	st	Z, r21
    1092:	26 95       	lsr	r18
    1094:	9f 5f       	subi	r25, 0xFF	; 255
    1096:	31 96       	adiw	r30, 0x01	; 1
    1098:	98 30       	cpi	r25, 0x08	; 8
    109a:	a9 f7       	brne	.-22     	; 0x1086 <FUNCprint_binary+0xc>
    109c:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <FUNCstr+0x8>
    10a0:	8d e3       	ldi	r24, 0x3D	; 61
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	08 95       	ret

000010a6 <FUNCmayia>:
    10a6:	a4 2f       	mov	r26, r20
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	10 97       	sbiw	r26, 0x00	; 0
    10ac:	61 f0       	breq	.+24     	; 0x10c6 <FUNCmayia+0x20>
    10ae:	21 e0       	ldi	r18, 0x01	; 1
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	e1 e0       	ldi	r30, 0x01	; 1
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	ee 0f       	add	r30, r30
    10b8:	ff 1f       	adc	r31, r31
    10ba:	2f 5f       	subi	r18, 0xFF	; 255
    10bc:	3f 4f       	sbci	r19, 0xFF	; 255
    10be:	a2 17       	cp	r26, r18
    10c0:	b3 07       	cpc	r27, r19
    10c2:	c8 f7       	brcc	.-14     	; 0x10b6 <FUNCmayia+0x10>
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <FUNCmayia+0x24>
    10c6:	e1 e0       	ldi	r30, 0x01	; 1
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	31 97       	sbiw	r30, 0x01	; 1
    10cc:	6e 23       	and	r22, r30
    10ce:	7f 23       	and	r23, r31
    10d0:	8e 23       	and	r24, r30
    10d2:	9f 23       	and	r25, r31
    10d4:	86 27       	eor	r24, r22
    10d6:	97 27       	eor	r25, r23
    10d8:	68 23       	and	r22, r24
    10da:	79 23       	and	r23, r25
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <FUNCmayia+0x3c>
    10de:	66 0f       	add	r22, r22
    10e0:	77 1f       	adc	r23, r23
    10e2:	4a 95       	dec	r20
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <FUNCmayia+0x38>
    10e6:	86 2b       	or	r24, r22
    10e8:	97 2b       	or	r25, r23
    10ea:	08 95       	ret

000010ec <FUNCenable>:
    10ec:	fc 01       	movw	r30, r24
    10ee:	9f b7       	in	r25, 0x3f	; 63
    10f0:	8f b7       	in	r24, 0x3f	; 63
    10f2:	8f 77       	andi	r24, 0x7F	; 127
    10f4:	8f bf       	out	0x3f, r24	; 63
    10f6:	9f bf       	out	0x3f, r25	; 63
    10f8:	85 e8       	ldi	r24, 0x85	; 133
    10fa:	96 e0       	ldi	r25, 0x06	; 6
    10fc:	91 83       	std	Z+1, r25	; 0x01
    10fe:	80 83       	st	Z, r24
    1100:	80 ea       	ldi	r24, 0xA0	; 160
    1102:	96 e0       	ldi	r25, 0x06	; 6
    1104:	93 83       	std	Z+3, r25	; 0x03
    1106:	82 83       	std	Z+2, r24	; 0x02
    1108:	8a ec       	ldi	r24, 0xCA	; 202
    110a:	96 e0       	ldi	r25, 0x06	; 6
    110c:	95 83       	std	Z+5, r25	; 0x05
    110e:	84 83       	std	Z+4, r24	; 0x04
    1110:	83 e5       	ldi	r24, 0x53	; 83
    1112:	98 e0       	ldi	r25, 0x08	; 8
    1114:	97 83       	std	Z+7, r25	; 0x07
    1116:	86 83       	std	Z+6, r24	; 0x06
    1118:	82 e7       	ldi	r24, 0x72	; 114
    111a:	94 e0       	ldi	r25, 0x04	; 4
    111c:	91 87       	std	Z+9, r25	; 0x09
    111e:	80 87       	std	Z+8, r24	; 0x08
    1120:	80 e8       	ldi	r24, 0x80	; 128
    1122:	94 e0       	ldi	r25, 0x04	; 4
    1124:	93 87       	std	Z+11, r25	; 0x0b
    1126:	82 87       	std	Z+10, r24	; 0x0a
    1128:	82 e8       	ldi	r24, 0x82	; 130
    112a:	94 e0       	ldi	r25, 0x04	; 4
    112c:	95 87       	std	Z+13, r25	; 0x0d
    112e:	84 87       	std	Z+12, r24	; 0x0c
    1130:	85 e8       	ldi	r24, 0x85	; 133
    1132:	94 e0       	ldi	r25, 0x04	; 4
    1134:	97 87       	std	Z+15, r25	; 0x0f
    1136:	86 87       	std	Z+14, r24	; 0x0e
    1138:	88 e8       	ldi	r24, 0x88	; 136
    113a:	94 e0       	ldi	r25, 0x04	; 4
    113c:	91 8b       	std	Z+17, r25	; 0x11
    113e:	80 8b       	std	Z+16, r24	; 0x10
    1140:	8b e8       	ldi	r24, 0x8B	; 139
    1142:	94 e0       	ldi	r25, 0x04	; 4
    1144:	93 8b       	std	Z+19, r25	; 0x13
    1146:	82 8b       	std	Z+18, r24	; 0x12
    1148:	8c e7       	ldi	r24, 0x7C	; 124
    114a:	94 e0       	ldi	r25, 0x04	; 4
    114c:	95 8b       	std	Z+21, r25	; 0x15
    114e:	84 8b       	std	Z+20, r24	; 0x14
    1150:	8e e7       	ldi	r24, 0x7E	; 126
    1152:	94 e0       	ldi	r25, 0x04	; 4
    1154:	97 8b       	std	Z+23, r25	; 0x17
    1156:	86 8b       	std	Z+22, r24	; 0x16
    1158:	8d e8       	ldi	r24, 0x8D	; 141
    115a:	94 e0       	ldi	r25, 0x04	; 4
    115c:	91 8f       	std	Z+25, r25	; 0x19
    115e:	80 8f       	std	Z+24, r24	; 0x18
    1160:	8e ea       	ldi	r24, 0xAE	; 174
    1162:	94 e0       	ldi	r25, 0x04	; 4
    1164:	93 8f       	std	Z+27, r25	; 0x1b
    1166:	82 8f       	std	Z+26, r24	; 0x1a
    1168:	8c eb       	ldi	r24, 0xBC	; 188
    116a:	94 e0       	ldi	r25, 0x04	; 4
    116c:	95 8f       	std	Z+29, r25	; 0x1d
    116e:	84 8f       	std	Z+28, r24	; 0x1c
    1170:	8e ed       	ldi	r24, 0xDE	; 222
    1172:	94 e0       	ldi	r25, 0x04	; 4
    1174:	97 8f       	std	Z+31, r25	; 0x1f
    1176:	86 8f       	std	Z+30, r24	; 0x1e
    1178:	82 e4       	ldi	r24, 0x42	; 66
    117a:	97 e0       	ldi	r25, 0x07	; 7
    117c:	91 a3       	std	Z+33, r25	; 0x21
    117e:	80 a3       	std	Z+32, r24	; 0x20
    1180:	8b e7       	ldi	r24, 0x7B	; 123
    1182:	97 e0       	ldi	r25, 0x07	; 7
    1184:	93 a3       	std	Z+35, r25	; 0x23
    1186:	82 a3       	std	Z+34, r24	; 0x22
    1188:	87 ee       	ldi	r24, 0xE7	; 231
    118a:	96 e0       	ldi	r25, 0x06	; 6
    118c:	95 a3       	std	Z+37, r25	; 0x25
    118e:	84 a3       	std	Z+36, r24	; 0x24
    1190:	8f ea       	ldi	r24, 0xAF	; 175
    1192:	96 e0       	ldi	r25, 0x06	; 6
    1194:	97 a3       	std	Z+39, r25	; 0x27
    1196:	86 a3       	std	Z+38, r24	; 0x26
    1198:	84 e8       	ldi	r24, 0x84	; 132
    119a:	95 e0       	ldi	r25, 0x05	; 5
    119c:	91 a7       	std	Z+41, r25	; 0x29
    119e:	80 a7       	std	Z+40, r24	; 0x28
    11a0:	89 e8       	ldi	r24, 0x89	; 137
    11a2:	95 e0       	ldi	r25, 0x05	; 5
    11a4:	93 a7       	std	Z+43, r25	; 0x2b
    11a6:	82 a7       	std	Z+42, r24	; 0x2a
    11a8:	88 e9       	ldi	r24, 0x98	; 152
    11aa:	95 e0       	ldi	r25, 0x05	; 5
    11ac:	95 a7       	std	Z+45, r25	; 0x2d
    11ae:	84 a7       	std	Z+44, r24	; 0x2c
    11b0:	8c eb       	ldi	r24, 0xBC	; 188
    11b2:	95 e0       	ldi	r25, 0x05	; 5
    11b4:	97 a7       	std	Z+47, r25	; 0x2f
    11b6:	86 a7       	std	Z+46, r24	; 0x2e
    11b8:	8e eb       	ldi	r24, 0xBE	; 190
    11ba:	95 e0       	ldi	r25, 0x05	; 5
    11bc:	91 ab       	std	Z+49, r25	; 0x31
    11be:	80 ab       	std	Z+48, r24	; 0x30
    11c0:	88 ec       	ldi	r24, 0xC8	; 200
    11c2:	95 e0       	ldi	r25, 0x05	; 5
    11c4:	93 ab       	std	Z+51, r25	; 0x33
    11c6:	82 ab       	std	Z+50, r24	; 0x32
    11c8:	85 ed       	ldi	r24, 0xD5	; 213
    11ca:	95 e0       	ldi	r25, 0x05	; 5
    11cc:	95 ab       	std	Z+53, r25	; 0x35
    11ce:	84 ab       	std	Z+52, r24	; 0x34
    11d0:	81 ee       	ldi	r24, 0xE1	; 225
    11d2:	95 e0       	ldi	r25, 0x05	; 5
    11d4:	97 ab       	std	Z+55, r25	; 0x37
    11d6:	86 ab       	std	Z+54, r24	; 0x36
    11d8:	89 ef       	ldi	r24, 0xF9	; 249
    11da:	95 e0       	ldi	r25, 0x05	; 5
    11dc:	91 af       	std	Z+57, r25	; 0x39
    11de:	80 af       	std	Z+56, r24	; 0x38
    11e0:	8c e0       	ldi	r24, 0x0C	; 12
    11e2:	96 e0       	ldi	r25, 0x06	; 6
    11e4:	93 af       	std	Z+59, r25	; 0x3b
    11e6:	82 af       	std	Z+58, r24	; 0x3a
    11e8:	87 e1       	ldi	r24, 0x17	; 23
    11ea:	96 e0       	ldi	r25, 0x06	; 6
    11ec:	95 af       	std	Z+61, r25	; 0x3d
    11ee:	84 af       	std	Z+60, r24	; 0x3c
    11f0:	84 e4       	ldi	r24, 0x44	; 68
    11f2:	96 e0       	ldi	r25, 0x06	; 6
    11f4:	97 af       	std	Z+63, r25	; 0x3f
    11f6:	86 af       	std	Z+62, r24	; 0x3e
    11f8:	df 01       	movw	r26, r30
    11fa:	a0 5c       	subi	r26, 0xC0	; 192
    11fc:	bf 4f       	sbci	r27, 0xFF	; 255
    11fe:	89 eb       	ldi	r24, 0xB9	; 185
    1200:	97 e0       	ldi	r25, 0x07	; 7
    1202:	11 96       	adiw	r26, 0x01	; 1
    1204:	9c 93       	st	X, r25
    1206:	8e 93       	st	-X, r24
    1208:	12 96       	adiw	r26, 0x02	; 2
    120a:	84 ec       	ldi	r24, 0xC4	; 196
    120c:	97 e0       	ldi	r25, 0x07	; 7
    120e:	11 96       	adiw	r26, 0x01	; 1
    1210:	9c 93       	st	X, r25
    1212:	8e 93       	st	-X, r24
    1214:	12 96       	adiw	r26, 0x02	; 2
    1216:	85 ee       	ldi	r24, 0xE5	; 229
    1218:	97 e0       	ldi	r25, 0x07	; 7
    121a:	11 96       	adiw	r26, 0x01	; 1
    121c:	9c 93       	st	X, r25
    121e:	8e 93       	st	-X, r24
    1220:	12 96       	adiw	r26, 0x02	; 2
    1222:	85 e3       	ldi	r24, 0x35	; 53
    1224:	98 e0       	ldi	r25, 0x08	; 8
    1226:	11 96       	adiw	r26, 0x01	; 1
    1228:	9c 93       	st	X, r25
    122a:	8e 93       	st	-X, r24
    122c:	12 96       	adiw	r26, 0x02	; 2
    122e:	8d e3       	ldi	r24, 0x3D	; 61
    1230:	98 e0       	ldi	r25, 0x08	; 8
    1232:	11 96       	adiw	r26, 0x01	; 1
    1234:	9c 93       	st	X, r25
    1236:	8e 93       	st	-X, r24
    1238:	12 96       	adiw	r26, 0x02	; 2
    123a:	8d e7       	ldi	r24, 0x7D	; 125
    123c:	99 e0       	ldi	r25, 0x09	; 9
    123e:	8d 93       	st	X+, r24
    1240:	9c 93       	st	X, r25
    1242:	cf 01       	movw	r24, r30
    1244:	08 95       	ret

00001246 <FUNCintinvstr>:
/***intinvstr***/
uint8_t FUNCintinvstr(int32_t n, char* res, uint8_t n_digit)
{
    1246:	8f 92       	push	r8
    1248:	9f 92       	push	r9
    124a:	af 92       	push	r10
    124c:	bf 92       	push	r11
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	8a 01       	movw	r16, r20
    125c:	d2 2f       	mov	r29, r18
	uint8_t k=0;
	for(res[k++] = (n % 10) + '0' ; (n/=10) > ZERO ; res[k++] = (n % 10) + '0');
    125e:	2a e0       	ldi	r18, 0x0A	; 10
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	40 e0       	ldi	r20, 0x00	; 0
    1264:	50 e0       	ldi	r21, 0x00	; 0
    1266:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__divmodsi4>
    126a:	60 5d       	subi	r22, 0xD0	; 208
    126c:	f8 01       	movw	r30, r16
    126e:	60 83       	st	Z, r22
    1270:	62 2f       	mov	r22, r18
    1272:	73 2f       	mov	r23, r19
    1274:	84 2f       	mov	r24, r20
    1276:	95 2f       	mov	r25, r21
    1278:	16 16       	cp	r1, r22
    127a:	17 06       	cpc	r1, r23
    127c:	18 06       	cpc	r1, r24
    127e:	19 06       	cpc	r1, r25
    1280:	fc f4       	brge	.+62     	; 0x12c0 <FUNCintinvstr+0x7a>
    1282:	21 e0       	ldi	r18, 0x01	; 1
    1284:	0f 2e       	mov	r0, r31
    1286:	fa e0       	ldi	r31, 0x0A	; 10
    1288:	8f 2e       	mov	r8, r31
    128a:	91 2c       	mov	r9, r1
    128c:	a1 2c       	mov	r10, r1
    128e:	b1 2c       	mov	r11, r1
    1290:	f0 2d       	mov	r31, r0
    1292:	c1 e0       	ldi	r28, 0x01	; 1
    1294:	c2 0f       	add	r28, r18
    1296:	78 01       	movw	r14, r16
    1298:	e2 0e       	add	r14, r18
    129a:	f1 1c       	adc	r15, r1
    129c:	a5 01       	movw	r20, r10
    129e:	94 01       	movw	r18, r8
    12a0:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__divmodsi4>
    12a4:	60 5d       	subi	r22, 0xD0	; 208
    12a6:	f7 01       	movw	r30, r14
    12a8:	60 83       	st	Z, r22
    12aa:	62 2f       	mov	r22, r18
    12ac:	73 2f       	mov	r23, r19
    12ae:	84 2f       	mov	r24, r20
    12b0:	95 2f       	mov	r25, r21
    12b2:	2c 2f       	mov	r18, r28
    12b4:	16 16       	cp	r1, r22
    12b6:	17 06       	cpc	r1, r23
    12b8:	18 06       	cpc	r1, r24
    12ba:	19 06       	cpc	r1, r25
    12bc:	54 f3       	brlt	.-44     	; 0x1292 <FUNCintinvstr+0x4c>
    12be:	01 c0       	rjmp	.+2      	; 0x12c2 <FUNCintinvstr+0x7c>
    12c0:	c1 e0       	ldi	r28, 0x01	; 1
	for( ; k < n_digit ; res[k++] = '0');
    12c2:	cd 17       	cp	r28, r29
    12c4:	48 f4       	brcc	.+18     	; 0x12d8 <FUNCintinvstr+0x92>
    12c6:	80 e3       	ldi	r24, 0x30	; 48
    12c8:	f8 01       	movw	r30, r16
    12ca:	ec 0f       	add	r30, r28
    12cc:	f1 1d       	adc	r31, r1
    12ce:	80 83       	st	Z, r24
    12d0:	cf 5f       	subi	r28, 0xFF	; 255
    12d2:	dc 13       	cpse	r29, r28
    12d4:	f9 cf       	rjmp	.-14     	; 0x12c8 <FUNCintinvstr+0x82>
    12d6:	01 c0       	rjmp	.+2      	; 0x12da <FUNCintinvstr+0x94>
    12d8:	dc 2f       	mov	r29, r28
	res[k]='\0';
    12da:	f8 01       	movw	r30, r16
    12dc:	ed 0f       	add	r30, r29
    12de:	f1 1d       	adc	r31, r1
    12e0:	10 82       	st	Z, r1
	return k;
}
    12e2:	8d 2f       	mov	r24, r29
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	ff 90       	pop	r15
    12ee:	ef 90       	pop	r14
    12f0:	bf 90       	pop	r11
    12f2:	af 90       	pop	r10
    12f4:	9f 90       	pop	r9
    12f6:	8f 90       	pop	r8
    12f8:	08 95       	ret

000012fa <FUNCftoa>:
/***ftoa***/
char* FUNCftoa(float n, char* res, uint8_t afterpoint)
{
    12fa:	4f 92       	push	r4
    12fc:	5f 92       	push	r5
    12fe:	6f 92       	push	r6
    1300:	7f 92       	push	r7
    1302:	8f 92       	push	r8
    1304:	9f 92       	push	r9
    1306:	af 92       	push	r10
    1308:	bf 92       	push	r11
    130a:	cf 92       	push	r12
    130c:	df 92       	push	r13
    130e:	ef 92       	push	r14
    1310:	ff 92       	push	r15
    1312:	1f 93       	push	r17
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	6b 01       	movw	r12, r22
    131a:	7c 01       	movw	r14, r24
    131c:	ea 01       	movw	r28, r20
    131e:	12 2f       	mov	r17, r18
	uint8_t k=ZERO;
	int32_t ipart;
	float fpart;
	int8_t sign;
	if (n < ZERO){
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	a9 01       	movw	r20, r18
    1326:	0e 94 14 13 	call	0x2628	; 0x2628 <__cmpsf2>
    132a:	88 23       	and	r24, r24
    132c:	0c f0       	brlt	.+2      	; 0x1330 <FUNCftoa+0x36>
    132e:	4d c0       	rjmp	.+154    	; 0x13ca <FUNCftoa+0xd0>
		n = -n;
    1330:	f7 fa       	bst	r15, 7
    1332:	f0 94       	com	r15
    1334:	f7 f8       	bld	r15, 7
    1336:	f0 94       	com	r15
		sign=-ONE;
	}else
		sign=ONE;
	ipart = (int32_t) n;
    1338:	c7 01       	movw	r24, r14
    133a:	b6 01       	movw	r22, r12
    133c:	0e 94 80 13 	call	0x2700	; 0x2700 <__fixsfsi>
    1340:	4b 01       	movw	r8, r22
    1342:	5c 01       	movw	r10, r24
	fpart = n - (float)ipart;
    1344:	0e 94 b3 13 	call	0x2766	; 0x2766 <__floatsisf>
    1348:	9b 01       	movw	r18, r22
    134a:	ac 01       	movw	r20, r24
    134c:	c7 01       	movw	r24, r14
    134e:	b6 01       	movw	r22, r12
    1350:	0e 94 af 12 	call	0x255e	; 0x255e <__subsf3>
    1354:	2b 01       	movw	r4, r22
    1356:	3c 01       	movw	r6, r24
	k=FUNCintinvstr( ipart, res, ONE );
    1358:	21 e0       	ldi	r18, 0x01	; 1
    135a:	ae 01       	movw	r20, r28
    135c:	c5 01       	movw	r24, r10
    135e:	b4 01       	movw	r22, r8
    1360:	72 df       	rcall	.-284    	; 0x1246 <FUNCintinvstr>
	if (sign < ZERO)
		res[k++] = '-';
    1362:	ff 24       	eor	r15, r15
    1364:	f3 94       	inc	r15
    1366:	f8 0e       	add	r15, r24
    1368:	fe 01       	movw	r30, r28
    136a:	e8 0f       	add	r30, r24
    136c:	f1 1d       	adc	r31, r1
    136e:	8d e2       	ldi	r24, 0x2D	; 45
    1370:	80 83       	st	Z, r24
	else
		res[k++] = ' ';
	res[k]='\0';
    1372:	6e 01       	movw	r12, r28
    1374:	cf 0c       	add	r12, r15
    1376:	d1 1c       	adc	r13, r1
    1378:	f6 01       	movw	r30, r12
    137a:	10 82       	st	Z, r1
	Reverse(res);
    137c:	ce 01       	movw	r24, r28
    137e:	0a dd       	rcall	.-1516   	; 0xd94 <Reverse>
	if (afterpoint > ZERO) {
    1380:	11 23       	and	r17, r17
    1382:	09 f4       	brne	.+2      	; 0x1386 <FUNCftoa+0x8c>
    1384:	40 c0       	rjmp	.+128    	; 0x1406 <FUNCftoa+0x10c>
		res[k++] = '.';
    1386:	8e e2       	ldi	r24, 0x2E	; 46
    1388:	f6 01       	movw	r30, r12
    138a:	80 83       	st	Z, r24
		FUNCintinvstr( fpart * pow(10, afterpoint), res+k, afterpoint );
    138c:	f3 94       	inc	r15
    138e:	ce 01       	movw	r24, r28
    1390:	8f 0d       	add	r24, r15
    1392:	91 1d       	adc	r25, r1
    1394:	7c 01       	movw	r14, r24
    1396:	61 2f       	mov	r22, r17
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	0e 94 b1 13 	call	0x2762	; 0x2762 <__floatunsisf>
    13a2:	9b 01       	movw	r18, r22
    13a4:	ac 01       	movw	r20, r24
    13a6:	60 e0       	ldi	r22, 0x00	; 0
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	80 e2       	ldi	r24, 0x20	; 32
    13ac:	91 e4       	ldi	r25, 0x41	; 65
    13ae:	0e 94 ca 14 	call	0x2994	; 0x2994 <pow>
    13b2:	a3 01       	movw	r20, r6
    13b4:	92 01       	movw	r18, r4
    13b6:	0e 94 67 14 	call	0x28ce	; 0x28ce <__mulsf3>
    13ba:	0e 94 80 13 	call	0x2700	; 0x2700 <__fixsfsi>
    13be:	21 2f       	mov	r18, r17
    13c0:	a7 01       	movw	r20, r14
		Reverse(res+k);
    13c2:	41 df       	rcall	.-382    	; 0x1246 <FUNCintinvstr>
    13c4:	c7 01       	movw	r24, r14
    13c6:	e6 dc       	rcall	.-1588   	; 0xd94 <Reverse>
	}	
	return res;
    13c8:	1e c0       	rjmp	.+60     	; 0x1406 <FUNCftoa+0x10c>
	if (n < ZERO){
		n = -n;
		sign=-ONE;
	}else
		sign=ONE;
	ipart = (int32_t) n;
    13ca:	c7 01       	movw	r24, r14
    13cc:	b6 01       	movw	r22, r12
    13ce:	0e 94 80 13 	call	0x2700	; 0x2700 <__fixsfsi>
    13d2:	4b 01       	movw	r8, r22
    13d4:	5c 01       	movw	r10, r24
	fpart = n - (float)ipart;
    13d6:	0e 94 b3 13 	call	0x2766	; 0x2766 <__floatsisf>
    13da:	9b 01       	movw	r18, r22
    13dc:	ac 01       	movw	r20, r24
    13de:	c7 01       	movw	r24, r14
    13e0:	b6 01       	movw	r22, r12
    13e2:	0e 94 af 12 	call	0x255e	; 0x255e <__subsf3>
    13e6:	2b 01       	movw	r4, r22
    13e8:	3c 01       	movw	r6, r24
	k=FUNCintinvstr( ipart, res, ONE );
    13ea:	21 e0       	ldi	r18, 0x01	; 1
    13ec:	ae 01       	movw	r20, r28
    13ee:	c5 01       	movw	r24, r10
    13f0:	b4 01       	movw	r22, r8
    13f2:	29 df       	rcall	.-430    	; 0x1246 <FUNCintinvstr>
	if (sign < ZERO)
		res[k++] = '-';
	else
		res[k++] = ' ';
    13f4:	ff 24       	eor	r15, r15
    13f6:	f3 94       	inc	r15
    13f8:	f8 0e       	add	r15, r24
    13fa:	fe 01       	movw	r30, r28
    13fc:	e8 0f       	add	r30, r24
    13fe:	f1 1d       	adc	r31, r1
    1400:	80 e2       	ldi	r24, 0x20	; 32
    1402:	80 83       	st	Z, r24
    1404:	b6 cf       	rjmp	.-148    	; 0x1372 <FUNCftoa+0x78>
		res[k++] = '.';
		FUNCintinvstr( fpart * pow(10, afterpoint), res+k, afterpoint );
		Reverse(res+k);
	}	
	return res;
}
    1406:	ce 01       	movw	r24, r28
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	ff 90       	pop	r15
    1410:	ef 90       	pop	r14
    1412:	df 90       	pop	r13
    1414:	cf 90       	pop	r12
    1416:	bf 90       	pop	r11
    1418:	af 90       	pop	r10
    141a:	9f 90       	pop	r9
    141c:	8f 90       	pop	r8
    141e:	7f 90       	pop	r7
    1420:	6f 90       	pop	r6
    1422:	5f 90       	pop	r5
    1424:	4f 90       	pop	r4
    1426:	08 95       	ret

00001428 <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1428:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    142c:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1430:	90 81       	ld	r25, Z
    1432:	9d 7f       	andi	r25, 0xFD	; 253
    1434:	90 83       	st	Z, r25
    1436:	67 2b       	or	r22, r23
    1438:	41 f0       	breq	.+16     	; 0x144a <LCD0_write+0x22>
    143a:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    143e:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1442:	90 81       	ld	r25, Z
    1444:	91 60       	ori	r25, 0x01	; 1
    1446:	90 83       	st	Z, r25
    1448:	07 c0       	rjmp	.+14     	; 0x1458 <LCD0_write+0x30>
    144a:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    144e:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1452:	90 81       	ld	r25, Z
    1454:	9e 7f       	andi	r25, 0xFE	; 254
    1456:	90 83       	st	Z, r25
    1458:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <lcd0_DDR>
    145c:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <lcd0_DDR+0x1>
    1460:	90 81       	ld	r25, Z
    1462:	90 6f       	ori	r25, 0xF0	; 240
    1464:	90 83       	st	Z, r25
    1466:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    146a:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    146e:	90 81       	ld	r25, Z
    1470:	94 60       	ori	r25, 0x04	; 4
    1472:	90 83       	st	Z, r25
    1474:	88 23       	and	r24, r24
    1476:	44 f4       	brge	.+16     	; 0x1488 <LCD0_write+0x60>
    1478:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    147c:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1480:	90 81       	ld	r25, Z
    1482:	90 68       	ori	r25, 0x80	; 128
    1484:	90 83       	st	Z, r25
    1486:	07 c0       	rjmp	.+14     	; 0x1496 <LCD0_write+0x6e>
    1488:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    148c:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1490:	90 81       	ld	r25, Z
    1492:	9f 77       	andi	r25, 0x7F	; 127
    1494:	90 83       	st	Z, r25
    1496:	86 ff       	sbrs	r24, 6
    1498:	08 c0       	rjmp	.+16     	; 0x14aa <LCD0_write+0x82>
    149a:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    149e:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    14a2:	90 81       	ld	r25, Z
    14a4:	90 64       	ori	r25, 0x40	; 64
    14a6:	90 83       	st	Z, r25
    14a8:	07 c0       	rjmp	.+14     	; 0x14b8 <LCD0_write+0x90>
    14aa:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    14ae:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    14b2:	90 81       	ld	r25, Z
    14b4:	9f 7b       	andi	r25, 0xBF	; 191
    14b6:	90 83       	st	Z, r25
    14b8:	85 ff       	sbrs	r24, 5
    14ba:	08 c0       	rjmp	.+16     	; 0x14cc <LCD0_write+0xa4>
    14bc:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    14c0:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    14c4:	90 81       	ld	r25, Z
    14c6:	90 62       	ori	r25, 0x20	; 32
    14c8:	90 83       	st	Z, r25
    14ca:	07 c0       	rjmp	.+14     	; 0x14da <LCD0_write+0xb2>
    14cc:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    14d0:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    14d4:	90 81       	ld	r25, Z
    14d6:	9f 7d       	andi	r25, 0xDF	; 223
    14d8:	90 83       	st	Z, r25
    14da:	84 ff       	sbrs	r24, 4
    14dc:	08 c0       	rjmp	.+16     	; 0x14ee <LCD0_write+0xc6>
    14de:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    14e2:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    14e6:	90 81       	ld	r25, Z
    14e8:	90 61       	ori	r25, 0x10	; 16
    14ea:	90 83       	st	Z, r25
    14ec:	07 c0       	rjmp	.+14     	; 0x14fc <LCD0_write+0xd4>
    14ee:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    14f2:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    14f6:	90 81       	ld	r25, Z
    14f8:	9f 7e       	andi	r25, 0xEF	; 239
    14fa:	90 83       	st	Z, r25
    14fc:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1500:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1504:	90 81       	ld	r25, Z
    1506:	9b 7f       	andi	r25, 0xFB	; 251
    1508:	90 83       	st	Z, r25
    150a:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    150e:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1512:	90 81       	ld	r25, Z
    1514:	94 60       	ori	r25, 0x04	; 4
    1516:	90 83       	st	Z, r25
    1518:	83 ff       	sbrs	r24, 3
    151a:	08 c0       	rjmp	.+16     	; 0x152c <LCD0_write+0x104>
    151c:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1520:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1524:	90 81       	ld	r25, Z
    1526:	90 68       	ori	r25, 0x80	; 128
    1528:	90 83       	st	Z, r25
    152a:	07 c0       	rjmp	.+14     	; 0x153a <LCD0_write+0x112>
    152c:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1530:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1534:	90 81       	ld	r25, Z
    1536:	9f 77       	andi	r25, 0x7F	; 127
    1538:	90 83       	st	Z, r25
    153a:	82 ff       	sbrs	r24, 2
    153c:	08 c0       	rjmp	.+16     	; 0x154e <LCD0_write+0x126>
    153e:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1542:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1546:	90 81       	ld	r25, Z
    1548:	90 64       	ori	r25, 0x40	; 64
    154a:	90 83       	st	Z, r25
    154c:	07 c0       	rjmp	.+14     	; 0x155c <LCD0_write+0x134>
    154e:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1552:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1556:	90 81       	ld	r25, Z
    1558:	9f 7b       	andi	r25, 0xBF	; 191
    155a:	90 83       	st	Z, r25
    155c:	81 ff       	sbrs	r24, 1
    155e:	08 c0       	rjmp	.+16     	; 0x1570 <LCD0_write+0x148>
    1560:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1564:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1568:	90 81       	ld	r25, Z
    156a:	90 62       	ori	r25, 0x20	; 32
    156c:	90 83       	st	Z, r25
    156e:	07 c0       	rjmp	.+14     	; 0x157e <LCD0_write+0x156>
    1570:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1574:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1578:	90 81       	ld	r25, Z
    157a:	9f 7d       	andi	r25, 0xDF	; 223
    157c:	90 83       	st	Z, r25
    157e:	80 ff       	sbrs	r24, 0
    1580:	08 c0       	rjmp	.+16     	; 0x1592 <LCD0_write+0x16a>
    1582:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1586:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    158a:	80 81       	ld	r24, Z
    158c:	80 61       	ori	r24, 0x10	; 16
    158e:	80 83       	st	Z, r24
    1590:	07 c0       	rjmp	.+14     	; 0x15a0 <LCD0_write+0x178>
    1592:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1596:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    159a:	80 81       	ld	r24, Z
    159c:	8f 7e       	andi	r24, 0xEF	; 239
    159e:	80 83       	st	Z, r24
    15a0:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    15a4:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    15a8:	80 81       	ld	r24, Z
    15aa:	8b 7f       	andi	r24, 0xFB	; 251
    15ac:	80 83       	st	Z, r24
    15ae:	08 95       	ret

000015b0 <LCD0_read>:
    15b0:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <lcd0_DDR>
    15b4:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <lcd0_DDR+0x1>
    15b8:	20 81       	ld	r18, Z
    15ba:	2f 70       	andi	r18, 0x0F	; 15
    15bc:	20 83       	st	Z, r18
    15be:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    15c2:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    15c6:	20 81       	ld	r18, Z
    15c8:	20 6f       	ori	r18, 0xF0	; 240
    15ca:	20 83       	st	Z, r18
    15cc:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    15d0:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    15d4:	20 81       	ld	r18, Z
    15d6:	22 60       	ori	r18, 0x02	; 2
    15d8:	20 83       	st	Z, r18
    15da:	89 2b       	or	r24, r25
    15dc:	41 f0       	breq	.+16     	; 0x15ee <LCD0_read+0x3e>
    15de:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    15e2:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    15e6:	80 81       	ld	r24, Z
    15e8:	81 60       	ori	r24, 0x01	; 1
    15ea:	80 83       	st	Z, r24
    15ec:	07 c0       	rjmp	.+14     	; 0x15fc <LCD0_read+0x4c>
    15ee:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    15f2:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    15f6:	80 81       	ld	r24, Z
    15f8:	8e 7f       	andi	r24, 0xFE	; 254
    15fa:	80 83       	st	Z, r24
    15fc:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1600:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1604:	80 81       	ld	r24, Z
    1606:	84 60       	ori	r24, 0x04	; 4
    1608:	80 83       	st	Z, r24
    160a:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <lcd0_PIN>
    160e:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <lcd0_PIN+0x1>
    1612:	80 81       	ld	r24, Z
    1614:	88 23       	and	r24, r24
    1616:	14 f0       	brlt	.+4      	; 0x161c <LCD0_read+0x6c>
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	01 c0       	rjmp	.+2      	; 0x161e <LCD0_read+0x6e>
    161c:	80 e8       	ldi	r24, 0x80	; 128
    161e:	90 81       	ld	r25, Z
    1620:	96 ff       	sbrs	r25, 6
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <LCD0_read+0x78>
    1624:	80 64       	ori	r24, 0x40	; 64
    1626:	01 c0       	rjmp	.+2      	; 0x162a <LCD0_read+0x7a>
    1628:	8f 7b       	andi	r24, 0xBF	; 191
    162a:	90 81       	ld	r25, Z
    162c:	95 ff       	sbrs	r25, 5
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <LCD0_read+0x84>
    1630:	80 62       	ori	r24, 0x20	; 32
    1632:	01 c0       	rjmp	.+2      	; 0x1636 <LCD0_read+0x86>
    1634:	8f 7d       	andi	r24, 0xDF	; 223
    1636:	90 81       	ld	r25, Z
    1638:	94 ff       	sbrs	r25, 4
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <LCD0_read+0x90>
    163c:	80 61       	ori	r24, 0x10	; 16
    163e:	01 c0       	rjmp	.+2      	; 0x1642 <LCD0_read+0x92>
    1640:	8f 7e       	andi	r24, 0xEF	; 239
    1642:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1646:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    164a:	90 81       	ld	r25, Z
    164c:	9b 7f       	andi	r25, 0xFB	; 251
    164e:	90 83       	st	Z, r25
    1650:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1654:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1658:	90 81       	ld	r25, Z
    165a:	94 60       	ori	r25, 0x04	; 4
    165c:	90 83       	st	Z, r25
    165e:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <lcd0_PIN>
    1662:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <lcd0_PIN+0x1>
    1666:	90 81       	ld	r25, Z
    1668:	99 23       	and	r25, r25
    166a:	14 f4       	brge	.+4      	; 0x1670 <LCD0_read+0xc0>
    166c:	88 60       	ori	r24, 0x08	; 8
    166e:	01 c0       	rjmp	.+2      	; 0x1672 <LCD0_read+0xc2>
    1670:	87 7f       	andi	r24, 0xF7	; 247
    1672:	90 81       	ld	r25, Z
    1674:	96 ff       	sbrs	r25, 6
    1676:	02 c0       	rjmp	.+4      	; 0x167c <LCD0_read+0xcc>
    1678:	84 60       	ori	r24, 0x04	; 4
    167a:	01 c0       	rjmp	.+2      	; 0x167e <LCD0_read+0xce>
    167c:	8b 7f       	andi	r24, 0xFB	; 251
    167e:	90 81       	ld	r25, Z
    1680:	95 ff       	sbrs	r25, 5
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <LCD0_read+0xd8>
    1684:	82 60       	ori	r24, 0x02	; 2
    1686:	01 c0       	rjmp	.+2      	; 0x168a <LCD0_read+0xda>
    1688:	8d 7f       	andi	r24, 0xFD	; 253
    168a:	90 81       	ld	r25, Z
    168c:	94 ff       	sbrs	r25, 4
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <LCD0_read+0xe4>
    1690:	81 60       	ori	r24, 0x01	; 1
    1692:	01 c0       	rjmp	.+2      	; 0x1696 <LCD0_read+0xe6>
    1694:	8e 7f       	andi	r24, 0xFE	; 254
    1696:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    169a:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    169e:	90 81       	ld	r25, Z
    16a0:	9b 7f       	andi	r25, 0xFB	; 251
    16a2:	90 83       	st	Z, r25
    16a4:	08 95       	ret

000016a6 <LCD0_BF>:
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	80 df       	rcall	.-256    	; 0x15b0 <LCD0_read>
    16b0:	cb e0       	ldi	r28, 0x0B	; 11
    16b2:	d0 e0       	ldi	r29, 0x00	; 0
    16b4:	05 c0       	rjmp	.+10     	; 0x16c0 <LCD0_BF+0x1a>
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	7a df       	rcall	.-268    	; 0x15b0 <LCD0_read>
    16bc:	21 97       	sbiw	r28, 0x01	; 1
    16be:	11 f0       	breq	.+4      	; 0x16c4 <LCD0_BF+0x1e>
    16c0:	88 23       	and	r24, r24
    16c2:	cc f3       	brlt	.-14     	; 0x16b6 <LCD0_BF+0x10>
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	08 95       	ret

000016ca <LCD0_putch>:
    16ca:	61 e0       	ldi	r22, 0x01	; 1
    16cc:	70 e0       	ldi	r23, 0x00	; 0
    16ce:	ac de       	rcall	.-680    	; 0x1428 <LCD0_write>
    16d0:	ea cf       	rjmp	.-44     	; 0x16a6 <LCD0_BF>
    16d2:	08 95       	ret

000016d4 <LCD0_getch>:
    16d4:	cf 93       	push	r28
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	6a df       	rcall	.-300    	; 0x15b0 <LCD0_read>
    16dc:	c8 2f       	mov	r28, r24
    16de:	e3 df       	rcall	.-58     	; 0x16a6 <LCD0_BF>
    16e0:	8c 2f       	mov	r24, r28
    16e2:	cf 91       	pop	r28
    16e4:	08 95       	ret

000016e6 <LCD0_string>:
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	ec 01       	movw	r28, r24
    16ec:	88 81       	ld	r24, Y
    16ee:	88 23       	and	r24, r24
    16f0:	41 f0       	breq	.+16     	; 0x1702 <LCD0_string+0x1c>
    16f2:	21 96       	adiw	r28, 0x01	; 1
    16f4:	61 e0       	ldi	r22, 0x01	; 1
    16f6:	70 e0       	ldi	r23, 0x00	; 0
    16f8:	97 de       	rcall	.-722    	; 0x1428 <LCD0_write>
    16fa:	d5 df       	rcall	.-86     	; 0x16a6 <LCD0_BF>
    16fc:	89 91       	ld	r24, Y+
    16fe:	81 11       	cpse	r24, r1
    1700:	f9 cf       	rjmp	.-14     	; 0x16f4 <LCD0_string+0xe>
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	08 95       	ret

00001708 <LCD0_string_size>:
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	fc 01       	movw	r30, r24
    1712:	d6 2f       	mov	r29, r22
    1714:	80 81       	ld	r24, Z
    1716:	88 23       	and	r24, r24
    1718:	51 f0       	breq	.+20     	; 0x172e <LCD0_string_size+0x26>
    171a:	8f 01       	movw	r16, r30
    171c:	0f 5f       	subi	r16, 0xFF	; 255
    171e:	1f 4f       	sbci	r17, 0xFF	; 255
    1720:	61 11       	cpse	r22, r1
    1722:	09 c0       	rjmp	.+18     	; 0x1736 <LCD0_string_size+0x2e>
    1724:	1b c0       	rjmp	.+54     	; 0x175c <LCD0_string_size+0x54>
    1726:	cf 5f       	subi	r28, 0xFF	; 255
    1728:	dc 17       	cp	r29, r28
    172a:	30 f4       	brcc	.+12     	; 0x1738 <LCD0_string_size+0x30>
    172c:	01 c0       	rjmp	.+2      	; 0x1730 <LCD0_string_size+0x28>
    172e:	c0 e0       	ldi	r28, 0x00	; 0
    1730:	cd 17       	cp	r28, r29
    1732:	60 f0       	brcs	.+24     	; 0x174c <LCD0_string_size+0x44>
    1734:	13 c0       	rjmp	.+38     	; 0x175c <LCD0_string_size+0x54>
    1736:	c1 e0       	ldi	r28, 0x01	; 1
    1738:	61 e0       	ldi	r22, 0x01	; 1
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	75 de       	rcall	.-790    	; 0x1428 <LCD0_write>
    173e:	b3 df       	rcall	.-154    	; 0x16a6 <LCD0_BF>
    1740:	f8 01       	movw	r30, r16
    1742:	81 91       	ld	r24, Z+
    1744:	8f 01       	movw	r16, r30
    1746:	81 11       	cpse	r24, r1
    1748:	ee cf       	rjmp	.-36     	; 0x1726 <LCD0_string_size+0x1e>
    174a:	f2 cf       	rjmp	.-28     	; 0x1730 <LCD0_string_size+0x28>
    174c:	cf 5f       	subi	r28, 0xFF	; 255
    174e:	61 e0       	ldi	r22, 0x01	; 1
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	80 e2       	ldi	r24, 0x20	; 32
    1754:	69 de       	rcall	.-814    	; 0x1428 <LCD0_write>
    1756:	a7 df       	rcall	.-178    	; 0x16a6 <LCD0_BF>
    1758:	cd 17       	cp	r28, r29
    175a:	c0 f3       	brcs	.-16     	; 0x174c <LCD0_string_size+0x44>
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	1f 91       	pop	r17
    1762:	0f 91       	pop	r16
    1764:	08 95       	ret

00001766 <LCD0_hspace>:
    1766:	cf 93       	push	r28
    1768:	c8 2f       	mov	r28, r24
    176a:	88 23       	and	r24, r24
    176c:	39 f0       	breq	.+14     	; 0x177c <LCD0_hspace+0x16>
    176e:	61 e0       	ldi	r22, 0x01	; 1
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	80 e2       	ldi	r24, 0x20	; 32
    1774:	59 de       	rcall	.-846    	; 0x1428 <LCD0_write>
    1776:	97 df       	rcall	.-210    	; 0x16a6 <LCD0_BF>
    1778:	c1 50       	subi	r28, 0x01	; 1
    177a:	c9 f7       	brne	.-14     	; 0x176e <LCD0_hspace+0x8>
    177c:	cf 91       	pop	r28
    177e:	08 95       	ret

00001780 <LCD0_gotoxy>:
    1780:	26 2f       	mov	r18, r22
    1782:	81 30       	cpi	r24, 0x01	; 1
    1784:	91 05       	cpc	r25, r1
    1786:	71 f0       	breq	.+28     	; 0x17a4 <LCD0_gotoxy+0x24>
    1788:	30 f0       	brcs	.+12     	; 0x1796 <LCD0_gotoxy+0x16>
    178a:	82 30       	cpi	r24, 0x02	; 2
    178c:	91 05       	cpc	r25, r1
    178e:	89 f0       	breq	.+34     	; 0x17b2 <LCD0_gotoxy+0x32>
    1790:	03 97       	sbiw	r24, 0x03	; 3
    1792:	b1 f0       	breq	.+44     	; 0x17c0 <LCD0_gotoxy+0x40>
    1794:	08 95       	ret
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	80 e8       	ldi	r24, 0x80	; 128
    179c:	82 0f       	add	r24, r18
    179e:	44 de       	rcall	.-888    	; 0x1428 <LCD0_write>
    17a0:	82 cf       	rjmp	.-252    	; 0x16a6 <LCD0_BF>
    17a2:	08 95       	ret
    17a4:	60 e0       	ldi	r22, 0x00	; 0
    17a6:	70 e0       	ldi	r23, 0x00	; 0
    17a8:	80 ec       	ldi	r24, 0xC0	; 192
    17aa:	82 0f       	add	r24, r18
    17ac:	3d de       	rcall	.-902    	; 0x1428 <LCD0_write>
    17ae:	7b cf       	rjmp	.-266    	; 0x16a6 <LCD0_BF>
    17b0:	08 95       	ret
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	70 e0       	ldi	r23, 0x00	; 0
    17b6:	84 e9       	ldi	r24, 0x94	; 148
    17b8:	82 0f       	add	r24, r18
    17ba:	36 de       	rcall	.-916    	; 0x1428 <LCD0_write>
    17bc:	74 cf       	rjmp	.-280    	; 0x16a6 <LCD0_BF>
    17be:	08 95       	ret
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	70 e0       	ldi	r23, 0x00	; 0
    17c4:	84 ed       	ldi	r24, 0xD4	; 212
    17c6:	82 0f       	add	r24, r18
    17c8:	2f de       	rcall	.-930    	; 0x1428 <LCD0_write>
    17ca:	6d cf       	rjmp	.-294    	; 0x16a6 <LCD0_BF>
    17cc:	08 95       	ret

000017ce <LCD0_clear>:
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	29 de       	rcall	.-942    	; 0x1428 <LCD0_write>
    17d6:	87 ee       	ldi	r24, 0xE7	; 231
    17d8:	97 e1       	ldi	r25, 0x17	; 23
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	f1 f7       	brne	.-4      	; 0x17da <LCD0_clear+0xc>
    17de:	00 c0       	rjmp	.+0      	; 0x17e0 <LCD0_clear+0x12>
    17e0:	00 00       	nop
    17e2:	08 95       	ret

000017e4 <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    17e4:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <lcd0_DDR>
    17e8:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <lcd0_DDR+0x1>
    17ec:	87 e0       	ldi	r24, 0x07	; 7
    17ee:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    17f0:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    17f4:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    17f8:	88 e0       	ldi	r24, 0x08	; 8
    17fa:	80 83       	st	Z, r24
    17fc:	2f ef       	ldi	r18, 0xFF	; 255
    17fe:	83 ef       	ldi	r24, 0xF3	; 243
    1800:	91 e0       	ldi	r25, 0x01	; 1
    1802:	21 50       	subi	r18, 0x01	; 1
    1804:	80 40       	sbci	r24, 0x00	; 0
    1806:	90 40       	sbci	r25, 0x00	; 0
    1808:	e1 f7       	brne	.-8      	; 0x1802 <LCD0_inic+0x1e>
    180a:	00 c0       	rjmp	.+0      	; 0x180c <LCD0_inic+0x28>
    180c:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    180e:	60 e0       	ldi	r22, 0x00	; 0
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	83 e3       	ldi	r24, 0x33	; 51
    1814:	09 de       	rcall	.-1006   	; 0x1428 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1816:	20 ed       	ldi	r18, 0xD0	; 208
    1818:	2a 95       	dec	r18
    181a:	f1 f7       	brne	.-4      	; 0x1818 <LCD0_inic+0x34>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    181c:	60 e0       	ldi	r22, 0x00	; 0
    181e:	70 e0       	ldi	r23, 0x00	; 0
    1820:	83 e3       	ldi	r24, 0x33	; 51
    1822:	02 de       	rcall	.-1020   	; 0x1428 <LCD0_write>
    1824:	80 ed       	ldi	r24, 0xD0	; 208
    1826:	8a 95       	dec	r24
    1828:	f1 f7       	brne	.-4      	; 0x1826 <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    182a:	60 e0       	ldi	r22, 0x00	; 0
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	8b e2       	ldi	r24, 0x2B	; 43
    1830:	fb dd       	rcall	.-1034   	; 0x1428 <LCD0_write>
    1832:	95 ec       	ldi	r25, 0xC5	; 197
    1834:	9a 95       	dec	r25
    1836:	f1 f7       	brne	.-4      	; 0x1834 <LCD0_inic+0x50>
    1838:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    183a:	60 e0       	ldi	r22, 0x00	; 0
    183c:	70 e0       	ldi	r23, 0x00	; 0
    183e:	8c e0       	ldi	r24, 0x0C	; 12
    1840:	f3 dd       	rcall	.-1050   	; 0x1428 <LCD0_write>
    1842:	25 ec       	ldi	r18, 0xC5	; 197
    1844:	2a 95       	dec	r18
    1846:	f1 f7       	brne	.-4      	; 0x1844 <LCD0_inic+0x60>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    1848:	00 00       	nop
    184a:	60 e0       	ldi	r22, 0x00	; 0
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	eb dd       	rcall	.-1066   	; 0x1428 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1852:	87 ee       	ldi	r24, 0xE7	; 231
    1854:	97 e1       	ldi	r25, 0x17	; 23
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	f1 f7       	brne	.-4      	; 0x1856 <LCD0_inic+0x72>
    185a:	00 c0       	rjmp	.+0      	; 0x185c <LCD0_inic+0x78>
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    185c:	00 00       	nop
    185e:	60 e0       	ldi	r22, 0x00	; 0
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	86 e0       	ldi	r24, 0x06	; 6
    1864:	e1 dd       	rcall	.-1086   	; 0x1428 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1866:	95 ec       	ldi	r25, 0xC5	; 197
    1868:	9a 95       	dec	r25
    186a:	f1 f7       	brne	.-4      	; 0x1868 <LCD0_inic+0x84>
    186c:	00 00       	nop
    186e:	08 95       	ret

00001870 <LCD0enable>:
void LCD1_strobe(unsigned int num);
void LCD1_reboot(void);
unsigned int LCD_ticks(unsigned int num);
/***Procedure & Function***/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1870:	1f 93       	push	r17
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    1878:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    187a:	8f b7       	in	r24, 0x3f	; 63
    187c:	8f 77       	andi	r24, 0x7F	; 127
    187e:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    1880:	70 93 66 01 	sts	0x0166, r23	; 0x800166 <lcd0_DDR+0x1>
    1884:	60 93 65 01 	sts	0x0165, r22	; 0x800165 <lcd0_DDR>
	lcd0_PIN=pin;
    1888:	50 93 5f 01 	sts	0x015F, r21	; 0x80015f <lcd0_PIN+0x1>
    188c:	40 93 5e 01 	sts	0x015E, r20	; 0x80015e <lcd0_PIN>
	lcd0_PORT=port;
    1890:	30 93 69 01 	sts	0x0169, r19	; 0x800169 <lcd0_PORT+0x1>
    1894:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    1898:	fb 01       	movw	r30, r22
    189a:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    189c:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    18a0:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    18a4:	8f ef       	ldi	r24, 0xFF	; 255
    18a6:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    18a8:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <lcd0_PIN>
    18ac:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <lcd0_PIN+0x1>
    18b0:	80 81       	ld	r24, Z
    18b2:	88 70       	andi	r24, 0x08	; 8
    18b4:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    18b8:	95 df       	rcall	.-214    	; 0x17e4 <LCD0_inic>
	SREG=tSREG;
    18ba:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    18bc:	84 e1       	ldi	r24, 0x14	; 20
    18be:	9a e0       	ldi	r25, 0x0A	; 10
    18c0:	99 83       	std	Y+1, r25	; 0x01
    18c2:	88 83       	st	Y, r24
    18c4:	88 ed       	ldi	r24, 0xD8	; 216
    18c6:	9a e0       	ldi	r25, 0x0A	; 10
    18c8:	9b 83       	std	Y+3, r25	; 0x03
    18ca:	8a 83       	std	Y+2, r24	; 0x02
    18cc:	83 e5       	ldi	r24, 0x53	; 83
    18ce:	9b e0       	ldi	r25, 0x0B	; 11
    18d0:	9d 83       	std	Y+5, r25	; 0x05
    18d2:	8c 83       	std	Y+4, r24	; 0x04
    18d4:	85 e6       	ldi	r24, 0x65	; 101
    18d6:	9b e0       	ldi	r25, 0x0B	; 11
    18d8:	9f 83       	std	Y+7, r25	; 0x07
    18da:	8e 83       	std	Y+6, r24	; 0x06
    18dc:	8a e6       	ldi	r24, 0x6A	; 106
    18de:	9b e0       	ldi	r25, 0x0B	; 11
    18e0:	99 87       	std	Y+9, r25	; 0x09
    18e2:	88 87       	std	Y+8, r24	; 0x08
    18e4:	83 e7       	ldi	r24, 0x73	; 115
    18e6:	9b e0       	ldi	r25, 0x0B	; 11
    18e8:	9b 87       	std	Y+11, r25	; 0x0b
    18ea:	8a 87       	std	Y+10, r24	; 0x0a
    18ec:	84 e8       	ldi	r24, 0x84	; 132
    18ee:	9b e0       	ldi	r25, 0x0B	; 11
    18f0:	9d 87       	std	Y+13, r25	; 0x0d
    18f2:	8c 87       	std	Y+12, r24	; 0x0c
    18f4:	83 eb       	ldi	r24, 0xB3	; 179
    18f6:	9b e0       	ldi	r25, 0x0B	; 11
    18f8:	9f 87       	std	Y+15, r25	; 0x0f
    18fa:	8e 87       	std	Y+14, r24	; 0x0e
    18fc:	87 ee       	ldi	r24, 0xE7	; 231
    18fe:	9b e0       	ldi	r25, 0x0B	; 11
    1900:	99 8b       	std	Y+17, r25	; 0x11
    1902:	88 8b       	std	Y+16, r24	; 0x10
    1904:	80 ec       	ldi	r24, 0xC0	; 192
    1906:	9b e0       	ldi	r25, 0x0B	; 11
    1908:	9b 8b       	std	Y+19, r25	; 0x13
    190a:	8a 8b       	std	Y+18, r24	; 0x12
    190c:	8f e8       	ldi	r24, 0x8F	; 143
    190e:	9c e0       	ldi	r25, 0x0C	; 12
    1910:	9d 8b       	std	Y+21, r25	; 0x15
    1912:	8c 8b       	std	Y+20, r24	; 0x14
}
    1914:	ce 01       	movw	r24, r28
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	1f 91       	pop	r17
    191c:	08 95       	ret

0000191e <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    191e:	cf 93       	push	r28
    1920:	df 93       	push	r29
	uint8_t tSREG;
	tSREG=SREG;
    1922:	df b7       	in	r29, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1924:	8f b7       	in	r24, 0x3f	; 63
    1926:	8f 77       	andi	r24, 0x7F	; 127
    1928:	8f bf       	out	0x3f, r24	; 63
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    192a:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <lcd0_PIN>
    192e:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <lcd0_PIN+0x1>
    1932:	c0 81       	ld	r28, Z
    1934:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    1936:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <lcd0_detect>
    193a:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    193c:	8c 23       	and	r24, r28
    193e:	09 f0       	breq	.+2      	; 0x1942 <LCD0_reboot+0x24>
		LCD0_inic();
    1940:	51 df       	rcall	.-350    	; 0x17e4 <LCD0_inic>
	lcd0_detect=tmp;
    1942:	c0 93 67 01 	sts	0x0167, r28	; 0x800167 <lcd0_detect>
	SREG=tSREG;
    1946:	df bf       	out	0x3f, r29	; 63
}
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	08 95       	ret

0000194e <HX711_read_bit>:
	self->readflag=OFF;
}
uint8_t HX711_read_bit(void)
{	
	uint16_t ibool;
	*hx711_PORT|=(ONE<<hx711_clkpin);
    194e:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <hx711_PORT>
    1952:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <hx711_PORT+0x1>
    1956:	20 81       	ld	r18, Z
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	00 90 73 01 	lds	r0, 0x0173	; 0x800173 <hx711_clkpin>
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <HX711_read_bit+0x18>
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	0a 94       	dec	r0
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <HX711_read_bit+0x14>
    196a:	82 2b       	or	r24, r18
    196c:	80 83       	st	Z, r24
    196e:	84 e2       	ldi	r24, 0x24	; 36
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	01 97       	sbiw	r24, 0x01	; 1
	/**0.1us minimum**/
	for(ibool=ZERO; ibool<HX711_ticks; ibool++); //inline delay
    1974:	f1 f7       	brne	.-4      	; 0x1972 <HX711_read_bit+0x24>
	ibool=*hx711_PIN & (ONE<<hx711_datapin);
    1976:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <hx711_PIN>
    197a:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <hx711_PIN+0x1>
    197e:	40 81       	ld	r20, Z
    1980:	21 e0       	ldi	r18, 0x01	; 1
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	c9 01       	movw	r24, r18
    1986:	00 90 6c 01 	lds	r0, 0x016C	; 0x80016c <hx711_datapin>
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <HX711_read_bit+0x42>
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	0a 94       	dec	r0
    1992:	e2 f7       	brpl	.-8      	; 0x198c <HX711_read_bit+0x3e>
	*hx711_PORT &= ~(ONE<<hx711_clkpin);
    1994:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <hx711_PORT>
    1998:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <hx711_PORT+0x1>
    199c:	90 81       	ld	r25, Z
    199e:	00 90 73 01 	lds	r0, 0x0173	; 0x800173 <hx711_clkpin>
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <HX711_read_bit+0x5a>
    19a4:	22 0f       	add	r18, r18
    19a6:	33 1f       	adc	r19, r19
    19a8:	0a 94       	dec	r0
    19aa:	e2 f7       	brpl	.-8      	; 0x19a4 <HX711_read_bit+0x56>
    19ac:	20 95       	com	r18
    19ae:	29 23       	and	r18, r25
    19b0:	20 83       	st	Z, r18
	return ibool;
}
    19b2:	84 23       	and	r24, r20
    19b4:	08 95       	ret

000019b6 <HX711_set_amplify>:
// Gain selector
// AVDD connected to 5V, channel B gain=32
void HX711_set_amplify(HX711* self, uint8_t amplify)
{
	switch(amplify){
    19b6:	60 34       	cpi	r22, 0x40	; 64
    19b8:	79 f0       	breq	.+30     	; 0x19d8 <HX711_set_amplify+0x22>
    19ba:	60 38       	cpi	r22, 0x80	; 128
    19bc:	19 f0       	breq	.+6      	; 0x19c4 <HX711_set_amplify+0xe>
    19be:	60 32       	cpi	r22, 0x20	; 32
    19c0:	81 f4       	brne	.+32     	; 0x19e2 <HX711_set_amplify+0x2c>
    19c2:	05 c0       	rjmp	.+10     	; 0x19ce <HX711_set_amplify+0x18>
		case 128:
			self->amplify = ONE; //channel A
    19c4:	21 e0       	ldi	r18, 0x01	; 1
    19c6:	fc 01       	movw	r30, r24
    19c8:	22 83       	std	Z+2, r18	; 0x02
			self->ampcount = ONE;
    19ca:	23 83       	std	Z+3, r18	; 0x03
			break;
    19cc:	08 95       	ret
		case 32:
			self->amplify = 2; //channel B
    19ce:	22 e0       	ldi	r18, 0x02	; 2
    19d0:	fc 01       	movw	r30, r24
    19d2:	22 83       	std	Z+2, r18	; 0x02
			self->ampcount = 2; 
    19d4:	23 83       	std	Z+3, r18	; 0x03
			break;
    19d6:	08 95       	ret
		case 64:
			self->amplify = 3; //channel A
    19d8:	23 e0       	ldi	r18, 0x03	; 3
    19da:	fc 01       	movw	r30, r24
    19dc:	22 83       	std	Z+2, r18	; 0x02
			self->ampcount = 3;
    19de:	23 83       	std	Z+3, r18	; 0x03
			break;
    19e0:	08 95       	ret
		default:
			self->amplify = ONE;
    19e2:	21 e0       	ldi	r18, 0x01	; 1
    19e4:	fc 01       	movw	r30, r24
    19e6:	22 83       	std	Z+2, r18	; 0x02
			self->ampcount = ONE;
    19e8:	23 83       	std	Z+3, r18	; 0x03
    19ea:	08 95       	ret

000019ec <HX711_query>:
	}
}
uint8_t HX711_query(HX711* self)
{
	uint8_t flag=OFF; // one shot
	if(!self->readflag){
    19ec:	fc 01       	movw	r30, r24
    19ee:	20 81       	ld	r18, Z
    19f0:	21 11       	cpse	r18, r1
    19f2:	14 c0       	rjmp	.+40     	; 0x1a1c <HX711_query+0x30>
		if(!(*hx711_PIN & (ONE << hx711_datapin))){
    19f4:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <hx711_PIN>
    19f8:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <hx711_PIN+0x1>
    19fc:	20 81       	ld	r18, Z
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	00 90 6c 01 	lds	r0, 0x016C	; 0x80016c <hx711_datapin>
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <HX711_query+0x1e>
    1a06:	35 95       	asr	r19
    1a08:	27 95       	ror	r18
    1a0a:	0a 94       	dec	r0
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <HX711_query+0x1a>
    1a0e:	20 fd       	sbrc	r18, 0
    1a10:	07 c0       	rjmp	.+14     	; 0x1a20 <HX711_query+0x34>
			self->readflag=ON;
    1a12:	2f ef       	ldi	r18, 0xFF	; 255
    1a14:	fc 01       	movw	r30, r24
    1a16:	20 83       	st	Z, r18
			flag=ON;
    1a18:	8f ef       	ldi	r24, 0xFF	; 255
    1a1a:	08 95       	ret
			break;
	}
}
uint8_t HX711_query(HX711* self)
{
	uint8_t flag=OFF; // one shot
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	08 95       	ret
    1a20:	80 e0       	ldi	r24, 0x00	; 0
			self->readflag=ON;
			flag=ON;
		}
	}
	return flag;
}
    1a22:	08 95       	ret

00001a24 <HX711_raw_average>:
		}
	}
	return self->raw_reading;
}
float HX711_raw_average(HX711* self, uint8_t n)
{
    1a24:	0f 93       	push	r16
    1a26:	1f 93       	push	r17
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
    1a2c:	ec 01       	movw	r28, r24
	if(self->trigger){
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	88 23       	and	r24, r24
    1a32:	91 f1       	breq	.+100    	; 0x1a98 <HX711_raw_average+0x74>
		if(self->av_n < n){
    1a34:	8a 89       	ldd	r24, Y+18	; 0x12
    1a36:	86 17       	cp	r24, r22
    1a38:	98 f4       	brcc	.+38     	; 0x1a60 <HX711_raw_average+0x3c>
			self->sum += self->raw_reading;
    1a3a:	0e 85       	ldd	r16, Y+14	; 0x0e
    1a3c:	1f 85       	ldd	r17, Y+15	; 0x0f
    1a3e:	28 89       	ldd	r18, Y+16	; 0x10
    1a40:	39 89       	ldd	r19, Y+17	; 0x11
    1a42:	4a 85       	ldd	r20, Y+10	; 0x0a
    1a44:	5b 85       	ldd	r21, Y+11	; 0x0b
    1a46:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a48:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a4a:	40 0f       	add	r20, r16
    1a4c:	51 1f       	adc	r21, r17
    1a4e:	62 1f       	adc	r22, r18
    1a50:	73 1f       	adc	r23, r19
    1a52:	4e 87       	std	Y+14, r20	; 0x0e
    1a54:	5f 87       	std	Y+15, r21	; 0x0f
    1a56:	68 8b       	std	Y+16, r22	; 0x10
    1a58:	79 8b       	std	Y+17, r23	; 0x11
			self->av_n++;
    1a5a:	8f 5f       	subi	r24, 0xFF	; 255
    1a5c:	8a 8b       	std	Y+18, r24	; 0x12
    1a5e:	1b c0       	rjmp	.+54     	; 0x1a96 <HX711_raw_average+0x72>
		}else{
			self->av_n = ZERO;
			self->raw_mean = self->sum / n;
    1a60:	26 2f       	mov	r18, r22
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e0       	ldi	r20, 0x00	; 0
    1a66:	50 e0       	ldi	r21, 0x00	; 0
    1a68:	6e 85       	ldd	r22, Y+14	; 0x0e
    1a6a:	7f 85       	ldd	r23, Y+15	; 0x0f
    1a6c:	88 89       	ldd	r24, Y+16	; 0x10
    1a6e:	99 89       	ldd	r25, Y+17	; 0x11
    1a70:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__divmodsi4>
    1a74:	ca 01       	movw	r24, r20
    1a76:	b9 01       	movw	r22, r18
    1a78:	76 d6       	rcall	.+3308   	; 0x2766 <__floatsisf>
    1a7a:	6b 8b       	std	Y+19, r22	; 0x13
    1a7c:	7c 8b       	std	Y+20, r23	; 0x14
    1a7e:	8d 8b       	std	Y+21, r24	; 0x15
    1a80:	9e 8b       	std	Y+22, r25	; 0x16
			self->sum = ZERO;
			self->sum += self->raw_reading;
    1a82:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a84:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a86:	ac 85       	ldd	r26, Y+12	; 0x0c
    1a88:	bd 85       	ldd	r27, Y+13	; 0x0d
    1a8a:	8e 87       	std	Y+14, r24	; 0x0e
    1a8c:	9f 87       	std	Y+15, r25	; 0x0f
    1a8e:	a8 8b       	std	Y+16, r26	; 0x10
    1a90:	b9 8b       	std	Y+17, r27	; 0x11
			self->av_n++;
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	8a 8b       	std	Y+18, r24	; 0x12
		}
		self->trigger = ZERO;
    1a96:	19 82       	std	Y+1, r1	; 0x01
	}
	return self->raw_mean;
    1a98:	6b 89       	ldd	r22, Y+19	; 0x13
    1a9a:	7c 89       	ldd	r23, Y+20	; 0x14
    1a9c:	8d 89       	ldd	r24, Y+21	; 0x15
    1a9e:	9e 89       	ldd	r25, Y+22	; 0x16
}
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	1f 91       	pop	r17
    1aa6:	0f 91       	pop	r16
    1aa8:	08 95       	ret

00001aaa <HX711_get_readflag>:
uint8_t HX711_get_readflag(HX711* self)
{
	return self->readflag;
    1aaa:	fc 01       	movw	r30, r24
    1aac:	80 81       	ld	r24, Z
}
    1aae:	08 95       	ret

00001ab0 <HX711_get_cal>:
struct HX711_calibration* HX711_get_cal(HX711* self)
{
	return &(self->cal_data);
}
    1ab0:	47 96       	adiw	r24, 0x17	; 23
    1ab2:	08 95       	ret

00001ab4 <HX711_read_raw>:
}
/***
Function to be used in the interrupt routine with appropriate cycle period.
***/
int32_t HX711_read_raw(HX711* self)
{
    1ab4:	0f 93       	push	r16
    1ab6:	1f 93       	push	r17
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
    1abc:	ec 01       	movw	r28, r24
	uint8_t aindex, bindex;
	int32_t value;
	aindex = self->bufferindex-ONE;
    1abe:	09 85       	ldd	r16, Y+9	; 0x09
	bindex = self->bitcount-ONE;
    1ac0:	1c 81       	ldd	r17, Y+4	; 0x04
	ptr=(int32_t*)self->buffer;
    1ac2:	05 96       	adiw	r24, 0x05	; 5
    1ac4:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <ptr+0x1>
    1ac8:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <ptr>
	/***Detect query for reading***/
	//if((!(*hx711_PIN & ONE << hx711_datapin)) && !self->readflag){
		//HX711_set_readflag(self);
	//}
	/***Interrupt 24 times sequence***/
	if(self->readflag){
    1acc:	88 81       	ld	r24, Y
    1ace:	88 23       	and	r24, r24
    1ad0:	09 f4       	brne	.+2      	; 0x1ad4 <HX711_read_raw+0x20>
    1ad2:	44 c0       	rjmp	.+136    	; 0x1b5c <HX711_read_raw+0xa8>
		if(self->bitcount){
    1ad4:	11 23       	and	r17, r17
    1ad6:	29 f1       	breq	.+74     	; 0x1b22 <HX711_read_raw+0x6e>
			if (HX711_read_bit())
    1ad8:	3a df       	rcall	.-396    	; 0x194e <HX711_read_bit>
    1ada:	88 23       	and	r24, r24
    1adc:	a9 f0       	breq	.+42     	; 0x1b08 <HX711_read_raw+0x54>
				self->buffer[aindex] |= ONE<<(bindex-(aindex*8));
    1ade:	01 50       	subi	r16, 0x01	; 1
    1ae0:	80 2f       	mov	r24, r16
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e8 0f       	add	r30, r24
    1ae8:	f9 1f       	adc	r31, r25
    1aea:	11 50       	subi	r17, 0x01	; 1
    1aec:	28 e0       	ldi	r18, 0x08	; 8
    1aee:	02 9f       	mul	r16, r18
    1af0:	10 19       	sub	r17, r0
    1af2:	11 24       	eor	r1, r1
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <HX711_read_raw+0x4a>
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	1a 95       	dec	r17
    1b00:	e2 f7       	brpl	.-8      	; 0x1afa <HX711_read_raw+0x46>
    1b02:	95 81       	ldd	r25, Z+5	; 0x05
    1b04:	89 2b       	or	r24, r25
    1b06:	85 83       	std	Z+5, r24	; 0x05
			self->bitcount--;
    1b08:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0a:	81 50       	subi	r24, 0x01	; 1
    1b0c:	8c 83       	std	Y+4, r24	; 0x04
			if(self->bitcount == 16)
    1b0e:	80 31       	cpi	r24, 0x10	; 16
    1b10:	19 f4       	brne	.+6      	; 0x1b18 <HX711_read_raw+0x64>
				self->bufferindex=2;
    1b12:	82 e0       	ldi	r24, 0x02	; 2
    1b14:	89 87       	std	Y+9, r24	; 0x09
    1b16:	22 c0       	rjmp	.+68     	; 0x1b5c <HX711_read_raw+0xa8>
			if(self->bitcount == 8)
    1b18:	88 30       	cpi	r24, 0x08	; 8
    1b1a:	01 f5       	brne	.+64     	; 0x1b5c <HX711_read_raw+0xa8>
				self->bufferindex=ONE;
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	89 87       	std	Y+9, r24	; 0x09
    1b20:	1d c0       	rjmp	.+58     	; 0x1b5c <HX711_read_raw+0xa8>
		}else{
			if(self->ampcount){
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	88 23       	and	r24, r24
				HX711_read_bit();
    1b26:	29 f0       	breq	.+10     	; 0x1b32 <HX711_read_raw+0x7e>
    1b28:	12 df       	rcall	.-476    	; 0x194e <HX711_read_bit>
				self->ampcount--;
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	81 50       	subi	r24, 0x01	; 1
    1b2e:	8b 83       	std	Y+3, r24	; 0x03
    1b30:	15 c0       	rjmp	.+42     	; 0x1b5c <HX711_read_raw+0xa8>
			}else{
				value = *(ptr);
				self->raw_reading = value;
    1b32:	8d 81       	ldd	r24, Y+5	; 0x05
    1b34:	9e 81       	ldd	r25, Y+6	; 0x06
    1b36:	af 81       	ldd	r26, Y+7	; 0x07
    1b38:	b8 85       	ldd	r27, Y+8	; 0x08
    1b3a:	8a 87       	std	Y+10, r24	; 0x0a
    1b3c:	9b 87       	std	Y+11, r25	; 0x0b
    1b3e:	ac 87       	std	Y+12, r26	; 0x0c
    1b40:	bd 87       	std	Y+13, r27	; 0x0d
				self->bitcount = HX711_ADC_bits;
    1b42:	88 e1       	ldi	r24, 0x18	; 24
    1b44:	8c 83       	std	Y+4, r24	; 0x04
				self->bufferindex = HX711_VECT_SIZE-ONE;
    1b46:	83 e0       	ldi	r24, 0x03	; 3
    1b48:	89 87       	std	Y+9, r24	; 0x09
				self->ampcount = self->amplify;
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	8b 83       	std	Y+3, r24	; 0x03
				self->buffer[0] = ZERO;
    1b4e:	1d 82       	std	Y+5, r1	; 0x05
				self->buffer[1] = ZERO;
    1b50:	1e 82       	std	Y+6, r1	; 0x06
				self->buffer[2] = ZERO;
    1b52:	1f 82       	std	Y+7, r1	; 0x07
				self->buffer[3] = ZERO;
    1b54:	18 86       	std	Y+8, r1	; 0x08
				self->trigger = ONE;
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	89 83       	std	Y+1, r24	; 0x01
//{
	//self->readflag=ON;
//}
void HX711_reset_readflag(HX711* self)
{
	self->readflag=OFF;
    1b5a:	18 82       	st	Y, r1
				/***Reset ready for next query***/
				HX711_reset_readflag(self);
			}
		}
	}
	return self->raw_reading;
    1b5c:	6a 85       	ldd	r22, Y+10	; 0x0a
    1b5e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1b60:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b62:	9d 85       	ldd	r25, Y+13	; 0x0d
}
    1b64:	df 91       	pop	r29
    1b66:	cf 91       	pop	r28
    1b68:	1f 91       	pop	r17
    1b6a:	0f 91       	pop	r16
    1b6c:	08 95       	ret

00001b6e <HX711enable>:
float HX711_raw_average(HX711* self, uint8_t n);
uint8_t HX711_get_readflag(HX711* self);
struct HX711_calibration* HX711_get_cal(HX711* self);
/***Procedure & Function***/
HX711 HX711enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port, uint8_t datapin, uint8_t clkpin)
{
    1b6e:	ef 92       	push	r14
    1b70:	0f 93       	push	r16
    1b72:	fc 01       	movw	r30, r24
    1b74:	da 01       	movw	r26, r20
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG = STATUS_REGISTER;
    1b76:	5f b7       	in	r21, 0x3f	; 63
	STATUS_REGISTER &= ~(1<<GLOBAL_INTERRUPT_ENABLE);
    1b78:	8f b7       	in	r24, 0x3f	; 63
    1b7a:	8f 77       	andi	r24, 0x7F	; 127
    1b7c:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	HX711 hx711;
	//import parametros
	hx711_DDR = ddr;
    1b7e:	70 93 75 01 	sts	0x0175, r23	; 0x800175 <hx711_DDR+0x1>
    1b82:	60 93 74 01 	sts	0x0174, r22	; 0x800174 <hx711_DDR>
	hx711_PIN = pin;
    1b86:	b0 93 6e 01 	sts	0x016E, r27	; 0x80016e <hx711_PIN+0x1>
    1b8a:	a0 93 6d 01 	sts	0x016D, r26	; 0x80016d <hx711_PIN>
	hx711_PORT = port;
    1b8e:	30 93 70 01 	sts	0x0170, r19	; 0x800170 <hx711_PORT+0x1>
    1b92:	20 93 6f 01 	sts	0x016F, r18	; 0x80016f <hx711_PORT>
	hx711_datapin = datapin;
    1b96:	00 93 6c 01 	sts	0x016C, r16	; 0x80016c <hx711_datapin>
	hx711_clkpin = clkpin;
    1b9a:	e0 92 73 01 	sts	0x0173, r14	; 0x800173 <hx711_clkpin>
	//inic variables
	*hx711_DDR |= (ONE<<clkpin);
    1b9e:	db 01       	movw	r26, r22
    1ba0:	4c 91       	ld	r20, X
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	9c 01       	movw	r18, r24
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <HX711enable+0x40>
    1baa:	22 0f       	add	r18, r18
    1bac:	33 1f       	adc	r19, r19
    1bae:	ea 94       	dec	r14
    1bb0:	e2 f7       	brpl	.-8      	; 0x1baa <HX711enable+0x3c>
    1bb2:	24 2b       	or	r18, r20
    1bb4:	2c 93       	st	X, r18
	*hx711_PORT |= (ONE<<datapin);
    1bb6:	a0 91 6f 01 	lds	r26, 0x016F	; 0x80016f <hx711_PORT>
    1bba:	b0 91 70 01 	lds	r27, 0x0170	; 0x800170 <hx711_PORT+0x1>
    1bbe:	2c 91       	ld	r18, X
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <HX711enable+0x58>
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	0a 95       	dec	r16
    1bc8:	e2 f7       	brpl	.-8      	; 0x1bc2 <HX711enable+0x54>
    1bca:	82 2b       	or	r24, r18
    1bcc:	8c 93       	st	X, r24
	hx711.readflag = ZERO;
    1bce:	10 82       	st	Z, r1
	hx711.trigger = ZERO;
    1bd0:	11 82       	std	Z+1, r1	; 0x01
	hx711.amplify = ONE;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	82 83       	std	Z+2, r24	; 0x02
	hx711.ampcount = ONE;
    1bd6:	83 83       	std	Z+3, r24	; 0x03
	hx711.bitcount = HX711_ADC_bits;
    1bd8:	88 e1       	ldi	r24, 0x18	; 24
    1bda:	84 83       	std	Z+4, r24	; 0x04
	hx711.buffer[0] = ZERO;
    1bdc:	15 82       	std	Z+5, r1	; 0x05
	hx711.buffer[1] = ZERO;
    1bde:	16 82       	std	Z+6, r1	; 0x06
	hx711.buffer[2] = ZERO;
    1be0:	17 82       	std	Z+7, r1	; 0x07
	hx711.buffer[3] = ZERO;
    1be2:	10 86       	std	Z+8, r1	; 0x08
	hx711.bufferindex = HX711_VECT_SIZE-ONE;
    1be4:	83 e0       	ldi	r24, 0x03	; 3
    1be6:	81 87       	std	Z+9, r24	; 0x09
	hx711.raw_reading = ZERO;
    1be8:	12 86       	std	Z+10, r1	; 0x0a
    1bea:	13 86       	std	Z+11, r1	; 0x0b
    1bec:	14 86       	std	Z+12, r1	; 0x0c
    1bee:	15 86       	std	Z+13, r1	; 0x0d
	hx711.sum = ZERO;
    1bf0:	16 86       	std	Z+14, r1	; 0x0e
    1bf2:	17 86       	std	Z+15, r1	; 0x0f
    1bf4:	10 8a       	std	Z+16, r1	; 0x10
    1bf6:	11 8a       	std	Z+17, r1	; 0x11
	hx711.av_n = ZERO;
    1bf8:	12 8a       	std	Z+18, r1	; 0x12
	hx711.raw_mean = ZERO;
    1bfa:	13 8a       	std	Z+19, r1	; 0x13
    1bfc:	14 8a       	std	Z+20, r1	; 0x14
    1bfe:	15 8a       	std	Z+21, r1	; 0x15
    1c00:	16 8a       	std	Z+22, r1	; 0x16
	// offset para mesa usada.
	hx711.cal_data.offset_32 = 36800; // to subtract B
    1c02:	80 ec       	ldi	r24, 0xC0	; 192
    1c04:	9f e8       	ldi	r25, 0x8F	; 143
    1c06:	a0 e0       	ldi	r26, 0x00	; 0
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	87 8b       	std	Z+23, r24	; 0x17
    1c0c:	90 8f       	std	Z+24, r25	; 0x18
    1c0e:	a1 8f       	std	Z+25, r26	; 0x19
    1c10:	b2 8f       	std	Z+26, r27	; 0x1a
	hx711.cal_data.offset_64 = 72700; // to subtract A 64
    1c12:	8c ef       	ldi	r24, 0xFC	; 252
    1c14:	9b e1       	ldi	r25, 0x1B	; 27
    1c16:	a1 e0       	ldi	r26, 0x01	; 1
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	83 8f       	std	Z+27, r24	; 0x1b
    1c1c:	94 8f       	std	Z+28, r25	; 0x1c
    1c1e:	a5 8f       	std	Z+29, r26	; 0x1d
    1c20:	b6 8f       	std	Z+30, r27	; 0x1e
	hx711.cal_data.offset_128 = 147200; // to subtract A 128
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	9f e3       	ldi	r25, 0x3F	; 63
    1c26:	a2 e0       	ldi	r26, 0x02	; 2
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	87 8f       	std	Z+31, r24	; 0x1f
    1c2c:	90 a3       	std	Z+32, r25	; 0x20
    1c2e:	a1 a3       	std	Z+33, r26	; 0x21
    1c30:	b2 a3       	std	Z+34, r27	; 0x22
	//div factor
	hx711.cal_data.divfactor_32=23; // to divide
    1c32:	87 e1       	ldi	r24, 0x17	; 23
    1c34:	83 a3       	std	Z+35, r24	; 0x23
	hx711.cal_data.divfactor_64=46; // to divide
    1c36:	8e e2       	ldi	r24, 0x2E	; 46
    1c38:	84 a3       	std	Z+36, r24	; 0x24
	hx711.cal_data.divfactor_128=92; // to divide
    1c3a:	8c e5       	ldi	r24, 0x5C	; 92
    1c3c:	85 a3       	std	Z+37, r24	; 0x25
	hx711.cal_data.status=ZERO;
    1c3e:	16 a2       	std	Z+38, r1	; 0x26
	//Direccionar apontadores para PROTOTIPOS
	//hx711.set_readflag=HX711_set_readflag;
	hx711.read_bit=HX711_read_bit;
    1c40:	87 ea       	ldi	r24, 0xA7	; 167
    1c42:	9c e0       	ldi	r25, 0x0C	; 12
    1c44:	90 a7       	std	Z+40, r25	; 0x28
    1c46:	87 a3       	std	Z+39, r24	; 0x27
	hx711.set_amplify=HX711_set_amplify;
    1c48:	8b ed       	ldi	r24, 0xDB	; 219
    1c4a:	9c e0       	ldi	r25, 0x0C	; 12
    1c4c:	92 a7       	std	Z+42, r25	; 0x2a
    1c4e:	81 a7       	std	Z+41, r24	; 0x29
	hx711.query=HX711_query;
    1c50:	86 ef       	ldi	r24, 0xF6	; 246
    1c52:	9c e0       	ldi	r25, 0x0C	; 12
    1c54:	94 a7       	std	Z+44, r25	; 0x2c
    1c56:	83 a7       	std	Z+43, r24	; 0x2b
	hx711.read_raw=HX711_read_raw;
    1c58:	8a e5       	ldi	r24, 0x5A	; 90
    1c5a:	9d e0       	ldi	r25, 0x0D	; 13
    1c5c:	96 a7       	std	Z+46, r25	; 0x2e
    1c5e:	85 a7       	std	Z+45, r24	; 0x2d
	hx711.raw_average=HX711_raw_average;
    1c60:	82 e1       	ldi	r24, 0x12	; 18
    1c62:	9d e0       	ldi	r25, 0x0D	; 13
    1c64:	90 ab       	std	Z+48, r25	; 0x30
    1c66:	87 a7       	std	Z+47, r24	; 0x2f
	hx711.get_readflag=HX711_get_readflag;
    1c68:	85 e5       	ldi	r24, 0x55	; 85
    1c6a:	9d e0       	ldi	r25, 0x0D	; 13
    1c6c:	92 ab       	std	Z+50, r25	; 0x32
    1c6e:	81 ab       	std	Z+49, r24	; 0x31
	hx711.get_cal=HX711_get_cal;
    1c70:	88 e5       	ldi	r24, 0x58	; 88
    1c72:	9d e0       	ldi	r25, 0x0D	; 13
    1c74:	94 ab       	std	Z+52, r25	; 0x34
    1c76:	83 ab       	std	Z+51, r24	; 0x33
	STATUS_REGISTER = tSREG;
    1c78:	5f bf       	out	0x3f, r21	; 63
	// returns a copy
	return hx711;
}
    1c7a:	cf 01       	movw	r24, r30
    1c7c:	0f 91       	pop	r16
    1c7e:	ef 90       	pop	r14
    1c80:	08 95       	ret

00001c82 <PORTINIT>:
** procedure and function
*/
void PORTINIT(void)
{
	//Control buttons
	PORTF |= IMASK;
    1c82:	e2 e6       	ldi	r30, 0x62	; 98
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	8f 63       	ori	r24, 0x3F	; 63
    1c8a:	80 83       	st	Z, r24
	//troubleshooting output
	DDRC = 0xFF;
    1c8c:	8f ef       	ldi	r24, 0xFF	; 255
    1c8e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
    1c90:	85 bb       	out	0x15, r24	; 21
    1c92:	08 95       	ret

00001c94 <main>:
** Header
*/
void PORTINIT();
/****MAIN****/
int main(void)
{
    1c94:	cf 93       	push	r28
    1c96:	df 93       	push	r29
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	cd 5b       	subi	r28, 0xBD	; 189
    1c9e:	d1 09       	sbc	r29, r1
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	cd bf       	out	0x3d, r28	; 61
	PORTINIT();
    1caa:	eb df       	rcall	.-42     	; 0x1c82 <PORTINIT>
	
	HX711_ptr = &HX711_data; // CALIBRATION DATA BUS
    1cac:	0f 2e       	mov	r0, r31
    1cae:	f0 eb       	ldi	r31, 0xB0	; 176
    1cb0:	cf 2e       	mov	r12, r31
    1cb2:	f1 e0       	ldi	r31, 0x01	; 1
    1cb4:	df 2e       	mov	r13, r31
    1cb6:	f0 2d       	mov	r31, r0
    1cb8:	d0 92 c1 01 	sts	0x01C1, r13	; 0x8001c1 <HX711_ptr+0x1>
    1cbc:	c0 92 c0 01 	sts	0x01C0, r12	; 0x8001c0 <HX711_ptr>
	
	/***INICIALIZE OBJECTS***/
	F = EXPLODEenable();
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	83 5a       	subi	r24, 0xA3	; 163
    1cc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc6:	0e 94 46 04 	call	0x88c	; 0x88c <EXPLODEenable>
    1cca:	84 e1       	ldi	r24, 0x14	; 20
    1ccc:	fe 01       	movw	r30, r28
    1cce:	e3 5a       	subi	r30, 0xA3	; 163
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	ad e2       	ldi	r26, 0x2D	; 45
    1cd4:	b2 e0       	ldi	r27, 0x02	; 2
    1cd6:	01 90       	ld	r0, Z+
    1cd8:	0d 92       	st	X+, r0
    1cda:	8a 95       	dec	r24
    1cdc:	e1 f7       	brne	.-8      	; 0x1cd6 <main+0x42>
	FUNC function = FUNCenable();
    1cde:	ce 01       	movw	r24, r28
    1ce0:	01 96       	adiw	r24, 0x01	; 1
    1ce2:	04 da       	rcall	.-3064   	; 0x10ec <FUNCenable>
    1ce4:	2d 96       	adiw	r28, 0x0d	; 13
    1ce6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ce8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cea:	2d 97       	sbiw	r28, 0x0d	; 13
    1cec:	c4 54       	subi	r28, 0x44	; 68
    1cee:	df 4f       	sbci	r29, 0xFF	; 255
    1cf0:	99 83       	std	Y+1, r25	; 0x01
    1cf2:	88 83       	st	Y, r24
    1cf4:	cc 5b       	subi	r28, 0xBC	; 188
    1cf6:	d0 40       	sbci	r29, 0x00	; 0
	lcd0 = LCD0enable(&DDRA,&PINA,&PORTA);
    1cf8:	2b e3       	ldi	r18, 0x3B	; 59
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	49 e3       	ldi	r20, 0x39	; 57
    1cfe:	50 e0       	ldi	r21, 0x00	; 0
    1d00:	6a e3       	ldi	r22, 0x3A	; 58
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	ce 01       	movw	r24, r28
    1d06:	8f 58       	subi	r24, 0x8F	; 143
    1d08:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0a:	b2 dd       	rcall	.-1180   	; 0x1870 <LCD0enable>
    1d0c:	86 e1       	ldi	r24, 0x16	; 22
    1d0e:	fe 01       	movw	r30, r28
    1d10:	ef 58       	subi	r30, 0x8F	; 143
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	a2 ee       	ldi	r26, 0xE2	; 226
    1d16:	b1 e0       	ldi	r27, 0x01	; 1
    1d18:	01 90       	ld	r0, Z+
    1d1a:	0d 92       	st	X+, r0
    1d1c:	8a 95       	dec	r24
    1d1e:	e1 f7       	brne	.-8      	; 0x1d18 <main+0x84>
	timer0 = TIMER_COUNTER0enable(2,2); //2,2
    1d20:	42 e0       	ldi	r20, 0x02	; 2
    1d22:	62 e0       	ldi	r22, 0x02	; 2
    1d24:	ce 01       	movw	r24, r28
    1d26:	83 5a       	subi	r24, 0xA3	; 163
    1d28:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2a:	0e 94 13 02 	call	0x426	; 0x426 <TIMER_COUNTER0enable>
    1d2e:	80 e1       	ldi	r24, 0x10	; 16
    1d30:	fe 01       	movw	r30, r28
    1d32:	e3 5a       	subi	r30, 0xA3	; 163
    1d34:	ff 4f       	sbci	r31, 0xFF	; 255
    1d36:	aa e7       	ldi	r26, 0x7A	; 122
    1d38:	b1 e0       	ldi	r27, 0x01	; 1
    1d3a:	01 90       	ld	r0, Z+
    1d3c:	0d 92       	st	X+, r0
    1d3e:	8a 95       	dec	r24
    1d40:	e1 f7       	brne	.-8      	; 0x1d3a <main+0xa6>
	TIMER_COUNTER1 timer1 = TIMER_COUNTER1enable(4,2); //4,2
    1d42:	42 e0       	ldi	r20, 0x02	; 2
    1d44:	64 e0       	ldi	r22, 0x04	; 4
    1d46:	ce 01       	movw	r24, r28
    1d48:	83 5b       	subi	r24, 0xB3	; 179
    1d4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4c:	0e 94 57 02 	call	0x4ae	; 0x4ae <TIMER_COUNTER1enable>
	hx = HX711enable(&DDRF, &PINF, &PORTF, 6, 7); //6,7
    1d50:	0f 2e       	mov	r0, r31
    1d52:	f7 e0       	ldi	r31, 0x07	; 7
    1d54:	ef 2e       	mov	r14, r31
    1d56:	f0 2d       	mov	r31, r0
    1d58:	06 e0       	ldi	r16, 0x06	; 6
    1d5a:	22 e6       	ldi	r18, 0x62	; 98
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e2       	ldi	r20, 0x20	; 32
    1d60:	50 e0       	ldi	r21, 0x00	; 0
    1d62:	61 e6       	ldi	r22, 0x61	; 97
    1d64:	70 e0       	ldi	r23, 0x00	; 0
    1d66:	ce 01       	movw	r24, r28
    1d68:	89 57       	subi	r24, 0x79	; 121
    1d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6c:	00 df       	rcall	.-512    	; 0x1b6e <HX711enable>
    1d6e:	85 e3       	ldi	r24, 0x35	; 53
    1d70:	fe 01       	movw	r30, r28
    1d72:	e9 57       	subi	r30, 0x79	; 121
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	a8 ef       	ldi	r26, 0xF8	; 248
    1d78:	b1 e0       	ldi	r27, 0x01	; 1
    1d7a:	01 90       	ld	r0, Z+
    1d7c:	0d 92       	st	X+, r0
    1d7e:	8a 95       	dec	r24
    1d80:	e1 f7       	brne	.-8      	; 0x1d7a <main+0xe6>
	eprom = EEPROMenable();
    1d82:	ce 01       	movw	r24, r28
    1d84:	83 5a       	subi	r24, 0xA3	; 163
    1d86:	9f 4f       	sbci	r25, 0xFF	; 255
    1d88:	0e 94 bf 03 	call	0x77e	; 0x77e <EEPROMenable>
    1d8c:	8e e1       	ldi	r24, 0x1E	; 30
    1d8e:	fe 01       	movw	r30, r28
    1d90:	e3 5a       	subi	r30, 0xA3	; 163
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	aa e8       	ldi	r26, 0x8A	; 138
    1d96:	b1 e0       	ldi	r27, 0x01	; 1
    1d98:	01 90       	ld	r0, Z+
    1d9a:	0d 92       	st	X+, r0
    1d9c:	8a 95       	dec	r24
    1d9e:	e1 f7       	brne	.-8      	; 0x1d98 <main+0x104>
	
	float value=0;
	float publish=0;
	
	// Get default values to buss memory
	HX711_data.offset_32 = hx.get_cal(&hx)->offset_32;
    1da0:	08 ef       	ldi	r16, 0xF8	; 248
    1da2:	11 e0       	ldi	r17, 0x01	; 1
    1da4:	d8 01       	movw	r26, r16
    1da6:	d3 96       	adiw	r26, 0x33	; 51
    1da8:	ed 91       	ld	r30, X+
    1daa:	fc 91       	ld	r31, X
    1dac:	d4 97       	sbiw	r26, 0x34	; 52
    1dae:	c8 01       	movw	r24, r16
    1db0:	09 95       	icall
    1db2:	fc 01       	movw	r30, r24
    1db4:	80 81       	ld	r24, Z
    1db6:	91 81       	ldd	r25, Z+1	; 0x01
    1db8:	a2 81       	ldd	r26, Z+2	; 0x02
    1dba:	b3 81       	ldd	r27, Z+3	; 0x03
    1dbc:	f6 01       	movw	r30, r12
    1dbe:	80 83       	st	Z, r24
    1dc0:	91 83       	std	Z+1, r25	; 0x01
    1dc2:	a2 83       	std	Z+2, r26	; 0x02
    1dc4:	b3 83       	std	Z+3, r27	; 0x03
	HX711_data.offset_64 = hx.get_cal(&hx)->offset_64;
    1dc6:	d8 01       	movw	r26, r16
    1dc8:	d3 96       	adiw	r26, 0x33	; 51
    1dca:	ed 91       	ld	r30, X+
    1dcc:	fc 91       	ld	r31, X
    1dce:	d4 97       	sbiw	r26, 0x34	; 52
    1dd0:	c8 01       	movw	r24, r16
    1dd2:	09 95       	icall
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	84 81       	ldd	r24, Z+4	; 0x04
    1dd8:	95 81       	ldd	r25, Z+5	; 0x05
    1dda:	a6 81       	ldd	r26, Z+6	; 0x06
    1ddc:	b7 81       	ldd	r27, Z+7	; 0x07
    1dde:	f6 01       	movw	r30, r12
    1de0:	84 83       	std	Z+4, r24	; 0x04
    1de2:	95 83       	std	Z+5, r25	; 0x05
    1de4:	a6 83       	std	Z+6, r26	; 0x06
    1de6:	b7 83       	std	Z+7, r27	; 0x07
	HX711_data.offset_128 = hx.get_cal(&hx)->offset_128;
    1de8:	d8 01       	movw	r26, r16
    1dea:	d3 96       	adiw	r26, 0x33	; 51
    1dec:	ed 91       	ld	r30, X+
    1dee:	fc 91       	ld	r31, X
    1df0:	d4 97       	sbiw	r26, 0x34	; 52
    1df2:	c8 01       	movw	r24, r16
    1df4:	09 95       	icall
    1df6:	fc 01       	movw	r30, r24
    1df8:	80 85       	ldd	r24, Z+8	; 0x08
    1dfa:	91 85       	ldd	r25, Z+9	; 0x09
    1dfc:	a2 85       	ldd	r26, Z+10	; 0x0a
    1dfe:	b3 85       	ldd	r27, Z+11	; 0x0b
    1e00:	f6 01       	movw	r30, r12
    1e02:	80 87       	std	Z+8, r24	; 0x08
    1e04:	91 87       	std	Z+9, r25	; 0x09
    1e06:	a2 87       	std	Z+10, r26	; 0x0a
    1e08:	b3 87       	std	Z+11, r27	; 0x0b
	HX711_data.divfactor_32 = hx.get_cal(&hx)->divfactor_32;
    1e0a:	d8 01       	movw	r26, r16
    1e0c:	d3 96       	adiw	r26, 0x33	; 51
    1e0e:	ed 91       	ld	r30, X+
    1e10:	fc 91       	ld	r31, X
    1e12:	d4 97       	sbiw	r26, 0x34	; 52
    1e14:	c8 01       	movw	r24, r16
    1e16:	09 95       	icall
    1e18:	fc 01       	movw	r30, r24
    1e1a:	84 85       	ldd	r24, Z+12	; 0x0c
    1e1c:	d6 01       	movw	r26, r12
    1e1e:	1c 96       	adiw	r26, 0x0c	; 12
    1e20:	8c 93       	st	X, r24
	HX711_data.divfactor_64 = hx.get_cal(&hx)->divfactor_64;
    1e22:	d8 01       	movw	r26, r16
    1e24:	d3 96       	adiw	r26, 0x33	; 51
    1e26:	ed 91       	ld	r30, X+
    1e28:	fc 91       	ld	r31, X
    1e2a:	d4 97       	sbiw	r26, 0x34	; 52
    1e2c:	c8 01       	movw	r24, r16
    1e2e:	09 95       	icall
    1e30:	fc 01       	movw	r30, r24
    1e32:	85 85       	ldd	r24, Z+13	; 0x0d
    1e34:	d6 01       	movw	r26, r12
    1e36:	1d 96       	adiw	r26, 0x0d	; 13
    1e38:	8c 93       	st	X, r24
	HX711_data.divfactor_128 = hx.get_cal(&hx)->divfactor_128;
    1e3a:	d8 01       	movw	r26, r16
    1e3c:	d3 96       	adiw	r26, 0x33	; 51
    1e3e:	ed 91       	ld	r30, X+
    1e40:	fc 91       	ld	r31, X
    1e42:	d4 97       	sbiw	r26, 0x34	; 52
    1e44:	c8 01       	movw	r24, r16
    1e46:	09 95       	icall
    1e48:	fc 01       	movw	r30, r24
    1e4a:	86 85       	ldd	r24, Z+14	; 0x0e
    1e4c:	d6 01       	movw	r26, r12
    1e4e:	1e 96       	adiw	r26, 0x0e	; 14
    1e50:	8c 93       	st	X, r24
	HX711_data.status = hx.get_cal(&hx)->status;
    1e52:	d8 01       	movw	r26, r16
    1e54:	d3 96       	adiw	r26, 0x33	; 51
    1e56:	ed 91       	ld	r30, X+
    1e58:	fc 91       	ld	r31, X
    1e5a:	d4 97       	sbiw	r26, 0x34	; 52
    1e5c:	c8 01       	movw	r24, r16
    1e5e:	09 95       	icall
    1e60:	fc 01       	movw	r30, r24
    1e62:	87 85       	ldd	r24, Z+15	; 0x0f
    1e64:	d6 01       	movw	r26, r12
    1e66:	1f 96       	adiw	r26, 0x0f	; 15
    1e68:	8c 93       	st	X, r24
	
	/***Parameters timers***/
	timer0.compoutmode(1); // troubleshooting blinking PORTB 5
    1e6a:	0f 2e       	mov	r0, r31
    1e6c:	fa e7       	ldi	r31, 0x7A	; 122
    1e6e:	ef 2e       	mov	r14, r31
    1e70:	f1 e0       	ldi	r31, 0x01	; 1
    1e72:	ff 2e       	mov	r15, r31
    1e74:	f0 2d       	mov	r31, r0
    1e76:	d7 01       	movw	r26, r14
    1e78:	ed 91       	ld	r30, X+
    1e7a:	fc 91       	ld	r31, X
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	09 95       	icall
	/***79 and 8  -> 80 us***/
	timer0.compare(60); // 8 -> 79 -> 80 us, fine tunned = 8 -> 60 -> 30.4us
    1e80:	d7 01       	movw	r26, r14
    1e82:	16 96       	adiw	r26, 0x06	; 6
    1e84:	ed 91       	ld	r30, X+
    1e86:	fc 91       	ld	r31, X
    1e88:	17 97       	sbiw	r26, 0x07	; 7
    1e8a:	8c e3       	ldi	r24, 0x3C	; 60
    1e8c:	09 95       	icall
	timer0.start(8); // 1 -> 32 us , 8 -> 256 us , 32 64 128 256 1024
    1e8e:	d7 01       	movw	r26, r14
    1e90:	1c 96       	adiw	r26, 0x0c	; 12
    1e92:	ed 91       	ld	r30, X+
    1e94:	fc 91       	ld	r31, X
    1e96:	1d 97       	sbiw	r26, 0x0d	; 13
    1e98:	88 e0       	ldi	r24, 0x08	; 8
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	09 95       	icall
	
	// to be used to jump menu for calibration in progress
	timer1.compoutmodeA(1); // troubleshooting blinking PORTB 6
    1e9e:	2f 96       	adiw	r28, 0x0f	; 15
    1ea0:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ea2:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ea4:	2f 97       	sbiw	r28, 0x0f	; 15
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	09 95       	icall
	timer1.compareA(62800); // Freq = 256 -> 62800 -> 2 s
    1eaa:	65 96       	adiw	r28, 0x15	; 21
    1eac:	ee ad       	ldd	r30, Y+62	; 0x3e
    1eae:	ff ad       	ldd	r31, Y+63	; 0x3f
    1eb0:	65 97       	sbiw	r28, 0x15	; 21
    1eb2:	80 e5       	ldi	r24, 0x50	; 80
    1eb4:	95 ef       	ldi	r25, 0xF5	; 245
    1eb6:	09 95       	icall
	timer1.start(256);
    1eb8:	6b 96       	adiw	r28, 0x1b	; 27
    1eba:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ebc:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ebe:	6b 97       	sbiw	r28, 0x1b	; 27
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	91 e0       	ldi	r25, 0x01	; 1
    1ec4:	09 95       	icall
	
	//intx.set(1,0);
	
	// HX711 Gain
	hx.set_amplify(&hx, 64); // 32 64 128
    1ec6:	d8 01       	movw	r26, r16
    1ec8:	99 96       	adiw	r26, 0x29	; 41
    1eca:	ed 91       	ld	r30, X+
    1ecc:	fc 91       	ld	r31, X
    1ece:	9a 97       	sbiw	r26, 0x2a	; 42
    1ed0:	60 e4       	ldi	r22, 0x40	; 64
    1ed2:	c8 01       	movw	r24, r16
    1ed4:	09 95       	icall
	
	//Get stored calibration values and put them to effect
	eprom.read_block(HX711_ptr, (const void*) ZERO, sizeblock);
    1ed6:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <eprom+0x18>
    1eda:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <eprom+0x19>
    1ede:	40 e1       	ldi	r20, 0x10	; 16
    1ee0:	50 e0       	ldi	r21, 0x00	; 0
    1ee2:	60 e0       	ldi	r22, 0x00	; 0
    1ee4:	70 e0       	ldi	r23, 0x00	; 0
    1ee6:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <HX711_ptr>
    1eea:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    1eee:	09 95       	icall
	if(HX711_ptr->status == 1){
    1ef0:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    1ef4:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    1ef8:	87 85       	ldd	r24, Z+15	; 0x0f
    1efa:	81 30       	cpi	r24, 0x01	; 1
    1efc:	09 f0       	breq	.+2      	; 0x1f00 <main+0x26c>
    1efe:	70 c0       	rjmp	.+224    	; 0x1fe0 <main+0x34c>
		//Load stored value 
		hx.get_cal(&hx)->offset_32 = HX711_ptr->offset_32;
    1f00:	d8 01       	movw	r26, r16
    1f02:	d3 96       	adiw	r26, 0x33	; 51
    1f04:	ed 91       	ld	r30, X+
    1f06:	fc 91       	ld	r31, X
    1f08:	d4 97       	sbiw	r26, 0x34	; 52
    1f0a:	c8 01       	movw	r24, r16
    1f0c:	09 95       	icall
    1f0e:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    1f12:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    1f16:	40 81       	ld	r20, Z
    1f18:	51 81       	ldd	r21, Z+1	; 0x01
    1f1a:	62 81       	ldd	r22, Z+2	; 0x02
    1f1c:	73 81       	ldd	r23, Z+3	; 0x03
    1f1e:	fc 01       	movw	r30, r24
    1f20:	40 83       	st	Z, r20
    1f22:	51 83       	std	Z+1, r21	; 0x01
    1f24:	62 83       	std	Z+2, r22	; 0x02
    1f26:	73 83       	std	Z+3, r23	; 0x03
		hx.get_cal(&hx)->offset_64 = HX711_ptr->offset_64;
    1f28:	d8 01       	movw	r26, r16
    1f2a:	d3 96       	adiw	r26, 0x33	; 51
    1f2c:	ed 91       	ld	r30, X+
    1f2e:	fc 91       	ld	r31, X
    1f30:	d4 97       	sbiw	r26, 0x34	; 52
    1f32:	c8 01       	movw	r24, r16
    1f34:	09 95       	icall
    1f36:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    1f3a:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    1f3e:	44 81       	ldd	r20, Z+4	; 0x04
    1f40:	55 81       	ldd	r21, Z+5	; 0x05
    1f42:	66 81       	ldd	r22, Z+6	; 0x06
    1f44:	77 81       	ldd	r23, Z+7	; 0x07
    1f46:	fc 01       	movw	r30, r24
    1f48:	44 83       	std	Z+4, r20	; 0x04
    1f4a:	55 83       	std	Z+5, r21	; 0x05
    1f4c:	66 83       	std	Z+6, r22	; 0x06
    1f4e:	77 83       	std	Z+7, r23	; 0x07
		hx.get_cal(&hx)->offset_128 = HX711_ptr->offset_128;
    1f50:	d8 01       	movw	r26, r16
    1f52:	d3 96       	adiw	r26, 0x33	; 51
    1f54:	ed 91       	ld	r30, X+
    1f56:	fc 91       	ld	r31, X
    1f58:	d4 97       	sbiw	r26, 0x34	; 52
    1f5a:	c8 01       	movw	r24, r16
    1f5c:	09 95       	icall
    1f5e:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    1f62:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    1f66:	40 85       	ldd	r20, Z+8	; 0x08
    1f68:	51 85       	ldd	r21, Z+9	; 0x09
    1f6a:	62 85       	ldd	r22, Z+10	; 0x0a
    1f6c:	73 85       	ldd	r23, Z+11	; 0x0b
    1f6e:	fc 01       	movw	r30, r24
    1f70:	40 87       	std	Z+8, r20	; 0x08
    1f72:	51 87       	std	Z+9, r21	; 0x09
    1f74:	62 87       	std	Z+10, r22	; 0x0a
    1f76:	73 87       	std	Z+11, r23	; 0x0b
		hx.get_cal(&hx)->divfactor_32 = HX711_ptr->divfactor_32;
    1f78:	d8 01       	movw	r26, r16
    1f7a:	d3 96       	adiw	r26, 0x33	; 51
    1f7c:	ed 91       	ld	r30, X+
    1f7e:	fc 91       	ld	r31, X
    1f80:	d4 97       	sbiw	r26, 0x34	; 52
    1f82:	c8 01       	movw	r24, r16
    1f84:	09 95       	icall
    1f86:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    1f8a:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    1f8e:	24 85       	ldd	r18, Z+12	; 0x0c
    1f90:	fc 01       	movw	r30, r24
    1f92:	24 87       	std	Z+12, r18	; 0x0c
		hx.get_cal(&hx)->divfactor_64 = HX711_ptr->divfactor_64;
    1f94:	d8 01       	movw	r26, r16
    1f96:	d3 96       	adiw	r26, 0x33	; 51
    1f98:	ed 91       	ld	r30, X+
    1f9a:	fc 91       	ld	r31, X
    1f9c:	d4 97       	sbiw	r26, 0x34	; 52
    1f9e:	c8 01       	movw	r24, r16
    1fa0:	09 95       	icall
    1fa2:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    1fa6:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    1faa:	25 85       	ldd	r18, Z+13	; 0x0d
    1fac:	fc 01       	movw	r30, r24
    1fae:	25 87       	std	Z+13, r18	; 0x0d
		hx.get_cal(&hx)->divfactor_128 = HX711_ptr->divfactor_128;
    1fb0:	d8 01       	movw	r26, r16
    1fb2:	d3 96       	adiw	r26, 0x33	; 51
    1fb4:	ed 91       	ld	r30, X+
    1fb6:	fc 91       	ld	r31, X
    1fb8:	d4 97       	sbiw	r26, 0x34	; 52
    1fba:	c8 01       	movw	r24, r16
    1fbc:	09 95       	icall
    1fbe:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    1fc2:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    1fc6:	26 85       	ldd	r18, Z+14	; 0x0e
    1fc8:	fc 01       	movw	r30, r24
    1fca:	26 87       	std	Z+14, r18	; 0x0e
		hx.get_cal(&hx)->status=ZERO;
    1fcc:	d8 01       	movw	r26, r16
    1fce:	d3 96       	adiw	r26, 0x33	; 51
    1fd0:	ed 91       	ld	r30, X+
    1fd2:	fc 91       	ld	r31, X
    1fd4:	d4 97       	sbiw	r26, 0x34	; 52
    1fd6:	c8 01       	movw	r24, r16
    1fd8:	09 95       	icall
    1fda:	fc 01       	movw	r30, r24
    1fdc:	17 86       	std	Z+15, r1	; 0x0f
		PORTC &= ~(ONE << 5); // troubleshooting
    1fde:	ad 98       	cbi	0x15, 5	; 21
	//lcd0.string_size(function.ftoa(HX711_data.status, result, ZERO), 13);
	//lcd0.string_size(function.ftoa(hx.get_cal(&hx)->offset_64, result, ZERO), 13);
	/***********************************************************************************************/
	while(TRUE){
		/******PREAMBLE******/
		lcd0.reboot(); //Reboot LCD
    1fe0:	0f 2e       	mov	r0, r31
    1fe2:	f2 ee       	ldi	r31, 0xE2	; 226
    1fe4:	ef 2e       	mov	r14, r31
    1fe6:	f1 e0       	ldi	r31, 0x01	; 1
    1fe8:	ff 2e       	mov	r15, r31
    1fea:	f0 2d       	mov	r31, r0
		F.boot(&F,PINF); //PORTF INPUT READING
    1fec:	0f 2e       	mov	r0, r31
    1fee:	fd e2       	ldi	r31, 0x2D	; 45
    1ff0:	cf 2e       	mov	r12, r31
    1ff2:	f2 e0       	ldi	r31, 0x02	; 2
    1ff4:	df 2e       	mov	r13, r31
    1ff6:	f0 2d       	mov	r31, r0
		hx.query(&hx); //Start reading ADC
    1ff8:	08 ef       	ldi	r16, 0xF8	; 248
    1ffa:	11 e0       	ldi	r17, 0x01	; 1
				
				
				
				// Jump Menus signal
				if(signal == 2){
					Menu = '1';
    1ffc:	0f 2e       	mov	r0, r31
    1ffe:	f1 e3       	ldi	r31, 0x31	; 49
    2000:	3f 2e       	mov	r3, r31
    2002:	f0 2d       	mov	r31, r0
				
				//lcd0.gotoxy(1,0); // for troubleshooting
				//lcd0.string_size(function.ftoa(hx.read_raw(&hx), result, ZERO), 13);
				
				if(F.hl(&F) & ONE){ // calibrate offset by pressing button 1
					HX711_data.offset_32 = tmp;
    2004:	0f 2e       	mov	r0, r31
    2006:	f0 eb       	ldi	r31, 0xB0	; 176
    2008:	8f 2e       	mov	r8, r31
    200a:	f1 e0       	ldi	r31, 0x01	; 1
    200c:	9f 2e       	mov	r9, r31
    200e:	f0 2d       	mov	r31, r0
					HX711_data.offset_64 = tmp;
					HX711_data.offset_128 = tmp;
					HX711_data.divfactor_32 = hx.get_cal(&hx)->divfactor_32;
					HX711_data.divfactor_64 = hx.get_cal(&hx)->divfactor_64;
					HX711_data.divfactor_128 = hx.get_cal(&hx)->divfactor_128;
					HX711_data.status = ONE;
    2010:	22 24       	eor	r2, r2
    2012:	23 94       	inc	r2
	//lcd0.string_size(function.ftoa(HX711_data.status, result, ZERO), 13);
	//lcd0.string_size(function.ftoa(hx.get_cal(&hx)->offset_64, result, ZERO), 13);
	/***********************************************************************************************/
	while(TRUE){
		/******PREAMBLE******/
		lcd0.reboot(); //Reboot LCD
    2014:	d7 01       	movw	r26, r14
    2016:	54 96       	adiw	r26, 0x14	; 20
    2018:	ed 91       	ld	r30, X+
    201a:	fc 91       	ld	r31, X
    201c:	55 97       	sbiw	r26, 0x15	; 21
    201e:	09 95       	icall
		F.boot(&F,PINF); //PORTF INPUT READING
    2020:	60 b1       	in	r22, 0x00	; 0
    2022:	d6 01       	movw	r26, r12
    2024:	14 96       	adiw	r26, 0x04	; 4
    2026:	ed 91       	ld	r30, X+
    2028:	fc 91       	ld	r31, X
    202a:	15 97       	sbiw	r26, 0x05	; 5
    202c:	c6 01       	movw	r24, r12
    202e:	09 95       	icall
		hx.query(&hx); //Start reading ADC
    2030:	d8 01       	movw	r26, r16
    2032:	9b 96       	adiw	r26, 0x2b	; 43
    2034:	ed 91       	ld	r30, X+
    2036:	fc 91       	ld	r31, X
    2038:	9c 97       	sbiw	r26, 0x2c	; 44
    203a:	c8 01       	movw	r24, r16
    203c:	09 95       	icall
		/************INPUT***********/
		tmp = hx.raw_average(&hx, average_n); // average_n  25 or 50, smaller means faster or more readings
    203e:	d8 01       	movw	r26, r16
    2040:	9f 96       	adiw	r26, 0x2f	; 47
    2042:	ed 91       	ld	r30, X+
    2044:	fc 91       	ld	r31, X
    2046:	d0 97       	sbiw	r26, 0x30	; 48
    2048:	68 e1       	ldi	r22, 0x18	; 24
    204a:	c8 01       	movw	r24, r16
    204c:	09 95       	icall
    204e:	60 93 76 01 	sts	0x0176, r22	; 0x800176 <tmp>
    2052:	70 93 77 01 	sts	0x0177, r23	; 0x800177 <tmp+0x1>
    2056:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <tmp+0x2>
    205a:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <tmp+0x3>
		
		
		/****************************/
		switch(Menu){
    205e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Menu>
    2062:	82 33       	cpi	r24, 0x32	; 50
    2064:	09 f4       	brne	.+2      	; 0x2068 <main+0x3d4>
    2066:	7a c1       	rjmp	.+756    	; 0x235c <main+0x6c8>
    2068:	83 33       	cpi	r24, 0x33	; 51
    206a:	09 f4       	brne	.+2      	; 0x206e <main+0x3da>
    206c:	98 c1       	rjmp	.+816    	; 0x239e <main+0x70a>
    206e:	81 33       	cpi	r24, 0x31	; 49
    2070:	09 f0       	breq	.+2      	; 0x2074 <main+0x3e0>
    2072:	a9 c1       	rjmp	.+850    	; 0x23c6 <main+0x732>
			/***MENU 1***/
			case '1': // Main Program Menu
				lcd0.gotoxy(0,3); //TITLE
    2074:	d7 01       	movw	r26, r14
    2076:	52 96       	adiw	r26, 0x12	; 18
    2078:	ed 91       	ld	r30, X+
    207a:	fc 91       	ld	r31, X
    207c:	53 97       	sbiw	r26, 0x13	; 19
    207e:	63 e0       	ldi	r22, 0x03	; 3
    2080:	70 e0       	ldi	r23, 0x00	; 0
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	09 95       	icall
				lcd0.string_size("Weight Scale", 12); //TITLE
    2088:	d7 01       	movw	r26, r14
    208a:	1c 96       	adiw	r26, 0x0c	; 12
    208c:	ed 91       	ld	r30, X+
    208e:	fc 91       	ld	r31, X
    2090:	1d 97       	sbiw	r26, 0x0d	; 13
    2092:	6c e0       	ldi	r22, 0x0C	; 12
    2094:	82 e0       	ldi	r24, 0x02	; 2
    2096:	91 e0       	ldi	r25, 0x01	; 1
    2098:	09 95       	icall
				
				//lcd0.gotoxy(1,0); // for troubleshooting
				//lcd0.string_size(function.ftoa(hx.read_raw(&hx), result, ZERO), 13);
				
				if(F.hl(&F) & ONE){ // calibrate offset by pressing button 1
    209a:	d6 01       	movw	r26, r12
    209c:	1e 96       	adiw	r26, 0x0e	; 14
    209e:	ed 91       	ld	r30, X+
    20a0:	fc 91       	ld	r31, X
    20a2:	1f 97       	sbiw	r26, 0x0f	; 15
    20a4:	c6 01       	movw	r24, r12
    20a6:	09 95       	icall
    20a8:	80 ff       	sbrs	r24, 0
    20aa:	b9 c0       	rjmp	.+370    	; 0x221e <main+0x58a>
					HX711_data.offset_32 = tmp;
    20ac:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <tmp>
    20b0:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <tmp+0x1>
    20b4:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <tmp+0x2>
    20b8:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <tmp+0x3>
    20bc:	21 d3       	rcall	.+1602   	; 0x2700 <__fixsfsi>
    20be:	f4 01       	movw	r30, r8
    20c0:	60 83       	st	Z, r22
    20c2:	71 83       	std	Z+1, r23	; 0x01
    20c4:	82 83       	std	Z+2, r24	; 0x02
    20c6:	93 83       	std	Z+3, r25	; 0x03
					HX711_data.offset_64 = tmp;
    20c8:	64 83       	std	Z+4, r22	; 0x04
    20ca:	75 83       	std	Z+5, r23	; 0x05
    20cc:	86 83       	std	Z+6, r24	; 0x06
    20ce:	97 83       	std	Z+7, r25	; 0x07
					HX711_data.offset_128 = tmp;
    20d0:	60 87       	std	Z+8, r22	; 0x08
    20d2:	71 87       	std	Z+9, r23	; 0x09
    20d4:	82 87       	std	Z+10, r24	; 0x0a
    20d6:	93 87       	std	Z+11, r25	; 0x0b
					HX711_data.divfactor_32 = hx.get_cal(&hx)->divfactor_32;
    20d8:	d8 01       	movw	r26, r16
    20da:	d3 96       	adiw	r26, 0x33	; 51
    20dc:	ed 91       	ld	r30, X+
    20de:	fc 91       	ld	r31, X
    20e0:	d4 97       	sbiw	r26, 0x34	; 52
    20e2:	c8 01       	movw	r24, r16
    20e4:	09 95       	icall
    20e6:	fc 01       	movw	r30, r24
    20e8:	84 85       	ldd	r24, Z+12	; 0x0c
    20ea:	d4 01       	movw	r26, r8
    20ec:	1c 96       	adiw	r26, 0x0c	; 12
    20ee:	8c 93       	st	X, r24
					HX711_data.divfactor_64 = hx.get_cal(&hx)->divfactor_64;
    20f0:	d8 01       	movw	r26, r16
    20f2:	d3 96       	adiw	r26, 0x33	; 51
    20f4:	ed 91       	ld	r30, X+
    20f6:	fc 91       	ld	r31, X
    20f8:	d4 97       	sbiw	r26, 0x34	; 52
    20fa:	c8 01       	movw	r24, r16
    20fc:	09 95       	icall
    20fe:	fc 01       	movw	r30, r24
    2100:	85 85       	ldd	r24, Z+13	; 0x0d
    2102:	d4 01       	movw	r26, r8
    2104:	1d 96       	adiw	r26, 0x0d	; 13
    2106:	8c 93       	st	X, r24
					HX711_data.divfactor_128 = hx.get_cal(&hx)->divfactor_128;
    2108:	d8 01       	movw	r26, r16
    210a:	d3 96       	adiw	r26, 0x33	; 51
    210c:	ed 91       	ld	r30, X+
    210e:	fc 91       	ld	r31, X
    2110:	d4 97       	sbiw	r26, 0x34	; 52
    2112:	c8 01       	movw	r24, r16
    2114:	09 95       	icall
    2116:	fc 01       	movw	r30, r24
    2118:	86 85       	ldd	r24, Z+14	; 0x0e
    211a:	d4 01       	movw	r26, r8
    211c:	1e 96       	adiw	r26, 0x0e	; 14
    211e:	8c 93       	st	X, r24
    2120:	1e 97       	sbiw	r26, 0x0e	; 14
					HX711_data.status = ONE;
    2122:	1f 96       	adiw	r26, 0x0f	; 15
    2124:	2c 92       	st	X, r2
					eprom.update_block(HX711_ptr, (void*) ZERO, sizeblock);
    2126:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <eprom+0x1c>
    212a:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <eprom+0x1d>
    212e:	40 e1       	ldi	r20, 0x10	; 16
    2130:	50 e0       	ldi	r21, 0x00	; 0
    2132:	60 e0       	ldi	r22, 0x00	; 0
    2134:	70 e0       	ldi	r23, 0x00	; 0
    2136:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <HX711_ptr>
    213a:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    213e:	09 95       	icall
					hx.get_cal(&hx)->offset_32 = HX711_ptr->offset_32;
    2140:	d8 01       	movw	r26, r16
    2142:	d3 96       	adiw	r26, 0x33	; 51
    2144:	ed 91       	ld	r30, X+
    2146:	fc 91       	ld	r31, X
    2148:	d4 97       	sbiw	r26, 0x34	; 52
    214a:	c8 01       	movw	r24, r16
    214c:	09 95       	icall
    214e:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    2152:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    2156:	40 81       	ld	r20, Z
    2158:	51 81       	ldd	r21, Z+1	; 0x01
    215a:	62 81       	ldd	r22, Z+2	; 0x02
    215c:	73 81       	ldd	r23, Z+3	; 0x03
    215e:	fc 01       	movw	r30, r24
    2160:	40 83       	st	Z, r20
    2162:	51 83       	std	Z+1, r21	; 0x01
    2164:	62 83       	std	Z+2, r22	; 0x02
    2166:	73 83       	std	Z+3, r23	; 0x03
					hx.get_cal(&hx)->offset_64 = HX711_ptr->offset_64;
    2168:	d8 01       	movw	r26, r16
    216a:	d3 96       	adiw	r26, 0x33	; 51
    216c:	ed 91       	ld	r30, X+
    216e:	fc 91       	ld	r31, X
    2170:	d4 97       	sbiw	r26, 0x34	; 52
    2172:	c8 01       	movw	r24, r16
    2174:	09 95       	icall
    2176:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    217a:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    217e:	44 81       	ldd	r20, Z+4	; 0x04
    2180:	55 81       	ldd	r21, Z+5	; 0x05
    2182:	66 81       	ldd	r22, Z+6	; 0x06
    2184:	77 81       	ldd	r23, Z+7	; 0x07
    2186:	fc 01       	movw	r30, r24
    2188:	44 83       	std	Z+4, r20	; 0x04
    218a:	55 83       	std	Z+5, r21	; 0x05
    218c:	66 83       	std	Z+6, r22	; 0x06
    218e:	77 83       	std	Z+7, r23	; 0x07
					hx.get_cal(&hx)->offset_128 = HX711_ptr->offset_128;
    2190:	d8 01       	movw	r26, r16
    2192:	d3 96       	adiw	r26, 0x33	; 51
    2194:	ed 91       	ld	r30, X+
    2196:	fc 91       	ld	r31, X
    2198:	d4 97       	sbiw	r26, 0x34	; 52
    219a:	c8 01       	movw	r24, r16
    219c:	09 95       	icall
    219e:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    21a2:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    21a6:	40 85       	ldd	r20, Z+8	; 0x08
    21a8:	51 85       	ldd	r21, Z+9	; 0x09
    21aa:	62 85       	ldd	r22, Z+10	; 0x0a
    21ac:	73 85       	ldd	r23, Z+11	; 0x0b
    21ae:	fc 01       	movw	r30, r24
    21b0:	40 87       	std	Z+8, r20	; 0x08
    21b2:	51 87       	std	Z+9, r21	; 0x09
    21b4:	62 87       	std	Z+10, r22	; 0x0a
    21b6:	73 87       	std	Z+11, r23	; 0x0b
					hx.get_cal(&hx)->divfactor_32 = HX711_ptr->divfactor_32;
    21b8:	d8 01       	movw	r26, r16
    21ba:	d3 96       	adiw	r26, 0x33	; 51
    21bc:	ed 91       	ld	r30, X+
    21be:	fc 91       	ld	r31, X
    21c0:	d4 97       	sbiw	r26, 0x34	; 52
    21c2:	c8 01       	movw	r24, r16
    21c4:	09 95       	icall
    21c6:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    21ca:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    21ce:	24 85       	ldd	r18, Z+12	; 0x0c
    21d0:	fc 01       	movw	r30, r24
    21d2:	24 87       	std	Z+12, r18	; 0x0c
					hx.get_cal(&hx)->divfactor_64 = HX711_ptr->divfactor_64;
    21d4:	d8 01       	movw	r26, r16
    21d6:	d3 96       	adiw	r26, 0x33	; 51
    21d8:	ed 91       	ld	r30, X+
    21da:	fc 91       	ld	r31, X
    21dc:	d4 97       	sbiw	r26, 0x34	; 52
    21de:	c8 01       	movw	r24, r16
    21e0:	09 95       	icall
    21e2:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    21e6:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    21ea:	25 85       	ldd	r18, Z+13	; 0x0d
    21ec:	fc 01       	movw	r30, r24
    21ee:	25 87       	std	Z+13, r18	; 0x0d
					hx.get_cal(&hx)->divfactor_128 = HX711_ptr->divfactor_128;
    21f0:	d8 01       	movw	r26, r16
    21f2:	d3 96       	adiw	r26, 0x33	; 51
    21f4:	ed 91       	ld	r30, X+
    21f6:	fc 91       	ld	r31, X
    21f8:	d4 97       	sbiw	r26, 0x34	; 52
    21fa:	c8 01       	movw	r24, r16
    21fc:	09 95       	icall
    21fe:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    2202:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    2206:	26 85       	ldd	r18, Z+14	; 0x0e
    2208:	fc 01       	movw	r30, r24
    220a:	26 87       	std	Z+14, r18	; 0x0e
					hx.get_cal(&hx)->status=ZERO;
    220c:	d8 01       	movw	r26, r16
    220e:	d3 96       	adiw	r26, 0x33	; 51
    2210:	ed 91       	ld	r30, X+
    2212:	fc 91       	ld	r31, X
    2214:	d4 97       	sbiw	r26, 0x34	; 52
    2216:	c8 01       	movw	r24, r16
    2218:	09 95       	icall
    221a:	fc 01       	movw	r30, r24
    221c:	17 86       	std	Z+15, r1	; 0x0f
				}
				
				//value = (value - hx.get_cal(&hx)->offset_128) / hx.get_cal(&hx)->divfactor_128; //value to be published to LCD
				value = (tmp - hx.get_cal(&hx)->offset_64) / hx.get_cal(&hx)->divfactor_64; //value to be published to LCD
    221e:	40 90 76 01 	lds	r4, 0x0176	; 0x800176 <tmp>
    2222:	50 90 77 01 	lds	r5, 0x0177	; 0x800177 <tmp+0x1>
    2226:	60 90 78 01 	lds	r6, 0x0178	; 0x800178 <tmp+0x2>
    222a:	70 90 79 01 	lds	r7, 0x0179	; 0x800179 <tmp+0x3>
    222e:	d8 01       	movw	r26, r16
    2230:	d3 96       	adiw	r26, 0x33	; 51
    2232:	ed 91       	ld	r30, X+
    2234:	fc 91       	ld	r31, X
    2236:	d4 97       	sbiw	r26, 0x34	; 52
    2238:	c8 01       	movw	r24, r16
    223a:	09 95       	icall
    223c:	fc 01       	movw	r30, r24
    223e:	64 81       	ldd	r22, Z+4	; 0x04
    2240:	75 81       	ldd	r23, Z+5	; 0x05
    2242:	86 81       	ldd	r24, Z+6	; 0x06
    2244:	97 81       	ldd	r25, Z+7	; 0x07
    2246:	8f d2       	rcall	.+1310   	; 0x2766 <__floatsisf>
    2248:	9b 01       	movw	r18, r22
    224a:	ac 01       	movw	r20, r24
    224c:	c3 01       	movw	r24, r6
    224e:	b2 01       	movw	r22, r4
    2250:	86 d1       	rcall	.+780    	; 0x255e <__subsf3>
    2252:	2b 01       	movw	r4, r22
    2254:	3c 01       	movw	r6, r24
    2256:	d8 01       	movw	r26, r16
    2258:	d3 96       	adiw	r26, 0x33	; 51
    225a:	ed 91       	ld	r30, X+
    225c:	fc 91       	ld	r31, X
    225e:	d4 97       	sbiw	r26, 0x34	; 52
    2260:	c8 01       	movw	r24, r16
    2262:	09 95       	icall
    2264:	fc 01       	movw	r30, r24
    2266:	65 85       	ldd	r22, Z+13	; 0x0d
    2268:	70 e0       	ldi	r23, 0x00	; 0
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	7b d2       	rcall	.+1270   	; 0x2766 <__floatsisf>
    2270:	9b 01       	movw	r18, r22
    2272:	ac 01       	movw	r20, r24
    2274:	c3 01       	movw	r24, r6
    2276:	b2 01       	movw	r22, r4
    2278:	db d1       	rcall	.+950    	; 0x2630 <__divsf3>
    227a:	2b 01       	movw	r4, r22
				
				//lcd0.gotoxy(3,0);
				//lcd0.string_size(function.ftoa(hx.get_cal(&hx)->offset_64, result, ZERO), 13);
				
				//Display
				if (value > 1000 || value < -1000){
    227c:	3c 01       	movw	r6, r24
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	4a e7       	ldi	r20, 0x7A	; 122
    2284:	54 e4       	ldi	r21, 0x44	; 68
    2286:	1f d3       	rcall	.+1598   	; 0x28c6 <__gesf2>
    2288:	18 16       	cp	r1, r24
    228a:	4c f0       	brlt	.+18     	; 0x229e <main+0x60a>
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	4a e7       	ldi	r20, 0x7A	; 122
    2292:	54 ec       	ldi	r21, 0xC4	; 196
    2294:	c3 01       	movw	r24, r6
    2296:	b2 01       	movw	r22, r4
    2298:	c7 d1       	rcall	.+910    	; 0x2628 <__cmpsf2>
    229a:	88 23       	and	r24, r24
    229c:	5c f5       	brge	.+86     	; 0x22f4 <main+0x660>
					publish = value / 1000;
					lcd0.gotoxy(2,0);
    229e:	d7 01       	movw	r26, r14
    22a0:	52 96       	adiw	r26, 0x12	; 18
    22a2:	ed 91       	ld	r30, X+
    22a4:	fc 91       	ld	r31, X
    22a6:	53 97       	sbiw	r26, 0x13	; 19
    22a8:	60 e0       	ldi	r22, 0x00	; 0
    22aa:	70 e0       	ldi	r23, 0x00	; 0
    22ac:	82 e0       	ldi	r24, 0x02	; 2
    22ae:	90 e0       	ldi	r25, 0x00	; 0
					lcd0.string_size(function.ftoa(publish, result, 3), 13); lcd0.string_size("Kg", 4);
    22b0:	09 95       	icall
    22b2:	f7 01       	movw	r30, r14
    22b4:	a4 84       	ldd	r10, Z+12	; 0x0c
    22b6:	b5 84       	ldd	r11, Z+13	; 0x0d
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	4a e7       	ldi	r20, 0x7A	; 122
    22be:	54 e4       	ldi	r21, 0x44	; 68
    22c0:	c3 01       	movw	r24, r6
    22c2:	b2 01       	movw	r22, r4
    22c4:	b5 d1       	rcall	.+874    	; 0x2630 <__divsf3>
    22c6:	23 e0       	ldi	r18, 0x03	; 3
    22c8:	42 ec       	ldi	r20, 0xC2	; 194
    22ca:	51 e0       	ldi	r21, 0x01	; 1
    22cc:	c4 54       	subi	r28, 0x44	; 68
    22ce:	df 4f       	sbci	r29, 0xFF	; 255
    22d0:	e8 81       	ld	r30, Y
    22d2:	f9 81       	ldd	r31, Y+1	; 0x01
    22d4:	cc 5b       	subi	r28, 0xBC	; 188
    22d6:	d0 40       	sbci	r29, 0x00	; 0
    22d8:	09 95       	icall
    22da:	6d e0       	ldi	r22, 0x0D	; 13
    22dc:	f5 01       	movw	r30, r10
    22de:	09 95       	icall
    22e0:	d7 01       	movw	r26, r14
    22e2:	1c 96       	adiw	r26, 0x0c	; 12
    22e4:	ed 91       	ld	r30, X+
    22e6:	fc 91       	ld	r31, X
    22e8:	1d 97       	sbiw	r26, 0x0d	; 13
    22ea:	64 e0       	ldi	r22, 0x04	; 4
    22ec:	8f e0       	ldi	r24, 0x0F	; 15
    22ee:	91 e0       	ldi	r25, 0x01	; 1
    22f0:	09 95       	icall
    22f2:	25 c0       	rjmp	.+74     	; 0x233e <main+0x6aa>
				}else{
					publish = value;
					lcd0.gotoxy(2,0);
    22f4:	d7 01       	movw	r26, r14
    22f6:	52 96       	adiw	r26, 0x12	; 18
    22f8:	ed 91       	ld	r30, X+
    22fa:	fc 91       	ld	r31, X
    22fc:	53 97       	sbiw	r26, 0x13	; 19
    22fe:	60 e0       	ldi	r22, 0x00	; 0
    2300:	70 e0       	ldi	r23, 0x00	; 0
    2302:	82 e0       	ldi	r24, 0x02	; 2
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	09 95       	icall
					lcd0.string_size(function.ftoa(publish, result, ZERO), 13); lcd0.string_size("gram", 4);
    2308:	f7 01       	movw	r30, r14
    230a:	a4 84       	ldd	r10, Z+12	; 0x0c
    230c:	b5 84       	ldd	r11, Z+13	; 0x0d
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	42 ec       	ldi	r20, 0xC2	; 194
    2312:	51 e0       	ldi	r21, 0x01	; 1
    2314:	c3 01       	movw	r24, r6
    2316:	b2 01       	movw	r22, r4
    2318:	c4 54       	subi	r28, 0x44	; 68
    231a:	df 4f       	sbci	r29, 0xFF	; 255
    231c:	e8 81       	ld	r30, Y
    231e:	f9 81       	ldd	r31, Y+1	; 0x01
    2320:	cc 5b       	subi	r28, 0xBC	; 188
    2322:	d0 40       	sbci	r29, 0x00	; 0
    2324:	09 95       	icall
    2326:	6d e0       	ldi	r22, 0x0D	; 13
    2328:	f5 01       	movw	r30, r10
    232a:	09 95       	icall
    232c:	d7 01       	movw	r26, r14
    232e:	1c 96       	adiw	r26, 0x0c	; 12
    2330:	ed 91       	ld	r30, X+
    2332:	fc 91       	ld	r31, X
    2334:	1d 97       	sbiw	r26, 0x0d	; 13
    2336:	64 e0       	ldi	r22, 0x04	; 4
    2338:	82 e1       	ldi	r24, 0x12	; 18
    233a:	91 e0       	ldi	r25, 0x01	; 1
    233c:	09 95       	icall
				}
				
				// Jump Menu signal
				if(signal == 1){
    233e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    2342:	81 30       	cpi	r24, 0x01	; 1
    2344:	09 f0       	breq	.+2      	; 0x2348 <main+0x6b4>
    2346:	66 ce       	rjmp	.-820    	; 0x2014 <main+0x380>
					Menu = '2';
    2348:	b2 e3       	ldi	r27, 0x32	; 50
    234a:	b0 93 01 01 	sts	0x0101, r27	; 0x800101 <Menu>
					lcd0.clear();
    234e:	d7 01       	movw	r26, r14
    2350:	50 96       	adiw	r26, 0x10	; 16
    2352:	ed 91       	ld	r30, X+
    2354:	fc 91       	ld	r31, X
    2356:	51 97       	sbiw	r26, 0x11	; 17
    2358:	09 95       	icall
    235a:	5c ce       	rjmp	.-840    	; 0x2014 <main+0x380>
				
				break;
			/***MENU 2***/
			case '2': //
				/**/
				lcd0.gotoxy(0,3);
    235c:	d7 01       	movw	r26, r14
    235e:	52 96       	adiw	r26, 0x12	; 18
    2360:	ed 91       	ld	r30, X+
    2362:	fc 91       	ld	r31, X
    2364:	53 97       	sbiw	r26, 0x13	; 19
    2366:	63 e0       	ldi	r22, 0x03	; 3
    2368:	70 e0       	ldi	r23, 0x00	; 0
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	09 95       	icall
				lcd0.string_size("SETUP DIVFACTOR",15);
    2370:	d7 01       	movw	r26, r14
    2372:	1c 96       	adiw	r26, 0x0c	; 12
    2374:	ed 91       	ld	r30, X+
    2376:	fc 91       	ld	r31, X
    2378:	1d 97       	sbiw	r26, 0x0d	; 13
    237a:	6f e0       	ldi	r22, 0x0F	; 15
    237c:	87 e1       	ldi	r24, 0x17	; 23
    237e:	91 e0       	ldi	r25, 0x01	; 1
    2380:	09 95       	icall
				
				
				
				
				// Jump Menus signal
				if(signal == 2){
    2382:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    2386:	82 30       	cpi	r24, 0x02	; 2
    2388:	09 f0       	breq	.+2      	; 0x238c <main+0x6f8>
    238a:	44 ce       	rjmp	.-888    	; 0x2014 <main+0x380>
					Menu = '1';
    238c:	30 92 01 01 	sts	0x0101, r3	; 0x800101 <Menu>
					lcd0.clear();
    2390:	d7 01       	movw	r26, r14
    2392:	50 96       	adiw	r26, 0x10	; 16
    2394:	ed 91       	ld	r30, X+
    2396:	fc 91       	ld	r31, X
    2398:	51 97       	sbiw	r26, 0x11	; 17
    239a:	09 95       	icall
    239c:	3b ce       	rjmp	.-906    	; 0x2014 <main+0x380>
				}
				/**/
				break;
			/***MENU 3***/
			case '3': //
				lcd0.gotoxy(0,0);
    239e:	d7 01       	movw	r26, r14
    23a0:	52 96       	adiw	r26, 0x12	; 18
    23a2:	ed 91       	ld	r30, X+
    23a4:	fc 91       	ld	r31, X
    23a6:	53 97       	sbiw	r26, 0x13	; 19
    23a8:	60 e0       	ldi	r22, 0x00	; 0
    23aa:	70 e0       	ldi	r23, 0x00	; 0
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	09 95       	icall
				lcd0.string_size("Not being used",19);
    23b2:	d7 01       	movw	r26, r14
    23b4:	1c 96       	adiw	r26, 0x0c	; 12
    23b6:	ed 91       	ld	r30, X+
    23b8:	fc 91       	ld	r31, X
    23ba:	1d 97       	sbiw	r26, 0x0d	; 13
    23bc:	63 e1       	ldi	r22, 0x13	; 19
    23be:	87 e2       	ldi	r24, 0x27	; 39
    23c0:	91 e0       	ldi	r25, 0x01	; 1
    23c2:	09 95       	icall
				/***Play around***/
				break;
    23c4:	27 ce       	rjmp	.-946    	; 0x2014 <main+0x380>
				/********************************************************************/
			default:
				Menu = '1';
    23c6:	30 92 01 01 	sts	0x0101, r3	; 0x800101 <Menu>
				break;
    23ca:	24 ce       	rjmp	.-952    	; 0x2014 <main+0x380>

000023cc <__vector_15>:
//ISR(INT1_vect){	
//	PORTC ^= (ONE << 7);
//	intx.off(1);
//}
ISR(TIMER0_COMP_vect) // 15.4 us intervals
{
    23cc:	1f 92       	push	r1
    23ce:	0f 92       	push	r0
    23d0:	0f b6       	in	r0, 0x3f	; 63
    23d2:	0f 92       	push	r0
    23d4:	11 24       	eor	r1, r1
    23d6:	0b b6       	in	r0, 0x3b	; 59
    23d8:	0f 92       	push	r0
    23da:	2f 93       	push	r18
    23dc:	3f 93       	push	r19
    23de:	4f 93       	push	r20
    23e0:	5f 93       	push	r21
    23e2:	6f 93       	push	r22
    23e4:	7f 93       	push	r23
    23e6:	8f 93       	push	r24
    23e8:	9f 93       	push	r25
    23ea:	af 93       	push	r26
    23ec:	bf 93       	push	r27
    23ee:	cf 93       	push	r28
    23f0:	ef 93       	push	r30
    23f2:	ff 93       	push	r31
	/***Block other interrupts during this procedure***/
	uint8_t Sreg;
	Sreg = STATUS_REGISTER;
    23f4:	cf b7       	in	r28, 0x3f	; 63
	STATUS_REGISTER &= ~(ONE << GLOBAL_INTERRUPT_ENABLE);
    23f6:	8f b7       	in	r24, 0x3f	; 63
    23f8:	8f 77       	andi	r24, 0x7F	; 127
    23fa:	8f bf       	out	0x3f, r24	; 63
	//hx.query(&hx);	
	hx.read_raw(&hx);
    23fc:	e0 91 25 02 	lds	r30, 0x0225	; 0x800225 <hx+0x2d>
    2400:	f0 91 26 02 	lds	r31, 0x0226	; 0x800226 <hx+0x2e>
    2404:	88 ef       	ldi	r24, 0xF8	; 248
    2406:	91 e0       	ldi	r25, 0x01	; 1
    2408:	09 95       	icall
	/***enable interrupts again***/
	STATUS_REGISTER = Sreg;
    240a:	cf bf       	out	0x3f, r28	; 63
}
    240c:	ff 91       	pop	r31
    240e:	ef 91       	pop	r30
    2410:	cf 91       	pop	r28
    2412:	bf 91       	pop	r27
    2414:	af 91       	pop	r26
    2416:	9f 91       	pop	r25
    2418:	8f 91       	pop	r24
    241a:	7f 91       	pop	r23
    241c:	6f 91       	pop	r22
    241e:	5f 91       	pop	r21
    2420:	4f 91       	pop	r20
    2422:	3f 91       	pop	r19
    2424:	2f 91       	pop	r18
    2426:	0f 90       	pop	r0
    2428:	0b be       	out	0x3b, r0	; 59
    242a:	0f 90       	pop	r0
    242c:	0f be       	out	0x3f, r0	; 63
    242e:	0f 90       	pop	r0
    2430:	1f 90       	pop	r1
    2432:	18 95       	reti

00002434 <__vector_12>:
ISR(TIMER1_COMPA_vect) // 1 second intervals
{
    2434:	1f 92       	push	r1
    2436:	0f 92       	push	r0
    2438:	0f b6       	in	r0, 0x3f	; 63
    243a:	0f 92       	push	r0
    243c:	11 24       	eor	r1, r1
    243e:	0b b6       	in	r0, 0x3b	; 59
    2440:	0f 92       	push	r0
    2442:	2f 93       	push	r18
    2444:	3f 93       	push	r19
    2446:	4f 93       	push	r20
    2448:	5f 93       	push	r21
    244a:	6f 93       	push	r22
    244c:	7f 93       	push	r23
    244e:	8f 93       	push	r24
    2450:	9f 93       	push	r25
    2452:	af 93       	push	r26
    2454:	bf 93       	push	r27
    2456:	ef 93       	push	r30
    2458:	ff 93       	push	r31
	/***CLEAR EEPROM OFFSET SEQUENCE START***/
	if((F.ll(&F) & IMASK) == (ONE << 3)) //button 4
    245a:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <F+0xa>
    245e:	f0 91 38 02 	lds	r31, 0x0238	; 0x800238 <F+0xb>
    2462:	8d e2       	ldi	r24, 0x2D	; 45
    2464:	92 e0       	ldi	r25, 0x02	; 2
    2466:	09 95       	icall
    2468:	8f 73       	andi	r24, 0x3F	; 63
    246a:	88 30       	cpi	r24, 0x08	; 8
    246c:	41 f4       	brne	.+16     	; 0x247e <__vector_12+0x4a>
		counter_1++;
    246e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <counter_1>
    2472:	8f 5f       	subi	r24, 0xFF	; 255
    2474:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <counter_1>
	else if(counter_1 < _5sec+ONE)
		counter_1=0;
	if(counter_1 > _5sec){
    2478:	86 30       	cpi	r24, 0x06	; 6
    247a:	40 f4       	brcc	.+16     	; 0x248c <__vector_12+0x58>
    247c:	2b c0       	rjmp	.+86     	; 0x24d4 <__vector_12+0xa0>
ISR(TIMER1_COMPA_vect) // 1 second intervals
{
	/***CLEAR EEPROM OFFSET SEQUENCE START***/
	if((F.ll(&F) & IMASK) == (ONE << 3)) //button 4
		counter_1++;
	else if(counter_1 < _5sec+ONE)
    247e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <counter_1>
    2482:	86 30       	cpi	r24, 0x06	; 6
    2484:	18 f4       	brcc	.+6      	; 0x248c <__vector_12+0x58>
		counter_1=0;
    2486:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <counter_1>
    248a:	24 c0       	rjmp	.+72     	; 0x24d4 <__vector_12+0xa0>
	if(counter_1 > _5sec){
		counter_1 = _5sec+ONE; //lock in place
    248c:	86 e0       	ldi	r24, 0x06	; 6
    248e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <counter_1>
		PORTC ^= (ONE << 6); // troubleshooting
    2492:	95 b3       	in	r25, 0x15	; 21
    2494:	80 e4       	ldi	r24, 0x40	; 64
    2496:	89 27       	eor	r24, r25
    2498:	85 bb       	out	0x15, r24	; 21
		count--;
    249a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    249e:	81 50       	subi	r24, 0x01	; 1
    24a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if(!count){ //button blink twice
    24a4:	81 11       	cpse	r24, r1
    24a6:	16 c0       	rjmp	.+44     	; 0x24d4 <__vector_12+0xa0>
			// Delete eeprom memory ZERO
			HX711_data.status = ZERO;
    24a8:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <HX711_data+0xf>
			eprom.update_block(HX711_ptr, (void*) ZERO, sizeblock);
    24ac:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <eprom+0x1c>
    24b0:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <eprom+0x1d>
    24b4:	40 e1       	ldi	r20, 0x10	; 16
    24b6:	50 e0       	ldi	r21, 0x00	; 0
    24b8:	60 e0       	ldi	r22, 0x00	; 0
    24ba:	70 e0       	ldi	r23, 0x00	; 0
    24bc:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <HX711_ptr>
    24c0:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    24c4:	09 95       	icall
			PORTC |= (ONE << 5); // troubleshooting
    24c6:	ad 9a       	sbi	0x15, 5	; 21
			PORTC |= (ONE << 6); // troubleshooting
    24c8:	ae 9a       	sbi	0x15, 6	; 21
			counter_1 = ZERO;
    24ca:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <counter_1>
			count=blink;
    24ce:	88 e0       	ldi	r24, 0x08	; 8
    24d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
	/***CLEAR EEPROM OFFSET SEQUENCE END***/
	
	/***CAL DIVFACTOR DEFINE START***/
	if((F.ll(&F) & IMASK) == (ONE << 4)) //button 5
    24d4:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <F+0xa>
    24d8:	f0 91 38 02 	lds	r31, 0x0238	; 0x800238 <F+0xb>
    24dc:	8d e2       	ldi	r24, 0x2D	; 45
    24de:	92 e0       	ldi	r25, 0x02	; 2
    24e0:	09 95       	icall
    24e2:	8f 73       	andi	r24, 0x3F	; 63
    24e4:	80 31       	cpi	r24, 0x10	; 16
    24e6:	41 f4       	brne	.+16     	; 0x24f8 <__vector_12+0xc4>
		counter_2++;
    24e8:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <counter_2>
    24ec:	8f 5f       	subi	r24, 0xFF	; 255
    24ee:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <counter_2>
	else if(counter_2 < _5sec+ONE)
		counter_2=0;
	if(counter_2 > _5sec){
    24f2:	86 30       	cpi	r24, 0x06	; 6
    24f4:	08 f1       	brcs	.+66     	; 0x2538 <__vector_12+0x104>
    24f6:	07 c0       	rjmp	.+14     	; 0x2506 <__vector_12+0xd2>
	/***CLEAR EEPROM OFFSET SEQUENCE END***/
	
	/***CAL DIVFACTOR DEFINE START***/
	if((F.ll(&F) & IMASK) == (ONE << 4)) //button 5
		counter_2++;
	else if(counter_2 < _5sec+ONE)
    24f8:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <counter_2>
    24fc:	86 30       	cpi	r24, 0x06	; 6
    24fe:	18 f4       	brcc	.+6      	; 0x2506 <__vector_12+0xd2>
		counter_2=0;
    2500:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <counter_2>
    2504:	19 c0       	rjmp	.+50     	; 0x2538 <__vector_12+0x104>
	if(counter_2 > _5sec){
		counter_2 = _5sec+ONE; //lock in place
    2506:	86 e0       	ldi	r24, 0x06	; 6
    2508:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <counter_2>
		signal = ONE;
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
		PORTC ^= (ONE << 7); // troubleshooting
    2512:	85 b3       	in	r24, 0x15	; 21
    2514:	80 58       	subi	r24, 0x80	; 128
    2516:	85 bb       	out	0x15, r24	; 21
		if((F.ll(&F) & IMASK) == (ONE << 5)){ //button 6
    2518:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <F+0xa>
    251c:	f0 91 38 02 	lds	r31, 0x0238	; 0x800238 <F+0xb>
    2520:	8d e2       	ldi	r24, 0x2D	; 45
    2522:	92 e0       	ldi	r25, 0x02	; 2
    2524:	09 95       	icall
    2526:	8f 73       	andi	r24, 0x3F	; 63
    2528:	80 32       	cpi	r24, 0x20	; 32
    252a:	31 f4       	brne	.+12     	; 0x2538 <__vector_12+0x104>
			signal = 2;
    252c:	82 e0       	ldi	r24, 0x02	; 2
    252e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
			PORTC |= (ONE << 7); // troubleshooting
    2532:	af 9a       	sbi	0x15, 7	; 21
			counter_2 = ZERO;
    2534:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <counter_2>
		}
	}
	/***CAL DIVFACTOR DEFINE END***/
}
    2538:	ff 91       	pop	r31
    253a:	ef 91       	pop	r30
    253c:	bf 91       	pop	r27
    253e:	af 91       	pop	r26
    2540:	9f 91       	pop	r25
    2542:	8f 91       	pop	r24
    2544:	7f 91       	pop	r23
    2546:	6f 91       	pop	r22
    2548:	5f 91       	pop	r21
    254a:	4f 91       	pop	r20
    254c:	3f 91       	pop	r19
    254e:	2f 91       	pop	r18
    2550:	0f 90       	pop	r0
    2552:	0b be       	out	0x3b, r0	; 59
    2554:	0f 90       	pop	r0
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	0f 90       	pop	r0
    255a:	1f 90       	pop	r1
    255c:	18 95       	reti

0000255e <__subsf3>:
    255e:	50 58       	subi	r21, 0x80	; 128

00002560 <__addsf3>:
    2560:	bb 27       	eor	r27, r27
    2562:	aa 27       	eor	r26, r26
    2564:	0e d0       	rcall	.+28     	; 0x2582 <__addsf3x>
    2566:	75 c1       	rjmp	.+746    	; 0x2852 <__fp_round>
    2568:	66 d1       	rcall	.+716    	; 0x2836 <__fp_pscA>
    256a:	30 f0       	brcs	.+12     	; 0x2578 <__addsf3+0x18>
    256c:	6b d1       	rcall	.+726    	; 0x2844 <__fp_pscB>
    256e:	20 f0       	brcs	.+8      	; 0x2578 <__addsf3+0x18>
    2570:	31 f4       	brne	.+12     	; 0x257e <__addsf3+0x1e>
    2572:	9f 3f       	cpi	r25, 0xFF	; 255
    2574:	11 f4       	brne	.+4      	; 0x257a <__addsf3+0x1a>
    2576:	1e f4       	brtc	.+6      	; 0x257e <__addsf3+0x1e>
    2578:	5b c1       	rjmp	.+694    	; 0x2830 <__fp_nan>
    257a:	0e f4       	brtc	.+2      	; 0x257e <__addsf3+0x1e>
    257c:	e0 95       	com	r30
    257e:	e7 fb       	bst	r30, 7
    2580:	51 c1       	rjmp	.+674    	; 0x2824 <__fp_inf>

00002582 <__addsf3x>:
    2582:	e9 2f       	mov	r30, r25
    2584:	77 d1       	rcall	.+750    	; 0x2874 <__fp_split3>
    2586:	80 f3       	brcs	.-32     	; 0x2568 <__addsf3+0x8>
    2588:	ba 17       	cp	r27, r26
    258a:	62 07       	cpc	r22, r18
    258c:	73 07       	cpc	r23, r19
    258e:	84 07       	cpc	r24, r20
    2590:	95 07       	cpc	r25, r21
    2592:	18 f0       	brcs	.+6      	; 0x259a <__addsf3x+0x18>
    2594:	71 f4       	brne	.+28     	; 0x25b2 <__addsf3x+0x30>
    2596:	9e f5       	brtc	.+102    	; 0x25fe <__addsf3x+0x7c>
    2598:	8f c1       	rjmp	.+798    	; 0x28b8 <__fp_zero>
    259a:	0e f4       	brtc	.+2      	; 0x259e <__addsf3x+0x1c>
    259c:	e0 95       	com	r30
    259e:	0b 2e       	mov	r0, r27
    25a0:	ba 2f       	mov	r27, r26
    25a2:	a0 2d       	mov	r26, r0
    25a4:	0b 01       	movw	r0, r22
    25a6:	b9 01       	movw	r22, r18
    25a8:	90 01       	movw	r18, r0
    25aa:	0c 01       	movw	r0, r24
    25ac:	ca 01       	movw	r24, r20
    25ae:	a0 01       	movw	r20, r0
    25b0:	11 24       	eor	r1, r1
    25b2:	ff 27       	eor	r31, r31
    25b4:	59 1b       	sub	r21, r25
    25b6:	99 f0       	breq	.+38     	; 0x25de <__addsf3x+0x5c>
    25b8:	59 3f       	cpi	r21, 0xF9	; 249
    25ba:	50 f4       	brcc	.+20     	; 0x25d0 <__addsf3x+0x4e>
    25bc:	50 3e       	cpi	r21, 0xE0	; 224
    25be:	68 f1       	brcs	.+90     	; 0x261a <__addsf3x+0x98>
    25c0:	1a 16       	cp	r1, r26
    25c2:	f0 40       	sbci	r31, 0x00	; 0
    25c4:	a2 2f       	mov	r26, r18
    25c6:	23 2f       	mov	r18, r19
    25c8:	34 2f       	mov	r19, r20
    25ca:	44 27       	eor	r20, r20
    25cc:	58 5f       	subi	r21, 0xF8	; 248
    25ce:	f3 cf       	rjmp	.-26     	; 0x25b6 <__addsf3x+0x34>
    25d0:	46 95       	lsr	r20
    25d2:	37 95       	ror	r19
    25d4:	27 95       	ror	r18
    25d6:	a7 95       	ror	r26
    25d8:	f0 40       	sbci	r31, 0x00	; 0
    25da:	53 95       	inc	r21
    25dc:	c9 f7       	brne	.-14     	; 0x25d0 <__addsf3x+0x4e>
    25de:	7e f4       	brtc	.+30     	; 0x25fe <__addsf3x+0x7c>
    25e0:	1f 16       	cp	r1, r31
    25e2:	ba 0b       	sbc	r27, r26
    25e4:	62 0b       	sbc	r22, r18
    25e6:	73 0b       	sbc	r23, r19
    25e8:	84 0b       	sbc	r24, r20
    25ea:	ba f0       	brmi	.+46     	; 0x261a <__addsf3x+0x98>
    25ec:	91 50       	subi	r25, 0x01	; 1
    25ee:	a1 f0       	breq	.+40     	; 0x2618 <__addsf3x+0x96>
    25f0:	ff 0f       	add	r31, r31
    25f2:	bb 1f       	adc	r27, r27
    25f4:	66 1f       	adc	r22, r22
    25f6:	77 1f       	adc	r23, r23
    25f8:	88 1f       	adc	r24, r24
    25fa:	c2 f7       	brpl	.-16     	; 0x25ec <__addsf3x+0x6a>
    25fc:	0e c0       	rjmp	.+28     	; 0x261a <__addsf3x+0x98>
    25fe:	ba 0f       	add	r27, r26
    2600:	62 1f       	adc	r22, r18
    2602:	73 1f       	adc	r23, r19
    2604:	84 1f       	adc	r24, r20
    2606:	48 f4       	brcc	.+18     	; 0x261a <__addsf3x+0x98>
    2608:	87 95       	ror	r24
    260a:	77 95       	ror	r23
    260c:	67 95       	ror	r22
    260e:	b7 95       	ror	r27
    2610:	f7 95       	ror	r31
    2612:	9e 3f       	cpi	r25, 0xFE	; 254
    2614:	08 f0       	brcs	.+2      	; 0x2618 <__addsf3x+0x96>
    2616:	b3 cf       	rjmp	.-154    	; 0x257e <__addsf3+0x1e>
    2618:	93 95       	inc	r25
    261a:	88 0f       	add	r24, r24
    261c:	08 f0       	brcs	.+2      	; 0x2620 <__addsf3x+0x9e>
    261e:	99 27       	eor	r25, r25
    2620:	ee 0f       	add	r30, r30
    2622:	97 95       	ror	r25
    2624:	87 95       	ror	r24
    2626:	08 95       	ret

00002628 <__cmpsf2>:
    2628:	d9 d0       	rcall	.+434    	; 0x27dc <__fp_cmp>
    262a:	08 f4       	brcc	.+2      	; 0x262e <__cmpsf2+0x6>
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	08 95       	ret

00002630 <__divsf3>:
    2630:	0c d0       	rcall	.+24     	; 0x264a <__divsf3x>
    2632:	0f c1       	rjmp	.+542    	; 0x2852 <__fp_round>
    2634:	07 d1       	rcall	.+526    	; 0x2844 <__fp_pscB>
    2636:	40 f0       	brcs	.+16     	; 0x2648 <__divsf3+0x18>
    2638:	fe d0       	rcall	.+508    	; 0x2836 <__fp_pscA>
    263a:	30 f0       	brcs	.+12     	; 0x2648 <__divsf3+0x18>
    263c:	21 f4       	brne	.+8      	; 0x2646 <__divsf3+0x16>
    263e:	5f 3f       	cpi	r21, 0xFF	; 255
    2640:	19 f0       	breq	.+6      	; 0x2648 <__divsf3+0x18>
    2642:	f0 c0       	rjmp	.+480    	; 0x2824 <__fp_inf>
    2644:	51 11       	cpse	r21, r1
    2646:	39 c1       	rjmp	.+626    	; 0x28ba <__fp_szero>
    2648:	f3 c0       	rjmp	.+486    	; 0x2830 <__fp_nan>

0000264a <__divsf3x>:
    264a:	14 d1       	rcall	.+552    	; 0x2874 <__fp_split3>
    264c:	98 f3       	brcs	.-26     	; 0x2634 <__divsf3+0x4>

0000264e <__divsf3_pse>:
    264e:	99 23       	and	r25, r25
    2650:	c9 f3       	breq	.-14     	; 0x2644 <__divsf3+0x14>
    2652:	55 23       	and	r21, r21
    2654:	b1 f3       	breq	.-20     	; 0x2642 <__divsf3+0x12>
    2656:	95 1b       	sub	r25, r21
    2658:	55 0b       	sbc	r21, r21
    265a:	bb 27       	eor	r27, r27
    265c:	aa 27       	eor	r26, r26
    265e:	62 17       	cp	r22, r18
    2660:	73 07       	cpc	r23, r19
    2662:	84 07       	cpc	r24, r20
    2664:	38 f0       	brcs	.+14     	; 0x2674 <__divsf3_pse+0x26>
    2666:	9f 5f       	subi	r25, 0xFF	; 255
    2668:	5f 4f       	sbci	r21, 0xFF	; 255
    266a:	22 0f       	add	r18, r18
    266c:	33 1f       	adc	r19, r19
    266e:	44 1f       	adc	r20, r20
    2670:	aa 1f       	adc	r26, r26
    2672:	a9 f3       	breq	.-22     	; 0x265e <__divsf3_pse+0x10>
    2674:	33 d0       	rcall	.+102    	; 0x26dc <__divsf3_pse+0x8e>
    2676:	0e 2e       	mov	r0, r30
    2678:	3a f0       	brmi	.+14     	; 0x2688 <__divsf3_pse+0x3a>
    267a:	e0 e8       	ldi	r30, 0x80	; 128
    267c:	30 d0       	rcall	.+96     	; 0x26de <__divsf3_pse+0x90>
    267e:	91 50       	subi	r25, 0x01	; 1
    2680:	50 40       	sbci	r21, 0x00	; 0
    2682:	e6 95       	lsr	r30
    2684:	00 1c       	adc	r0, r0
    2686:	ca f7       	brpl	.-14     	; 0x267a <__divsf3_pse+0x2c>
    2688:	29 d0       	rcall	.+82     	; 0x26dc <__divsf3_pse+0x8e>
    268a:	fe 2f       	mov	r31, r30
    268c:	27 d0       	rcall	.+78     	; 0x26dc <__divsf3_pse+0x8e>
    268e:	66 0f       	add	r22, r22
    2690:	77 1f       	adc	r23, r23
    2692:	88 1f       	adc	r24, r24
    2694:	bb 1f       	adc	r27, r27
    2696:	26 17       	cp	r18, r22
    2698:	37 07       	cpc	r19, r23
    269a:	48 07       	cpc	r20, r24
    269c:	ab 07       	cpc	r26, r27
    269e:	b0 e8       	ldi	r27, 0x80	; 128
    26a0:	09 f0       	breq	.+2      	; 0x26a4 <__divsf3_pse+0x56>
    26a2:	bb 0b       	sbc	r27, r27
    26a4:	80 2d       	mov	r24, r0
    26a6:	bf 01       	movw	r22, r30
    26a8:	ff 27       	eor	r31, r31
    26aa:	93 58       	subi	r25, 0x83	; 131
    26ac:	5f 4f       	sbci	r21, 0xFF	; 255
    26ae:	2a f0       	brmi	.+10     	; 0x26ba <__divsf3_pse+0x6c>
    26b0:	9e 3f       	cpi	r25, 0xFE	; 254
    26b2:	51 05       	cpc	r21, r1
    26b4:	68 f0       	brcs	.+26     	; 0x26d0 <__divsf3_pse+0x82>
    26b6:	b6 c0       	rjmp	.+364    	; 0x2824 <__fp_inf>
    26b8:	00 c1       	rjmp	.+512    	; 0x28ba <__fp_szero>
    26ba:	5f 3f       	cpi	r21, 0xFF	; 255
    26bc:	ec f3       	brlt	.-6      	; 0x26b8 <__divsf3_pse+0x6a>
    26be:	98 3e       	cpi	r25, 0xE8	; 232
    26c0:	dc f3       	brlt	.-10     	; 0x26b8 <__divsf3_pse+0x6a>
    26c2:	86 95       	lsr	r24
    26c4:	77 95       	ror	r23
    26c6:	67 95       	ror	r22
    26c8:	b7 95       	ror	r27
    26ca:	f7 95       	ror	r31
    26cc:	9f 5f       	subi	r25, 0xFF	; 255
    26ce:	c9 f7       	brne	.-14     	; 0x26c2 <__divsf3_pse+0x74>
    26d0:	88 0f       	add	r24, r24
    26d2:	91 1d       	adc	r25, r1
    26d4:	96 95       	lsr	r25
    26d6:	87 95       	ror	r24
    26d8:	97 f9       	bld	r25, 7
    26da:	08 95       	ret
    26dc:	e1 e0       	ldi	r30, 0x01	; 1
    26de:	66 0f       	add	r22, r22
    26e0:	77 1f       	adc	r23, r23
    26e2:	88 1f       	adc	r24, r24
    26e4:	bb 1f       	adc	r27, r27
    26e6:	62 17       	cp	r22, r18
    26e8:	73 07       	cpc	r23, r19
    26ea:	84 07       	cpc	r24, r20
    26ec:	ba 07       	cpc	r27, r26
    26ee:	20 f0       	brcs	.+8      	; 0x26f8 <__divsf3_pse+0xaa>
    26f0:	62 1b       	sub	r22, r18
    26f2:	73 0b       	sbc	r23, r19
    26f4:	84 0b       	sbc	r24, r20
    26f6:	ba 0b       	sbc	r27, r26
    26f8:	ee 1f       	adc	r30, r30
    26fa:	88 f7       	brcc	.-30     	; 0x26de <__divsf3_pse+0x90>
    26fc:	e0 95       	com	r30
    26fe:	08 95       	ret

00002700 <__fixsfsi>:
    2700:	04 d0       	rcall	.+8      	; 0x270a <__fixunssfsi>
    2702:	68 94       	set
    2704:	b1 11       	cpse	r27, r1
    2706:	d9 c0       	rjmp	.+434    	; 0x28ba <__fp_szero>
    2708:	08 95       	ret

0000270a <__fixunssfsi>:
    270a:	bc d0       	rcall	.+376    	; 0x2884 <__fp_splitA>
    270c:	88 f0       	brcs	.+34     	; 0x2730 <__fixunssfsi+0x26>
    270e:	9f 57       	subi	r25, 0x7F	; 127
    2710:	90 f0       	brcs	.+36     	; 0x2736 <__fixunssfsi+0x2c>
    2712:	b9 2f       	mov	r27, r25
    2714:	99 27       	eor	r25, r25
    2716:	b7 51       	subi	r27, 0x17	; 23
    2718:	a0 f0       	brcs	.+40     	; 0x2742 <__fixunssfsi+0x38>
    271a:	d1 f0       	breq	.+52     	; 0x2750 <__fixunssfsi+0x46>
    271c:	66 0f       	add	r22, r22
    271e:	77 1f       	adc	r23, r23
    2720:	88 1f       	adc	r24, r24
    2722:	99 1f       	adc	r25, r25
    2724:	1a f0       	brmi	.+6      	; 0x272c <__fixunssfsi+0x22>
    2726:	ba 95       	dec	r27
    2728:	c9 f7       	brne	.-14     	; 0x271c <__fixunssfsi+0x12>
    272a:	12 c0       	rjmp	.+36     	; 0x2750 <__fixunssfsi+0x46>
    272c:	b1 30       	cpi	r27, 0x01	; 1
    272e:	81 f0       	breq	.+32     	; 0x2750 <__fixunssfsi+0x46>
    2730:	c3 d0       	rcall	.+390    	; 0x28b8 <__fp_zero>
    2732:	b1 e0       	ldi	r27, 0x01	; 1
    2734:	08 95       	ret
    2736:	c0 c0       	rjmp	.+384    	; 0x28b8 <__fp_zero>
    2738:	67 2f       	mov	r22, r23
    273a:	78 2f       	mov	r23, r24
    273c:	88 27       	eor	r24, r24
    273e:	b8 5f       	subi	r27, 0xF8	; 248
    2740:	39 f0       	breq	.+14     	; 0x2750 <__fixunssfsi+0x46>
    2742:	b9 3f       	cpi	r27, 0xF9	; 249
    2744:	cc f3       	brlt	.-14     	; 0x2738 <__fixunssfsi+0x2e>
    2746:	86 95       	lsr	r24
    2748:	77 95       	ror	r23
    274a:	67 95       	ror	r22
    274c:	b3 95       	inc	r27
    274e:	d9 f7       	brne	.-10     	; 0x2746 <__fixunssfsi+0x3c>
    2750:	3e f4       	brtc	.+14     	; 0x2760 <__fixunssfsi+0x56>
    2752:	90 95       	com	r25
    2754:	80 95       	com	r24
    2756:	70 95       	com	r23
    2758:	61 95       	neg	r22
    275a:	7f 4f       	sbci	r23, 0xFF	; 255
    275c:	8f 4f       	sbci	r24, 0xFF	; 255
    275e:	9f 4f       	sbci	r25, 0xFF	; 255
    2760:	08 95       	ret

00002762 <__floatunsisf>:
    2762:	e8 94       	clt
    2764:	09 c0       	rjmp	.+18     	; 0x2778 <__floatsisf+0x12>

00002766 <__floatsisf>:
    2766:	97 fb       	bst	r25, 7
    2768:	3e f4       	brtc	.+14     	; 0x2778 <__floatsisf+0x12>
    276a:	90 95       	com	r25
    276c:	80 95       	com	r24
    276e:	70 95       	com	r23
    2770:	61 95       	neg	r22
    2772:	7f 4f       	sbci	r23, 0xFF	; 255
    2774:	8f 4f       	sbci	r24, 0xFF	; 255
    2776:	9f 4f       	sbci	r25, 0xFF	; 255
    2778:	99 23       	and	r25, r25
    277a:	a9 f0       	breq	.+42     	; 0x27a6 <__floatsisf+0x40>
    277c:	f9 2f       	mov	r31, r25
    277e:	96 e9       	ldi	r25, 0x96	; 150
    2780:	bb 27       	eor	r27, r27
    2782:	93 95       	inc	r25
    2784:	f6 95       	lsr	r31
    2786:	87 95       	ror	r24
    2788:	77 95       	ror	r23
    278a:	67 95       	ror	r22
    278c:	b7 95       	ror	r27
    278e:	f1 11       	cpse	r31, r1
    2790:	f8 cf       	rjmp	.-16     	; 0x2782 <__floatsisf+0x1c>
    2792:	fa f4       	brpl	.+62     	; 0x27d2 <__floatsisf+0x6c>
    2794:	bb 0f       	add	r27, r27
    2796:	11 f4       	brne	.+4      	; 0x279c <__floatsisf+0x36>
    2798:	60 ff       	sbrs	r22, 0
    279a:	1b c0       	rjmp	.+54     	; 0x27d2 <__floatsisf+0x6c>
    279c:	6f 5f       	subi	r22, 0xFF	; 255
    279e:	7f 4f       	sbci	r23, 0xFF	; 255
    27a0:	8f 4f       	sbci	r24, 0xFF	; 255
    27a2:	9f 4f       	sbci	r25, 0xFF	; 255
    27a4:	16 c0       	rjmp	.+44     	; 0x27d2 <__floatsisf+0x6c>
    27a6:	88 23       	and	r24, r24
    27a8:	11 f0       	breq	.+4      	; 0x27ae <__floatsisf+0x48>
    27aa:	96 e9       	ldi	r25, 0x96	; 150
    27ac:	11 c0       	rjmp	.+34     	; 0x27d0 <__floatsisf+0x6a>
    27ae:	77 23       	and	r23, r23
    27b0:	21 f0       	breq	.+8      	; 0x27ba <__floatsisf+0x54>
    27b2:	9e e8       	ldi	r25, 0x8E	; 142
    27b4:	87 2f       	mov	r24, r23
    27b6:	76 2f       	mov	r23, r22
    27b8:	05 c0       	rjmp	.+10     	; 0x27c4 <__floatsisf+0x5e>
    27ba:	66 23       	and	r22, r22
    27bc:	71 f0       	breq	.+28     	; 0x27da <__floatsisf+0x74>
    27be:	96 e8       	ldi	r25, 0x86	; 134
    27c0:	86 2f       	mov	r24, r22
    27c2:	70 e0       	ldi	r23, 0x00	; 0
    27c4:	60 e0       	ldi	r22, 0x00	; 0
    27c6:	2a f0       	brmi	.+10     	; 0x27d2 <__floatsisf+0x6c>
    27c8:	9a 95       	dec	r25
    27ca:	66 0f       	add	r22, r22
    27cc:	77 1f       	adc	r23, r23
    27ce:	88 1f       	adc	r24, r24
    27d0:	da f7       	brpl	.-10     	; 0x27c8 <__floatsisf+0x62>
    27d2:	88 0f       	add	r24, r24
    27d4:	96 95       	lsr	r25
    27d6:	87 95       	ror	r24
    27d8:	97 f9       	bld	r25, 7
    27da:	08 95       	ret

000027dc <__fp_cmp>:
    27dc:	99 0f       	add	r25, r25
    27de:	00 08       	sbc	r0, r0
    27e0:	55 0f       	add	r21, r21
    27e2:	aa 0b       	sbc	r26, r26
    27e4:	e0 e8       	ldi	r30, 0x80	; 128
    27e6:	fe ef       	ldi	r31, 0xFE	; 254
    27e8:	16 16       	cp	r1, r22
    27ea:	17 06       	cpc	r1, r23
    27ec:	e8 07       	cpc	r30, r24
    27ee:	f9 07       	cpc	r31, r25
    27f0:	c0 f0       	brcs	.+48     	; 0x2822 <__fp_cmp+0x46>
    27f2:	12 16       	cp	r1, r18
    27f4:	13 06       	cpc	r1, r19
    27f6:	e4 07       	cpc	r30, r20
    27f8:	f5 07       	cpc	r31, r21
    27fa:	98 f0       	brcs	.+38     	; 0x2822 <__fp_cmp+0x46>
    27fc:	62 1b       	sub	r22, r18
    27fe:	73 0b       	sbc	r23, r19
    2800:	84 0b       	sbc	r24, r20
    2802:	95 0b       	sbc	r25, r21
    2804:	39 f4       	brne	.+14     	; 0x2814 <__fp_cmp+0x38>
    2806:	0a 26       	eor	r0, r26
    2808:	61 f0       	breq	.+24     	; 0x2822 <__fp_cmp+0x46>
    280a:	23 2b       	or	r18, r19
    280c:	24 2b       	or	r18, r20
    280e:	25 2b       	or	r18, r21
    2810:	21 f4       	brne	.+8      	; 0x281a <__fp_cmp+0x3e>
    2812:	08 95       	ret
    2814:	0a 26       	eor	r0, r26
    2816:	09 f4       	brne	.+2      	; 0x281a <__fp_cmp+0x3e>
    2818:	a1 40       	sbci	r26, 0x01	; 1
    281a:	a6 95       	lsr	r26
    281c:	8f ef       	ldi	r24, 0xFF	; 255
    281e:	81 1d       	adc	r24, r1
    2820:	81 1d       	adc	r24, r1
    2822:	08 95       	ret

00002824 <__fp_inf>:
    2824:	97 f9       	bld	r25, 7
    2826:	9f 67       	ori	r25, 0x7F	; 127
    2828:	80 e8       	ldi	r24, 0x80	; 128
    282a:	70 e0       	ldi	r23, 0x00	; 0
    282c:	60 e0       	ldi	r22, 0x00	; 0
    282e:	08 95       	ret

00002830 <__fp_nan>:
    2830:	9f ef       	ldi	r25, 0xFF	; 255
    2832:	80 ec       	ldi	r24, 0xC0	; 192
    2834:	08 95       	ret

00002836 <__fp_pscA>:
    2836:	00 24       	eor	r0, r0
    2838:	0a 94       	dec	r0
    283a:	16 16       	cp	r1, r22
    283c:	17 06       	cpc	r1, r23
    283e:	18 06       	cpc	r1, r24
    2840:	09 06       	cpc	r0, r25
    2842:	08 95       	ret

00002844 <__fp_pscB>:
    2844:	00 24       	eor	r0, r0
    2846:	0a 94       	dec	r0
    2848:	12 16       	cp	r1, r18
    284a:	13 06       	cpc	r1, r19
    284c:	14 06       	cpc	r1, r20
    284e:	05 06       	cpc	r0, r21
    2850:	08 95       	ret

00002852 <__fp_round>:
    2852:	09 2e       	mov	r0, r25
    2854:	03 94       	inc	r0
    2856:	00 0c       	add	r0, r0
    2858:	11 f4       	brne	.+4      	; 0x285e <__fp_round+0xc>
    285a:	88 23       	and	r24, r24
    285c:	52 f0       	brmi	.+20     	; 0x2872 <__fp_round+0x20>
    285e:	bb 0f       	add	r27, r27
    2860:	40 f4       	brcc	.+16     	; 0x2872 <__fp_round+0x20>
    2862:	bf 2b       	or	r27, r31
    2864:	11 f4       	brne	.+4      	; 0x286a <__fp_round+0x18>
    2866:	60 ff       	sbrs	r22, 0
    2868:	04 c0       	rjmp	.+8      	; 0x2872 <__fp_round+0x20>
    286a:	6f 5f       	subi	r22, 0xFF	; 255
    286c:	7f 4f       	sbci	r23, 0xFF	; 255
    286e:	8f 4f       	sbci	r24, 0xFF	; 255
    2870:	9f 4f       	sbci	r25, 0xFF	; 255
    2872:	08 95       	ret

00002874 <__fp_split3>:
    2874:	57 fd       	sbrc	r21, 7
    2876:	90 58       	subi	r25, 0x80	; 128
    2878:	44 0f       	add	r20, r20
    287a:	55 1f       	adc	r21, r21
    287c:	59 f0       	breq	.+22     	; 0x2894 <__fp_splitA+0x10>
    287e:	5f 3f       	cpi	r21, 0xFF	; 255
    2880:	71 f0       	breq	.+28     	; 0x289e <__fp_splitA+0x1a>
    2882:	47 95       	ror	r20

00002884 <__fp_splitA>:
    2884:	88 0f       	add	r24, r24
    2886:	97 fb       	bst	r25, 7
    2888:	99 1f       	adc	r25, r25
    288a:	61 f0       	breq	.+24     	; 0x28a4 <__fp_splitA+0x20>
    288c:	9f 3f       	cpi	r25, 0xFF	; 255
    288e:	79 f0       	breq	.+30     	; 0x28ae <__fp_splitA+0x2a>
    2890:	87 95       	ror	r24
    2892:	08 95       	ret
    2894:	12 16       	cp	r1, r18
    2896:	13 06       	cpc	r1, r19
    2898:	14 06       	cpc	r1, r20
    289a:	55 1f       	adc	r21, r21
    289c:	f2 cf       	rjmp	.-28     	; 0x2882 <__fp_split3+0xe>
    289e:	46 95       	lsr	r20
    28a0:	f1 df       	rcall	.-30     	; 0x2884 <__fp_splitA>
    28a2:	08 c0       	rjmp	.+16     	; 0x28b4 <__fp_splitA+0x30>
    28a4:	16 16       	cp	r1, r22
    28a6:	17 06       	cpc	r1, r23
    28a8:	18 06       	cpc	r1, r24
    28aa:	99 1f       	adc	r25, r25
    28ac:	f1 cf       	rjmp	.-30     	; 0x2890 <__fp_splitA+0xc>
    28ae:	86 95       	lsr	r24
    28b0:	71 05       	cpc	r23, r1
    28b2:	61 05       	cpc	r22, r1
    28b4:	08 94       	sec
    28b6:	08 95       	ret

000028b8 <__fp_zero>:
    28b8:	e8 94       	clt

000028ba <__fp_szero>:
    28ba:	bb 27       	eor	r27, r27
    28bc:	66 27       	eor	r22, r22
    28be:	77 27       	eor	r23, r23
    28c0:	cb 01       	movw	r24, r22
    28c2:	97 f9       	bld	r25, 7
    28c4:	08 95       	ret

000028c6 <__gesf2>:
    28c6:	8a df       	rcall	.-236    	; 0x27dc <__fp_cmp>
    28c8:	08 f4       	brcc	.+2      	; 0x28cc <__gesf2+0x6>
    28ca:	8f ef       	ldi	r24, 0xFF	; 255
    28cc:	08 95       	ret

000028ce <__mulsf3>:
    28ce:	0b d0       	rcall	.+22     	; 0x28e6 <__mulsf3x>
    28d0:	c0 cf       	rjmp	.-128    	; 0x2852 <__fp_round>
    28d2:	b1 df       	rcall	.-158    	; 0x2836 <__fp_pscA>
    28d4:	28 f0       	brcs	.+10     	; 0x28e0 <__mulsf3+0x12>
    28d6:	b6 df       	rcall	.-148    	; 0x2844 <__fp_pscB>
    28d8:	18 f0       	brcs	.+6      	; 0x28e0 <__mulsf3+0x12>
    28da:	95 23       	and	r25, r21
    28dc:	09 f0       	breq	.+2      	; 0x28e0 <__mulsf3+0x12>
    28de:	a2 cf       	rjmp	.-188    	; 0x2824 <__fp_inf>
    28e0:	a7 cf       	rjmp	.-178    	; 0x2830 <__fp_nan>
    28e2:	11 24       	eor	r1, r1
    28e4:	ea cf       	rjmp	.-44     	; 0x28ba <__fp_szero>

000028e6 <__mulsf3x>:
    28e6:	c6 df       	rcall	.-116    	; 0x2874 <__fp_split3>
    28e8:	a0 f3       	brcs	.-24     	; 0x28d2 <__mulsf3+0x4>

000028ea <__mulsf3_pse>:
    28ea:	95 9f       	mul	r25, r21
    28ec:	d1 f3       	breq	.-12     	; 0x28e2 <__mulsf3+0x14>
    28ee:	95 0f       	add	r25, r21
    28f0:	50 e0       	ldi	r21, 0x00	; 0
    28f2:	55 1f       	adc	r21, r21
    28f4:	62 9f       	mul	r22, r18
    28f6:	f0 01       	movw	r30, r0
    28f8:	72 9f       	mul	r23, r18
    28fa:	bb 27       	eor	r27, r27
    28fc:	f0 0d       	add	r31, r0
    28fe:	b1 1d       	adc	r27, r1
    2900:	63 9f       	mul	r22, r19
    2902:	aa 27       	eor	r26, r26
    2904:	f0 0d       	add	r31, r0
    2906:	b1 1d       	adc	r27, r1
    2908:	aa 1f       	adc	r26, r26
    290a:	64 9f       	mul	r22, r20
    290c:	66 27       	eor	r22, r22
    290e:	b0 0d       	add	r27, r0
    2910:	a1 1d       	adc	r26, r1
    2912:	66 1f       	adc	r22, r22
    2914:	82 9f       	mul	r24, r18
    2916:	22 27       	eor	r18, r18
    2918:	b0 0d       	add	r27, r0
    291a:	a1 1d       	adc	r26, r1
    291c:	62 1f       	adc	r22, r18
    291e:	73 9f       	mul	r23, r19
    2920:	b0 0d       	add	r27, r0
    2922:	a1 1d       	adc	r26, r1
    2924:	62 1f       	adc	r22, r18
    2926:	83 9f       	mul	r24, r19
    2928:	a0 0d       	add	r26, r0
    292a:	61 1d       	adc	r22, r1
    292c:	22 1f       	adc	r18, r18
    292e:	74 9f       	mul	r23, r20
    2930:	33 27       	eor	r19, r19
    2932:	a0 0d       	add	r26, r0
    2934:	61 1d       	adc	r22, r1
    2936:	23 1f       	adc	r18, r19
    2938:	84 9f       	mul	r24, r20
    293a:	60 0d       	add	r22, r0
    293c:	21 1d       	adc	r18, r1
    293e:	82 2f       	mov	r24, r18
    2940:	76 2f       	mov	r23, r22
    2942:	6a 2f       	mov	r22, r26
    2944:	11 24       	eor	r1, r1
    2946:	9f 57       	subi	r25, 0x7F	; 127
    2948:	50 40       	sbci	r21, 0x00	; 0
    294a:	8a f0       	brmi	.+34     	; 0x296e <__mulsf3_pse+0x84>
    294c:	e1 f0       	breq	.+56     	; 0x2986 <__mulsf3_pse+0x9c>
    294e:	88 23       	and	r24, r24
    2950:	4a f0       	brmi	.+18     	; 0x2964 <__mulsf3_pse+0x7a>
    2952:	ee 0f       	add	r30, r30
    2954:	ff 1f       	adc	r31, r31
    2956:	bb 1f       	adc	r27, r27
    2958:	66 1f       	adc	r22, r22
    295a:	77 1f       	adc	r23, r23
    295c:	88 1f       	adc	r24, r24
    295e:	91 50       	subi	r25, 0x01	; 1
    2960:	50 40       	sbci	r21, 0x00	; 0
    2962:	a9 f7       	brne	.-22     	; 0x294e <__mulsf3_pse+0x64>
    2964:	9e 3f       	cpi	r25, 0xFE	; 254
    2966:	51 05       	cpc	r21, r1
    2968:	70 f0       	brcs	.+28     	; 0x2986 <__mulsf3_pse+0x9c>
    296a:	5c cf       	rjmp	.-328    	; 0x2824 <__fp_inf>
    296c:	a6 cf       	rjmp	.-180    	; 0x28ba <__fp_szero>
    296e:	5f 3f       	cpi	r21, 0xFF	; 255
    2970:	ec f3       	brlt	.-6      	; 0x296c <__mulsf3_pse+0x82>
    2972:	98 3e       	cpi	r25, 0xE8	; 232
    2974:	dc f3       	brlt	.-10     	; 0x296c <__mulsf3_pse+0x82>
    2976:	86 95       	lsr	r24
    2978:	77 95       	ror	r23
    297a:	67 95       	ror	r22
    297c:	b7 95       	ror	r27
    297e:	f7 95       	ror	r31
    2980:	e7 95       	ror	r30
    2982:	9f 5f       	subi	r25, 0xFF	; 255
    2984:	c1 f7       	brne	.-16     	; 0x2976 <__mulsf3_pse+0x8c>
    2986:	fe 2b       	or	r31, r30
    2988:	88 0f       	add	r24, r24
    298a:	91 1d       	adc	r25, r1
    298c:	96 95       	lsr	r25
    298e:	87 95       	ror	r24
    2990:	97 f9       	bld	r25, 7
    2992:	08 95       	ret

00002994 <pow>:
    2994:	fa 01       	movw	r30, r20
    2996:	ee 0f       	add	r30, r30
    2998:	ff 1f       	adc	r31, r31
    299a:	30 96       	adiw	r30, 0x00	; 0
    299c:	21 05       	cpc	r18, r1
    299e:	31 05       	cpc	r19, r1
    29a0:	99 f1       	breq	.+102    	; 0x2a08 <pow+0x74>
    29a2:	61 15       	cp	r22, r1
    29a4:	71 05       	cpc	r23, r1
    29a6:	61 f4       	brne	.+24     	; 0x29c0 <pow+0x2c>
    29a8:	80 38       	cpi	r24, 0x80	; 128
    29aa:	bf e3       	ldi	r27, 0x3F	; 63
    29ac:	9b 07       	cpc	r25, r27
    29ae:	49 f1       	breq	.+82     	; 0x2a02 <pow+0x6e>
    29b0:	68 94       	set
    29b2:	90 38       	cpi	r25, 0x80	; 128
    29b4:	81 05       	cpc	r24, r1
    29b6:	61 f0       	breq	.+24     	; 0x29d0 <pow+0x3c>
    29b8:	80 38       	cpi	r24, 0x80	; 128
    29ba:	bf ef       	ldi	r27, 0xFF	; 255
    29bc:	9b 07       	cpc	r25, r27
    29be:	41 f0       	breq	.+16     	; 0x29d0 <pow+0x3c>
    29c0:	99 23       	and	r25, r25
    29c2:	42 f5       	brpl	.+80     	; 0x2a14 <pow+0x80>
    29c4:	ff 3f       	cpi	r31, 0xFF	; 255
    29c6:	e1 05       	cpc	r30, r1
    29c8:	31 05       	cpc	r19, r1
    29ca:	21 05       	cpc	r18, r1
    29cc:	11 f1       	breq	.+68     	; 0x2a12 <pow+0x7e>
    29ce:	e8 94       	clt
    29d0:	08 94       	sec
    29d2:	e7 95       	ror	r30
    29d4:	d9 01       	movw	r26, r18
    29d6:	aa 23       	and	r26, r26
    29d8:	29 f4       	brne	.+10     	; 0x29e4 <pow+0x50>
    29da:	ab 2f       	mov	r26, r27
    29dc:	be 2f       	mov	r27, r30
    29de:	f8 5f       	subi	r31, 0xF8	; 248
    29e0:	d0 f3       	brcs	.-12     	; 0x29d6 <pow+0x42>
    29e2:	10 c0       	rjmp	.+32     	; 0x2a04 <pow+0x70>
    29e4:	ff 5f       	subi	r31, 0xFF	; 255
    29e6:	70 f4       	brcc	.+28     	; 0x2a04 <pow+0x70>
    29e8:	a6 95       	lsr	r26
    29ea:	e0 f7       	brcc	.-8      	; 0x29e4 <pow+0x50>
    29ec:	f7 39       	cpi	r31, 0x97	; 151
    29ee:	50 f0       	brcs	.+20     	; 0x2a04 <pow+0x70>
    29f0:	19 f0       	breq	.+6      	; 0x29f8 <pow+0x64>
    29f2:	ff 3a       	cpi	r31, 0xAF	; 175
    29f4:	38 f4       	brcc	.+14     	; 0x2a04 <pow+0x70>
    29f6:	9f 77       	andi	r25, 0x7F	; 127
    29f8:	9f 93       	push	r25
    29fa:	0c d0       	rcall	.+24     	; 0x2a14 <pow+0x80>
    29fc:	0f 90       	pop	r0
    29fe:	07 fc       	sbrc	r0, 7
    2a00:	90 58       	subi	r25, 0x80	; 128
    2a02:	08 95       	ret
    2a04:	3e f0       	brts	.+14     	; 0x2a14 <pow+0x80>
    2a06:	14 cf       	rjmp	.-472    	; 0x2830 <__fp_nan>
    2a08:	60 e0       	ldi	r22, 0x00	; 0
    2a0a:	70 e0       	ldi	r23, 0x00	; 0
    2a0c:	80 e8       	ldi	r24, 0x80	; 128
    2a0e:	9f e3       	ldi	r25, 0x3F	; 63
    2a10:	08 95       	ret
    2a12:	4f e7       	ldi	r20, 0x7F	; 127
    2a14:	9f 77       	andi	r25, 0x7F	; 127
    2a16:	5f 93       	push	r21
    2a18:	4f 93       	push	r20
    2a1a:	3f 93       	push	r19
    2a1c:	2f 93       	push	r18
    2a1e:	9e d0       	rcall	.+316    	; 0x2b5c <log>
    2a20:	2f 91       	pop	r18
    2a22:	3f 91       	pop	r19
    2a24:	4f 91       	pop	r20
    2a26:	5f 91       	pop	r21
    2a28:	52 df       	rcall	.-348    	; 0x28ce <__mulsf3>
    2a2a:	05 c0       	rjmp	.+10     	; 0x2a36 <exp>
    2a2c:	19 f4       	brne	.+6      	; 0x2a34 <pow+0xa0>
    2a2e:	0e f0       	brts	.+2      	; 0x2a32 <pow+0x9e>
    2a30:	f9 ce       	rjmp	.-526    	; 0x2824 <__fp_inf>
    2a32:	42 cf       	rjmp	.-380    	; 0x28b8 <__fp_zero>
    2a34:	fd ce       	rjmp	.-518    	; 0x2830 <__fp_nan>

00002a36 <exp>:
    2a36:	26 df       	rcall	.-436    	; 0x2884 <__fp_splitA>
    2a38:	c8 f3       	brcs	.-14     	; 0x2a2c <pow+0x98>
    2a3a:	96 38       	cpi	r25, 0x86	; 134
    2a3c:	c0 f7       	brcc	.-16     	; 0x2a2e <pow+0x9a>
    2a3e:	07 f8       	bld	r0, 7
    2a40:	0f 92       	push	r0
    2a42:	e8 94       	clt
    2a44:	2b e3       	ldi	r18, 0x3B	; 59
    2a46:	3a ea       	ldi	r19, 0xAA	; 170
    2a48:	48 eb       	ldi	r20, 0xB8	; 184
    2a4a:	5f e7       	ldi	r21, 0x7F	; 127
    2a4c:	4e df       	rcall	.-356    	; 0x28ea <__mulsf3_pse>
    2a4e:	0f 92       	push	r0
    2a50:	0f 92       	push	r0
    2a52:	0f 92       	push	r0
    2a54:	4d b7       	in	r20, 0x3d	; 61
    2a56:	5e b7       	in	r21, 0x3e	; 62
    2a58:	0f 92       	push	r0
    2a5a:	c0 d0       	rcall	.+384    	; 0x2bdc <modf>
    2a5c:	e2 ec       	ldi	r30, 0xC2	; 194
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	16 d0       	rcall	.+44     	; 0x2a8e <__fp_powser>
    2a62:	4f 91       	pop	r20
    2a64:	5f 91       	pop	r21
    2a66:	ef 91       	pop	r30
    2a68:	ff 91       	pop	r31
    2a6a:	e5 95       	asr	r30
    2a6c:	ee 1f       	adc	r30, r30
    2a6e:	ff 1f       	adc	r31, r31
    2a70:	49 f0       	breq	.+18     	; 0x2a84 <exp+0x4e>
    2a72:	fe 57       	subi	r31, 0x7E	; 126
    2a74:	e0 68       	ori	r30, 0x80	; 128
    2a76:	44 27       	eor	r20, r20
    2a78:	ee 0f       	add	r30, r30
    2a7a:	44 1f       	adc	r20, r20
    2a7c:	fa 95       	dec	r31
    2a7e:	e1 f7       	brne	.-8      	; 0x2a78 <exp+0x42>
    2a80:	41 95       	neg	r20
    2a82:	55 0b       	sbc	r21, r21
    2a84:	32 d0       	rcall	.+100    	; 0x2aea <ldexp>
    2a86:	0f 90       	pop	r0
    2a88:	07 fe       	sbrs	r0, 7
    2a8a:	26 c0       	rjmp	.+76     	; 0x2ad8 <inverse>
    2a8c:	08 95       	ret

00002a8e <__fp_powser>:
    2a8e:	df 93       	push	r29
    2a90:	cf 93       	push	r28
    2a92:	1f 93       	push	r17
    2a94:	0f 93       	push	r16
    2a96:	ff 92       	push	r15
    2a98:	ef 92       	push	r14
    2a9a:	df 92       	push	r13
    2a9c:	7b 01       	movw	r14, r22
    2a9e:	8c 01       	movw	r16, r24
    2aa0:	68 94       	set
    2aa2:	05 c0       	rjmp	.+10     	; 0x2aae <__fp_powser+0x20>
    2aa4:	da 2e       	mov	r13, r26
    2aa6:	ef 01       	movw	r28, r30
    2aa8:	1e df       	rcall	.-452    	; 0x28e6 <__mulsf3x>
    2aaa:	fe 01       	movw	r30, r28
    2aac:	e8 94       	clt
    2aae:	a5 91       	lpm	r26, Z+
    2ab0:	25 91       	lpm	r18, Z+
    2ab2:	35 91       	lpm	r19, Z+
    2ab4:	45 91       	lpm	r20, Z+
    2ab6:	55 91       	lpm	r21, Z+
    2ab8:	ae f3       	brts	.-22     	; 0x2aa4 <__fp_powser+0x16>
    2aba:	ef 01       	movw	r28, r30
    2abc:	62 dd       	rcall	.-1340   	; 0x2582 <__addsf3x>
    2abe:	fe 01       	movw	r30, r28
    2ac0:	97 01       	movw	r18, r14
    2ac2:	a8 01       	movw	r20, r16
    2ac4:	da 94       	dec	r13
    2ac6:	79 f7       	brne	.-34     	; 0x2aa6 <__fp_powser+0x18>
    2ac8:	df 90       	pop	r13
    2aca:	ef 90       	pop	r14
    2acc:	ff 90       	pop	r15
    2ace:	0f 91       	pop	r16
    2ad0:	1f 91       	pop	r17
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <inverse>:
    2ad8:	9b 01       	movw	r18, r22
    2ada:	ac 01       	movw	r20, r24
    2adc:	60 e0       	ldi	r22, 0x00	; 0
    2ade:	70 e0       	ldi	r23, 0x00	; 0
    2ae0:	80 e8       	ldi	r24, 0x80	; 128
    2ae2:	9f e3       	ldi	r25, 0x3F	; 63
    2ae4:	a5 cd       	rjmp	.-1206   	; 0x2630 <__divsf3>
    2ae6:	9e ce       	rjmp	.-708    	; 0x2824 <__fp_inf>
    2ae8:	ac c0       	rjmp	.+344    	; 0x2c42 <__fp_mpack>

00002aea <ldexp>:
    2aea:	cc de       	rcall	.-616    	; 0x2884 <__fp_splitA>
    2aec:	e8 f3       	brcs	.-6      	; 0x2ae8 <inverse+0x10>
    2aee:	99 23       	and	r25, r25
    2af0:	d9 f3       	breq	.-10     	; 0x2ae8 <inverse+0x10>
    2af2:	94 0f       	add	r25, r20
    2af4:	51 1d       	adc	r21, r1
    2af6:	bb f3       	brvs	.-18     	; 0x2ae6 <inverse+0xe>
    2af8:	91 50       	subi	r25, 0x01	; 1
    2afa:	50 40       	sbci	r21, 0x00	; 0
    2afc:	94 f0       	brlt	.+36     	; 0x2b22 <ldexp+0x38>
    2afe:	59 f0       	breq	.+22     	; 0x2b16 <ldexp+0x2c>
    2b00:	88 23       	and	r24, r24
    2b02:	32 f0       	brmi	.+12     	; 0x2b10 <ldexp+0x26>
    2b04:	66 0f       	add	r22, r22
    2b06:	77 1f       	adc	r23, r23
    2b08:	88 1f       	adc	r24, r24
    2b0a:	91 50       	subi	r25, 0x01	; 1
    2b0c:	50 40       	sbci	r21, 0x00	; 0
    2b0e:	c1 f7       	brne	.-16     	; 0x2b00 <ldexp+0x16>
    2b10:	9e 3f       	cpi	r25, 0xFE	; 254
    2b12:	51 05       	cpc	r21, r1
    2b14:	44 f7       	brge	.-48     	; 0x2ae6 <inverse+0xe>
    2b16:	88 0f       	add	r24, r24
    2b18:	91 1d       	adc	r25, r1
    2b1a:	96 95       	lsr	r25
    2b1c:	87 95       	ror	r24
    2b1e:	97 f9       	bld	r25, 7
    2b20:	08 95       	ret
    2b22:	5f 3f       	cpi	r21, 0xFF	; 255
    2b24:	ac f0       	brlt	.+42     	; 0x2b50 <ldexp+0x66>
    2b26:	98 3e       	cpi	r25, 0xE8	; 232
    2b28:	9c f0       	brlt	.+38     	; 0x2b50 <ldexp+0x66>
    2b2a:	bb 27       	eor	r27, r27
    2b2c:	86 95       	lsr	r24
    2b2e:	77 95       	ror	r23
    2b30:	67 95       	ror	r22
    2b32:	b7 95       	ror	r27
    2b34:	08 f4       	brcc	.+2      	; 0x2b38 <ldexp+0x4e>
    2b36:	b1 60       	ori	r27, 0x01	; 1
    2b38:	93 95       	inc	r25
    2b3a:	c1 f7       	brne	.-16     	; 0x2b2c <ldexp+0x42>
    2b3c:	bb 0f       	add	r27, r27
    2b3e:	58 f7       	brcc	.-42     	; 0x2b16 <ldexp+0x2c>
    2b40:	11 f4       	brne	.+4      	; 0x2b46 <ldexp+0x5c>
    2b42:	60 ff       	sbrs	r22, 0
    2b44:	e8 cf       	rjmp	.-48     	; 0x2b16 <ldexp+0x2c>
    2b46:	6f 5f       	subi	r22, 0xFF	; 255
    2b48:	7f 4f       	sbci	r23, 0xFF	; 255
    2b4a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b4e:	e3 cf       	rjmp	.-58     	; 0x2b16 <ldexp+0x2c>
    2b50:	b4 ce       	rjmp	.-664    	; 0x28ba <__fp_szero>
    2b52:	0e f0       	brts	.+2      	; 0x2b56 <ldexp+0x6c>
    2b54:	76 c0       	rjmp	.+236    	; 0x2c42 <__fp_mpack>
    2b56:	6c ce       	rjmp	.-808    	; 0x2830 <__fp_nan>
    2b58:	68 94       	set
    2b5a:	64 ce       	rjmp	.-824    	; 0x2824 <__fp_inf>

00002b5c <log>:
    2b5c:	93 de       	rcall	.-730    	; 0x2884 <__fp_splitA>
    2b5e:	c8 f3       	brcs	.-14     	; 0x2b52 <ldexp+0x68>
    2b60:	99 23       	and	r25, r25
    2b62:	d1 f3       	breq	.-12     	; 0x2b58 <ldexp+0x6e>
    2b64:	c6 f3       	brts	.-16     	; 0x2b56 <ldexp+0x6c>
    2b66:	df 93       	push	r29
    2b68:	cf 93       	push	r28
    2b6a:	1f 93       	push	r17
    2b6c:	0f 93       	push	r16
    2b6e:	ff 92       	push	r15
    2b70:	c9 2f       	mov	r28, r25
    2b72:	dd 27       	eor	r29, r29
    2b74:	88 23       	and	r24, r24
    2b76:	2a f0       	brmi	.+10     	; 0x2b82 <log+0x26>
    2b78:	21 97       	sbiw	r28, 0x01	; 1
    2b7a:	66 0f       	add	r22, r22
    2b7c:	77 1f       	adc	r23, r23
    2b7e:	88 1f       	adc	r24, r24
    2b80:	da f7       	brpl	.-10     	; 0x2b78 <log+0x1c>
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	40 e8       	ldi	r20, 0x80	; 128
    2b88:	5f eb       	ldi	r21, 0xBF	; 191
    2b8a:	9f e3       	ldi	r25, 0x3F	; 63
    2b8c:	88 39       	cpi	r24, 0x98	; 152
    2b8e:	20 f0       	brcs	.+8      	; 0x2b98 <log+0x3c>
    2b90:	80 3e       	cpi	r24, 0xE0	; 224
    2b92:	30 f0       	brcs	.+12     	; 0x2ba0 <log+0x44>
    2b94:	21 96       	adiw	r28, 0x01	; 1
    2b96:	8f 77       	andi	r24, 0x7F	; 127
    2b98:	e3 dc       	rcall	.-1594   	; 0x2560 <__addsf3>
    2b9a:	ea ee       	ldi	r30, 0xEA	; 234
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	03 c0       	rjmp	.+6      	; 0x2ba6 <log+0x4a>
    2ba0:	df dc       	rcall	.-1602   	; 0x2560 <__addsf3>
    2ba2:	e7 e1       	ldi	r30, 0x17	; 23
    2ba4:	f1 e0       	ldi	r31, 0x01	; 1
    2ba6:	73 df       	rcall	.-282    	; 0x2a8e <__fp_powser>
    2ba8:	8b 01       	movw	r16, r22
    2baa:	be 01       	movw	r22, r28
    2bac:	ec 01       	movw	r28, r24
    2bae:	fb 2e       	mov	r15, r27
    2bb0:	6f 57       	subi	r22, 0x7F	; 127
    2bb2:	71 09       	sbc	r23, r1
    2bb4:	75 95       	asr	r23
    2bb6:	77 1f       	adc	r23, r23
    2bb8:	88 0b       	sbc	r24, r24
    2bba:	99 0b       	sbc	r25, r25
    2bbc:	d4 dd       	rcall	.-1112   	; 0x2766 <__floatsisf>
    2bbe:	28 e1       	ldi	r18, 0x18	; 24
    2bc0:	32 e7       	ldi	r19, 0x72	; 114
    2bc2:	41 e3       	ldi	r20, 0x31	; 49
    2bc4:	5f e3       	ldi	r21, 0x3F	; 63
    2bc6:	8f de       	rcall	.-738    	; 0x28e6 <__mulsf3x>
    2bc8:	af 2d       	mov	r26, r15
    2bca:	98 01       	movw	r18, r16
    2bcc:	ae 01       	movw	r20, r28
    2bce:	ff 90       	pop	r15
    2bd0:	0f 91       	pop	r16
    2bd2:	1f 91       	pop	r17
    2bd4:	cf 91       	pop	r28
    2bd6:	df 91       	pop	r29
    2bd8:	d4 dc       	rcall	.-1624   	; 0x2582 <__addsf3x>
    2bda:	3b ce       	rjmp	.-906    	; 0x2852 <__fp_round>

00002bdc <modf>:
    2bdc:	fa 01       	movw	r30, r20
    2bde:	dc 01       	movw	r26, r24
    2be0:	aa 0f       	add	r26, r26
    2be2:	bb 1f       	adc	r27, r27
    2be4:	9b 01       	movw	r18, r22
    2be6:	ac 01       	movw	r20, r24
    2be8:	bf 57       	subi	r27, 0x7F	; 127
    2bea:	28 f4       	brcc	.+10     	; 0x2bf6 <modf+0x1a>
    2bec:	22 27       	eor	r18, r18
    2bee:	33 27       	eor	r19, r19
    2bf0:	44 27       	eor	r20, r20
    2bf2:	50 78       	andi	r21, 0x80	; 128
    2bf4:	1f c0       	rjmp	.+62     	; 0x2c34 <modf+0x58>
    2bf6:	b7 51       	subi	r27, 0x17	; 23
    2bf8:	88 f4       	brcc	.+34     	; 0x2c1c <modf+0x40>
    2bfa:	ab 2f       	mov	r26, r27
    2bfc:	00 24       	eor	r0, r0
    2bfe:	46 95       	lsr	r20
    2c00:	37 95       	ror	r19
    2c02:	27 95       	ror	r18
    2c04:	01 1c       	adc	r0, r1
    2c06:	a3 95       	inc	r26
    2c08:	d2 f3       	brmi	.-12     	; 0x2bfe <modf+0x22>
    2c0a:	00 20       	and	r0, r0
    2c0c:	69 f0       	breq	.+26     	; 0x2c28 <modf+0x4c>
    2c0e:	22 0f       	add	r18, r18
    2c10:	33 1f       	adc	r19, r19
    2c12:	44 1f       	adc	r20, r20
    2c14:	b3 95       	inc	r27
    2c16:	da f3       	brmi	.-10     	; 0x2c0e <modf+0x32>
    2c18:	0d d0       	rcall	.+26     	; 0x2c34 <modf+0x58>
    2c1a:	a1 cc       	rjmp	.-1726   	; 0x255e <__subsf3>
    2c1c:	61 30       	cpi	r22, 0x01	; 1
    2c1e:	71 05       	cpc	r23, r1
    2c20:	a0 e8       	ldi	r26, 0x80	; 128
    2c22:	8a 07       	cpc	r24, r26
    2c24:	b9 46       	sbci	r27, 0x69	; 105
    2c26:	30 f4       	brcc	.+12     	; 0x2c34 <modf+0x58>
    2c28:	9b 01       	movw	r18, r22
    2c2a:	ac 01       	movw	r20, r24
    2c2c:	66 27       	eor	r22, r22
    2c2e:	77 27       	eor	r23, r23
    2c30:	88 27       	eor	r24, r24
    2c32:	90 78       	andi	r25, 0x80	; 128
    2c34:	30 96       	adiw	r30, 0x00	; 0
    2c36:	21 f0       	breq	.+8      	; 0x2c40 <modf+0x64>
    2c38:	20 83       	st	Z, r18
    2c3a:	31 83       	std	Z+1, r19	; 0x01
    2c3c:	42 83       	std	Z+2, r20	; 0x02
    2c3e:	53 83       	std	Z+3, r21	; 0x03
    2c40:	08 95       	ret

00002c42 <__fp_mpack>:
    2c42:	9f 3f       	cpi	r25, 0xFF	; 255
    2c44:	31 f0       	breq	.+12     	; 0x2c52 <__fp_mpack_finite+0xc>

00002c46 <__fp_mpack_finite>:
    2c46:	91 50       	subi	r25, 0x01	; 1
    2c48:	20 f4       	brcc	.+8      	; 0x2c52 <__fp_mpack_finite+0xc>
    2c4a:	87 95       	ror	r24
    2c4c:	77 95       	ror	r23
    2c4e:	67 95       	ror	r22
    2c50:	b7 95       	ror	r27
    2c52:	88 0f       	add	r24, r24
    2c54:	91 1d       	adc	r25, r1
    2c56:	96 95       	lsr	r25
    2c58:	87 95       	ror	r24
    2c5a:	97 f9       	bld	r25, 7
    2c5c:	08 95       	ret

00002c5e <__mulsi3>:
    2c5e:	db 01       	movw	r26, r22
    2c60:	8f 93       	push	r24
    2c62:	9f 93       	push	r25
    2c64:	52 d0       	rcall	.+164    	; 0x2d0a <__muluhisi3>
    2c66:	bf 91       	pop	r27
    2c68:	af 91       	pop	r26
    2c6a:	a2 9f       	mul	r26, r18
    2c6c:	80 0d       	add	r24, r0
    2c6e:	91 1d       	adc	r25, r1
    2c70:	a3 9f       	mul	r26, r19
    2c72:	90 0d       	add	r25, r0
    2c74:	b2 9f       	mul	r27, r18
    2c76:	90 0d       	add	r25, r0
    2c78:	11 24       	eor	r1, r1
    2c7a:	08 95       	ret

00002c7c <__divmodhi4>:
    2c7c:	97 fb       	bst	r25, 7
    2c7e:	07 2e       	mov	r0, r23
    2c80:	16 f4       	brtc	.+4      	; 0x2c86 <__divmodhi4+0xa>
    2c82:	00 94       	com	r0
    2c84:	06 d0       	rcall	.+12     	; 0x2c92 <__divmodhi4_neg1>
    2c86:	77 fd       	sbrc	r23, 7
    2c88:	08 d0       	rcall	.+16     	; 0x2c9a <__divmodhi4_neg2>
    2c8a:	49 d0       	rcall	.+146    	; 0x2d1e <__udivmodhi4>
    2c8c:	07 fc       	sbrc	r0, 7
    2c8e:	05 d0       	rcall	.+10     	; 0x2c9a <__divmodhi4_neg2>
    2c90:	3e f4       	brtc	.+14     	; 0x2ca0 <__divmodhi4_exit>

00002c92 <__divmodhi4_neg1>:
    2c92:	90 95       	com	r25
    2c94:	81 95       	neg	r24
    2c96:	9f 4f       	sbci	r25, 0xFF	; 255
    2c98:	08 95       	ret

00002c9a <__divmodhi4_neg2>:
    2c9a:	70 95       	com	r23
    2c9c:	61 95       	neg	r22
    2c9e:	7f 4f       	sbci	r23, 0xFF	; 255

00002ca0 <__divmodhi4_exit>:
    2ca0:	08 95       	ret

00002ca2 <__divmodsi4>:
    2ca2:	05 2e       	mov	r0, r21
    2ca4:	97 fb       	bst	r25, 7
    2ca6:	16 f4       	brtc	.+4      	; 0x2cac <__divmodsi4+0xa>
    2ca8:	00 94       	com	r0
    2caa:	0f d0       	rcall	.+30     	; 0x2cca <__negsi2>
    2cac:	57 fd       	sbrc	r21, 7
    2cae:	05 d0       	rcall	.+10     	; 0x2cba <__divmodsi4_neg2>
    2cb0:	4a d0       	rcall	.+148    	; 0x2d46 <__udivmodsi4>
    2cb2:	07 fc       	sbrc	r0, 7
    2cb4:	02 d0       	rcall	.+4      	; 0x2cba <__divmodsi4_neg2>
    2cb6:	46 f4       	brtc	.+16     	; 0x2cc8 <__divmodsi4_exit>
    2cb8:	08 c0       	rjmp	.+16     	; 0x2cca <__negsi2>

00002cba <__divmodsi4_neg2>:
    2cba:	50 95       	com	r21
    2cbc:	40 95       	com	r20
    2cbe:	30 95       	com	r19
    2cc0:	21 95       	neg	r18
    2cc2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc4:	4f 4f       	sbci	r20, 0xFF	; 255
    2cc6:	5f 4f       	sbci	r21, 0xFF	; 255

00002cc8 <__divmodsi4_exit>:
    2cc8:	08 95       	ret

00002cca <__negsi2>:
    2cca:	90 95       	com	r25
    2ccc:	80 95       	com	r24
    2cce:	70 95       	com	r23
    2cd0:	61 95       	neg	r22
    2cd2:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd4:	8f 4f       	sbci	r24, 0xFF	; 255
    2cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd8:	08 95       	ret

00002cda <__tablejump2__>:
    2cda:	ee 0f       	add	r30, r30
    2cdc:	ff 1f       	adc	r31, r31
    2cde:	00 24       	eor	r0, r0
    2ce0:	00 1c       	adc	r0, r0
    2ce2:	0b be       	out	0x3b, r0	; 59
    2ce4:	07 90       	elpm	r0, Z+
    2ce6:	f6 91       	elpm	r31, Z
    2ce8:	e0 2d       	mov	r30, r0
    2cea:	09 94       	ijmp

00002cec <__umulhisi3>:
    2cec:	a2 9f       	mul	r26, r18
    2cee:	b0 01       	movw	r22, r0
    2cf0:	b3 9f       	mul	r27, r19
    2cf2:	c0 01       	movw	r24, r0
    2cf4:	a3 9f       	mul	r26, r19
    2cf6:	70 0d       	add	r23, r0
    2cf8:	81 1d       	adc	r24, r1
    2cfa:	11 24       	eor	r1, r1
    2cfc:	91 1d       	adc	r25, r1
    2cfe:	b2 9f       	mul	r27, r18
    2d00:	70 0d       	add	r23, r0
    2d02:	81 1d       	adc	r24, r1
    2d04:	11 24       	eor	r1, r1
    2d06:	91 1d       	adc	r25, r1
    2d08:	08 95       	ret

00002d0a <__muluhisi3>:
    2d0a:	f0 df       	rcall	.-32     	; 0x2cec <__umulhisi3>
    2d0c:	a5 9f       	mul	r26, r21
    2d0e:	90 0d       	add	r25, r0
    2d10:	b4 9f       	mul	r27, r20
    2d12:	90 0d       	add	r25, r0
    2d14:	a4 9f       	mul	r26, r20
    2d16:	80 0d       	add	r24, r0
    2d18:	91 1d       	adc	r25, r1
    2d1a:	11 24       	eor	r1, r1
    2d1c:	08 95       	ret

00002d1e <__udivmodhi4>:
    2d1e:	aa 1b       	sub	r26, r26
    2d20:	bb 1b       	sub	r27, r27
    2d22:	51 e1       	ldi	r21, 0x11	; 17
    2d24:	07 c0       	rjmp	.+14     	; 0x2d34 <__udivmodhi4_ep>

00002d26 <__udivmodhi4_loop>:
    2d26:	aa 1f       	adc	r26, r26
    2d28:	bb 1f       	adc	r27, r27
    2d2a:	a6 17       	cp	r26, r22
    2d2c:	b7 07       	cpc	r27, r23
    2d2e:	10 f0       	brcs	.+4      	; 0x2d34 <__udivmodhi4_ep>
    2d30:	a6 1b       	sub	r26, r22
    2d32:	b7 0b       	sbc	r27, r23

00002d34 <__udivmodhi4_ep>:
    2d34:	88 1f       	adc	r24, r24
    2d36:	99 1f       	adc	r25, r25
    2d38:	5a 95       	dec	r21
    2d3a:	a9 f7       	brne	.-22     	; 0x2d26 <__udivmodhi4_loop>
    2d3c:	80 95       	com	r24
    2d3e:	90 95       	com	r25
    2d40:	bc 01       	movw	r22, r24
    2d42:	cd 01       	movw	r24, r26
    2d44:	08 95       	ret

00002d46 <__udivmodsi4>:
    2d46:	a1 e2       	ldi	r26, 0x21	; 33
    2d48:	1a 2e       	mov	r1, r26
    2d4a:	aa 1b       	sub	r26, r26
    2d4c:	bb 1b       	sub	r27, r27
    2d4e:	fd 01       	movw	r30, r26
    2d50:	0d c0       	rjmp	.+26     	; 0x2d6c <__udivmodsi4_ep>

00002d52 <__udivmodsi4_loop>:
    2d52:	aa 1f       	adc	r26, r26
    2d54:	bb 1f       	adc	r27, r27
    2d56:	ee 1f       	adc	r30, r30
    2d58:	ff 1f       	adc	r31, r31
    2d5a:	a2 17       	cp	r26, r18
    2d5c:	b3 07       	cpc	r27, r19
    2d5e:	e4 07       	cpc	r30, r20
    2d60:	f5 07       	cpc	r31, r21
    2d62:	20 f0       	brcs	.+8      	; 0x2d6c <__udivmodsi4_ep>
    2d64:	a2 1b       	sub	r26, r18
    2d66:	b3 0b       	sbc	r27, r19
    2d68:	e4 0b       	sbc	r30, r20
    2d6a:	f5 0b       	sbc	r31, r21

00002d6c <__udivmodsi4_ep>:
    2d6c:	66 1f       	adc	r22, r22
    2d6e:	77 1f       	adc	r23, r23
    2d70:	88 1f       	adc	r24, r24
    2d72:	99 1f       	adc	r25, r25
    2d74:	1a 94       	dec	r1
    2d76:	69 f7       	brne	.-38     	; 0x2d52 <__udivmodsi4_loop>
    2d78:	60 95       	com	r22
    2d7a:	70 95       	com	r23
    2d7c:	80 95       	com	r24
    2d7e:	90 95       	com	r25
    2d80:	9b 01       	movw	r18, r22
    2d82:	ac 01       	movw	r20, r24
    2d84:	bd 01       	movw	r22, r26
    2d86:	cf 01       	movw	r24, r30
    2d88:	08 95       	ret

00002d8a <eeprom_read_block>:
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22

00002d8e <eeprom_read_blraw>:
    2d8e:	fc 01       	movw	r30, r24
    2d90:	e1 99       	sbic	0x1c, 1	; 28
    2d92:	fe cf       	rjmp	.-4      	; 0x2d90 <eeprom_read_blraw+0x2>
    2d94:	06 c0       	rjmp	.+12     	; 0x2da2 <eeprom_read_blraw+0x14>
    2d96:	ff bb       	out	0x1f, r31	; 31
    2d98:	ee bb       	out	0x1e, r30	; 30
    2d9a:	e0 9a       	sbi	0x1c, 0	; 28
    2d9c:	31 96       	adiw	r30, 0x01	; 1
    2d9e:	0d b2       	in	r0, 0x1d	; 29
    2da0:	0d 92       	st	X+, r0
    2da2:	41 50       	subi	r20, 0x01	; 1
    2da4:	50 40       	sbci	r21, 0x00	; 0
    2da6:	b8 f7       	brcc	.-18     	; 0x2d96 <eeprom_read_blraw+0x8>
    2da8:	08 95       	ret

00002daa <eeprom_read_byte>:
    2daa:	e1 99       	sbic	0x1c, 1	; 28
    2dac:	fe cf       	rjmp	.-4      	; 0x2daa <eeprom_read_byte>
    2dae:	9f bb       	out	0x1f, r25	; 31
    2db0:	8e bb       	out	0x1e, r24	; 30
    2db2:	e0 9a       	sbi	0x1c, 0	; 28
    2db4:	99 27       	eor	r25, r25
    2db6:	8d b3       	in	r24, 0x1d	; 29
    2db8:	08 95       	ret

00002dba <eeprom_read_word>:
    2dba:	a8 e1       	ldi	r26, 0x18	; 24
    2dbc:	b0 e0       	ldi	r27, 0x00	; 0
    2dbe:	42 e0       	ldi	r20, 0x02	; 2
    2dc0:	50 e0       	ldi	r21, 0x00	; 0
    2dc2:	e5 cf       	rjmp	.-54     	; 0x2d8e <eeprom_read_blraw>

00002dc4 <eeprom_update_block>:
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	a4 0f       	add	r26, r20
    2dc8:	b5 1f       	adc	r27, r21
    2dca:	41 50       	subi	r20, 0x01	; 1
    2dcc:	50 40       	sbci	r21, 0x00	; 0
    2dce:	40 f0       	brcs	.+16     	; 0x2de0 <eeprom_update_block+0x1c>
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	84 0f       	add	r24, r20
    2dd4:	95 1f       	adc	r25, r21
    2dd6:	2e 91       	ld	r18, -X
    2dd8:	05 d0       	rcall	.+10     	; 0x2de4 <eeprom_update_r18>
    2dda:	41 50       	subi	r20, 0x01	; 1
    2ddc:	50 40       	sbci	r21, 0x00	; 0
    2dde:	d8 f7       	brcc	.-10     	; 0x2dd6 <eeprom_update_block+0x12>
    2de0:	08 95       	ret

00002de2 <eeprom_update_byte>:
    2de2:	26 2f       	mov	r18, r22

00002de4 <eeprom_update_r18>:
    2de4:	e1 99       	sbic	0x1c, 1	; 28
    2de6:	fe cf       	rjmp	.-4      	; 0x2de4 <eeprom_update_r18>
    2de8:	9f bb       	out	0x1f, r25	; 31
    2dea:	8e bb       	out	0x1e, r24	; 30
    2dec:	e0 9a       	sbi	0x1c, 0	; 28
    2dee:	01 97       	sbiw	r24, 0x01	; 1
    2df0:	0d b2       	in	r0, 0x1d	; 29
    2df2:	02 16       	cp	r0, r18
    2df4:	31 f0       	breq	.+12     	; 0x2e02 <eeprom_update_r18+0x1e>
    2df6:	2d bb       	out	0x1d, r18	; 29
    2df8:	0f b6       	in	r0, 0x3f	; 63
    2dfa:	f8 94       	cli
    2dfc:	e2 9a       	sbi	0x1c, 2	; 28
    2dfe:	e1 9a       	sbi	0x1c, 1	; 28
    2e00:	0f be       	out	0x3f, r0	; 63
    2e02:	08 95       	ret

00002e04 <eeprom_update_dword>:
    2e04:	03 96       	adiw	r24, 0x03	; 3
    2e06:	27 2f       	mov	r18, r23
    2e08:	ed df       	rcall	.-38     	; 0x2de4 <eeprom_update_r18>
    2e0a:	eb df       	rcall	.-42     	; 0x2de2 <eeprom_update_byte>
    2e0c:	25 2f       	mov	r18, r21
    2e0e:	ea df       	rcall	.-44     	; 0x2de4 <eeprom_update_r18>
    2e10:	24 2f       	mov	r18, r20
    2e12:	e8 cf       	rjmp	.-48     	; 0x2de4 <eeprom_update_r18>

00002e14 <eeprom_update_word>:
    2e14:	01 96       	adiw	r24, 0x01	; 1
    2e16:	27 2f       	mov	r18, r23
    2e18:	e5 df       	rcall	.-54     	; 0x2de4 <eeprom_update_r18>
    2e1a:	e3 cf       	rjmp	.-58     	; 0x2de2 <eeprom_update_byte>

00002e1c <eeprom_write_block>:
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	02 c0       	rjmp	.+4      	; 0x2e26 <eeprom_write_block+0xa>
    2e22:	2d 91       	ld	r18, X+
    2e24:	05 d0       	rcall	.+10     	; 0x2e30 <eeprom_write_r18>
    2e26:	41 50       	subi	r20, 0x01	; 1
    2e28:	50 40       	sbci	r21, 0x00	; 0
    2e2a:	d8 f7       	brcc	.-10     	; 0x2e22 <eeprom_write_block+0x6>
    2e2c:	08 95       	ret

00002e2e <eeprom_write_byte>:
    2e2e:	26 2f       	mov	r18, r22

00002e30 <eeprom_write_r18>:
    2e30:	e1 99       	sbic	0x1c, 1	; 28
    2e32:	fe cf       	rjmp	.-4      	; 0x2e30 <eeprom_write_r18>
    2e34:	9f bb       	out	0x1f, r25	; 31
    2e36:	8e bb       	out	0x1e, r24	; 30
    2e38:	2d bb       	out	0x1d, r18	; 29
    2e3a:	0f b6       	in	r0, 0x3f	; 63
    2e3c:	f8 94       	cli
    2e3e:	e2 9a       	sbi	0x1c, 2	; 28
    2e40:	e1 9a       	sbi	0x1c, 1	; 28
    2e42:	0f be       	out	0x3f, r0	; 63
    2e44:	01 96       	adiw	r24, 0x01	; 1
    2e46:	08 95       	ret

00002e48 <eeprom_write_dword>:
    2e48:	24 2f       	mov	r18, r20
    2e4a:	f2 df       	rcall	.-28     	; 0x2e30 <eeprom_write_r18>
    2e4c:	25 2f       	mov	r18, r21
    2e4e:	f0 df       	rcall	.-32     	; 0x2e30 <eeprom_write_r18>
    2e50:	00 c0       	rjmp	.+0      	; 0x2e52 <eeprom_write_word>

00002e52 <eeprom_write_word>:
    2e52:	ed df       	rcall	.-38     	; 0x2e2e <eeprom_write_byte>
    2e54:	27 2f       	mov	r18, r23
    2e56:	ec cf       	rjmp	.-40     	; 0x2e30 <eeprom_write_r18>

00002e58 <_exit>:
    2e58:	f8 94       	cli

00002e5a <__stop_program>:
    2e5a:	ff cf       	rjmp	.-2      	; 0x2e5a <__stop_program>
