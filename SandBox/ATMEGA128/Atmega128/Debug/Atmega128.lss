
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00003274  00003308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010b  00800136  00800136  0000333e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000333e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006b8  00000000  00000000  000033b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000635a  00000000  00000000  00003a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016ff  00000000  00000000  00009dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003862  00000000  00000000  0000b4c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e98  00000000  00000000  0000ed24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001178  00000000  00000000  0000fbbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000044d3  00000000  00000000  00010d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d8  00000000  00000000  00015207  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b9 c0       	rjmp	.+370    	; 0x174 <__ctors_end>
       2:	00 00       	nop
       4:	6a c2       	rjmp	.+1236   	; 0x4da <__vector_1>
       6:	00 00       	nop
       8:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__vector_2>
       c:	70 c2       	rjmp	.+1248   	; 0x4ee <__vector_3>
       e:	00 00       	nop
      10:	78 c2       	rjmp	.+1264   	; 0x502 <__vector_4>
      12:	00 00       	nop
      14:	80 c2       	rjmp	.+1280   	; 0x516 <__vector_5>
      16:	00 00       	nop
      18:	88 c2       	rjmp	.+1296   	; 0x52a <__vector_6>
      1a:	00 00       	nop
      1c:	90 c2       	rjmp	.+1312   	; 0x53e <__vector_7>
      1e:	00 00       	nop
      20:	98 c2       	rjmp	.+1328   	; 0x552 <__vector_8>
      22:	00 00       	nop
      24:	c6 c0       	rjmp	.+396    	; 0x1b2 <__bad_interrupt>
      26:	00 00       	nop
      28:	19 c5       	rjmp	.+2610   	; 0xa5c <__vector_10>
      2a:	00 00       	nop
      2c:	ef c4       	rjmp	.+2526   	; 0xa0c <__vector_11>
      2e:	00 00       	nop
      30:	0c 94 27 14 	jmp	0x284e	; 0x284e <__vector_12>
      34:	f5 c4       	rjmp	.+2538   	; 0xa20 <__vector_13>
      36:	00 00       	nop
      38:	07 c5       	rjmp	.+2574   	; 0xa48 <__vector_14>
      3a:	00 00       	nop
      3c:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__vector_15>
      40:	db c4       	rjmp	.+2486   	; 0x9f8 <__vector_16>
      42:	00 00       	nop
      44:	b6 c0       	rjmp	.+364    	; 0x1b2 <__bad_interrupt>
      46:	00 00       	nop
      48:	b4 c0       	rjmp	.+360    	; 0x1b2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b2 c0       	rjmp	.+356    	; 0x1b2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	b0 c0       	rjmp	.+352    	; 0x1b2 <__bad_interrupt>
      52:	00 00       	nop
      54:	ae c0       	rjmp	.+348    	; 0x1b2 <__bad_interrupt>
      56:	00 00       	nop
      58:	ac c0       	rjmp	.+344    	; 0x1b2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	aa c0       	rjmp	.+340    	; 0x1b2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e9 c4       	rjmp	.+2514   	; 0xa34 <__vector_24>
      62:	00 00       	nop
      64:	05 c5       	rjmp	.+2570   	; 0xa70 <__vector_25>
      66:	00 00       	nop
      68:	0d c5       	rjmp	.+2586   	; 0xa84 <__vector_26>
      6a:	00 00       	nop
      6c:	15 c5       	rjmp	.+2602   	; 0xa98 <__vector_27>
      6e:	00 00       	nop
      70:	1d c5       	rjmp	.+2618   	; 0xaac <__vector_28>
      72:	00 00       	nop
      74:	25 c5       	rjmp	.+2634   	; 0xac0 <__vector_29>
      76:	00 00       	nop
      78:	9c c0       	rjmp	.+312    	; 0x1b2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9a c0       	rjmp	.+308    	; 0x1b2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	98 c0       	rjmp	.+304    	; 0x1b2 <__bad_interrupt>
      82:	00 00       	nop
      84:	96 c0       	rjmp	.+300    	; 0x1b2 <__bad_interrupt>
      86:	00 00       	nop
      88:	94 c0       	rjmp	.+296    	; 0x1b2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	11 01       	movw	r2, r2
      8e:	2d 01       	movw	r4, r26
      90:	49 01       	movw	r8, r18
      92:	65 01       	movw	r12, r10
      94:	81 01       	movw	r16, r2
      96:	9c 01       	movw	r18, r24
      98:	b7 01       	movw	r22, r14
      9a:	d2 01       	movw	r26, r4
      9c:	f8 01       	movw	r30, r16
      9e:	fc 01       	movw	r30, r24
      a0:	00 02       	muls	r16, r16
      a2:	04 02       	muls	r16, r20
      a4:	08 02       	muls	r16, r24
      a6:	0c 02       	muls	r16, r28
      a8:	10 02       	muls	r17, r16
      aa:	14 02       	muls	r17, r20
      ac:	23 02       	muls	r18, r19
      ae:	27 02       	muls	r18, r23
      b0:	2b 02       	muls	r18, r27
      b2:	2f 02       	muls	r18, r31
      b4:	33 02       	muls	r19, r19
      b6:	37 02       	muls	r19, r23
      b8:	3b 02       	muls	r19, r27
      ba:	3f 02       	muls	r19, r31
      bc:	1d 04       	cpc	r1, r13
      be:	21 04       	cpc	r2, r1
      c0:	25 04       	cpc	r2, r5
      c2:	29 04       	cpc	r2, r9
      c4:	2d 04       	cpc	r2, r13
      c6:	34 04       	cpc	r3, r4
      c8:	3b 04       	cpc	r3, r11
      ca:	42 04       	cpc	r4, r2
      cc:	46 04       	cpc	r4, r6
      ce:	4d 04       	cpc	r4, r13
      d0:	54 04       	cpc	r5, r4
      d2:	5b 04       	cpc	r5, r11
      d4:	5f 04       	cpc	r5, r15
      d6:	66 04       	cpc	r6, r6
      d8:	6d 04       	cpc	r6, r13
      da:	89 04       	cpc	r8, r9
      dc:	8d 04       	cpc	r8, r13
      de:	91 04       	cpc	r9, r1
      e0:	95 04       	cpc	r9, r5
      e2:	9b 04       	cpc	r9, r11
      e4:	9f 04       	cpc	r9, r15
      e6:	a3 04       	cpc	r10, r3
      e8:	a7 04       	cpc	r10, r7
      ea:	b0 04       	cpc	r11, r0
      ec:	b4 04       	cpc	r11, r4
      ee:	b8 04       	cpc	r11, r8
      f0:	c1 04       	cpc	r12, r1
      f2:	07 63       	ori	r16, 0x37	; 55
      f4:	42 36       	cpi	r20, 0x62	; 98
      f6:	b7 9b       	sbis	0x16, 7	; 22
      f8:	d8 a7       	std	Y+40, r29	; 0x28
      fa:	1a 39       	cpi	r17, 0x9A	; 154
      fc:	68 56       	subi	r22, 0x68	; 104
      fe:	18 ae       	std	Y+56, r1	; 0x38
     100:	ba ab       	std	Y+50, r27	; 0x32
     102:	55 8c       	ldd	r5, Z+29	; 0x1d
     104:	1d 3c       	cpi	r17, 0xCD	; 205
     106:	b7 cc       	rjmp	.-1682   	; 0xfffffa76 <__eeprom_end+0xff7efa76>
     108:	57 63       	ori	r21, 0x37	; 55
     10a:	bd 6d       	ori	r27, 0xDD	; 221
     10c:	ed fd       	.word	0xfded	; ????
     10e:	75 3e       	cpi	r23, 0xE5	; 229
     110:	f6 17       	cp	r31, r22
     112:	72 31       	cpi	r23, 0x12	; 18
     114:	bf 00       	.word	0x00bf	; ????
     116:	00 00       	nop
     118:	80 3f       	cpi	r24, 0xF0	; 240
     11a:	08 00       	.word	0x0008	; ????
     11c:	00 00       	nop
     11e:	be 92       	st	-X, r11
     120:	24 49       	sbci	r18, 0x94	; 148
     122:	12 3e       	cpi	r17, 0xE2	; 226
     124:	ab aa       	std	Y+51, r10	; 0x33
     126:	aa 2a       	or	r10, r26
     128:	be cd       	rjmp	.-1156   	; 0xfffffca6 <__eeprom_end+0xff7efca6>
     12a:	cc cc       	rjmp	.-1640   	; 0xfffffac4 <__eeprom_end+0xff7efac4>
     12c:	4c 3e       	cpi	r20, 0xEC	; 236
     12e:	00 00       	nop
     130:	00 80       	ld	r0, Z
     132:	be ab       	std	Y+54, r27	; 0x36
     134:	aa aa       	std	Y+50, r10	; 0x32
     136:	aa 3e       	cpi	r26, 0xEA	; 234
     138:	00 00       	nop
     13a:	00 00       	nop
     13c:	bf 00       	.word	0x00bf	; ????
     13e:	00 00       	nop
     140:	80 3f       	cpi	r24, 0xF0	; 240
     142:	00 00       	nop
     144:	00 00       	nop
     146:	00 08       	sbc	r0, r0
     148:	41 78       	andi	r20, 0x81	; 129
     14a:	d3 bb       	out	0x13, r29	; 19
     14c:	43 87       	std	Z+11, r20	; 0x0b
     14e:	d1 13       	cpse	r29, r17
     150:	3d 19       	sub	r19, r13
     152:	0e 3c       	cpi	r16, 0xCE	; 206
     154:	c3 bd       	out	0x23, r28	; 35
     156:	42 82       	std	Z+2, r4	; 0x02
     158:	ad 2b       	or	r26, r29
     15a:	3e 68       	ori	r19, 0x8E	; 142
     15c:	ec 82       	std	Y+4, r14	; 0x04
     15e:	76 be       	out	0x36, r7	; 54
     160:	d9 8f       	std	Y+25, r29	; 0x19
     162:	e1 a9       	ldd	r30, Z+49	; 0x31
     164:	3e 4c       	sbci	r19, 0xCE	; 206
     166:	80 ef       	ldi	r24, 0xF0	; 240
     168:	ff be       	out	0x3f, r15	; 63
     16a:	01 c4       	rjmp	.+2050   	; 0x96e <TIMER_COUNTER1enable+0x16a>
     16c:	ff 7f       	andi	r31, 0xFF	; 255
     16e:	3f 00       	.word	0x003f	; ????
     170:	00 00       	nop
	...

00000174 <__ctors_end>:
     174:	11 24       	eor	r1, r1
     176:	1f be       	out	0x3f, r1	; 63
     178:	cf ef       	ldi	r28, 0xFF	; 255
     17a:	d0 e1       	ldi	r29, 0x10	; 16
     17c:	de bf       	out	0x3e, r29	; 62
     17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
     180:	11 e0       	ldi	r17, 0x01	; 1
     182:	a0 e0       	ldi	r26, 0x00	; 0
     184:	b1 e0       	ldi	r27, 0x01	; 1
     186:	e4 e7       	ldi	r30, 0x74	; 116
     188:	f2 e3       	ldi	r31, 0x32	; 50
     18a:	00 e0       	ldi	r16, 0x00	; 0
     18c:	0b bf       	out	0x3b, r16	; 59
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x14>
     190:	07 90       	elpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a6 33       	cpi	r26, 0x36	; 54
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0x10>

0000019a <__do_clear_bss>:
     19a:	22 e0       	ldi	r18, 0x02	; 2
     19c:	a6 e3       	ldi	r26, 0x36	; 54
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a1 34       	cpi	r26, 0x41	; 65
     1a6:	b2 07       	cpc	r27, r18
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <main>
     1ae:	0c 94 38 19 	jmp	0x3270	; 0x3270 <_exit>

000001b2 <__bad_interrupt>:
     1b2:	26 cf       	rjmp	.-436    	; 0x0 <__vectors>

000001b4 <INTERRUPT_reset_status>:
	return interrupt;
}
uint8_t INTERRUPT_reset_status(void)
{
	uint8_t reset, ret=0;
	reset=(MCU_Control_Status_Register & MCU_Control_Status_Register_Mask);
     1b4:	84 b7       	in	r24, 0x34	; 52
	switch(reset){
     1b6:	8f 71       	andi	r24, 0x1F	; 31
     1b8:	84 30       	cpi	r24, 0x04	; 4
     1ba:	a9 f0       	breq	.+42     	; 0x1e6 <INTERRUPT_reset_status+0x32>
     1bc:	28 f4       	brcc	.+10     	; 0x1c8 <INTERRUPT_reset_status+0x14>
     1be:	81 30       	cpi	r24, 0x01	; 1
     1c0:	41 f0       	breq	.+16     	; 0x1d2 <INTERRUPT_reset_status+0x1e>
     1c2:	82 30       	cpi	r24, 0x02	; 2
     1c4:	59 f0       	breq	.+22     	; 0x1dc <INTERRUPT_reset_status+0x28>
     1c6:	1e c0       	rjmp	.+60     	; 0x204 <INTERRUPT_reset_status+0x50>
     1c8:	88 30       	cpi	r24, 0x08	; 8
     1ca:	91 f0       	breq	.+36     	; 0x1f0 <INTERRUPT_reset_status+0x3c>
     1cc:	80 31       	cpi	r24, 0x10	; 16
     1ce:	a9 f0       	breq	.+42     	; 0x1fa <INTERRUPT_reset_status+0x46>
     1d0:	19 c0       	rjmp	.+50     	; 0x204 <INTERRUPT_reset_status+0x50>
		case 1: // Power-On Reset Flag
			ret=0;
			MCU_Control_Status_Register &= ~(1<<PORF);
     1d2:	84 b7       	in	r24, 0x34	; 52
     1d4:	8e 7f       	andi	r24, 0xFE	; 254
     1d6:	84 bf       	out	0x34, r24	; 52
{
	uint8_t reset, ret=0;
	reset=(MCU_Control_Status_Register & MCU_Control_Status_Register_Mask);
	switch(reset){
		case 1: // Power-On Reset Flag
			ret=0;
     1d8:	80 e0       	ldi	r24, 0x00	; 0
			MCU_Control_Status_Register &= ~(1<<PORF);
			break;
     1da:	08 95       	ret
		case 2: // External Reset Flag
			MCU_Control_Status_Register &= ~(1<<EXTRF);
     1dc:	84 b7       	in	r24, 0x34	; 52
     1de:	8d 7f       	andi	r24, 0xFD	; 253
     1e0:	84 bf       	out	0x34, r24	; 52
			ret=1;
     1e2:	81 e0       	ldi	r24, 0x01	; 1
			break;
     1e4:	08 95       	ret
		case 4: // Brown-out Reset Flag
			MCU_Control_Status_Register &= ~(1<<BORF);
     1e6:	84 b7       	in	r24, 0x34	; 52
     1e8:	8b 7f       	andi	r24, 0xFB	; 251
     1ea:	84 bf       	out	0x34, r24	; 52
			ret=2;
     1ec:	82 e0       	ldi	r24, 0x02	; 2
			break;
     1ee:	08 95       	ret
		case 8: // Watchdog Reset Flag
			MCU_Control_Status_Register &= ~(1<<WDRF);
     1f0:	84 b7       	in	r24, 0x34	; 52
     1f2:	87 7f       	andi	r24, 0xF7	; 247
     1f4:	84 bf       	out	0x34, r24	; 52
			ret=3;
     1f6:	83 e0       	ldi	r24, 0x03	; 3
			break;
     1f8:	08 95       	ret
		case 16: // JTAG Reset Flag
			MCU_Control_Status_Register &= ~(1<<JTRF);
     1fa:	84 b7       	in	r24, 0x34	; 52
     1fc:	8f 7e       	andi	r24, 0xEF	; 239
     1fe:	84 bf       	out	0x34, r24	; 52
			ret=4;
     200:	84 e0       	ldi	r24, 0x04	; 4
			break;
     202:	08 95       	ret
		default: // clear all status
			MCU_Control_Status_Register &= ~(MCU_Control_Status_Register_Mask);
     204:	84 b7       	in	r24, 0x34	; 52
     206:	80 7e       	andi	r24, 0xE0	; 224
     208:	84 bf       	out	0x34, r24	; 52
	interrupt.reset_status=INTERRUPT_reset_status;
	return interrupt;
}
uint8_t INTERRUPT_reset_status(void)
{
	uint8_t reset, ret=0;
     20a:	80 e0       	ldi	r24, 0x00	; 0
		default: // clear all status
			MCU_Control_Status_Register &= ~(MCU_Control_Status_Register_Mask);
			break;
	}
	return ret;
}
     20c:	08 95       	ret

0000020e <INTERRUPT_set>:
void INTERRUPT_set(uint8_t channel, uint8_t sense)
{
	switch( channel ){
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	88 30       	cpi	r24, 0x08	; 8
     212:	91 05       	cpc	r25, r1
     214:	08 f0       	brcs	.+2      	; 0x218 <INTERRUPT_set+0xa>
     216:	e1 c0       	rjmp	.+450    	; 0x3da <INTERRUPT_set+0x1cc>
     218:	fc 01       	movw	r30, r24
     21a:	ea 5b       	subi	r30, 0xBA	; 186
     21c:	ff 4f       	sbci	r31, 0xFF	; 255
     21e:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <__tablejump2__>
		case 0: 
			External_Interrupt_Mask_Register &= ~(1<<INT0);
     222:	89 b7       	in	r24, 0x39	; 57
     224:	8e 7f       	andi	r24, 0xFE	; 254
     226:	89 bf       	out	0x39, r24	; 57
			External_Interrupt_Control_Register_A &= ~((1<<ISC01) | (1<<ISC00));
     228:	ea e6       	ldi	r30, 0x6A	; 106
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	8c 7f       	andi	r24, 0xFC	; 252
     230:	80 83       	st	Z, r24
			switch(sense){
     232:	62 30       	cpi	r22, 0x02	; 2
     234:	19 f0       	breq	.+6      	; 0x23c <INTERRUPT_set+0x2e>
     236:	63 30       	cpi	r22, 0x03	; 3
     238:	39 f0       	breq	.+14     	; 0x248 <INTERRUPT_set+0x3a>
     23a:	0b c0       	rjmp	.+22     	; 0x252 <INTERRUPT_set+0x44>
				case 0: // The low level of INTn generates an interrupt request.
				case 1: // The low level of INTn generates an interrupt request.
					break;
				case 2: // The falling edge of INTn generates asynchronously an interrupt request.
					External_Interrupt_Control_Register_A |= (1<<ISC01);
     23c:	ea e6       	ldi	r30, 0x6A	; 106
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	82 60       	ori	r24, 0x02	; 2
     244:	80 83       	st	Z, r24
					break;
     246:	05 c0       	rjmp	.+10     	; 0x252 <INTERRUPT_set+0x44>
				case 3: // The rising edge of INTn generates asynchronously an interrupt request.
					External_Interrupt_Control_Register_A |= ((1<<ISC01) | (1<<ISC00));
     248:	ea e6       	ldi	r30, 0x6A	; 106
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	80 81       	ld	r24, Z
     24e:	83 60       	ori	r24, 0x03	; 3
     250:	80 83       	st	Z, r24
					break;
				default: // The low level of INTn generates an interrupt request.
					break;
			}
			External_Interrupt_Mask_Register |= (1<<INT0);
     252:	89 b7       	in	r24, 0x39	; 57
     254:	81 60       	ori	r24, 0x01	; 1
     256:	89 bf       	out	0x39, r24	; 57
			break;
     258:	08 95       	ret
		case 1:
			External_Interrupt_Mask_Register &= ~(1<<INT1);
     25a:	89 b7       	in	r24, 0x39	; 57
     25c:	8d 7f       	andi	r24, 0xFD	; 253
     25e:	89 bf       	out	0x39, r24	; 57
			External_Interrupt_Control_Register_A &= ~((1<<ISC11) | (1<<ISC10));
     260:	ea e6       	ldi	r30, 0x6A	; 106
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	80 81       	ld	r24, Z
     266:	83 7f       	andi	r24, 0xF3	; 243
     268:	80 83       	st	Z, r24
			switch(sense){
     26a:	62 30       	cpi	r22, 0x02	; 2
     26c:	19 f0       	breq	.+6      	; 0x274 <INTERRUPT_set+0x66>
     26e:	63 30       	cpi	r22, 0x03	; 3
     270:	39 f0       	breq	.+14     	; 0x280 <INTERRUPT_set+0x72>
     272:	0b c0       	rjmp	.+22     	; 0x28a <INTERRUPT_set+0x7c>
				case 0: // The low level of INTn generates an interrupt request.
				case 1: // The low level of INTn generates an interrupt request.
					break;
				case 2: // The falling edge of INTn generates asynchronously an interrupt request.
					External_Interrupt_Control_Register_A |= (1<<ISC11);
     274:	ea e6       	ldi	r30, 0x6A	; 106
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	80 81       	ld	r24, Z
     27a:	88 60       	ori	r24, 0x08	; 8
     27c:	80 83       	st	Z, r24
					break;
     27e:	05 c0       	rjmp	.+10     	; 0x28a <INTERRUPT_set+0x7c>
				case 3: // The rising edge of INTn generates asynchronously an interrupt request.
					External_Interrupt_Control_Register_A |= ((1<<ISC11) | (1<<ISC10));
     280:	ea e6       	ldi	r30, 0x6A	; 106
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	80 81       	ld	r24, Z
     286:	8c 60       	ori	r24, 0x0C	; 12
     288:	80 83       	st	Z, r24
					break;
				default: // The low level of INTn generates an interrupt request.
					break;
			}
			External_Interrupt_Mask_Register |= (1<<INT1);
     28a:	89 b7       	in	r24, 0x39	; 57
     28c:	82 60       	ori	r24, 0x02	; 2
     28e:	89 bf       	out	0x39, r24	; 57
			break;
     290:	08 95       	ret
		case 2:
			External_Interrupt_Mask_Register &= ~(1<<INT2);
     292:	89 b7       	in	r24, 0x39	; 57
     294:	8b 7f       	andi	r24, 0xFB	; 251
     296:	89 bf       	out	0x39, r24	; 57
			External_Interrupt_Control_Register_A &= ~((1<<ISC21) | (1<<ISC20));
     298:	ea e6       	ldi	r30, 0x6A	; 106
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	80 81       	ld	r24, Z
     29e:	8f 7c       	andi	r24, 0xCF	; 207
     2a0:	80 83       	st	Z, r24
			switch(sense){
     2a2:	62 30       	cpi	r22, 0x02	; 2
     2a4:	19 f0       	breq	.+6      	; 0x2ac <INTERRUPT_set+0x9e>
     2a6:	63 30       	cpi	r22, 0x03	; 3
     2a8:	39 f0       	breq	.+14     	; 0x2b8 <INTERRUPT_set+0xaa>
     2aa:	0b c0       	rjmp	.+22     	; 0x2c2 <INTERRUPT_set+0xb4>
				case 0: // The low level of INTn generates an interrupt request.
				case 1: // The low level of INTn generates an interrupt request.
					break;
				case 2: // The falling edge of INTn generates asynchronously an interrupt request.
					External_Interrupt_Control_Register_A |= (1<<ISC21);
     2ac:	ea e6       	ldi	r30, 0x6A	; 106
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	80 81       	ld	r24, Z
     2b2:	80 62       	ori	r24, 0x20	; 32
     2b4:	80 83       	st	Z, r24
					break;
     2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <INTERRUPT_set+0xb4>
				case 3: // The rising edge of INTn generates asynchronously an interrupt request.
					External_Interrupt_Control_Register_A |= ((1<<ISC21) | (1<<ISC20));
     2b8:	ea e6       	ldi	r30, 0x6A	; 106
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	80 81       	ld	r24, Z
     2be:	80 63       	ori	r24, 0x30	; 48
     2c0:	80 83       	st	Z, r24
					break;
				default: // The low level of INTn generates an interrupt request.
					break;
			}
			External_Interrupt_Mask_Register |= (1<<INT2);
     2c2:	89 b7       	in	r24, 0x39	; 57
     2c4:	84 60       	ori	r24, 0x04	; 4
     2c6:	89 bf       	out	0x39, r24	; 57
			break;
     2c8:	08 95       	ret
		case 3:
			External_Interrupt_Mask_Register &= ~(1<<INT3);
     2ca:	89 b7       	in	r24, 0x39	; 57
     2cc:	87 7f       	andi	r24, 0xF7	; 247
     2ce:	89 bf       	out	0x39, r24	; 57
			External_Interrupt_Control_Register_A &= ~((1<<ISC31) | (1<<ISC30));
     2d0:	ea e6       	ldi	r30, 0x6A	; 106
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	80 81       	ld	r24, Z
     2d6:	8f 73       	andi	r24, 0x3F	; 63
     2d8:	80 83       	st	Z, r24
			switch(sense){
     2da:	62 30       	cpi	r22, 0x02	; 2
     2dc:	19 f0       	breq	.+6      	; 0x2e4 <INTERRUPT_set+0xd6>
     2de:	63 30       	cpi	r22, 0x03	; 3
     2e0:	39 f0       	breq	.+14     	; 0x2f0 <INTERRUPT_set+0xe2>
     2e2:	0b c0       	rjmp	.+22     	; 0x2fa <INTERRUPT_set+0xec>
				case 0: // The low level of INTn generates an interrupt request.
				case 1: // The low level of INTn generates an interrupt request.
					break;
				case 2: // The falling edge of INTn generates asynchronously an interrupt request.
					External_Interrupt_Control_Register_A |= (1<<ISC31);
     2e4:	ea e6       	ldi	r30, 0x6A	; 106
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	80 81       	ld	r24, Z
     2ea:	80 68       	ori	r24, 0x80	; 128
     2ec:	80 83       	st	Z, r24
					break;
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <INTERRUPT_set+0xec>
				case 3: // The rising edge of INTn generates asynchronously an interrupt request.
					External_Interrupt_Control_Register_A |= ((1<<ISC31) | (1<<ISC30));
     2f0:	ea e6       	ldi	r30, 0x6A	; 106
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	80 6c       	ori	r24, 0xC0	; 192
     2f8:	80 83       	st	Z, r24
					break;
				default: // The low level of INTn generates an interrupt request.
					break;
			}
			External_Interrupt_Mask_Register |= (1<<INT3);
     2fa:	89 b7       	in	r24, 0x39	; 57
     2fc:	88 60       	ori	r24, 0x08	; 8
     2fe:	89 bf       	out	0x39, r24	; 57
			break;
     300:	08 95       	ret
		case 4:
			External_Interrupt_Mask_Register &= ~(1<<INT4);
     302:	89 b7       	in	r24, 0x39	; 57
     304:	8f 7e       	andi	r24, 0xEF	; 239
     306:	89 bf       	out	0x39, r24	; 57
			External_Interrupt_Control_Register_B &= ~((1<<ISC41) | (1<<ISC40));
     308:	8a b7       	in	r24, 0x3a	; 58
     30a:	8c 7f       	andi	r24, 0xFC	; 252
     30c:	8a bf       	out	0x3a, r24	; 58
			switch(sense){
     30e:	62 30       	cpi	r22, 0x02	; 2
     310:	41 f0       	breq	.+16     	; 0x322 <INTERRUPT_set+0x114>
     312:	63 30       	cpi	r22, 0x03	; 3
     314:	51 f0       	breq	.+20     	; 0x32a <INTERRUPT_set+0x11c>
     316:	61 30       	cpi	r22, 0x01	; 1
     318:	59 f4       	brne	.+22     	; 0x330 <INTERRUPT_set+0x122>
				case 0: // The low level of INTn generates an interrupt request.
					break;
				case 1: // Any logical change on INTn generates an interrupt request
					External_Interrupt_Control_Register_B |= (1<<ISC40);
     31a:	8a b7       	in	r24, 0x3a	; 58
     31c:	81 60       	ori	r24, 0x01	; 1
     31e:	8a bf       	out	0x3a, r24	; 58
					break;
     320:	07 c0       	rjmp	.+14     	; 0x330 <INTERRUPT_set+0x122>
				case 2: // The falling edge between two samples of INTn generates an interrupt request.
					External_Interrupt_Control_Register_B |= (1<<ISC41);
     322:	8a b7       	in	r24, 0x3a	; 58
     324:	82 60       	ori	r24, 0x02	; 2
     326:	8a bf       	out	0x3a, r24	; 58
					break;
     328:	03 c0       	rjmp	.+6      	; 0x330 <INTERRUPT_set+0x122>
				case 3: // The rising edge between two samples of INTn generates an interrupt request.
					External_Interrupt_Control_Register_B |= ((1<<ISC41) | (1<<ISC40));
     32a:	8a b7       	in	r24, 0x3a	; 58
     32c:	83 60       	ori	r24, 0x03	; 3
     32e:	8a bf       	out	0x3a, r24	; 58
					break;
				default: // The low level of INTn generates an interrupt request.
					break;
			}
			External_Interrupt_Mask_Register |= (1<<INT4);
     330:	89 b7       	in	r24, 0x39	; 57
     332:	80 61       	ori	r24, 0x10	; 16
     334:	89 bf       	out	0x39, r24	; 57
			break;
     336:	08 95       	ret
		case 5:
			External_Interrupt_Mask_Register &= ~(1<<INT5);
     338:	89 b7       	in	r24, 0x39	; 57
     33a:	8f 7d       	andi	r24, 0xDF	; 223
     33c:	89 bf       	out	0x39, r24	; 57
			External_Interrupt_Control_Register_B &= ~((1<<ISC51) | (1<<ISC50));
     33e:	8a b7       	in	r24, 0x3a	; 58
     340:	83 7f       	andi	r24, 0xF3	; 243
     342:	8a bf       	out	0x3a, r24	; 58
			switch(sense){
     344:	62 30       	cpi	r22, 0x02	; 2
     346:	41 f0       	breq	.+16     	; 0x358 <INTERRUPT_set+0x14a>
     348:	63 30       	cpi	r22, 0x03	; 3
     34a:	51 f0       	breq	.+20     	; 0x360 <INTERRUPT_set+0x152>
     34c:	61 30       	cpi	r22, 0x01	; 1
     34e:	59 f4       	brne	.+22     	; 0x366 <INTERRUPT_set+0x158>
				case 0: // The low level of INTn generates an interrupt request.
					break;
				case 1: // Any logical change on INTn generates an interrupt request
					External_Interrupt_Control_Register_B |= (1<<ISC50);
     350:	8a b7       	in	r24, 0x3a	; 58
     352:	84 60       	ori	r24, 0x04	; 4
     354:	8a bf       	out	0x3a, r24	; 58
					break;
     356:	07 c0       	rjmp	.+14     	; 0x366 <INTERRUPT_set+0x158>
				case 2: // The falling edge between two samples of INTn generates an interrupt request.
					External_Interrupt_Control_Register_B |= (1<<ISC51);
     358:	8a b7       	in	r24, 0x3a	; 58
     35a:	88 60       	ori	r24, 0x08	; 8
     35c:	8a bf       	out	0x3a, r24	; 58
					break;
     35e:	03 c0       	rjmp	.+6      	; 0x366 <INTERRUPT_set+0x158>
				case 3: // The rising edge between two samples of INTn generates an interrupt request.
					External_Interrupt_Control_Register_B |= ((1<<ISC51) | (1<<ISC50));
     360:	8a b7       	in	r24, 0x3a	; 58
     362:	8c 60       	ori	r24, 0x0C	; 12
     364:	8a bf       	out	0x3a, r24	; 58
					break;
				default: // The low level of INTn generates an interrupt request.
					break;
			}
			External_Interrupt_Mask_Register |= (1<<INT5);
     366:	89 b7       	in	r24, 0x39	; 57
     368:	80 62       	ori	r24, 0x20	; 32
     36a:	89 bf       	out	0x39, r24	; 57
			break;
     36c:	08 95       	ret
		case 6:
			External_Interrupt_Mask_Register &= ~(1<<INT6);
     36e:	89 b7       	in	r24, 0x39	; 57
     370:	8f 7b       	andi	r24, 0xBF	; 191
     372:	89 bf       	out	0x39, r24	; 57
			External_Interrupt_Control_Register_B &= ~((1<<ISC61) | (1<<ISC60));
     374:	8a b7       	in	r24, 0x3a	; 58
     376:	8f 7c       	andi	r24, 0xCF	; 207
     378:	8a bf       	out	0x3a, r24	; 58
			switch(sense){
     37a:	62 30       	cpi	r22, 0x02	; 2
     37c:	41 f0       	breq	.+16     	; 0x38e <INTERRUPT_set+0x180>
     37e:	63 30       	cpi	r22, 0x03	; 3
     380:	51 f0       	breq	.+20     	; 0x396 <INTERRUPT_set+0x188>
     382:	61 30       	cpi	r22, 0x01	; 1
     384:	59 f4       	brne	.+22     	; 0x39c <INTERRUPT_set+0x18e>
				case 0: // The low level of INTn generates an interrupt request.
					break;
				case 1: // Any logical change on INTn generates an interrupt request
					External_Interrupt_Control_Register_B |= (1<<ISC60);
     386:	8a b7       	in	r24, 0x3a	; 58
     388:	80 61       	ori	r24, 0x10	; 16
     38a:	8a bf       	out	0x3a, r24	; 58
					break;
     38c:	07 c0       	rjmp	.+14     	; 0x39c <INTERRUPT_set+0x18e>
				case 2: // The falling edge between two samples of INTn generates an interrupt request.
					External_Interrupt_Control_Register_B |= (1<<ISC61);
     38e:	8a b7       	in	r24, 0x3a	; 58
     390:	80 62       	ori	r24, 0x20	; 32
     392:	8a bf       	out	0x3a, r24	; 58
					break;
     394:	03 c0       	rjmp	.+6      	; 0x39c <INTERRUPT_set+0x18e>
				case 3: // The rising edge between two samples of INTn generates an interrupt request.
					External_Interrupt_Control_Register_B |= ((1<<ISC61) | (1<<ISC60));
     396:	8a b7       	in	r24, 0x3a	; 58
     398:	80 63       	ori	r24, 0x30	; 48
     39a:	8a bf       	out	0x3a, r24	; 58
					break;
				default: // The low level of INTn generates an interrupt request.
					break;
			}
			External_Interrupt_Mask_Register |= (1<<INT6);
     39c:	89 b7       	in	r24, 0x39	; 57
     39e:	80 64       	ori	r24, 0x40	; 64
     3a0:	89 bf       	out	0x39, r24	; 57
			break;
     3a2:	08 95       	ret
		case 7:
			External_Interrupt_Mask_Register &= ~(1<<INT7);
     3a4:	89 b7       	in	r24, 0x39	; 57
     3a6:	8f 77       	andi	r24, 0x7F	; 127
     3a8:	89 bf       	out	0x39, r24	; 57
			External_Interrupt_Control_Register_B &= ~((1<<ISC71) | (1<<ISC70));
     3aa:	8a b7       	in	r24, 0x3a	; 58
     3ac:	8f 73       	andi	r24, 0x3F	; 63
     3ae:	8a bf       	out	0x3a, r24	; 58
			switch(sense){
     3b0:	62 30       	cpi	r22, 0x02	; 2
     3b2:	41 f0       	breq	.+16     	; 0x3c4 <INTERRUPT_set+0x1b6>
     3b4:	63 30       	cpi	r22, 0x03	; 3
     3b6:	51 f0       	breq	.+20     	; 0x3cc <INTERRUPT_set+0x1be>
     3b8:	61 30       	cpi	r22, 0x01	; 1
     3ba:	59 f4       	brne	.+22     	; 0x3d2 <INTERRUPT_set+0x1c4>
				case 0: // The low level of INTn generates an interrupt request.
					break;
				case 1: // Any logical change on INTn generates an interrupt request
					External_Interrupt_Control_Register_B |= (1<<ISC70);
     3bc:	8a b7       	in	r24, 0x3a	; 58
     3be:	80 64       	ori	r24, 0x40	; 64
     3c0:	8a bf       	out	0x3a, r24	; 58
					break;
     3c2:	07 c0       	rjmp	.+14     	; 0x3d2 <INTERRUPT_set+0x1c4>
				case 2: // The falling edge between two samples of INTn generates an interrupt request.
					External_Interrupt_Control_Register_B |= (1<<ISC71);
     3c4:	8a b7       	in	r24, 0x3a	; 58
     3c6:	80 68       	ori	r24, 0x80	; 128
     3c8:	8a bf       	out	0x3a, r24	; 58
					break;
     3ca:	03 c0       	rjmp	.+6      	; 0x3d2 <INTERRUPT_set+0x1c4>
				case 3: // The rising edge between two samples of INTn generates an interrupt request.
					External_Interrupt_Control_Register_B |= ((1<<ISC71) | (1<<ISC70));
     3cc:	8a b7       	in	r24, 0x3a	; 58
     3ce:	80 6c       	ori	r24, 0xC0	; 192
     3d0:	8a bf       	out	0x3a, r24	; 58
					break;
				default: // The low level of INTn generates an interrupt request.
					break;
			}
			External_Interrupt_Mask_Register |= (1<<INT7);
     3d2:	89 b7       	in	r24, 0x39	; 57
     3d4:	80 68       	ori	r24, 0x80	; 128
     3d6:	89 bf       	out	0x39, r24	; 57
			break;
     3d8:	08 95       	ret
		default:
			External_Interrupt_Mask_Register = 0X00;
     3da:	19 be       	out	0x39, r1	; 57
     3dc:	08 95       	ret

000003de <INTERRUPT_off>:
			break;
	}
}
void INTERRUPT_off(uint8_t channel)
{
	switch( channel ){
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	88 30       	cpi	r24, 0x08	; 8
     3e2:	91 05       	cpc	r25, r1
     3e4:	28 f5       	brcc	.+74     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     3e6:	fc 01       	movw	r30, r24
     3e8:	e2 5b       	subi	r30, 0xB2	; 178
     3ea:	ff 4f       	sbci	r31, 0xFF	; 255
     3ec:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <__tablejump2__>
		case 0: // disable
			External_Interrupt_Mask_Register &= ~(1<<INT0);
     3f0:	89 b7       	in	r24, 0x39	; 57
     3f2:	8e 7f       	andi	r24, 0xFE	; 254
     3f4:	89 bf       	out	0x39, r24	; 57
			break;
     3f6:	08 95       	ret
		case 1: // disable
			External_Interrupt_Mask_Register &= ~(1<<INT1);
     3f8:	89 b7       	in	r24, 0x39	; 57
     3fa:	8d 7f       	andi	r24, 0xFD	; 253
     3fc:	89 bf       	out	0x39, r24	; 57
			break;
     3fe:	08 95       	ret
		case 2: // disable
			External_Interrupt_Mask_Register &= ~(1<<INT2);
     400:	89 b7       	in	r24, 0x39	; 57
     402:	8b 7f       	andi	r24, 0xFB	; 251
     404:	89 bf       	out	0x39, r24	; 57
			break;
     406:	08 95       	ret
		case 3: // disable
			External_Interrupt_Mask_Register &= ~(1<<INT3);
     408:	89 b7       	in	r24, 0x39	; 57
     40a:	87 7f       	andi	r24, 0xF7	; 247
     40c:	89 bf       	out	0x39, r24	; 57
			break;
     40e:	08 95       	ret
		case 4: // disable
			External_Interrupt_Mask_Register &= ~(1<<INT4);
     410:	89 b7       	in	r24, 0x39	; 57
     412:	8f 7e       	andi	r24, 0xEF	; 239
     414:	89 bf       	out	0x39, r24	; 57
			break;
     416:	08 95       	ret
		case 5: // disable
			External_Interrupt_Mask_Register &= ~(1<<INT5);
     418:	89 b7       	in	r24, 0x39	; 57
     41a:	8f 7d       	andi	r24, 0xDF	; 223
     41c:	89 bf       	out	0x39, r24	; 57
			break;
     41e:	08 95       	ret
		case 6: // disable
			External_Interrupt_Mask_Register &= ~(1<<INT6);
     420:	89 b7       	in	r24, 0x39	; 57
     422:	8f 7b       	andi	r24, 0xBF	; 191
     424:	89 bf       	out	0x39, r24	; 57
			break;
     426:	08 95       	ret
		case 7: // disable
			External_Interrupt_Mask_Register &= ~(1<<INT7);
     428:	89 b7       	in	r24, 0x39	; 57
     42a:	8f 77       	andi	r24, 0x7F	; 127
     42c:	89 bf       	out	0x39, r24	; 57
			break;
     42e:	08 95       	ret
		default: // all disable
			External_Interrupt_Mask_Register = 0X00;
     430:	19 be       	out	0x39, r1	; 57
     432:	08 95       	ret

00000434 <INTERRUPT_on>:
			break;
	}
}
void INTERRUPT_on(uint8_t channel)
{
	switch( channel ){
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	88 30       	cpi	r24, 0x08	; 8
     438:	91 05       	cpc	r25, r1
     43a:	28 f5       	brcc	.+74     	; 0x486 <INTERRUPT_on+0x52>
     43c:	fc 01       	movw	r30, r24
     43e:	ea 5a       	subi	r30, 0xAA	; 170
     440:	ff 4f       	sbci	r31, 0xFF	; 255
     442:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <__tablejump2__>
		case 0:
			External_Interrupt_Mask_Register |= (1<<INT0);
     446:	89 b7       	in	r24, 0x39	; 57
     448:	81 60       	ori	r24, 0x01	; 1
     44a:	89 bf       	out	0x39, r24	; 57
			break;
     44c:	08 95       	ret
		case 1:
			External_Interrupt_Mask_Register |= (1<<INT1);
     44e:	89 b7       	in	r24, 0x39	; 57
     450:	82 60       	ori	r24, 0x02	; 2
     452:	89 bf       	out	0x39, r24	; 57
			break;
     454:	08 95       	ret
		case 2:
			External_Interrupt_Mask_Register |= (1<<INT2);
     456:	89 b7       	in	r24, 0x39	; 57
     458:	84 60       	ori	r24, 0x04	; 4
     45a:	89 bf       	out	0x39, r24	; 57
			break;
     45c:	08 95       	ret
		case 3:
			External_Interrupt_Mask_Register |= (1<<INT3);
     45e:	89 b7       	in	r24, 0x39	; 57
     460:	88 60       	ori	r24, 0x08	; 8
     462:	89 bf       	out	0x39, r24	; 57
			break;
     464:	08 95       	ret
		case 4:
			External_Interrupt_Mask_Register |= (1<<INT4);
     466:	89 b7       	in	r24, 0x39	; 57
     468:	80 61       	ori	r24, 0x10	; 16
     46a:	89 bf       	out	0x39, r24	; 57
			break;
     46c:	08 95       	ret
		case 5:
			External_Interrupt_Mask_Register |= (1<<INT5);
     46e:	89 b7       	in	r24, 0x39	; 57
     470:	80 62       	ori	r24, 0x20	; 32
     472:	89 bf       	out	0x39, r24	; 57
			break;
     474:	08 95       	ret
		case 6:
			External_Interrupt_Mask_Register |= (1<<INT6);
     476:	89 b7       	in	r24, 0x39	; 57
     478:	80 64       	ori	r24, 0x40	; 64
     47a:	89 bf       	out	0x39, r24	; 57
			break;
     47c:	08 95       	ret
		case 7:
			External_Interrupt_Mask_Register |= (1<<INT7);
     47e:	89 b7       	in	r24, 0x39	; 57
     480:	80 68       	ori	r24, 0x80	; 128
     482:	89 bf       	out	0x39, r24	; 57
			break;
     484:	08 95       	ret
		default: // all disable
			External_Interrupt_Mask_Register = 0X00;
     486:	19 be       	out	0x39, r1	; 57
     488:	08 95       	ret

0000048a <INTERRUPTenable>:
/***Procedure & Function***/
INTERRUPT INTERRUPTenable(void)
/***
Setup blank
***/
{
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	28 97       	sbiw	r28, 0x08	; 8
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	f8 94       	cli
     498:	de bf       	out	0x3e, r29	; 62
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	cd bf       	out	0x3d, r28	; 61
	INTERRUPT interrupt;
	External_Interrupt_Mask_Register = 0X00;
     49e:	19 be       	out	0x39, r1	; 57
	/******/
	interrupt.set=INTERRUPT_set;
	interrupt.off=INTERRUPT_off;
	interrupt.on=INTERRUPT_on;
	interrupt.reset_status=INTERRUPT_reset_status;
	return interrupt;
     4a0:	27 e0       	ldi	r18, 0x07	; 7
     4a2:	31 e0       	ldi	r19, 0x01	; 1
     4a4:	3a 83       	std	Y+2, r19	; 0x02
     4a6:	29 83       	std	Y+1, r18	; 0x01
     4a8:	4f ee       	ldi	r20, 0xEF	; 239
     4aa:	51 e0       	ldi	r21, 0x01	; 1
     4ac:	5c 83       	std	Y+4, r21	; 0x04
     4ae:	4b 83       	std	Y+3, r20	; 0x03
     4b0:	6a e1       	ldi	r22, 0x1A	; 26
     4b2:	72 e0       	ldi	r23, 0x02	; 2
     4b4:	7e 83       	std	Y+6, r23	; 0x06
     4b6:	6d 83       	std	Y+5, r22	; 0x05
     4b8:	8a ed       	ldi	r24, 0xDA	; 218
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	98 87       	std	Y+8, r25	; 0x08
     4be:	8f 83       	std	Y+7, r24	; 0x07
     4c0:	3a 81       	ldd	r19, Y+2	; 0x02
     4c2:	5c 81       	ldd	r21, Y+4	; 0x04
     4c4:	7e 81       	ldd	r23, Y+6	; 0x06
}
     4c6:	98 85       	ldd	r25, Y+8	; 0x08
     4c8:	28 96       	adiw	r28, 0x08	; 8
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	08 95       	ret

000004da <__vector_1>:
			break;
	}
}
/***Interrupt***/
// cross out the ones being used and redefine in main
ISR(INT0_vect){ }
     4da:	1f 92       	push	r1
     4dc:	0f 92       	push	r0
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	0f 92       	push	r0
     4e2:	11 24       	eor	r1, r1
     4e4:	0f 90       	pop	r0
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	0f 90       	pop	r0
     4ea:	1f 90       	pop	r1
     4ec:	18 95       	reti

000004ee <__vector_3>:
//ISR(INT1_vect){ }
ISR(INT2_vect){ }
     4ee:	1f 92       	push	r1
     4f0:	0f 92       	push	r0
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	0f 92       	push	r0
     4f6:	11 24       	eor	r1, r1
     4f8:	0f 90       	pop	r0
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	0f 90       	pop	r0
     4fe:	1f 90       	pop	r1
     500:	18 95       	reti

00000502 <__vector_4>:
ISR(INT3_vect){ }
     502:	1f 92       	push	r1
     504:	0f 92       	push	r0
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	0f 92       	push	r0
     50a:	11 24       	eor	r1, r1
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <__vector_5>:
ISR(INT4_vect){ }
     516:	1f 92       	push	r1
     518:	0f 92       	push	r0
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	0f 92       	push	r0
     51e:	11 24       	eor	r1, r1
     520:	0f 90       	pop	r0
     522:	0f be       	out	0x3f, r0	; 63
     524:	0f 90       	pop	r0
     526:	1f 90       	pop	r1
     528:	18 95       	reti

0000052a <__vector_6>:
ISR(INT5_vect){ }
     52a:	1f 92       	push	r1
     52c:	0f 92       	push	r0
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	0f 92       	push	r0
     532:	11 24       	eor	r1, r1
     534:	0f 90       	pop	r0
     536:	0f be       	out	0x3f, r0	; 63
     538:	0f 90       	pop	r0
     53a:	1f 90       	pop	r1
     53c:	18 95       	reti

0000053e <__vector_7>:
ISR(INT6_vect){ }
     53e:	1f 92       	push	r1
     540:	0f 92       	push	r0
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	0f 92       	push	r0
     546:	11 24       	eor	r1, r1
     548:	0f 90       	pop	r0
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	0f 90       	pop	r0
     54e:	1f 90       	pop	r1
     550:	18 95       	reti

00000552 <__vector_8>:
ISR(INT7_vect){ }
     552:	1f 92       	push	r1
     554:	0f 92       	push	r0
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	0f 92       	push	r0
     55a:	11 24       	eor	r1, r1
     55c:	0f 90       	pop	r0
     55e:	0f be       	out	0x3f, r0	; 63
     560:	0f 90       	pop	r0
     562:	1f 90       	pop	r1
     564:	18 95       	reti

00000566 <TIMER_COUNTER0_start>:
	timer3.compareB=TIMER_COUNTER3_compareB;
	timer3.compareC=TIMER_COUNTER3_compareC;
	timer3.start=TIMER_COUNTER3_start;
	timer3.stop=TIMER_COUNTER3_stop;
	return timer3;
}
     566:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <timer0_state>
     56a:	21 11       	cpse	r18, r1
     56c:	41 c0       	rjmp	.+130    	; 0x5f0 <TIMER_COUNTER0_start+0x8a>
     56e:	23 b7       	in	r18, 0x33	; 51
     570:	28 7f       	andi	r18, 0xF8	; 248
     572:	23 bf       	out	0x33, r18	; 51
     574:	80 34       	cpi	r24, 0x40	; 64
     576:	91 05       	cpc	r25, r1
     578:	11 f1       	breq	.+68     	; 0x5be <TIMER_COUNTER0_start+0x58>
     57a:	48 f4       	brcc	.+18     	; 0x58e <TIMER_COUNTER0_start+0x28>
     57c:	88 30       	cpi	r24, 0x08	; 8
     57e:	91 05       	cpc	r25, r1
     580:	b1 f0       	breq	.+44     	; 0x5ae <TIMER_COUNTER0_start+0x48>
     582:	80 32       	cpi	r24, 0x20	; 32
     584:	91 05       	cpc	r25, r1
     586:	b9 f0       	breq	.+46     	; 0x5b6 <TIMER_COUNTER0_start+0x50>
     588:	01 97       	sbiw	r24, 0x01	; 1
     58a:	49 f5       	brne	.+82     	; 0x5de <TIMER_COUNTER0_start+0x78>
     58c:	0c c0       	rjmp	.+24     	; 0x5a6 <TIMER_COUNTER0_start+0x40>
     58e:	81 15       	cp	r24, r1
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	92 07       	cpc	r25, r18
     594:	e1 f0       	breq	.+56     	; 0x5ce <TIMER_COUNTER0_start+0x68>
     596:	81 15       	cp	r24, r1
     598:	24 e0       	ldi	r18, 0x04	; 4
     59a:	92 07       	cpc	r25, r18
     59c:	e1 f0       	breq	.+56     	; 0x5d6 <TIMER_COUNTER0_start+0x70>
     59e:	80 38       	cpi	r24, 0x80	; 128
     5a0:	91 05       	cpc	r25, r1
     5a2:	e9 f4       	brne	.+58     	; 0x5de <TIMER_COUNTER0_start+0x78>
     5a4:	10 c0       	rjmp	.+32     	; 0x5c6 <TIMER_COUNTER0_start+0x60>
     5a6:	83 b7       	in	r24, 0x33	; 51
     5a8:	81 60       	ori	r24, 0x01	; 1
     5aa:	83 bf       	out	0x33, r24	; 51
     5ac:	1b c0       	rjmp	.+54     	; 0x5e4 <TIMER_COUNTER0_start+0x7e>
     5ae:	83 b7       	in	r24, 0x33	; 51
     5b0:	82 60       	ori	r24, 0x02	; 2
     5b2:	83 bf       	out	0x33, r24	; 51
     5b4:	17 c0       	rjmp	.+46     	; 0x5e4 <TIMER_COUNTER0_start+0x7e>
     5b6:	83 b7       	in	r24, 0x33	; 51
     5b8:	83 60       	ori	r24, 0x03	; 3
     5ba:	83 bf       	out	0x33, r24	; 51
     5bc:	13 c0       	rjmp	.+38     	; 0x5e4 <TIMER_COUNTER0_start+0x7e>
     5be:	83 b7       	in	r24, 0x33	; 51
     5c0:	84 60       	ori	r24, 0x04	; 4
     5c2:	83 bf       	out	0x33, r24	; 51
     5c4:	0f c0       	rjmp	.+30     	; 0x5e4 <TIMER_COUNTER0_start+0x7e>
     5c6:	83 b7       	in	r24, 0x33	; 51
     5c8:	85 60       	ori	r24, 0x05	; 5
     5ca:	83 bf       	out	0x33, r24	; 51
     5cc:	0b c0       	rjmp	.+22     	; 0x5e4 <TIMER_COUNTER0_start+0x7e>
     5ce:	83 b7       	in	r24, 0x33	; 51
     5d0:	86 60       	ori	r24, 0x06	; 6
     5d2:	83 bf       	out	0x33, r24	; 51
     5d4:	07 c0       	rjmp	.+14     	; 0x5e4 <TIMER_COUNTER0_start+0x7e>
     5d6:	83 b7       	in	r24, 0x33	; 51
     5d8:	87 60       	ori	r24, 0x07	; 7
     5da:	83 bf       	out	0x33, r24	; 51
     5dc:	03 c0       	rjmp	.+6      	; 0x5e4 <TIMER_COUNTER0_start+0x7e>
     5de:	83 b7       	in	r24, 0x33	; 51
     5e0:	87 60       	ori	r24, 0x07	; 7
     5e2:	83 bf       	out	0x33, r24	; 51
     5e4:	8f b7       	in	r24, 0x3f	; 63
     5e6:	80 68       	ori	r24, 0x80	; 128
     5e8:	8f bf       	out	0x3f, r24	; 63
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timer0_state>
     5f0:	08 95       	ret

000005f2 <TIMER_COUNTER0_compoutmode>:
     5f2:	93 b7       	in	r25, 0x33	; 51
     5f4:	9f 7c       	andi	r25, 0xCF	; 207
     5f6:	93 bf       	out	0x33, r25	; 51
     5f8:	82 30       	cpi	r24, 0x02	; 2
     5fa:	51 f0       	breq	.+20     	; 0x610 <TIMER_COUNTER0_compoutmode+0x1e>
     5fc:	83 30       	cpi	r24, 0x03	; 3
     5fe:	71 f0       	breq	.+28     	; 0x61c <TIMER_COUNTER0_compoutmode+0x2a>
     600:	81 30       	cpi	r24, 0x01	; 1
     602:	89 f4       	brne	.+34     	; 0x626 <TIMER_COUNTER0_compoutmode+0x34>
     604:	80 e1       	ldi	r24, 0x10	; 16
     606:	87 bb       	out	0x17, r24	; 23
     608:	83 b7       	in	r24, 0x33	; 51
     60a:	80 61       	ori	r24, 0x10	; 16
     60c:	83 bf       	out	0x33, r24	; 51
     60e:	08 95       	ret
     610:	80 e1       	ldi	r24, 0x10	; 16
     612:	87 bb       	out	0x17, r24	; 23
     614:	83 b7       	in	r24, 0x33	; 51
     616:	80 62       	ori	r24, 0x20	; 32
     618:	83 bf       	out	0x33, r24	; 51
     61a:	08 95       	ret
     61c:	80 e1       	ldi	r24, 0x10	; 16
     61e:	87 bb       	out	0x17, r24	; 23
     620:	83 b7       	in	r24, 0x33	; 51
     622:	80 63       	ori	r24, 0x30	; 48
     624:	83 bf       	out	0x33, r24	; 51
     626:	08 95       	ret

00000628 <TIMER_COUNTER0_compare>:
     628:	81 bf       	out	0x31, r24	; 49
     62a:	08 95       	ret

0000062c <TIMER_COUNTER0_stop>:
     62c:	83 b7       	in	r24, 0x33	; 51
     62e:	88 7f       	andi	r24, 0xF8	; 248
     630:	83 bf       	out	0x33, r24	; 51
     632:	12 be       	out	0x32, r1	; 50
     634:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <timer0_state>
     638:	08 95       	ret

0000063a <TIMER_COUNTER1_start>:
     63a:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <timer1_state>
     63e:	21 11       	cpse	r18, r1
     640:	41 c0       	rjmp	.+130    	; 0x6c4 <TIMER_COUNTER1_start+0x8a>
     642:	2e b5       	in	r18, 0x2e	; 46
     644:	28 7f       	andi	r18, 0xF8	; 248
     646:	2e bd       	out	0x2e, r18	; 46
     648:	88 30       	cpi	r24, 0x08	; 8
     64a:	91 05       	cpc	r25, r1
     64c:	d1 f0       	breq	.+52     	; 0x682 <TIMER_COUNTER1_start+0x48>
     64e:	48 f4       	brcc	.+18     	; 0x662 <TIMER_COUNTER1_start+0x28>
     650:	83 30       	cpi	r24, 0x03	; 3
     652:	91 05       	cpc	r25, r1
     654:	31 f1       	breq	.+76     	; 0x6a2 <TIMER_COUNTER1_start+0x68>
     656:	85 30       	cpi	r24, 0x05	; 5
     658:	91 05       	cpc	r25, r1
     65a:	39 f1       	breq	.+78     	; 0x6aa <TIMER_COUNTER1_start+0x70>
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	49 f5       	brne	.+82     	; 0x6b2 <TIMER_COUNTER1_start+0x78>
     660:	0c c0       	rjmp	.+24     	; 0x67a <TIMER_COUNTER1_start+0x40>
     662:	81 15       	cp	r24, r1
     664:	21 e0       	ldi	r18, 0x01	; 1
     666:	92 07       	cpc	r25, r18
     668:	a1 f0       	breq	.+40     	; 0x692 <TIMER_COUNTER1_start+0x58>
     66a:	81 15       	cp	r24, r1
     66c:	24 e0       	ldi	r18, 0x04	; 4
     66e:	92 07       	cpc	r25, r18
     670:	a1 f0       	breq	.+40     	; 0x69a <TIMER_COUNTER1_start+0x60>
     672:	80 34       	cpi	r24, 0x40	; 64
     674:	91 05       	cpc	r25, r1
     676:	e9 f4       	brne	.+58     	; 0x6b2 <TIMER_COUNTER1_start+0x78>
     678:	08 c0       	rjmp	.+16     	; 0x68a <TIMER_COUNTER1_start+0x50>
     67a:	8e b5       	in	r24, 0x2e	; 46
     67c:	81 60       	ori	r24, 0x01	; 1
     67e:	8e bd       	out	0x2e, r24	; 46
     680:	1b c0       	rjmp	.+54     	; 0x6b8 <TIMER_COUNTER1_start+0x7e>
     682:	8e b5       	in	r24, 0x2e	; 46
     684:	82 60       	ori	r24, 0x02	; 2
     686:	8e bd       	out	0x2e, r24	; 46
     688:	17 c0       	rjmp	.+46     	; 0x6b8 <TIMER_COUNTER1_start+0x7e>
     68a:	8e b5       	in	r24, 0x2e	; 46
     68c:	83 60       	ori	r24, 0x03	; 3
     68e:	8e bd       	out	0x2e, r24	; 46
     690:	13 c0       	rjmp	.+38     	; 0x6b8 <TIMER_COUNTER1_start+0x7e>
     692:	8e b5       	in	r24, 0x2e	; 46
     694:	84 60       	ori	r24, 0x04	; 4
     696:	8e bd       	out	0x2e, r24	; 46
     698:	0f c0       	rjmp	.+30     	; 0x6b8 <TIMER_COUNTER1_start+0x7e>
     69a:	8e b5       	in	r24, 0x2e	; 46
     69c:	85 60       	ori	r24, 0x05	; 5
     69e:	8e bd       	out	0x2e, r24	; 46
     6a0:	0b c0       	rjmp	.+22     	; 0x6b8 <TIMER_COUNTER1_start+0x7e>
     6a2:	8e b5       	in	r24, 0x2e	; 46
     6a4:	86 60       	ori	r24, 0x06	; 6
     6a6:	8e bd       	out	0x2e, r24	; 46
     6a8:	07 c0       	rjmp	.+14     	; 0x6b8 <TIMER_COUNTER1_start+0x7e>
     6aa:	8e b5       	in	r24, 0x2e	; 46
     6ac:	87 60       	ori	r24, 0x07	; 7
     6ae:	8e bd       	out	0x2e, r24	; 46
     6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <TIMER_COUNTER1_start+0x7e>
     6b2:	8e b5       	in	r24, 0x2e	; 46
     6b4:	85 60       	ori	r24, 0x05	; 5
     6b6:	8e bd       	out	0x2e, r24	; 46
     6b8:	8f b7       	in	r24, 0x3f	; 63
     6ba:	80 68       	ori	r24, 0x80	; 128
     6bc:	8f bf       	out	0x3f, r24	; 63
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <timer1_state>
     6c4:	08 95       	ret

000006c6 <TIMER_COUNTER1_compoutmodeA>:
     6c6:	9f b5       	in	r25, 0x2f	; 47
     6c8:	9f 73       	andi	r25, 0x3F	; 63
     6ca:	9f bd       	out	0x2f, r25	; 47
     6cc:	82 30       	cpi	r24, 0x02	; 2
     6ce:	49 f0       	breq	.+18     	; 0x6e2 <TIMER_COUNTER1_compoutmodeA+0x1c>
     6d0:	83 30       	cpi	r24, 0x03	; 3
     6d2:	61 f0       	breq	.+24     	; 0x6ec <TIMER_COUNTER1_compoutmodeA+0x26>
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	71 f4       	brne	.+28     	; 0x6f4 <TIMER_COUNTER1_compoutmodeA+0x2e>
     6d8:	bd 9a       	sbi	0x17, 5	; 23
     6da:	8f b5       	in	r24, 0x2f	; 47
     6dc:	80 64       	ori	r24, 0x40	; 64
     6de:	8f bd       	out	0x2f, r24	; 47
     6e0:	08 95       	ret
     6e2:	bd 9a       	sbi	0x17, 5	; 23
     6e4:	8f b5       	in	r24, 0x2f	; 47
     6e6:	80 68       	ori	r24, 0x80	; 128
     6e8:	8f bd       	out	0x2f, r24	; 47
     6ea:	08 95       	ret
     6ec:	bd 9a       	sbi	0x17, 5	; 23
     6ee:	8f b5       	in	r24, 0x2f	; 47
     6f0:	80 6c       	ori	r24, 0xC0	; 192
     6f2:	8f bd       	out	0x2f, r24	; 47
     6f4:	08 95       	ret

000006f6 <TIMER_COUNTER1_compoutmodeB>:
     6f6:	9f b5       	in	r25, 0x2f	; 47
     6f8:	9f 7c       	andi	r25, 0xCF	; 207
     6fa:	9f bd       	out	0x2f, r25	; 47
     6fc:	82 30       	cpi	r24, 0x02	; 2
     6fe:	49 f0       	breq	.+18     	; 0x712 <TIMER_COUNTER1_compoutmodeB+0x1c>
     700:	83 30       	cpi	r24, 0x03	; 3
     702:	61 f0       	breq	.+24     	; 0x71c <TIMER_COUNTER1_compoutmodeB+0x26>
     704:	81 30       	cpi	r24, 0x01	; 1
     706:	71 f4       	brne	.+28     	; 0x724 <TIMER_COUNTER1_compoutmodeB+0x2e>
     708:	be 9a       	sbi	0x17, 6	; 23
     70a:	8f b5       	in	r24, 0x2f	; 47
     70c:	80 61       	ori	r24, 0x10	; 16
     70e:	8f bd       	out	0x2f, r24	; 47
     710:	08 95       	ret
     712:	be 9a       	sbi	0x17, 6	; 23
     714:	8f b5       	in	r24, 0x2f	; 47
     716:	80 62       	ori	r24, 0x20	; 32
     718:	8f bd       	out	0x2f, r24	; 47
     71a:	08 95       	ret
     71c:	be 9a       	sbi	0x17, 6	; 23
     71e:	8f b5       	in	r24, 0x2f	; 47
     720:	80 63       	ori	r24, 0x30	; 48
     722:	8f bd       	out	0x2f, r24	; 47
     724:	08 95       	ret

00000726 <TIMER_COUNTER1_compoutmodeC>:
     726:	9f b5       	in	r25, 0x2f	; 47
     728:	93 7f       	andi	r25, 0xF3	; 243
     72a:	9f bd       	out	0x2f, r25	; 47
     72c:	82 30       	cpi	r24, 0x02	; 2
     72e:	49 f0       	breq	.+18     	; 0x742 <TIMER_COUNTER1_compoutmodeC+0x1c>
     730:	83 30       	cpi	r24, 0x03	; 3
     732:	61 f0       	breq	.+24     	; 0x74c <TIMER_COUNTER1_compoutmodeC+0x26>
     734:	81 30       	cpi	r24, 0x01	; 1
     736:	71 f4       	brne	.+28     	; 0x754 <TIMER_COUNTER1_compoutmodeC+0x2e>
     738:	bf 9a       	sbi	0x17, 7	; 23
     73a:	8f b5       	in	r24, 0x2f	; 47
     73c:	84 60       	ori	r24, 0x04	; 4
     73e:	8f bd       	out	0x2f, r24	; 47
     740:	08 95       	ret
     742:	bf 9a       	sbi	0x17, 7	; 23
     744:	8f b5       	in	r24, 0x2f	; 47
     746:	88 60       	ori	r24, 0x08	; 8
     748:	8f bd       	out	0x2f, r24	; 47
     74a:	08 95       	ret
     74c:	bf 9a       	sbi	0x17, 7	; 23
     74e:	8f b5       	in	r24, 0x2f	; 47
     750:	8c 60       	ori	r24, 0x0C	; 12
     752:	8f bd       	out	0x2f, r24	; 47
     754:	08 95       	ret

00000756 <TIMER_COUNTER1_compareA>:
     756:	9b bd       	out	0x2b, r25	; 43
     758:	8a bd       	out	0x2a, r24	; 42
     75a:	08 95       	ret

0000075c <TIMER_COUNTER1_compareB>:
     75c:	99 bd       	out	0x29, r25	; 41
     75e:	88 bd       	out	0x28, r24	; 40
     760:	08 95       	ret

00000762 <TIMER_COUNTER1_compareC>:
     762:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     766:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     76a:	08 95       	ret

0000076c <TIMER_COUNTER1_stop>:
     76c:	8e b5       	in	r24, 0x2e	; 46
     76e:	88 7f       	andi	r24, 0xF8	; 248
     770:	8e bd       	out	0x2e, r24	; 46
     772:	1d bc       	out	0x2d, r1	; 45
     774:	1c bc       	out	0x2c, r1	; 44
     776:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <timer1_state>
     77a:	08 95       	ret

0000077c <TIMER_COUNTER0enable>:
     77c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <timer0_state>
     780:	2f ef       	ldi	r18, 0xFF	; 255
     782:	21 bf       	out	0x31, r18	; 49
     784:	23 b7       	in	r18, 0x33	; 51
     786:	27 7b       	andi	r18, 0xB7	; 183
     788:	23 bf       	out	0x33, r18	; 51
     78a:	62 30       	cpi	r22, 0x02	; 2
     78c:	41 f0       	breq	.+16     	; 0x79e <TIMER_COUNTER0enable+0x22>
     78e:	63 30       	cpi	r22, 0x03	; 3
     790:	51 f0       	breq	.+20     	; 0x7a6 <TIMER_COUNTER0enable+0x2a>
     792:	61 30       	cpi	r22, 0x01	; 1
     794:	59 f4       	brne	.+22     	; 0x7ac <TIMER_COUNTER0enable+0x30>
     796:	23 b7       	in	r18, 0x33	; 51
     798:	20 64       	ori	r18, 0x40	; 64
     79a:	23 bf       	out	0x33, r18	; 51
     79c:	07 c0       	rjmp	.+14     	; 0x7ac <TIMER_COUNTER0enable+0x30>
     79e:	23 b7       	in	r18, 0x33	; 51
     7a0:	28 60       	ori	r18, 0x08	; 8
     7a2:	23 bf       	out	0x33, r18	; 51
     7a4:	03 c0       	rjmp	.+6      	; 0x7ac <TIMER_COUNTER0enable+0x30>
     7a6:	23 b7       	in	r18, 0x33	; 51
     7a8:	28 64       	ori	r18, 0x48	; 72
     7aa:	23 bf       	out	0x33, r18	; 51
     7ac:	27 b7       	in	r18, 0x37	; 55
     7ae:	2e 7f       	andi	r18, 0xFE	; 254
     7b0:	27 bf       	out	0x37, r18	; 55
     7b2:	27 b7       	in	r18, 0x37	; 55
     7b4:	2d 7f       	andi	r18, 0xFD	; 253
     7b6:	27 bf       	out	0x37, r18	; 55
     7b8:	42 30       	cpi	r20, 0x02	; 2
     7ba:	41 f0       	breq	.+16     	; 0x7cc <TIMER_COUNTER0enable+0x50>
     7bc:	43 30       	cpi	r20, 0x03	; 3
     7be:	51 f0       	breq	.+20     	; 0x7d4 <TIMER_COUNTER0enable+0x58>
     7c0:	41 30       	cpi	r20, 0x01	; 1
     7c2:	71 f4       	brne	.+28     	; 0x7e0 <TIMER_COUNTER0enable+0x64>
     7c4:	27 b7       	in	r18, 0x37	; 55
     7c6:	21 60       	ori	r18, 0x01	; 1
     7c8:	27 bf       	out	0x37, r18	; 55
     7ca:	0a c0       	rjmp	.+20     	; 0x7e0 <TIMER_COUNTER0enable+0x64>
     7cc:	27 b7       	in	r18, 0x37	; 55
     7ce:	22 60       	ori	r18, 0x02	; 2
     7d0:	27 bf       	out	0x37, r18	; 55
     7d2:	06 c0       	rjmp	.+12     	; 0x7e0 <TIMER_COUNTER0enable+0x64>
     7d4:	27 b7       	in	r18, 0x37	; 55
     7d6:	21 60       	ori	r18, 0x01	; 1
     7d8:	27 bf       	out	0x37, r18	; 55
     7da:	27 b7       	in	r18, 0x37	; 55
     7dc:	22 60       	ori	r18, 0x02	; 2
     7de:	27 bf       	out	0x37, r18	; 55
     7e0:	29 ef       	ldi	r18, 0xF9	; 249
     7e2:	32 e0       	ldi	r19, 0x02	; 2
     7e4:	fc 01       	movw	r30, r24
     7e6:	31 83       	std	Z+1, r19	; 0x01
     7e8:	20 83       	st	Z, r18
     7ea:	24 e1       	ldi	r18, 0x14	; 20
     7ec:	33 e0       	ldi	r19, 0x03	; 3
     7ee:	37 83       	std	Z+7, r19	; 0x07
     7f0:	26 83       	std	Z+6, r18	; 0x06
     7f2:	23 eb       	ldi	r18, 0xB3	; 179
     7f4:	32 e0       	ldi	r19, 0x02	; 2
     7f6:	35 87       	std	Z+13, r19	; 0x0d
     7f8:	24 87       	std	Z+12, r18	; 0x0c
     7fa:	26 e1       	ldi	r18, 0x16	; 22
     7fc:	33 e0       	ldi	r19, 0x03	; 3
     7fe:	37 87       	std	Z+15, r19	; 0x0f
     800:	26 87       	std	Z+14, r18	; 0x0e
     802:	08 95       	ret

00000804 <TIMER_COUNTER1enable>:
     804:	0f 93       	push	r16
     806:	1f 93       	push	r17
     808:	dc 01       	movw	r26, r24
     80a:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <timer1_state>
     80e:	8f ef       	ldi	r24, 0xFF	; 255
     810:	9f ef       	ldi	r25, 0xFF	; 255
     812:	9b bd       	out	0x2b, r25	; 43
     814:	8a bd       	out	0x2a, r24	; 42
     816:	8f b5       	in	r24, 0x2f	; 47
     818:	8c 7f       	andi	r24, 0xFC	; 252
     81a:	8f bd       	out	0x2f, r24	; 47
     81c:	8e b5       	in	r24, 0x2e	; 46
     81e:	87 7e       	andi	r24, 0xE7	; 231
     820:	8e bd       	out	0x2e, r24	; 46
     822:	06 2f       	mov	r16, r22
     824:	10 e0       	ldi	r17, 0x00	; 0
     826:	f8 01       	movw	r30, r16
     828:	31 97       	sbiw	r30, 0x01	; 1
     82a:	ef 30       	cpi	r30, 0x0F	; 15
     82c:	f1 05       	cpc	r31, r1
     82e:	08 f0       	brcs	.+2      	; 0x832 <TIMER_COUNTER1enable+0x2e>
     830:	5a c0       	rjmp	.+180    	; 0x8e6 <TIMER_COUNTER1enable+0xe2>
     832:	e2 5a       	subi	r30, 0xA2	; 162
     834:	ff 4f       	sbci	r31, 0xFF	; 255
     836:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <__tablejump2__>
     83a:	8f b5       	in	r24, 0x2f	; 47
     83c:	81 60       	ori	r24, 0x01	; 1
     83e:	8f bd       	out	0x2f, r24	; 47
     840:	52 c0       	rjmp	.+164    	; 0x8e6 <TIMER_COUNTER1enable+0xe2>
     842:	8f b5       	in	r24, 0x2f	; 47
     844:	82 60       	ori	r24, 0x02	; 2
     846:	8f bd       	out	0x2f, r24	; 47
     848:	4e c0       	rjmp	.+156    	; 0x8e6 <TIMER_COUNTER1enable+0xe2>
     84a:	8f b5       	in	r24, 0x2f	; 47
     84c:	83 60       	ori	r24, 0x03	; 3
     84e:	8f bd       	out	0x2f, r24	; 47
     850:	4a c0       	rjmp	.+148    	; 0x8e6 <TIMER_COUNTER1enable+0xe2>
     852:	8e b5       	in	r24, 0x2e	; 46
     854:	88 60       	ori	r24, 0x08	; 8
     856:	8e bd       	out	0x2e, r24	; 46
     858:	46 c0       	rjmp	.+140    	; 0x8e6 <TIMER_COUNTER1enable+0xe2>
     85a:	8f b5       	in	r24, 0x2f	; 47
     85c:	81 60       	ori	r24, 0x01	; 1
     85e:	8f bd       	out	0x2f, r24	; 47
     860:	8e b5       	in	r24, 0x2e	; 46
     862:	88 60       	ori	r24, 0x08	; 8
     864:	8e bd       	out	0x2e, r24	; 46
     866:	3f c0       	rjmp	.+126    	; 0x8e6 <TIMER_COUNTER1enable+0xe2>
     868:	8f b5       	in	r24, 0x2f	; 47
     86a:	82 60       	ori	r24, 0x02	; 2
     86c:	8f bd       	out	0x2f, r24	; 47
     86e:	8e b5       	in	r24, 0x2e	; 46
     870:	88 60       	ori	r24, 0x08	; 8
     872:	8e bd       	out	0x2e, r24	; 46
     874:	38 c0       	rjmp	.+112    	; 0x8e6 <TIMER_COUNTER1enable+0xe2>
     876:	8f b5       	in	r24, 0x2f	; 47
     878:	83 60       	ori	r24, 0x03	; 3
     87a:	8f bd       	out	0x2f, r24	; 47
     87c:	8e b5       	in	r24, 0x2e	; 46
     87e:	88 60       	ori	r24, 0x08	; 8
     880:	8e bd       	out	0x2e, r24	; 46
     882:	31 c0       	rjmp	.+98     	; 0x8e6 <TIMER_COUNTER1enable+0xe2>
     884:	8e b5       	in	r24, 0x2e	; 46
     886:	80 61       	ori	r24, 0x10	; 16
     888:	8e bd       	out	0x2e, r24	; 46
     88a:	2d c0       	rjmp	.+90     	; 0x8e6 <TIMER_COUNTER1enable+0xe2>
     88c:	8f b5       	in	r24, 0x2f	; 47
     88e:	81 60       	ori	r24, 0x01	; 1
     890:	8f bd       	out	0x2f, r24	; 47
     892:	8e b5       	in	r24, 0x2e	; 46
     894:	80 61       	ori	r24, 0x10	; 16
     896:	8e bd       	out	0x2e, r24	; 46
     898:	26 c0       	rjmp	.+76     	; 0x8e6 <TIMER_COUNTER1enable+0xe2>
     89a:	8f b5       	in	r24, 0x2f	; 47
     89c:	82 60       	ori	r24, 0x02	; 2
     89e:	8f bd       	out	0x2f, r24	; 47
     8a0:	8e b5       	in	r24, 0x2e	; 46
     8a2:	80 61       	ori	r24, 0x10	; 16
     8a4:	8e bd       	out	0x2e, r24	; 46
     8a6:	1f c0       	rjmp	.+62     	; 0x8e6 <TIMER_COUNTER1enable+0xe2>
     8a8:	8f b5       	in	r24, 0x2f	; 47
     8aa:	83 60       	ori	r24, 0x03	; 3
     8ac:	8f bd       	out	0x2f, r24	; 47
     8ae:	8e b5       	in	r24, 0x2e	; 46
     8b0:	80 61       	ori	r24, 0x10	; 16
     8b2:	8e bd       	out	0x2e, r24	; 46
     8b4:	18 c0       	rjmp	.+48     	; 0x8e6 <TIMER_COUNTER1enable+0xe2>
     8b6:	8e b5       	in	r24, 0x2e	; 46
     8b8:	88 61       	ori	r24, 0x18	; 24
     8ba:	8e bd       	out	0x2e, r24	; 46
     8bc:	14 c0       	rjmp	.+40     	; 0x8e6 <TIMER_COUNTER1enable+0xe2>
     8be:	8f b5       	in	r24, 0x2f	; 47
     8c0:	81 60       	ori	r24, 0x01	; 1
     8c2:	8f bd       	out	0x2f, r24	; 47
     8c4:	8e b5       	in	r24, 0x2e	; 46
     8c6:	88 61       	ori	r24, 0x18	; 24
     8c8:	8e bd       	out	0x2e, r24	; 46
     8ca:	0d c0       	rjmp	.+26     	; 0x8e6 <TIMER_COUNTER1enable+0xe2>
     8cc:	8f b5       	in	r24, 0x2f	; 47
     8ce:	82 60       	ori	r24, 0x02	; 2
     8d0:	8f bd       	out	0x2f, r24	; 47
     8d2:	8e b5       	in	r24, 0x2e	; 46
     8d4:	88 61       	ori	r24, 0x18	; 24
     8d6:	8e bd       	out	0x2e, r24	; 46
     8d8:	06 c0       	rjmp	.+12     	; 0x8e6 <TIMER_COUNTER1enable+0xe2>
     8da:	8f b5       	in	r24, 0x2f	; 47
     8dc:	83 60       	ori	r24, 0x03	; 3
     8de:	8f bd       	out	0x2f, r24	; 47
     8e0:	8e b5       	in	r24, 0x2e	; 46
     8e2:	88 61       	ori	r24, 0x18	; 24
     8e4:	8e bd       	out	0x2e, r24	; 46
     8e6:	8f b5       	in	r24, 0x2f	; 47
     8e8:	83 70       	andi	r24, 0x03	; 3
     8ea:	8f bd       	out	0x2f, r24	; 47
     8ec:	87 b7       	in	r24, 0x37	; 55
     8ee:	83 7c       	andi	r24, 0xC3	; 195
     8f0:	87 bf       	out	0x37, r24	; 55
     8f2:	ed e7       	ldi	r30, 0x7D	; 125
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	80 81       	ld	r24, Z
     8f8:	8e 7f       	andi	r24, 0xFE	; 254
     8fa:	80 83       	st	Z, r24
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	fa 01       	movw	r30, r20
     900:	31 97       	sbiw	r30, 0x01	; 1
     902:	ec 30       	cpi	r30, 0x0C	; 12
     904:	f1 05       	cpc	r31, r1
     906:	08 f0       	brcs	.+2      	; 0x90a <TIMER_COUNTER1enable+0x106>
     908:	44 c0       	rjmp	.+136    	; 0x992 <TIMER_COUNTER1enable+0x18e>
     90a:	e3 59       	subi	r30, 0x93	; 147
     90c:	ff 4f       	sbci	r31, 0xFF	; 255
     90e:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <__tablejump2__>
     912:	87 b7       	in	r24, 0x37	; 55
     914:	84 60       	ori	r24, 0x04	; 4
     916:	87 bf       	out	0x37, r24	; 55
     918:	3c c0       	rjmp	.+120    	; 0x992 <TIMER_COUNTER1enable+0x18e>
     91a:	87 b7       	in	r24, 0x37	; 55
     91c:	80 61       	ori	r24, 0x10	; 16
     91e:	87 bf       	out	0x37, r24	; 55
     920:	38 c0       	rjmp	.+112    	; 0x992 <TIMER_COUNTER1enable+0x18e>
     922:	87 b7       	in	r24, 0x37	; 55
     924:	88 60       	ori	r24, 0x08	; 8
     926:	87 bf       	out	0x37, r24	; 55
     928:	34 c0       	rjmp	.+104    	; 0x992 <TIMER_COUNTER1enable+0x18e>
     92a:	ed e7       	ldi	r30, 0x7D	; 125
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	80 81       	ld	r24, Z
     930:	81 60       	ori	r24, 0x01	; 1
     932:	80 83       	st	Z, r24
     934:	2e c0       	rjmp	.+92     	; 0x992 <TIMER_COUNTER1enable+0x18e>
     936:	87 b7       	in	r24, 0x37	; 55
     938:	80 62       	ori	r24, 0x20	; 32
     93a:	87 bf       	out	0x37, r24	; 55
     93c:	2a c0       	rjmp	.+84     	; 0x992 <TIMER_COUNTER1enable+0x18e>
     93e:	87 b7       	in	r24, 0x37	; 55
     940:	84 61       	ori	r24, 0x14	; 20
     942:	87 bf       	out	0x37, r24	; 55
     944:	26 c0       	rjmp	.+76     	; 0x992 <TIMER_COUNTER1enable+0x18e>
     946:	87 b7       	in	r24, 0x37	; 55
     948:	8c 60       	ori	r24, 0x0C	; 12
     94a:	87 bf       	out	0x37, r24	; 55
     94c:	22 c0       	rjmp	.+68     	; 0x992 <TIMER_COUNTER1enable+0x18e>
     94e:	87 b7       	in	r24, 0x37	; 55
     950:	84 60       	ori	r24, 0x04	; 4
     952:	87 bf       	out	0x37, r24	; 55
     954:	ed e7       	ldi	r30, 0x7D	; 125
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	80 81       	ld	r24, Z
     95a:	81 60       	ori	r24, 0x01	; 1
     95c:	80 83       	st	Z, r24
     95e:	19 c0       	rjmp	.+50     	; 0x992 <TIMER_COUNTER1enable+0x18e>
     960:	87 b7       	in	r24, 0x37	; 55
     962:	84 62       	ori	r24, 0x24	; 36
     964:	87 bf       	out	0x37, r24	; 55
     966:	15 c0       	rjmp	.+42     	; 0x992 <TIMER_COUNTER1enable+0x18e>
     968:	87 b7       	in	r24, 0x37	; 55
     96a:	8c 61       	ori	r24, 0x1C	; 28
     96c:	87 bf       	out	0x37, r24	; 55
     96e:	11 c0       	rjmp	.+34     	; 0x992 <TIMER_COUNTER1enable+0x18e>
     970:	87 b7       	in	r24, 0x37	; 55
     972:	8c 61       	ori	r24, 0x1C	; 28
     974:	87 bf       	out	0x37, r24	; 55
     976:	ed e7       	ldi	r30, 0x7D	; 125
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	80 81       	ld	r24, Z
     97c:	81 60       	ori	r24, 0x01	; 1
     97e:	80 83       	st	Z, r24
     980:	08 c0       	rjmp	.+16     	; 0x992 <TIMER_COUNTER1enable+0x18e>
     982:	87 b7       	in	r24, 0x37	; 55
     984:	88 61       	ori	r24, 0x18	; 24
     986:	87 bf       	out	0x37, r24	; 55
     988:	ed e7       	ldi	r30, 0x7D	; 125
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	80 81       	ld	r24, Z
     98e:	81 60       	ori	r24, 0x01	; 1
     990:	80 83       	st	Z, r24
     992:	83 e6       	ldi	r24, 0x63	; 99
     994:	93 e0       	ldi	r25, 0x03	; 3
     996:	11 96       	adiw	r26, 0x01	; 1
     998:	9c 93       	st	X, r25
     99a:	8e 93       	st	-X, r24
     99c:	8b e7       	ldi	r24, 0x7B	; 123
     99e:	93 e0       	ldi	r25, 0x03	; 3
     9a0:	13 96       	adiw	r26, 0x03	; 3
     9a2:	9c 93       	st	X, r25
     9a4:	8e 93       	st	-X, r24
     9a6:	12 97       	sbiw	r26, 0x02	; 2
     9a8:	83 e9       	ldi	r24, 0x93	; 147
     9aa:	93 e0       	ldi	r25, 0x03	; 3
     9ac:	15 96       	adiw	r26, 0x05	; 5
     9ae:	9c 93       	st	X, r25
     9b0:	8e 93       	st	-X, r24
     9b2:	14 97       	sbiw	r26, 0x04	; 4
     9b4:	8b ea       	ldi	r24, 0xAB	; 171
     9b6:	93 e0       	ldi	r25, 0x03	; 3
     9b8:	17 96       	adiw	r26, 0x07	; 7
     9ba:	9c 93       	st	X, r25
     9bc:	8e 93       	st	-X, r24
     9be:	16 97       	sbiw	r26, 0x06	; 6
     9c0:	8e ea       	ldi	r24, 0xAE	; 174
     9c2:	93 e0       	ldi	r25, 0x03	; 3
     9c4:	19 96       	adiw	r26, 0x09	; 9
     9c6:	9c 93       	st	X, r25
     9c8:	8e 93       	st	-X, r24
     9ca:	18 97       	sbiw	r26, 0x08	; 8
     9cc:	81 eb       	ldi	r24, 0xB1	; 177
     9ce:	93 e0       	ldi	r25, 0x03	; 3
     9d0:	1b 96       	adiw	r26, 0x0b	; 11
     9d2:	9c 93       	st	X, r25
     9d4:	8e 93       	st	-X, r24
     9d6:	1a 97       	sbiw	r26, 0x0a	; 10
     9d8:	8d e1       	ldi	r24, 0x1D	; 29
     9da:	93 e0       	ldi	r25, 0x03	; 3
     9dc:	1d 96       	adiw	r26, 0x0d	; 13
     9de:	9c 93       	st	X, r25
     9e0:	8e 93       	st	-X, r24
     9e2:	1c 97       	sbiw	r26, 0x0c	; 12
     9e4:	86 eb       	ldi	r24, 0xB6	; 182
     9e6:	93 e0       	ldi	r25, 0x03	; 3
     9e8:	1f 96       	adiw	r26, 0x0f	; 15
     9ea:	9c 93       	st	X, r25
     9ec:	8e 93       	st	-X, r24
     9ee:	1e 97       	sbiw	r26, 0x0e	; 14
     9f0:	cd 01       	movw	r24, r26
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	08 95       	ret

000009f8 <__vector_16>:
	timer3_state=0;
}
/***Interrupt***/
// So that main will not freeze when not defined, therefore exclude here! before use.
//ISR(TIMER0_COMP_vect){ }
ISR(TIMER0_OVF_vect){ }
     9f8:	1f 92       	push	r1
     9fa:	0f 92       	push	r0
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	0f 92       	push	r0
     a00:	11 24       	eor	r1, r1
     a02:	0f 90       	pop	r0
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	0f 90       	pop	r0
     a08:	1f 90       	pop	r1
     a0a:	18 95       	reti

00000a0c <__vector_11>:
ISR(TIMER1_CAPT_vect){ }
     a0c:	1f 92       	push	r1
     a0e:	0f 92       	push	r0
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	0f 92       	push	r0
     a14:	11 24       	eor	r1, r1
     a16:	0f 90       	pop	r0
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	0f 90       	pop	r0
     a1c:	1f 90       	pop	r1
     a1e:	18 95       	reti

00000a20 <__vector_13>:
//ISR(TIMER1_COMPA_vect){ }
ISR(TIMER1_COMPB_vect){ }
     a20:	1f 92       	push	r1
     a22:	0f 92       	push	r0
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	0f 92       	push	r0
     a28:	11 24       	eor	r1, r1
     a2a:	0f 90       	pop	r0
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	0f 90       	pop	r0
     a30:	1f 90       	pop	r1
     a32:	18 95       	reti

00000a34 <__vector_24>:
ISR(TIMER1_COMPC_vect){ }
     a34:	1f 92       	push	r1
     a36:	0f 92       	push	r0
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	0f 92       	push	r0
     a3c:	11 24       	eor	r1, r1
     a3e:	0f 90       	pop	r0
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	0f 90       	pop	r0
     a44:	1f 90       	pop	r1
     a46:	18 95       	reti

00000a48 <__vector_14>:
ISR(TIMER1_OVF_vect){ }
     a48:	1f 92       	push	r1
     a4a:	0f 92       	push	r0
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	0f 92       	push	r0
     a50:	11 24       	eor	r1, r1
     a52:	0f 90       	pop	r0
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	0f 90       	pop	r0
     a58:	1f 90       	pop	r1
     a5a:	18 95       	reti

00000a5c <__vector_10>:
ISR(TIMER2_OVF_vect){ }
     a5c:	1f 92       	push	r1
     a5e:	0f 92       	push	r0
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	0f 92       	push	r0
     a64:	11 24       	eor	r1, r1
     a66:	0f 90       	pop	r0
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	0f 90       	pop	r0
     a6c:	1f 90       	pop	r1
     a6e:	18 95       	reti

00000a70 <__vector_25>:
ISR(TIMER3_CAPT_vect){ }
     a70:	1f 92       	push	r1
     a72:	0f 92       	push	r0
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	0f 92       	push	r0
     a78:	11 24       	eor	r1, r1
     a7a:	0f 90       	pop	r0
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	0f 90       	pop	r0
     a80:	1f 90       	pop	r1
     a82:	18 95       	reti

00000a84 <__vector_26>:
ISR(TIMER3_COMPA_vect){ }
     a84:	1f 92       	push	r1
     a86:	0f 92       	push	r0
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	0f 92       	push	r0
     a8c:	11 24       	eor	r1, r1
     a8e:	0f 90       	pop	r0
     a90:	0f be       	out	0x3f, r0	; 63
     a92:	0f 90       	pop	r0
     a94:	1f 90       	pop	r1
     a96:	18 95       	reti

00000a98 <__vector_27>:
ISR(TIMER3_COMPB_vect){ }
     a98:	1f 92       	push	r1
     a9a:	0f 92       	push	r0
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	0f 92       	push	r0
     aa0:	11 24       	eor	r1, r1
     aa2:	0f 90       	pop	r0
     aa4:	0f be       	out	0x3f, r0	; 63
     aa6:	0f 90       	pop	r0
     aa8:	1f 90       	pop	r1
     aaa:	18 95       	reti

00000aac <__vector_28>:
ISR(TIMER3_COMPC_vect){ }
     aac:	1f 92       	push	r1
     aae:	0f 92       	push	r0
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	0f 92       	push	r0
     ab4:	11 24       	eor	r1, r1
     ab6:	0f 90       	pop	r0
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	0f 90       	pop	r0
     abc:	1f 90       	pop	r1
     abe:	18 95       	reti

00000ac0 <__vector_29>:
ISR(TIMER3_OVF_vect){ }
     ac0:	1f 92       	push	r1
     ac2:	0f 92       	push	r0
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	0f 92       	push	r0
     ac8:	11 24       	eor	r1, r1
     aca:	0f 90       	pop	r0
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	0f 90       	pop	r0
     ad0:	1f 90       	pop	r1
     ad2:	18 95       	reti

00000ad4 <EEPROMenable>:
#include "eeprom.h"
/***Constant & Macro***/
/***Global File Variable***/
/***Header***/
/***Procedure & Function***/
EEPROM EEPROMenable(void){
     ad4:	fc 01       	movw	r30, r24
	eprom.write_float=eeprom_write_float;
	eprom.update_float=eeprom_update_float;
	eprom.read_block=eeprom_read_block;
	eprom.write_block=eeprom_write_block;
	eprom.update_block=eeprom_update_block;
	return eprom;
     ad6:	81 ee       	ldi	r24, 0xE1	; 225
     ad8:	98 e1       	ldi	r25, 0x18	; 24
     ada:	91 83       	std	Z+1, r25	; 0x01
     adc:	80 83       	st	Z, r24
     ade:	83 e2       	ldi	r24, 0x23	; 35
     ae0:	99 e1       	ldi	r25, 0x19	; 25
     ae2:	93 83       	std	Z+3, r25	; 0x03
     ae4:	82 83       	std	Z+2, r24	; 0x02
     ae6:	8d ef       	ldi	r24, 0xFD	; 253
     ae8:	98 e1       	ldi	r25, 0x18	; 24
     aea:	95 83       	std	Z+5, r25	; 0x05
     aec:	84 83       	std	Z+4, r24	; 0x04
     aee:	89 ee       	ldi	r24, 0xE9	; 233
     af0:	98 e1       	ldi	r25, 0x18	; 24
     af2:	97 83       	std	Z+7, r25	; 0x07
     af4:	86 83       	std	Z+6, r24	; 0x06
     af6:	85 e3       	ldi	r24, 0x35	; 53
     af8:	99 e1       	ldi	r25, 0x19	; 25
     afa:	91 87       	std	Z+9, r25	; 0x09
     afc:	80 87       	std	Z+8, r24	; 0x08
     afe:	86 e1       	ldi	r24, 0x16	; 22
     b00:	99 e1       	ldi	r25, 0x19	; 25
     b02:	93 87       	std	Z+11, r25	; 0x0b
     b04:	82 87       	std	Z+10, r24	; 0x0a
     b06:	80 e3       	ldi	r24, 0x30	; 48
     b08:	99 e1       	ldi	r25, 0x19	; 25
     b0a:	97 87       	std	Z+15, r25	; 0x0f
     b0c:	86 87       	std	Z+14, r24	; 0x0e
     b0e:	80 e3       	ldi	r24, 0x30	; 48
     b10:	99 e1       	ldi	r25, 0x19	; 25
     b12:	95 8b       	std	Z+21, r25	; 0x15
     b14:	84 8b       	std	Z+20, r24	; 0x14
     b16:	8e e0       	ldi	r24, 0x0E	; 14
     b18:	99 e1       	ldi	r25, 0x19	; 25
     b1a:	97 8b       	std	Z+23, r25	; 0x17
     b1c:	86 8b       	std	Z+22, r24	; 0x16
     b1e:	81 ed       	ldi	r24, 0xD1	; 209
     b20:	98 e1       	ldi	r25, 0x18	; 24
     b22:	91 8f       	std	Z+25, r25	; 0x19
     b24:	80 8f       	std	Z+24, r24	; 0x18
     b26:	8a e1       	ldi	r24, 0x1A	; 26
     b28:	99 e1       	ldi	r25, 0x19	; 25
     b2a:	93 8f       	std	Z+27, r25	; 0x1b
     b2c:	82 8f       	std	Z+26, r24	; 0x1a
     b2e:	8e ee       	ldi	r24, 0xEE	; 238
     b30:	98 e1       	ldi	r25, 0x18	; 24
     b32:	95 8f       	std	Z+29, r25	; 0x1d
     b34:	84 8f       	std	Z+28, r24	; 0x1c
}
     b36:	cf 01       	movw	r24, r30
     b38:	08 95       	ret

00000b3a <EXPLODEboot>:
	/******/
	return explode;
}
// boot
void EXPLODEboot(EXPLODE* self, uint8_t x)
{
     b3a:	fc 01       	movw	r30, r24
	self->XI = self->XF;
     b3c:	82 81       	ldd	r24, Z+2	; 0x02
     b3e:	93 81       	ldd	r25, Z+3	; 0x03
     b40:	91 83       	std	Z+1, r25	; 0x01
     b42:	80 83       	st	Z, r24
	self->XF = x;
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	73 83       	std	Z+3, r23	; 0x03
     b48:	62 83       	std	Z+2, r22	; 0x02
     b4a:	08 95       	ret

00000b4c <EXPLODEhh>:
	trans = diff & self->XF;
	return (trans << nbits) | diff;
}
// hh
uint8_t EXPLODEhh(EXPLODE* self)
{
     b4c:	fc 01       	movw	r30, r24
	uint8_t i;
	i = self->XI & self->XF;
	return i;
     b4e:	90 81       	ld	r25, Z
     b50:	82 81       	ldd	r24, Z+2	; 0x02
}
     b52:	89 23       	and	r24, r25
     b54:	08 95       	ret

00000b56 <EXPLODEll>:
// ll
uint8_t EXPLODEll(EXPLODE* self)
{
     b56:	fc 01       	movw	r30, r24
	uint8_t i;
	i = self->XI | self->XF;
	return ~i;
     b58:	90 81       	ld	r25, Z
     b5a:	82 81       	ldd	r24, Z+2	; 0x02
     b5c:	89 2b       	or	r24, r25
}
     b5e:	80 95       	com	r24
     b60:	08 95       	ret

00000b62 <EXPLODElh>:
// lh
uint8_t EXPLODElh(EXPLODE* self)
{
     b62:	fc 01       	movw	r30, r24
	uint8_t i;
	i = self->XI ^ self->XF;
     b64:	92 81       	ldd	r25, Z+2	; 0x02
     b66:	80 81       	ld	r24, Z
     b68:	89 27       	eor	r24, r25
	i &= self->XF;
	return i;
}
     b6a:	89 23       	and	r24, r25
     b6c:	08 95       	ret

00000b6e <EXPLODEhl>:
// hl
uint8_t EXPLODEhl(EXPLODE* self)
{
     b6e:	fc 01       	movw	r30, r24
	uint8_t i;
	i = self->XF ^ self->XI;
     b70:	90 81       	ld	r25, Z
     b72:	82 81       	ldd	r24, Z+2	; 0x02
     b74:	89 27       	eor	r24, r25
	i &= self->XI;
	return i;
}
     b76:	89 23       	and	r24, r25
     b78:	08 95       	ret

00000b7a <EXPLODEdiff>:
// diff
uint8_t EXPLODEdiff(EXPLODE* self)
{
     b7a:	fc 01       	movw	r30, r24
	return self->XF ^ self->XI;
     b7c:	92 81       	ldd	r25, Z+2	; 0x02
     b7e:	80 81       	ld	r24, Z
}
     b80:	89 27       	eor	r24, r25
     b82:	08 95       	ret

00000b84 <EXPLODEdata>:
uint8_t EXPLODEdata(EXPLODE* self)
{
	return self->XF;	
}
     b84:	fc 01       	movw	r30, r24
     b86:	82 81       	ldd	r24, Z+2	; 0x02
     b88:	08 95       	ret

00000b8a <EXPLODEmayia>:
	self->XI = self->XF;
	self->XF = x;
}
// mayia
uint8_t EXPLODEmayia(EXPLODE* self, uint8_t nbits)
{//magic formula
     b8a:	dc 01       	movw	r26, r24
// power: raise base to n-th power; n >= 0
uint8_t EXPLODEPwr(uint8_t bs, uint8_t n)
{
	uint8_t i, p;
	p = ONE;
	for (i = ONE; i <= n; ++i)
     b8c:	66 23       	and	r22, r22
     b8e:	39 f0       	breq	.+14     	; 0xb9e <EXPLODEmayia+0x14>
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	21 e0       	ldi	r18, 0x01	; 1
	p = p * bs;
     b94:	22 0f       	add	r18, r18
// power: raise base to n-th power; n >= 0
uint8_t EXPLODEPwr(uint8_t bs, uint8_t n)
{
	uint8_t i, p;
	p = ONE;
	for (i = ONE; i <= n; ++i)
     b96:	9f 5f       	subi	r25, 0xFF	; 255
     b98:	69 17       	cp	r22, r25
     b9a:	e0 f7       	brcc	.-8      	; 0xb94 <EXPLODEmayia+0xa>
     b9c:	01 c0       	rjmp	.+2      	; 0xba0 <EXPLODEmayia+0x16>
/*******************************************************************/
// power: raise base to n-th power; n >= 0
uint8_t EXPLODEPwr(uint8_t bs, uint8_t n)
{
	uint8_t i, p;
	p = ONE;
     b9e:	21 e0       	ldi	r18, 0x01	; 1
uint8_t EXPLODEmayia(EXPLODE* self, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask = EXPLODEPwr(2,nbits)-ONE;
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	21 50       	subi	r18, 0x01	; 1
     ba4:	31 09       	sbc	r19, r1
	self->XI &= mask;
     ba6:	ed 91       	ld	r30, X+
     ba8:	fc 91       	ld	r31, X
     baa:	11 97       	sbiw	r26, 0x01	; 1
     bac:	e2 23       	and	r30, r18
     bae:	f3 23       	and	r31, r19
     bb0:	11 96       	adiw	r26, 0x01	; 1
     bb2:	fc 93       	st	X, r31
     bb4:	ee 93       	st	-X, r30
	self->XF &= mask;
     bb6:	12 96       	adiw	r26, 0x02	; 2
     bb8:	4d 91       	ld	r20, X+
     bba:	5c 91       	ld	r21, X
     bbc:	13 97       	sbiw	r26, 0x03	; 3
     bbe:	24 23       	and	r18, r20
     bc0:	35 23       	and	r19, r21
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
	diff = self->XF ^ self->XI;
     bca:	cf 01       	movw	r24, r30
     bcc:	82 27       	eor	r24, r18
     bce:	93 27       	eor	r25, r19
	trans = diff & self->XF;
	return (trans << nbits) | diff;
     bd0:	28 23       	and	r18, r24
     bd2:	39 23       	and	r19, r25
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <EXPLODEmayia+0x50>
     bd6:	22 0f       	add	r18, r18
     bd8:	33 1f       	adc	r19, r19
     bda:	6a 95       	dec	r22
     bdc:	e2 f7       	brpl	.-8      	; 0xbd6 <EXPLODEmayia+0x4c>
}
     bde:	82 2b       	or	r24, r18
     be0:	08 95       	ret

00000be2 <EXPLODEenable>:
uint8_t EXPLODEhl(EXPLODE* self);
uint8_t EXPLODEdiff(EXPLODE* self);
uint8_t EXPLODEdata(EXPLODE* self);
/***Procedure & Function***/
EXPLODE EXPLODEenable( void )
{
     be2:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG = STATUS_REGISTER;
     be4:	9f b7       	in	r25, 0x3f	; 63
	STATUS_REGISTER &= ~(ONE<<GLOBAL_INTERRUPT_ENABLE);
     be6:	8f b7       	in	r24, 0x3f	; 63
     be8:	8f 77       	andi	r24, 0x7F	; 127
     bea:	8f bf       	out	0x3f, r24	; 63
	explode.ll = EXPLODEll;
	explode.lh = EXPLODElh;
	explode.hl = EXPLODEhl;
	explode.diff = EXPLODEdiff;
	explode.data = EXPLODEdata;
	STATUS_REGISTER = tSREG;
     bec:	9f bf       	out	0x3f, r25	; 63
	/******/
	return explode;
     bee:	11 82       	std	Z+1, r1	; 0x01
     bf0:	10 82       	st	Z, r1
     bf2:	13 82       	std	Z+3, r1	; 0x03
     bf4:	12 82       	std	Z+2, r1	; 0x02
     bf6:	8d e9       	ldi	r24, 0x9D	; 157
     bf8:	95 e0       	ldi	r25, 0x05	; 5
     bfa:	95 83       	std	Z+5, r25	; 0x05
     bfc:	84 83       	std	Z+4, r24	; 0x04
     bfe:	85 ec       	ldi	r24, 0xC5	; 197
     c00:	95 e0       	ldi	r25, 0x05	; 5
     c02:	97 83       	std	Z+7, r25	; 0x07
     c04:	86 83       	std	Z+6, r24	; 0x06
     c06:	86 ea       	ldi	r24, 0xA6	; 166
     c08:	95 e0       	ldi	r25, 0x05	; 5
     c0a:	91 87       	std	Z+9, r25	; 0x09
     c0c:	80 87       	std	Z+8, r24	; 0x08
     c0e:	8b ea       	ldi	r24, 0xAB	; 171
     c10:	95 e0       	ldi	r25, 0x05	; 5
     c12:	93 87       	std	Z+11, r25	; 0x0b
     c14:	82 87       	std	Z+10, r24	; 0x0a
     c16:	81 eb       	ldi	r24, 0xB1	; 177
     c18:	95 e0       	ldi	r25, 0x05	; 5
     c1a:	95 87       	std	Z+13, r25	; 0x0d
     c1c:	84 87       	std	Z+12, r24	; 0x0c
     c1e:	87 eb       	ldi	r24, 0xB7	; 183
     c20:	95 e0       	ldi	r25, 0x05	; 5
     c22:	97 87       	std	Z+15, r25	; 0x0f
     c24:	86 87       	std	Z+14, r24	; 0x0e
     c26:	8d eb       	ldi	r24, 0xBD	; 189
     c28:	95 e0       	ldi	r25, 0x05	; 5
     c2a:	91 8b       	std	Z+17, r25	; 0x11
     c2c:	80 8b       	std	Z+16, r24	; 0x10
     c2e:	82 ec       	ldi	r24, 0xC2	; 194
     c30:	95 e0       	ldi	r25, 0x05	; 5
     c32:	93 8b       	std	Z+19, r25	; 0x13
     c34:	82 8b       	std	Z+18, r24	; 0x12
}
     c36:	cf 01       	movw	r24, r30
     c38:	08 95       	ret

00000c3a <FUNCpinmatch>:
	return i;
}
uint8_t  bintobcd(uint8_t bin)
{
	return (((bin) / 10) << 4) + ((bin) % 10);
}
     c3a:	68 23       	and	r22, r24
     c3c:	44 23       	and	r20, r20
     c3e:	21 f0       	breq	.+8      	; 0xc48 <FUNCpinmatch+0xe>
     c40:	86 17       	cp	r24, r22
     c42:	21 f0       	breq	.+8      	; 0xc4c <FUNCpinmatch+0x12>
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	08 95       	ret
     c48:	61 11       	cpse	r22, r1
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	08 95       	ret

00000c4e <FUNChmerge>:
     c4e:	86 2b       	or	r24, r22
     c50:	08 95       	ret

00000c52 <FUNClmerge>:
     c52:	86 23       	and	r24, r22
     c54:	08 95       	ret

00000c56 <FUNChh>:
     c56:	86 23       	and	r24, r22
     c58:	08 95       	ret

00000c5a <FUNCll>:
     c5a:	86 2b       	or	r24, r22
     c5c:	80 95       	com	r24
     c5e:	08 95       	ret

00000c60 <FUNClh>:
     c60:	86 27       	eor	r24, r22
     c62:	86 23       	and	r24, r22
     c64:	08 95       	ret

00000c66 <FUNChl>:
     c66:	60 95       	com	r22
     c68:	86 23       	and	r24, r22
     c6a:	08 95       	ret

00000c6c <FUNCdiff>:
     c6c:	86 27       	eor	r24, r22
     c6e:	08 95       	ret

00000c70 <FUNCswap>:
     c70:	cf 92       	push	r12
     c72:	df 92       	push	r13
     c74:	ef 92       	push	r14
     c76:	ff 92       	push	r15
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	fc 01       	movw	r30, r24
     c7e:	00 81       	ld	r16, Z
     c80:	11 81       	ldd	r17, Z+1	; 0x01
     c82:	22 81       	ldd	r18, Z+2	; 0x02
     c84:	33 81       	ldd	r19, Z+3	; 0x03
     c86:	fb 01       	movw	r30, r22
     c88:	c0 80       	ld	r12, Z
     c8a:	d1 80       	ldd	r13, Z+1	; 0x01
     c8c:	e2 80       	ldd	r14, Z+2	; 0x02
     c8e:	f3 80       	ldd	r15, Z+3	; 0x03
     c90:	fc 01       	movw	r30, r24
     c92:	c0 82       	st	Z, r12
     c94:	d1 82       	std	Z+1, r13	; 0x01
     c96:	e2 82       	std	Z+2, r14	; 0x02
     c98:	f3 82       	std	Z+3, r15	; 0x03
     c9a:	fb 01       	movw	r30, r22
     c9c:	00 83       	st	Z, r16
     c9e:	11 83       	std	Z+1, r17	; 0x01
     ca0:	22 83       	std	Z+2, r18	; 0x02
     ca2:	33 83       	std	Z+3, r19	; 0x03
     ca4:	1f 91       	pop	r17
     ca6:	0f 91       	pop	r16
     ca8:	ff 90       	pop	r15
     caa:	ef 90       	pop	r14
     cac:	df 90       	pop	r13
     cae:	cf 90       	pop	r12
     cb0:	08 95       	ret

00000cb2 <FUNCcopy>:
     cb2:	fb 01       	movw	r30, r22
     cb4:	20 81       	ld	r18, Z
     cb6:	fc 01       	movw	r30, r24
     cb8:	20 83       	st	Z, r18
     cba:	22 23       	and	r18, r18
     cbc:	39 f0       	breq	.+14     	; 0xccc <FUNCcopy+0x1a>
     cbe:	db 01       	movw	r26, r22
     cc0:	11 96       	adiw	r26, 0x01	; 1
     cc2:	31 96       	adiw	r30, 0x01	; 1
     cc4:	9d 91       	ld	r25, X+
     cc6:	91 93       	st	Z+, r25
     cc8:	91 11       	cpse	r25, r1
     cca:	fc cf       	rjmp	.-8      	; 0xcc4 <FUNCcopy+0x12>
     ccc:	08 95       	ret

00000cce <FUNCsqueeze>:
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	ec 01       	movw	r28, r24
     cd4:	98 81       	ld	r25, Y
     cd6:	99 23       	and	r25, r25
     cd8:	99 f0       	breq	.+38     	; 0xd00 <FUNCsqueeze+0x32>
     cda:	fe 01       	movw	r30, r28
     cdc:	31 96       	adiw	r30, 0x01	; 1
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	49 2f       	mov	r20, r25
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	46 17       	cp	r20, r22
     ce8:	57 07       	cpc	r21, r23
     cea:	31 f0       	breq	.+12     	; 0xcf8 <FUNCsqueeze+0x2a>
     cec:	de 01       	movw	r26, r28
     cee:	a2 0f       	add	r26, r18
     cf0:	b3 1f       	adc	r27, r19
     cf2:	9c 93       	st	X, r25
     cf4:	2f 5f       	subi	r18, 0xFF	; 255
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	91 91       	ld	r25, Z+
     cfa:	91 11       	cpse	r25, r1
     cfc:	f2 cf       	rjmp	.-28     	; 0xce2 <FUNCsqueeze+0x14>
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <FUNCsqueeze+0x36>
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	fe 01       	movw	r30, r28
     d06:	e2 0f       	add	r30, r18
     d08:	f3 1f       	adc	r31, r19
     d0a:	10 82       	st	Z, r1
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	08 95       	ret

00000d12 <FUNCshellsort>:
     d12:	2f 92       	push	r2
     d14:	3f 92       	push	r3
     d16:	4f 92       	push	r4
     d18:	5f 92       	push	r5
     d1a:	6f 92       	push	r6
     d1c:	7f 92       	push	r7
     d1e:	8f 92       	push	r8
     d20:	9f 92       	push	r9
     d22:	af 92       	push	r10
     d24:	bf 92       	push	r11
     d26:	cf 92       	push	r12
     d28:	df 92       	push	r13
     d2a:	ef 92       	push	r14
     d2c:	ff 92       	push	r15
     d2e:	0f 93       	push	r16
     d30:	1f 93       	push	r17
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	00 d0       	rcall	.+0      	; 0xd38 <FUNCshellsort+0x26>
     d38:	00 d0       	rcall	.+0      	; 0xd3a <FUNCshellsort+0x28>
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	2c 01       	movw	r4, r24
     d40:	1b 01       	movw	r2, r22
     d42:	4b 01       	movw	r8, r22
     d44:	77 23       	and	r23, r23
     d46:	1c f4       	brge	.+6      	; 0xd4e <FUNCshellsort+0x3c>
     d48:	2f ef       	ldi	r18, 0xFF	; 255
     d4a:	82 1a       	sub	r8, r18
     d4c:	92 0a       	sbc	r9, r18
     d4e:	95 94       	asr	r9
     d50:	87 94       	ror	r8
     d52:	18 14       	cp	r1, r8
     d54:	19 04       	cpc	r1, r9
     d56:	0c f4       	brge	.+2      	; 0xd5a <FUNCshellsort+0x48>
     d58:	51 c0       	rjmp	.+162    	; 0xdfc <FUNCshellsort+0xea>
     d5a:	6a c0       	rjmp	.+212    	; 0xe30 <FUNCshellsort+0x11e>
     d5c:	96 01       	movw	r18, r12
     d5e:	dd 20       	and	r13, r13
     d60:	9c f1       	brlt	.+102    	; 0xdc8 <FUNCshellsort+0xb6>
     d62:	f5 01       	movw	r30, r10
     d64:	40 81       	ld	r20, Z
     d66:	51 81       	ldd	r21, Z+1	; 0x01
     d68:	f4 01       	movw	r30, r8
     d6a:	60 81       	ld	r22, Z
     d6c:	71 81       	ldd	r23, Z+1	; 0x01
     d6e:	64 17       	cp	r22, r20
     d70:	75 07       	cpc	r23, r21
     d72:	54 f5       	brge	.+84     	; 0xdc8 <FUNCshellsort+0xb6>
     d74:	8c 01       	movw	r16, r24
     d76:	0a 0d       	add	r16, r10
     d78:	1b 1d       	adc	r17, r11
     d7a:	d4 01       	movw	r26, r8
     d7c:	bc 82       	std	Y+4, r11	; 0x04
     d7e:	ab 82       	std	Y+3, r10	; 0x03
     d80:	ba 82       	std	Y+2, r11	; 0x02
     d82:	a9 82       	std	Y+1, r10	; 0x01
     d84:	eb 81       	ldd	r30, Y+3	; 0x03
     d86:	fc 81       	ldd	r31, Y+4	; 0x04
     d88:	71 83       	std	Z+1, r23	; 0x01
     d8a:	60 83       	st	Z, r22
     d8c:	11 96       	adiw	r26, 0x01	; 1
     d8e:	5c 93       	st	X, r21
     d90:	4e 93       	st	-X, r20
     d92:	2e 19       	sub	r18, r14
     d94:	3f 09       	sbc	r19, r15
     d96:	c2 f0       	brmi	.+48     	; 0xdc8 <FUNCshellsort+0xb6>
     d98:	f8 01       	movw	r30, r16
     d9a:	40 81       	ld	r20, Z
     d9c:	51 81       	ldd	r21, Z+1	; 0x01
     d9e:	e9 81       	ldd	r30, Y+1	; 0x01
     da0:	fa 81       	ldd	r31, Y+2	; 0x02
     da2:	60 81       	ld	r22, Z
     da4:	71 81       	ldd	r23, Z+1	; 0x01
     da6:	08 0f       	add	r16, r24
     da8:	19 1f       	adc	r17, r25
     daa:	e8 0f       	add	r30, r24
     dac:	f9 1f       	adc	r31, r25
     dae:	fa 83       	std	Y+2, r31	; 0x02
     db0:	e9 83       	std	Y+1, r30	; 0x01
     db2:	eb 81       	ldd	r30, Y+3	; 0x03
     db4:	fc 81       	ldd	r31, Y+4	; 0x04
     db6:	e8 0f       	add	r30, r24
     db8:	f9 1f       	adc	r31, r25
     dba:	fc 83       	std	Y+4, r31	; 0x04
     dbc:	eb 83       	std	Y+3, r30	; 0x03
     dbe:	a8 0f       	add	r26, r24
     dc0:	b9 1f       	adc	r27, r25
     dc2:	64 17       	cp	r22, r20
     dc4:	75 07       	cpc	r23, r21
     dc6:	f4 f2       	brlt	.-68     	; 0xd84 <FUNCshellsort+0x72>
     dc8:	ff ef       	ldi	r31, 0xFF	; 255
     dca:	cf 1a       	sub	r12, r31
     dcc:	df 0a       	sbc	r13, r31
     dce:	22 e0       	ldi	r18, 0x02	; 2
     dd0:	a2 0e       	add	r10, r18
     dd2:	b1 1c       	adc	r11, r1
     dd4:	e2 e0       	ldi	r30, 0x02	; 2
     dd6:	8e 0e       	add	r8, r30
     dd8:	91 1c       	adc	r9, r1
     dda:	c6 14       	cp	r12, r6
     ddc:	d7 04       	cpc	r13, r7
     dde:	09 f0       	breq	.+2      	; 0xde2 <FUNCshellsort+0xd0>
     de0:	bd cf       	rjmp	.-134    	; 0xd5c <FUNCshellsort+0x4a>
     de2:	47 01       	movw	r8, r14
     de4:	ff 20       	and	r15, r15
     de6:	1c f4       	brge	.+6      	; 0xdee <FUNCshellsort+0xdc>
     de8:	ff ef       	ldi	r31, 0xFF	; 255
     dea:	8f 1a       	sub	r8, r31
     dec:	9f 0a       	sbc	r9, r31
     dee:	95 94       	asr	r9
     df0:	87 94       	ror	r8
     df2:	18 14       	cp	r1, r8
     df4:	19 04       	cpc	r1, r9
     df6:	e4 f4       	brge	.+56     	; 0xe30 <FUNCshellsort+0x11e>
     df8:	74 01       	movw	r14, r8
     dfa:	01 c0       	rjmp	.+2      	; 0xdfe <FUNCshellsort+0xec>
     dfc:	74 01       	movw	r14, r8
     dfe:	82 14       	cp	r8, r2
     e00:	93 04       	cpc	r9, r3
     e02:	7c f7       	brge	.-34     	; 0xde2 <FUNCshellsort+0xd0>
     e04:	64 01       	movw	r12, r8
     e06:	ce 18       	sub	r12, r14
     e08:	df 08       	sbc	r13, r15
     e0a:	56 01       	movw	r10, r12
     e0c:	aa 0c       	add	r10, r10
     e0e:	bb 1c       	adc	r11, r11
     e10:	a4 0c       	add	r10, r4
     e12:	b5 1c       	adc	r11, r5
     e14:	88 0c       	add	r8, r8
     e16:	99 1c       	adc	r9, r9
     e18:	84 0c       	add	r8, r4
     e1a:	95 1c       	adc	r9, r5
     e1c:	31 01       	movw	r6, r2
     e1e:	6e 18       	sub	r6, r14
     e20:	7f 08       	sbc	r7, r15
     e22:	c7 01       	movw	r24, r14
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	91 95       	neg	r25
     e2a:	81 95       	neg	r24
     e2c:	91 09       	sbc	r25, r1
     e2e:	96 cf       	rjmp	.-212    	; 0xd5c <FUNCshellsort+0x4a>
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	1f 91       	pop	r17
     e3e:	0f 91       	pop	r16
     e40:	ff 90       	pop	r15
     e42:	ef 90       	pop	r14
     e44:	df 90       	pop	r13
     e46:	cf 90       	pop	r12
     e48:	bf 90       	pop	r11
     e4a:	af 90       	pop	r10
     e4c:	9f 90       	pop	r9
     e4e:	8f 90       	pop	r8
     e50:	7f 90       	pop	r7
     e52:	6f 90       	pop	r6
     e54:	5f 90       	pop	r5
     e56:	4f 90       	pop	r4
     e58:	3f 90       	pop	r3
     e5a:	2f 90       	pop	r2
     e5c:	08 95       	ret

00000e5e <FUNCpmax>:
     e5e:	86 17       	cp	r24, r22
     e60:	97 07       	cpc	r25, r23
     e62:	0c f4       	brge	.+2      	; 0xe66 <FUNCpmax+0x8>
     e64:	cb 01       	movw	r24, r22
     e66:	08 95       	ret

00000e68 <FUNCgcd>:
     e68:	9b 01       	movw	r18, r22
     e6a:	67 2b       	or	r22, r23
     e6c:	11 f4       	brne	.+4      	; 0xe72 <FUNCgcd+0xa>
     e6e:	08 95       	ret
     e70:	9a 01       	movw	r18, r20
     e72:	b9 01       	movw	r22, r18
     e74:	0e 94 4a 18 	call	0x3094	; 0x3094 <__divmodhi4>
     e78:	ac 01       	movw	r20, r24
     e7a:	82 2f       	mov	r24, r18
     e7c:	93 2f       	mov	r25, r19
     e7e:	41 15       	cp	r20, r1
     e80:	51 05       	cpc	r21, r1
     e82:	b1 f7       	brne	.-20     	; 0xe70 <FUNCgcd+0x8>
     e84:	08 95       	ret

00000e86 <FUNCstrToInt>:
     e86:	fc 01       	movw	r30, r24
     e88:	90 81       	ld	r25, Z
     e8a:	80 ed       	ldi	r24, 0xD0	; 208
     e8c:	89 0f       	add	r24, r25
     e8e:	8a 30       	cpi	r24, 0x0A	; 10
     e90:	d0 f4       	brcc	.+52     	; 0xec6 <FUNCstrToInt+0x40>
     e92:	31 96       	adiw	r30, 0x01	; 1
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	a9 01       	movw	r20, r18
     e9a:	44 0f       	add	r20, r20
     e9c:	55 1f       	adc	r21, r21
     e9e:	22 0f       	add	r18, r18
     ea0:	33 1f       	adc	r19, r19
     ea2:	22 0f       	add	r18, r18
     ea4:	33 1f       	adc	r19, r19
     ea6:	22 0f       	add	r18, r18
     ea8:	33 1f       	adc	r19, r19
     eaa:	42 0f       	add	r20, r18
     eac:	53 1f       	adc	r21, r19
     eae:	29 2f       	mov	r18, r25
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	20 53       	subi	r18, 0x30	; 48
     eb4:	31 09       	sbc	r19, r1
     eb6:	24 0f       	add	r18, r20
     eb8:	35 1f       	adc	r19, r21
     eba:	91 91       	ld	r25, Z+
     ebc:	80 ed       	ldi	r24, 0xD0	; 208
     ebe:	89 0f       	add	r24, r25
     ec0:	8a 30       	cpi	r24, 0x0A	; 10
     ec2:	50 f3       	brcs	.-44     	; 0xe98 <FUNCstrToInt+0x12>
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <FUNCstrToInt+0x44>
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	c9 01       	movw	r24, r18
     ecc:	08 95       	ret

00000ece <FUNCfilter>:
     ece:	86 23       	and	r24, r22
     ed0:	08 95       	ret

00000ed2 <FUNCticks>:
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	39 f0       	breq	.+14     	; 0xee4 <FUNCticks+0x12>
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	2f 5f       	subi	r18, 0xFF	; 255
     edc:	3f 4f       	sbci	r19, 0xFF	; 255
     ede:	82 17       	cp	r24, r18
     ee0:	93 07       	cpc	r25, r19
     ee2:	d9 f7       	brne	.-10     	; 0xeda <FUNCticks+0x8>
     ee4:	08 95       	ret

00000ee6 <FUNCtwocomptoint8bit>:
     ee6:	87 ff       	sbrs	r24, 7
     ee8:	08 c0       	rjmp	.+16     	; 0xefa <FUNCtwocomptoint8bit+0x14>
     eea:	91 95       	neg	r25
     eec:	81 95       	neg	r24
     eee:	91 09       	sbc	r25, r1
     ef0:	99 27       	eor	r25, r25
     ef2:	91 95       	neg	r25
     ef4:	81 95       	neg	r24
     ef6:	91 09       	sbc	r25, r1
     ef8:	08 95       	ret
     efa:	8f 77       	andi	r24, 0x7F	; 127
     efc:	99 27       	eor	r25, r25
     efe:	08 95       	ret

00000f00 <FUNCtwocomptoint10bit>:
     f00:	91 ff       	sbrs	r25, 1
     f02:	08 c0       	rjmp	.+16     	; 0xf14 <FUNCtwocomptoint10bit+0x14>
     f04:	91 95       	neg	r25
     f06:	81 95       	neg	r24
     f08:	91 09       	sbc	r25, r1
     f0a:	93 70       	andi	r25, 0x03	; 3
     f0c:	91 95       	neg	r25
     f0e:	81 95       	neg	r24
     f10:	91 09       	sbc	r25, r1
     f12:	08 95       	ret
     f14:	91 70       	andi	r25, 0x01	; 1
     f16:	08 95       	ret

00000f18 <FUNCtwocomptointnbit>:
     f18:	61 50       	subi	r22, 0x01	; 1
     f1a:	21 e0       	ldi	r18, 0x01	; 1
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <FUNCtwocomptointnbit+0xc>
     f20:	22 0f       	add	r18, r18
     f22:	33 1f       	adc	r19, r19
     f24:	6a 95       	dec	r22
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <FUNCtwocomptointnbit+0x8>
     f28:	a9 01       	movw	r20, r18
     f2a:	41 50       	subi	r20, 0x01	; 1
     f2c:	51 09       	sbc	r21, r1
     f2e:	b9 01       	movw	r22, r18
     f30:	68 23       	and	r22, r24
     f32:	79 23       	and	r23, r25
     f34:	67 2b       	or	r22, r23
     f36:	29 f0       	breq	.+10     	; 0xf42 <FUNCtwocomptointnbit+0x2a>
     f38:	84 23       	and	r24, r20
     f3a:	95 23       	and	r25, r21
     f3c:	82 1b       	sub	r24, r18
     f3e:	93 0b       	sbc	r25, r19
     f40:	08 95       	ret
     f42:	84 23       	and	r24, r20
     f44:	95 23       	and	r25, r21
     f46:	08 95       	ret

00000f48 <FUNCdec2bcd>:
     f48:	9d ec       	ldi	r25, 0xCD	; 205
     f4a:	89 9f       	mul	r24, r25
     f4c:	91 2d       	mov	r25, r1
     f4e:	11 24       	eor	r1, r1
     f50:	96 95       	lsr	r25
     f52:	96 95       	lsr	r25
     f54:	96 95       	lsr	r25
     f56:	39 2f       	mov	r19, r25
     f58:	33 0f       	add	r19, r19
     f5a:	23 2f       	mov	r18, r19
     f5c:	22 0f       	add	r18, r18
     f5e:	22 0f       	add	r18, r18
     f60:	23 0f       	add	r18, r19
     f62:	82 1b       	sub	r24, r18
     f64:	20 e1       	ldi	r18, 0x10	; 16
     f66:	92 9f       	mul	r25, r18
     f68:	80 0d       	add	r24, r0
     f6a:	11 24       	eor	r1, r1
     f6c:	08 95       	ret

00000f6e <FUNCbcd2dec>:
     f6e:	98 2f       	mov	r25, r24
     f70:	92 95       	swap	r25
     f72:	9f 70       	andi	r25, 0x0F	; 15
     f74:	99 0f       	add	r25, r25
     f76:	29 2f       	mov	r18, r25
     f78:	22 0f       	add	r18, r18
     f7a:	22 0f       	add	r18, r18
     f7c:	92 0f       	add	r25, r18
     f7e:	8f 70       	andi	r24, 0x0F	; 15
     f80:	89 0f       	add	r24, r25
     f82:	08 95       	ret

00000f84 <FUNCresizestr>:
     f84:	fc 01       	movw	r30, r24
     f86:	db 01       	movw	r26, r22
     f88:	a3 5c       	subi	r26, 0xC3	; 195
     f8a:	be 4f       	sbci	r27, 0xFE	; 254
     f8c:	1c 92       	st	X, r1
     f8e:	16 16       	cp	r1, r22
     f90:	17 06       	cpc	r1, r23
     f92:	14 f5       	brge	.+68     	; 0xfd8 <FUNCresizestr+0x54>
     f94:	90 81       	ld	r25, Z
     f96:	91 11       	cpse	r25, r1
     f98:	0c c0       	rjmp	.+24     	; 0xfb2 <FUNCresizestr+0x2e>
     f9a:	17 c0       	rjmp	.+46     	; 0xfca <FUNCresizestr+0x46>
     f9c:	91 91       	ld	r25, Z+
     f9e:	91 11       	cpse	r25, r1
     fa0:	0d c0       	rjmp	.+26     	; 0xfbc <FUNCresizestr+0x38>
     fa2:	15 c0       	rjmp	.+42     	; 0xfce <FUNCresizestr+0x4a>
     fa4:	81 93       	st	Z+, r24
     fa6:	2f 5f       	subi	r18, 0xFF	; 255
     fa8:	3f 4f       	sbci	r19, 0xFF	; 255
     faa:	26 17       	cp	r18, r22
     fac:	37 07       	cpc	r19, r23
     fae:	d4 f3       	brlt	.-12     	; 0xfa4 <FUNCresizestr+0x20>
     fb0:	13 c0       	rjmp	.+38     	; 0xfd8 <FUNCresizestr+0x54>
     fb2:	ad e3       	ldi	r26, 0x3D	; 61
     fb4:	b1 e0       	ldi	r27, 0x01	; 1
     fb6:	31 96       	adiw	r30, 0x01	; 1
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	9d 93       	st	X+, r25
     fbe:	2f 5f       	subi	r18, 0xFF	; 255
     fc0:	3f 4f       	sbci	r19, 0xFF	; 255
     fc2:	62 17       	cp	r22, r18
     fc4:	73 07       	cpc	r23, r19
     fc6:	51 f7       	brne	.-44     	; 0xf9c <FUNCresizestr+0x18>
     fc8:	07 c0       	rjmp	.+14     	; 0xfd8 <FUNCresizestr+0x54>
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	f9 01       	movw	r30, r18
     fd0:	e3 5c       	subi	r30, 0xC3	; 195
     fd2:	fe 4f       	sbci	r31, 0xFE	; 254
     fd4:	80 e2       	ldi	r24, 0x20	; 32
     fd6:	e6 cf       	rjmp	.-52     	; 0xfa4 <FUNCresizestr+0x20>
     fd8:	8d e3       	ldi	r24, 0x3D	; 61
     fda:	91 e0       	ldi	r25, 0x01	; 1
     fdc:	08 95       	ret

00000fde <FUNCtrimmer>:
     fde:	4f 92       	push	r4
     fe0:	5f 92       	push	r5
     fe2:	6f 92       	push	r6
     fe4:	7f 92       	push	r7
     fe6:	af 92       	push	r10
     fe8:	bf 92       	push	r11
     fea:	cf 92       	push	r12
     fec:	df 92       	push	r13
     fee:	ef 92       	push	r14
     ff0:	ff 92       	push	r15
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	29 01       	movw	r4, r18
    1000:	3a 01       	movw	r6, r20
    1002:	9b 01       	movw	r18, r22
    1004:	ac 01       	movw	r20, r24
    1006:	24 19       	sub	r18, r4
    1008:	35 09       	sbc	r19, r5
    100a:	46 09       	sbc	r20, r6
    100c:	57 09       	sbc	r21, r7
    100e:	89 89       	ldd	r24, Y+17	; 0x11
    1010:	9a 89       	ldd	r25, Y+18	; 0x12
    1012:	ab 89       	ldd	r26, Y+19	; 0x13
    1014:	bc 89       	ldd	r27, Y+20	; 0x14
    1016:	bc 01       	movw	r22, r24
    1018:	cd 01       	movw	r24, r26
    101a:	6a 19       	sub	r22, r10
    101c:	7b 09       	sbc	r23, r11
    101e:	8c 09       	sbc	r24, r12
    1020:	9d 09       	sbc	r25, r13
    1022:	0e 94 3b 18 	call	0x3076	; 0x3076 <__mulsi3>
    1026:	a8 01       	movw	r20, r16
    1028:	97 01       	movw	r18, r14
    102a:	24 19       	sub	r18, r4
    102c:	35 09       	sbc	r19, r5
    102e:	46 09       	sbc	r20, r6
    1030:	57 09       	sbc	r21, r7
    1032:	0e 94 5d 18 	call	0x30ba	; 0x30ba <__divmodsi4>
    1036:	ca 01       	movw	r24, r20
    1038:	b9 01       	movw	r22, r18
    103a:	6a 0d       	add	r22, r10
    103c:	7b 1d       	adc	r23, r11
    103e:	8c 1d       	adc	r24, r12
    1040:	9d 1d       	adc	r25, r13
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	ff 90       	pop	r15
    104c:	ef 90       	pop	r14
    104e:	df 90       	pop	r13
    1050:	cf 90       	pop	r12
    1052:	bf 90       	pop	r11
    1054:	af 90       	pop	r10
    1056:	7f 90       	pop	r7
    1058:	6f 90       	pop	r6
    105a:	5f 90       	pop	r5
    105c:	4f 90       	pop	r4
    105e:	08 95       	ret

00001060 <Pwr>:
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	61 15       	cp	r22, r1
    1064:	71 05       	cpc	r23, r1
    1066:	99 f0       	breq	.+38     	; 0x108e <Pwr+0x2e>
    1068:	41 e0       	ldi	r20, 0x01	; 1
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	21 e0       	ldi	r18, 0x01	; 1
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	fa 01       	movw	r30, r20
    1074:	e8 9f       	mul	r30, r24
    1076:	a0 01       	movw	r20, r0
    1078:	e9 9f       	mul	r30, r25
    107a:	50 0d       	add	r21, r0
    107c:	f8 9f       	mul	r31, r24
    107e:	50 0d       	add	r21, r0
    1080:	11 24       	eor	r1, r1
    1082:	2f 5f       	subi	r18, 0xFF	; 255
    1084:	3f 4f       	sbci	r19, 0xFF	; 255
    1086:	62 17       	cp	r22, r18
    1088:	73 07       	cpc	r23, r19
    108a:	98 f7       	brcc	.-26     	; 0x1072 <Pwr+0x12>
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <Pwr+0x32>
    108e:	41 e0       	ldi	r20, 0x01	; 1
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	ca 01       	movw	r24, r20
    1094:	08 95       	ret

00001096 <StringLength>:
    1096:	fc 01       	movw	r30, r24
    1098:	20 81       	ld	r18, Z
    109a:	22 23       	and	r18, r18
    109c:	41 f0       	breq	.+16     	; 0x10ae <StringLength+0x18>
    109e:	31 96       	adiw	r30, 0x01	; 1
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	01 96       	adiw	r24, 0x01	; 1
    10a6:	21 91       	ld	r18, Z+
    10a8:	21 11       	cpse	r18, r1
    10aa:	fc cf       	rjmp	.-8      	; 0x10a4 <StringLength+0xe>
    10ac:	08 95       	ret
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	08 95       	ret

000010b4 <FUNCtrim>:
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	ec 01       	movw	r28, r24
    10ba:	ed df       	rcall	.-38     	; 0x1096 <StringLength>
    10bc:	9c 01       	movw	r18, r24
    10be:	21 50       	subi	r18, 0x01	; 1
    10c0:	31 09       	sbc	r19, r1
    10c2:	62 f0       	brmi	.+24     	; 0x10dc <FUNCtrim+0x28>
    10c4:	fe 01       	movw	r30, r28
    10c6:	e8 0f       	add	r30, r24
    10c8:	f9 1f       	adc	r31, r25
    10ca:	92 91       	ld	r25, -Z
    10cc:	90 32       	cpi	r25, 0x20	; 32
    10ce:	19 f0       	breq	.+6      	; 0x10d6 <FUNCtrim+0x22>
    10d0:	99 50       	subi	r25, 0x09	; 9
    10d2:	92 30       	cpi	r25, 0x02	; 2
    10d4:	18 f4       	brcc	.+6      	; 0x10dc <FUNCtrim+0x28>
    10d6:	21 50       	subi	r18, 0x01	; 1
    10d8:	31 09       	sbc	r19, r1
    10da:	b8 f7       	brcc	.-18     	; 0x10ca <FUNCtrim+0x16>
    10dc:	c2 0f       	add	r28, r18
    10de:	d3 1f       	adc	r29, r19
    10e0:	19 82       	std	Y+1, r1	; 0x01
    10e2:	c9 01       	movw	r24, r18
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	08 95       	ret

000010ea <Reverse>:
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	ec 01       	movw	r28, r24
    10f0:	d2 df       	rcall	.-92     	; 0x1096 <StringLength>
    10f2:	9c 01       	movw	r18, r24
    10f4:	21 50       	subi	r18, 0x01	; 1
    10f6:	31 09       	sbc	r19, r1
    10f8:	12 16       	cp	r1, r18
    10fa:	13 06       	cpc	r1, r19
    10fc:	84 f4       	brge	.+32     	; 0x111e <__stack+0x1f>
    10fe:	de 01       	movw	r26, r28
    1100:	a8 0f       	add	r26, r24
    1102:	b9 1f       	adc	r27, r25
    1104:	fe 01       	movw	r30, r28
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	40 81       	ld	r20, Z
    110c:	5e 91       	ld	r21, -X
    110e:	51 93       	st	Z+, r21
    1110:	4c 93       	st	X, r20
    1112:	01 96       	adiw	r24, 0x01	; 1
    1114:	21 50       	subi	r18, 0x01	; 1
    1116:	31 09       	sbc	r19, r1
    1118:	82 17       	cp	r24, r18
    111a:	93 07       	cpc	r25, r19
    111c:	b4 f3       	brlt	.-20     	; 0x110a <__stack+0xb>
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	08 95       	ret

00001124 <FUNCi32toa>:
    1124:	8f 92       	push	r8
    1126:	9f 92       	push	r9
    1128:	af 92       	push	r10
    112a:	bf 92       	push	r11
    112c:	cf 92       	push	r12
    112e:	df 92       	push	r13
    1130:	ef 92       	push	r14
    1132:	ff 92       	push	r15
    1134:	0f 93       	push	r16
    1136:	1f 93       	push	r17
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	6b 01       	movw	r12, r22
    113e:	7c 01       	movw	r14, r24
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	ff 20       	and	r15, r15
    1146:	3c f4       	brge	.+14     	; 0x1156 <FUNCi32toa+0x32>
    1148:	88 27       	eor	r24, r24
    114a:	99 27       	eor	r25, r25
    114c:	dc 01       	movw	r26, r24
    114e:	8c 19       	sub	r24, r12
    1150:	9d 09       	sbc	r25, r13
    1152:	ae 09       	sbc	r26, r14
    1154:	bf 09       	sbc	r27, r15
    1156:	bc 01       	movw	r22, r24
    1158:	cd 01       	movw	r24, r26
    115a:	10 e0       	ldi	r17, 0x00	; 0
    115c:	0f 2e       	mov	r0, r31
    115e:	fa e0       	ldi	r31, 0x0A	; 10
    1160:	8f 2e       	mov	r8, r31
    1162:	91 2c       	mov	r9, r1
    1164:	a1 2c       	mov	r10, r1
    1166:	b1 2c       	mov	r11, r1
    1168:	f0 2d       	mov	r31, r0
    116a:	01 c0       	rjmp	.+2      	; 0x116e <FUNCi32toa+0x4a>
    116c:	10 2f       	mov	r17, r16
    116e:	01 e0       	ldi	r16, 0x01	; 1
    1170:	01 0f       	add	r16, r17
    1172:	c1 2f       	mov	r28, r17
    1174:	d0 e0       	ldi	r29, 0x00	; 0
    1176:	c3 5c       	subi	r28, 0xC3	; 195
    1178:	de 4f       	sbci	r29, 0xFE	; 254
    117a:	a5 01       	movw	r20, r10
    117c:	94 01       	movw	r18, r8
    117e:	0e 94 5d 18 	call	0x30ba	; 0x30ba <__divmodsi4>
    1182:	60 5d       	subi	r22, 0xD0	; 208
    1184:	68 83       	st	Y, r22
    1186:	62 2f       	mov	r22, r18
    1188:	73 2f       	mov	r23, r19
    118a:	84 2f       	mov	r24, r20
    118c:	95 2f       	mov	r25, r21
    118e:	16 16       	cp	r1, r22
    1190:	17 06       	cpc	r1, r23
    1192:	18 06       	cpc	r1, r24
    1194:	19 06       	cpc	r1, r25
    1196:	54 f3       	brlt	.-44     	; 0x116c <FUNCi32toa+0x48>
    1198:	ff 20       	and	r15, r15
    119a:	44 f4       	brge	.+16     	; 0x11ac <FUNCi32toa+0x88>
    119c:	e0 2f       	mov	r30, r16
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	e3 5c       	subi	r30, 0xC3	; 195
    11a2:	fe 4f       	sbci	r31, 0xFE	; 254
    11a4:	8d e2       	ldi	r24, 0x2D	; 45
    11a6:	80 83       	st	Z, r24
    11a8:	02 e0       	ldi	r16, 0x02	; 2
    11aa:	01 0f       	add	r16, r17
    11ac:	e0 2f       	mov	r30, r16
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	e3 5c       	subi	r30, 0xC3	; 195
    11b2:	fe 4f       	sbci	r31, 0xFE	; 254
    11b4:	10 82       	st	Z, r1
    11b6:	8d e3       	ldi	r24, 0x3D	; 61
    11b8:	91 e0       	ldi	r25, 0x01	; 1
    11ba:	97 df       	rcall	.-210    	; 0x10ea <Reverse>
    11bc:	8d e3       	ldi	r24, 0x3D	; 61
    11be:	91 e0       	ldi	r25, 0x01	; 1
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	ff 90       	pop	r15
    11ca:	ef 90       	pop	r14
    11cc:	df 90       	pop	r13
    11ce:	cf 90       	pop	r12
    11d0:	bf 90       	pop	r11
    11d2:	af 90       	pop	r10
    11d4:	9f 90       	pop	r9
    11d6:	8f 90       	pop	r8
    11d8:	08 95       	ret

000011da <FUNCi16toa>:
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	ec 01       	movw	r28, r24
    11e4:	99 23       	and	r25, r25
    11e6:	24 f4       	brge	.+8      	; 0x11f0 <FUNCi16toa+0x16>
    11e8:	88 27       	eor	r24, r24
    11ea:	99 27       	eor	r25, r25
    11ec:	8c 1b       	sub	r24, r28
    11ee:	9d 0b       	sbc	r25, r29
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	0a e0       	ldi	r16, 0x0A	; 10
    11f4:	10 e0       	ldi	r17, 0x00	; 0
    11f6:	01 c0       	rjmp	.+2      	; 0x11fa <FUNCi16toa+0x20>
    11f8:	23 2f       	mov	r18, r19
    11fa:	31 e0       	ldi	r19, 0x01	; 1
    11fc:	32 0f       	add	r19, r18
    11fe:	e2 2f       	mov	r30, r18
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	e3 5c       	subi	r30, 0xC3	; 195
    1204:	fe 4f       	sbci	r31, 0xFE	; 254
    1206:	b8 01       	movw	r22, r16
    1208:	0e 94 4a 18 	call	0x3094	; 0x3094 <__divmodhi4>
    120c:	80 5d       	subi	r24, 0xD0	; 208
    120e:	80 83       	st	Z, r24
    1210:	86 2f       	mov	r24, r22
    1212:	97 2f       	mov	r25, r23
    1214:	18 16       	cp	r1, r24
    1216:	19 06       	cpc	r1, r25
    1218:	7c f3       	brlt	.-34     	; 0x11f8 <FUNCi16toa+0x1e>
    121a:	dd 23       	and	r29, r29
    121c:	44 f4       	brge	.+16     	; 0x122e <FUNCi16toa+0x54>
    121e:	e3 2f       	mov	r30, r19
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	e3 5c       	subi	r30, 0xC3	; 195
    1224:	fe 4f       	sbci	r31, 0xFE	; 254
    1226:	8d e2       	ldi	r24, 0x2D	; 45
    1228:	80 83       	st	Z, r24
    122a:	32 e0       	ldi	r19, 0x02	; 2
    122c:	32 0f       	add	r19, r18
    122e:	e3 2f       	mov	r30, r19
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	e3 5c       	subi	r30, 0xC3	; 195
    1234:	fe 4f       	sbci	r31, 0xFE	; 254
    1236:	10 82       	st	Z, r1
    1238:	8d e3       	ldi	r24, 0x3D	; 61
    123a:	91 e0       	ldi	r25, 0x01	; 1
    123c:	56 df       	rcall	.-340    	; 0x10ea <Reverse>
    123e:	8d e3       	ldi	r24, 0x3D	; 61
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	08 95       	ret

0000124c <FUNCui16toa>:
    124c:	cf 93       	push	r28
    124e:	ac 01       	movw	r20, r24
    1250:	e0 e0       	ldi	r30, 0x00	; 0
    1252:	c1 e0       	ldi	r28, 0x01	; 1
    1254:	ce 0f       	add	r28, r30
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	e3 5c       	subi	r30, 0xC3	; 195
    125a:	fe 4f       	sbci	r31, 0xFE	; 254
    125c:	9a 01       	movw	r18, r20
    125e:	ad ec       	ldi	r26, 0xCD	; 205
    1260:	bc ec       	ldi	r27, 0xCC	; 204
    1262:	0e 94 82 18 	call	0x3104	; 0x3104 <__umulhisi3>
    1266:	96 95       	lsr	r25
    1268:	87 95       	ror	r24
    126a:	96 95       	lsr	r25
    126c:	87 95       	ror	r24
    126e:	96 95       	lsr	r25
    1270:	87 95       	ror	r24
    1272:	9c 01       	movw	r18, r24
    1274:	22 0f       	add	r18, r18
    1276:	33 1f       	adc	r19, r19
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	82 0f       	add	r24, r18
    1286:	93 1f       	adc	r25, r19
    1288:	9a 01       	movw	r18, r20
    128a:	28 1b       	sub	r18, r24
    128c:	39 0b       	sbc	r19, r25
    128e:	c9 01       	movw	r24, r18
    1290:	80 5d       	subi	r24, 0xD0	; 208
    1292:	80 83       	st	Z, r24
    1294:	9a 01       	movw	r18, r20
    1296:	0e 94 82 18 	call	0x3104	; 0x3104 <__umulhisi3>
    129a:	ac 01       	movw	r20, r24
    129c:	56 95       	lsr	r21
    129e:	47 95       	ror	r20
    12a0:	56 95       	lsr	r21
    12a2:	47 95       	ror	r20
    12a4:	56 95       	lsr	r21
    12a6:	47 95       	ror	r20
    12a8:	ec 2f       	mov	r30, r28
    12aa:	41 15       	cp	r20, r1
    12ac:	51 05       	cpc	r21, r1
    12ae:	89 f6       	brne	.-94     	; 0x1252 <FUNCui16toa+0x6>
    12b0:	ec 2f       	mov	r30, r28
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	e3 5c       	subi	r30, 0xC3	; 195
    12b6:	fe 4f       	sbci	r31, 0xFE	; 254
    12b8:	10 82       	st	Z, r1
    12ba:	8d e3       	ldi	r24, 0x3D	; 61
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	15 df       	rcall	.-470    	; 0x10ea <Reverse>
    12c0:	8d e3       	ldi	r24, 0x3D	; 61
    12c2:	91 e0       	ldi	r25, 0x01	; 1
    12c4:	cf 91       	pop	r28
    12c6:	08 95       	ret

000012c8 <FUNCbcd2bin>:
    12c8:	98 2f       	mov	r25, r24
    12ca:	92 95       	swap	r25
    12cc:	9f 70       	andi	r25, 0x0F	; 15
    12ce:	99 0f       	add	r25, r25
    12d0:	29 2f       	mov	r18, r25
    12d2:	22 0f       	add	r18, r18
    12d4:	22 0f       	add	r18, r18
    12d6:	92 0f       	add	r25, r18
    12d8:	8f 70       	andi	r24, 0x0F	; 15
    12da:	89 0f       	add	r24, r25
    12dc:	08 95       	ret

000012de <FUNCbin2bcd>:
    12de:	ac 01       	movw	r20, r24
    12e0:	9c 01       	movw	r18, r24
    12e2:	ad ec       	ldi	r26, 0xCD	; 205
    12e4:	bc ec       	ldi	r27, 0xCC	; 204
    12e6:	0e 94 82 18 	call	0x3104	; 0x3104 <__umulhisi3>
    12ea:	96 95       	lsr	r25
    12ec:	87 95       	ror	r24
    12ee:	96 95       	lsr	r25
    12f0:	87 95       	ror	r24
    12f2:	96 95       	lsr	r25
    12f4:	87 95       	ror	r24
    12f6:	bc 01       	movw	r22, r24
    12f8:	66 0f       	add	r22, r22
    12fa:	77 1f       	adc	r23, r23
    12fc:	9c 01       	movw	r18, r24
    12fe:	22 0f       	add	r18, r18
    1300:	33 1f       	adc	r19, r19
    1302:	22 0f       	add	r18, r18
    1304:	33 1f       	adc	r19, r19
    1306:	22 0f       	add	r18, r18
    1308:	33 1f       	adc	r19, r19
    130a:	26 0f       	add	r18, r22
    130c:	37 1f       	adc	r19, r23
    130e:	42 1b       	sub	r20, r18
    1310:	53 0b       	sbc	r21, r19
    1312:	34 2f       	mov	r19, r20
    1314:	20 e1       	ldi	r18, 0x10	; 16
    1316:	82 9f       	mul	r24, r18
    1318:	30 0d       	add	r19, r0
    131a:	11 24       	eor	r1, r1
    131c:	83 2f       	mov	r24, r19
    131e:	08 95       	ret

00001320 <FUNCgcd1>:
    1320:	cf 92       	push	r12
    1322:	df 92       	push	r13
    1324:	ef 92       	push	r14
    1326:	ff 92       	push	r15
    1328:	cf 93       	push	r28
    132a:	df 93       	push	r29
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	28 97       	sbiw	r28, 0x08	; 8
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	f8 94       	cli
    1336:	de bf       	out	0x3e, r29	; 62
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	cd bf       	out	0x3d, r28	; 61
    133c:	6b 01       	movw	r12, r22
    133e:	7c 01       	movw	r14, r24
    1340:	69 83       	std	Y+1, r22	; 0x01
    1342:	7a 83       	std	Y+2, r23	; 0x02
    1344:	8b 83       	std	Y+3, r24	; 0x03
    1346:	9c 83       	std	Y+4, r25	; 0x04
    1348:	2d 83       	std	Y+5, r18	; 0x05
    134a:	3e 83       	std	Y+6, r19	; 0x06
    134c:	4f 83       	std	Y+7, r20	; 0x07
    134e:	58 87       	std	Y+8, r21	; 0x08
    1350:	c2 16       	cp	r12, r18
    1352:	d3 06       	cpc	r13, r19
    1354:	e4 06       	cpc	r14, r20
    1356:	f5 06       	cpc	r15, r21
    1358:	34 f4       	brge	.+12     	; 0x1366 <FUNCgcd1+0x46>
    135a:	be 01       	movw	r22, r28
    135c:	6b 5f       	subi	r22, 0xFB	; 251
    135e:	7f 4f       	sbci	r23, 0xFF	; 255
    1360:	ce 01       	movw	r24, r28
    1362:	01 96       	adiw	r24, 0x01	; 1
    1364:	85 dc       	rcall	.-1782   	; 0xc70 <FUNCswap>
    1366:	8d 81       	ldd	r24, Y+5	; 0x05
    1368:	9e 81       	ldd	r25, Y+6	; 0x06
    136a:	af 81       	ldd	r26, Y+7	; 0x07
    136c:	b8 85       	ldd	r27, Y+8	; 0x08
    136e:	89 2b       	or	r24, r25
    1370:	8a 2b       	or	r24, r26
    1372:	8b 2b       	or	r24, r27
    1374:	71 f4       	brne	.+28     	; 0x1392 <FUNCgcd1+0x72>
    1376:	69 81       	ldd	r22, Y+1	; 0x01
    1378:	7a 81       	ldd	r23, Y+2	; 0x02
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	9c 81       	ldd	r25, Y+4	; 0x04
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	a9 01       	movw	r20, r18
    1384:	0e 94 5d 18 	call	0x30ba	; 0x30ba <__divmodsi4>
    1388:	61 15       	cp	r22, r1
    138a:	71 05       	cpc	r23, r1
    138c:	81 05       	cpc	r24, r1
    138e:	91 05       	cpc	r25, r1
    1390:	29 f4       	brne	.+10     	; 0x139c <FUNCgcd1+0x7c>
    1392:	6d 81       	ldd	r22, Y+5	; 0x05
    1394:	7e 81       	ldd	r23, Y+6	; 0x06
    1396:	8f 81       	ldd	r24, Y+7	; 0x07
    1398:	98 85       	ldd	r25, Y+8	; 0x08
    139a:	05 c0       	rjmp	.+10     	; 0x13a6 <FUNCgcd1+0x86>
    139c:	6d 83       	std	Y+5, r22	; 0x05
    139e:	7e 83       	std	Y+6, r23	; 0x06
    13a0:	8f 83       	std	Y+7, r24	; 0x07
    13a2:	98 87       	std	Y+8, r25	; 0x08
    13a4:	f6 cf       	rjmp	.-20     	; 0x1392 <FUNCgcd1+0x72>
    13a6:	28 96       	adiw	r28, 0x08	; 8
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	ff 90       	pop	r15
    13b8:	ef 90       	pop	r14
    13ba:	df 90       	pop	r13
    13bc:	cf 90       	pop	r12
    13be:	08 95       	ret

000013c0 <FUNCpincheck>:
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <FUNCpincheck+0x8>
    13c4:	95 95       	asr	r25
    13c6:	87 95       	ror	r24
    13c8:	6a 95       	dec	r22
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <FUNCpincheck+0x4>
    13cc:	81 70       	andi	r24, 0x01	; 1
    13ce:	08 95       	ret

000013d0 <FUNCprint_binary>:
    13d0:	ed e3       	ldi	r30, 0x3D	; 61
    13d2:	f1 e0       	ldi	r31, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	20 e8       	ldi	r18, 0x80	; 128
    13d8:	50 e3       	ldi	r21, 0x30	; 48
    13da:	41 e3       	ldi	r20, 0x31	; 49
    13dc:	38 2f       	mov	r19, r24
    13de:	32 23       	and	r19, r18
    13e0:	11 f0       	breq	.+4      	; 0x13e6 <FUNCprint_binary+0x16>
    13e2:	40 83       	st	Z, r20
    13e4:	01 c0       	rjmp	.+2      	; 0x13e8 <FUNCprint_binary+0x18>
    13e6:	50 83       	st	Z, r21
    13e8:	26 95       	lsr	r18
    13ea:	9f 5f       	subi	r25, 0xFF	; 255
    13ec:	31 96       	adiw	r30, 0x01	; 1
    13ee:	98 30       	cpi	r25, 0x08	; 8
    13f0:	a9 f7       	brne	.-22     	; 0x13dc <FUNCprint_binary+0xc>
    13f2:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <FUNCstr+0x8>
    13f6:	8d e3       	ldi	r24, 0x3D	; 61
    13f8:	91 e0       	ldi	r25, 0x01	; 1
    13fa:	08 95       	ret

000013fc <FUNCmayia>:
    13fc:	a4 2f       	mov	r26, r20
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	10 97       	sbiw	r26, 0x00	; 0
    1402:	61 f0       	breq	.+24     	; 0x141c <FUNCmayia+0x20>
    1404:	21 e0       	ldi	r18, 0x01	; 1
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	e1 e0       	ldi	r30, 0x01	; 1
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	ee 0f       	add	r30, r30
    140e:	ff 1f       	adc	r31, r31
    1410:	2f 5f       	subi	r18, 0xFF	; 255
    1412:	3f 4f       	sbci	r19, 0xFF	; 255
    1414:	a2 17       	cp	r26, r18
    1416:	b3 07       	cpc	r27, r19
    1418:	c8 f7       	brcc	.-14     	; 0x140c <FUNCmayia+0x10>
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <FUNCmayia+0x24>
    141c:	e1 e0       	ldi	r30, 0x01	; 1
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	31 97       	sbiw	r30, 0x01	; 1
    1422:	6e 23       	and	r22, r30
    1424:	7f 23       	and	r23, r31
    1426:	8e 23       	and	r24, r30
    1428:	9f 23       	and	r25, r31
    142a:	86 27       	eor	r24, r22
    142c:	97 27       	eor	r25, r23
    142e:	68 23       	and	r22, r24
    1430:	79 23       	and	r23, r25
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <FUNCmayia+0x3c>
    1434:	66 0f       	add	r22, r22
    1436:	77 1f       	adc	r23, r23
    1438:	4a 95       	dec	r20
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <FUNCmayia+0x38>
    143c:	86 2b       	or	r24, r22
    143e:	97 2b       	or	r25, r23
    1440:	08 95       	ret

00001442 <FUNCenable>:
    1442:	fc 01       	movw	r30, r24
    1444:	9f b7       	in	r25, 0x3f	; 63
    1446:	8f b7       	in	r24, 0x3f	; 63
    1448:	8f 77       	andi	r24, 0x7F	; 127
    144a:	8f bf       	out	0x3f, r24	; 63
    144c:	9f bf       	out	0x3f, r25	; 63
    144e:	80 e3       	ldi	r24, 0x30	; 48
    1450:	98 e0       	ldi	r25, 0x08	; 8
    1452:	91 83       	std	Z+1, r25	; 0x01
    1454:	80 83       	st	Z, r24
    1456:	8b e4       	ldi	r24, 0x4B	; 75
    1458:	98 e0       	ldi	r25, 0x08	; 8
    145a:	93 83       	std	Z+3, r25	; 0x03
    145c:	82 83       	std	Z+2, r24	; 0x02
    145e:	85 e7       	ldi	r24, 0x75	; 117
    1460:	98 e0       	ldi	r25, 0x08	; 8
    1462:	95 83       	std	Z+5, r25	; 0x05
    1464:	84 83       	std	Z+4, r24	; 0x04
    1466:	8e ef       	ldi	r24, 0xFE	; 254
    1468:	99 e0       	ldi	r25, 0x09	; 9
    146a:	97 83       	std	Z+7, r25	; 0x07
    146c:	86 83       	std	Z+6, r24	; 0x06
    146e:	8d e1       	ldi	r24, 0x1D	; 29
    1470:	96 e0       	ldi	r25, 0x06	; 6
    1472:	91 87       	std	Z+9, r25	; 0x09
    1474:	80 87       	std	Z+8, r24	; 0x08
    1476:	8b e2       	ldi	r24, 0x2B	; 43
    1478:	96 e0       	ldi	r25, 0x06	; 6
    147a:	93 87       	std	Z+11, r25	; 0x0b
    147c:	82 87       	std	Z+10, r24	; 0x0a
    147e:	8d e2       	ldi	r24, 0x2D	; 45
    1480:	96 e0       	ldi	r25, 0x06	; 6
    1482:	95 87       	std	Z+13, r25	; 0x0d
    1484:	84 87       	std	Z+12, r24	; 0x0c
    1486:	80 e3       	ldi	r24, 0x30	; 48
    1488:	96 e0       	ldi	r25, 0x06	; 6
    148a:	97 87       	std	Z+15, r25	; 0x0f
    148c:	86 87       	std	Z+14, r24	; 0x0e
    148e:	83 e3       	ldi	r24, 0x33	; 51
    1490:	96 e0       	ldi	r25, 0x06	; 6
    1492:	91 8b       	std	Z+17, r25	; 0x11
    1494:	80 8b       	std	Z+16, r24	; 0x10
    1496:	86 e3       	ldi	r24, 0x36	; 54
    1498:	96 e0       	ldi	r25, 0x06	; 6
    149a:	93 8b       	std	Z+19, r25	; 0x13
    149c:	82 8b       	std	Z+18, r24	; 0x12
    149e:	87 e2       	ldi	r24, 0x27	; 39
    14a0:	96 e0       	ldi	r25, 0x06	; 6
    14a2:	95 8b       	std	Z+21, r25	; 0x15
    14a4:	84 8b       	std	Z+20, r24	; 0x14
    14a6:	89 e2       	ldi	r24, 0x29	; 41
    14a8:	96 e0       	ldi	r25, 0x06	; 6
    14aa:	97 8b       	std	Z+23, r25	; 0x17
    14ac:	86 8b       	std	Z+22, r24	; 0x16
    14ae:	88 e3       	ldi	r24, 0x38	; 56
    14b0:	96 e0       	ldi	r25, 0x06	; 6
    14b2:	91 8f       	std	Z+25, r25	; 0x19
    14b4:	80 8f       	std	Z+24, r24	; 0x18
    14b6:	89 e5       	ldi	r24, 0x59	; 89
    14b8:	96 e0       	ldi	r25, 0x06	; 6
    14ba:	93 8f       	std	Z+27, r25	; 0x1b
    14bc:	82 8f       	std	Z+26, r24	; 0x1a
    14be:	87 e6       	ldi	r24, 0x67	; 103
    14c0:	96 e0       	ldi	r25, 0x06	; 6
    14c2:	95 8f       	std	Z+29, r25	; 0x1d
    14c4:	84 8f       	std	Z+28, r24	; 0x1c
    14c6:	89 e8       	ldi	r24, 0x89	; 137
    14c8:	96 e0       	ldi	r25, 0x06	; 6
    14ca:	97 8f       	std	Z+31, r25	; 0x1f
    14cc:	86 8f       	std	Z+30, r24	; 0x1e
    14ce:	8d ee       	ldi	r24, 0xED	; 237
    14d0:	98 e0       	ldi	r25, 0x08	; 8
    14d2:	91 a3       	std	Z+33, r25	; 0x21
    14d4:	80 a3       	std	Z+32, r24	; 0x20
    14d6:	86 e2       	ldi	r24, 0x26	; 38
    14d8:	99 e0       	ldi	r25, 0x09	; 9
    14da:	93 a3       	std	Z+35, r25	; 0x23
    14dc:	82 a3       	std	Z+34, r24	; 0x22
    14de:	82 e9       	ldi	r24, 0x92	; 146
    14e0:	98 e0       	ldi	r25, 0x08	; 8
    14e2:	95 a3       	std	Z+37, r25	; 0x25
    14e4:	84 a3       	std	Z+36, r24	; 0x24
    14e6:	8a e5       	ldi	r24, 0x5A	; 90
    14e8:	98 e0       	ldi	r25, 0x08	; 8
    14ea:	97 a3       	std	Z+39, r25	; 0x27
    14ec:	86 a3       	std	Z+38, r24	; 0x26
    14ee:	8f e2       	ldi	r24, 0x2F	; 47
    14f0:	97 e0       	ldi	r25, 0x07	; 7
    14f2:	91 a7       	std	Z+41, r25	; 0x29
    14f4:	80 a7       	std	Z+40, r24	; 0x28
    14f6:	84 e3       	ldi	r24, 0x34	; 52
    14f8:	97 e0       	ldi	r25, 0x07	; 7
    14fa:	93 a7       	std	Z+43, r25	; 0x2b
    14fc:	82 a7       	std	Z+42, r24	; 0x2a
    14fe:	83 e4       	ldi	r24, 0x43	; 67
    1500:	97 e0       	ldi	r25, 0x07	; 7
    1502:	95 a7       	std	Z+45, r25	; 0x2d
    1504:	84 a7       	std	Z+44, r24	; 0x2c
    1506:	87 e6       	ldi	r24, 0x67	; 103
    1508:	97 e0       	ldi	r25, 0x07	; 7
    150a:	97 a7       	std	Z+47, r25	; 0x2f
    150c:	86 a7       	std	Z+46, r24	; 0x2e
    150e:	89 e6       	ldi	r24, 0x69	; 105
    1510:	97 e0       	ldi	r25, 0x07	; 7
    1512:	91 ab       	std	Z+49, r25	; 0x31
    1514:	80 ab       	std	Z+48, r24	; 0x30
    1516:	83 e7       	ldi	r24, 0x73	; 115
    1518:	97 e0       	ldi	r25, 0x07	; 7
    151a:	93 ab       	std	Z+51, r25	; 0x33
    151c:	82 ab       	std	Z+50, r24	; 0x32
    151e:	80 e8       	ldi	r24, 0x80	; 128
    1520:	97 e0       	ldi	r25, 0x07	; 7
    1522:	95 ab       	std	Z+53, r25	; 0x35
    1524:	84 ab       	std	Z+52, r24	; 0x34
    1526:	8c e8       	ldi	r24, 0x8C	; 140
    1528:	97 e0       	ldi	r25, 0x07	; 7
    152a:	97 ab       	std	Z+55, r25	; 0x37
    152c:	86 ab       	std	Z+54, r24	; 0x36
    152e:	84 ea       	ldi	r24, 0xA4	; 164
    1530:	97 e0       	ldi	r25, 0x07	; 7
    1532:	91 af       	std	Z+57, r25	; 0x39
    1534:	80 af       	std	Z+56, r24	; 0x38
    1536:	87 eb       	ldi	r24, 0xB7	; 183
    1538:	97 e0       	ldi	r25, 0x07	; 7
    153a:	93 af       	std	Z+59, r25	; 0x3b
    153c:	82 af       	std	Z+58, r24	; 0x3a
    153e:	82 ec       	ldi	r24, 0xC2	; 194
    1540:	97 e0       	ldi	r25, 0x07	; 7
    1542:	95 af       	std	Z+61, r25	; 0x3d
    1544:	84 af       	std	Z+60, r24	; 0x3c
    1546:	8f ee       	ldi	r24, 0xEF	; 239
    1548:	97 e0       	ldi	r25, 0x07	; 7
    154a:	97 af       	std	Z+63, r25	; 0x3f
    154c:	86 af       	std	Z+62, r24	; 0x3e
    154e:	df 01       	movw	r26, r30
    1550:	a0 5c       	subi	r26, 0xC0	; 192
    1552:	bf 4f       	sbci	r27, 0xFF	; 255
    1554:	84 e6       	ldi	r24, 0x64	; 100
    1556:	99 e0       	ldi	r25, 0x09	; 9
    1558:	11 96       	adiw	r26, 0x01	; 1
    155a:	9c 93       	st	X, r25
    155c:	8e 93       	st	-X, r24
    155e:	12 96       	adiw	r26, 0x02	; 2
    1560:	8f e6       	ldi	r24, 0x6F	; 111
    1562:	99 e0       	ldi	r25, 0x09	; 9
    1564:	11 96       	adiw	r26, 0x01	; 1
    1566:	9c 93       	st	X, r25
    1568:	8e 93       	st	-X, r24
    156a:	12 96       	adiw	r26, 0x02	; 2
    156c:	80 e9       	ldi	r24, 0x90	; 144
    156e:	99 e0       	ldi	r25, 0x09	; 9
    1570:	11 96       	adiw	r26, 0x01	; 1
    1572:	9c 93       	st	X, r25
    1574:	8e 93       	st	-X, r24
    1576:	12 96       	adiw	r26, 0x02	; 2
    1578:	80 ee       	ldi	r24, 0xE0	; 224
    157a:	99 e0       	ldi	r25, 0x09	; 9
    157c:	11 96       	adiw	r26, 0x01	; 1
    157e:	9c 93       	st	X, r25
    1580:	8e 93       	st	-X, r24
    1582:	12 96       	adiw	r26, 0x02	; 2
    1584:	88 ee       	ldi	r24, 0xE8	; 232
    1586:	99 e0       	ldi	r25, 0x09	; 9
    1588:	11 96       	adiw	r26, 0x01	; 1
    158a:	9c 93       	st	X, r25
    158c:	8e 93       	st	-X, r24
    158e:	12 96       	adiw	r26, 0x02	; 2
    1590:	88 e2       	ldi	r24, 0x28	; 40
    1592:	9b e0       	ldi	r25, 0x0B	; 11
    1594:	8d 93       	st	X+, r24
    1596:	9c 93       	st	X, r25
    1598:	cf 01       	movw	r24, r30
    159a:	08 95       	ret

0000159c <FUNCintinvstr>:
/***intinvstr***/
uint8_t FUNCintinvstr(int32_t n, char* res, uint8_t n_digit)
{
    159c:	8f 92       	push	r8
    159e:	9f 92       	push	r9
    15a0:	af 92       	push	r10
    15a2:	bf 92       	push	r11
    15a4:	ef 92       	push	r14
    15a6:	ff 92       	push	r15
    15a8:	0f 93       	push	r16
    15aa:	1f 93       	push	r17
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	8a 01       	movw	r16, r20
    15b2:	d2 2f       	mov	r29, r18
	uint8_t k=0;
	for(res[k++] = (n % 10) + '0' ; (n/=10) > ZERO ; res[k++] = (n % 10) + '0');
    15b4:	2a e0       	ldi	r18, 0x0A	; 10
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	40 e0       	ldi	r20, 0x00	; 0
    15ba:	50 e0       	ldi	r21, 0x00	; 0
    15bc:	0e 94 5d 18 	call	0x30ba	; 0x30ba <__divmodsi4>
    15c0:	60 5d       	subi	r22, 0xD0	; 208
    15c2:	f8 01       	movw	r30, r16
    15c4:	60 83       	st	Z, r22
    15c6:	62 2f       	mov	r22, r18
    15c8:	73 2f       	mov	r23, r19
    15ca:	84 2f       	mov	r24, r20
    15cc:	95 2f       	mov	r25, r21
    15ce:	16 16       	cp	r1, r22
    15d0:	17 06       	cpc	r1, r23
    15d2:	18 06       	cpc	r1, r24
    15d4:	19 06       	cpc	r1, r25
    15d6:	fc f4       	brge	.+62     	; 0x1616 <FUNCintinvstr+0x7a>
    15d8:	21 e0       	ldi	r18, 0x01	; 1
    15da:	0f 2e       	mov	r0, r31
    15dc:	fa e0       	ldi	r31, 0x0A	; 10
    15de:	8f 2e       	mov	r8, r31
    15e0:	91 2c       	mov	r9, r1
    15e2:	a1 2c       	mov	r10, r1
    15e4:	b1 2c       	mov	r11, r1
    15e6:	f0 2d       	mov	r31, r0
    15e8:	c1 e0       	ldi	r28, 0x01	; 1
    15ea:	c2 0f       	add	r28, r18
    15ec:	78 01       	movw	r14, r16
    15ee:	e2 0e       	add	r14, r18
    15f0:	f1 1c       	adc	r15, r1
    15f2:	a5 01       	movw	r20, r10
    15f4:	94 01       	movw	r18, r8
    15f6:	0e 94 5d 18 	call	0x30ba	; 0x30ba <__divmodsi4>
    15fa:	60 5d       	subi	r22, 0xD0	; 208
    15fc:	f7 01       	movw	r30, r14
    15fe:	60 83       	st	Z, r22
    1600:	62 2f       	mov	r22, r18
    1602:	73 2f       	mov	r23, r19
    1604:	84 2f       	mov	r24, r20
    1606:	95 2f       	mov	r25, r21
    1608:	2c 2f       	mov	r18, r28
    160a:	16 16       	cp	r1, r22
    160c:	17 06       	cpc	r1, r23
    160e:	18 06       	cpc	r1, r24
    1610:	19 06       	cpc	r1, r25
    1612:	54 f3       	brlt	.-44     	; 0x15e8 <FUNCintinvstr+0x4c>
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <FUNCintinvstr+0x7c>
    1616:	c1 e0       	ldi	r28, 0x01	; 1
	for( ; k < n_digit ; res[k++] = '0');
    1618:	cd 17       	cp	r28, r29
    161a:	48 f4       	brcc	.+18     	; 0x162e <FUNCintinvstr+0x92>
    161c:	80 e3       	ldi	r24, 0x30	; 48
    161e:	f8 01       	movw	r30, r16
    1620:	ec 0f       	add	r30, r28
    1622:	f1 1d       	adc	r31, r1
    1624:	80 83       	st	Z, r24
    1626:	cf 5f       	subi	r28, 0xFF	; 255
    1628:	dc 13       	cpse	r29, r28
    162a:	f9 cf       	rjmp	.-14     	; 0x161e <FUNCintinvstr+0x82>
    162c:	01 c0       	rjmp	.+2      	; 0x1630 <FUNCintinvstr+0x94>
    162e:	dc 2f       	mov	r29, r28
	res[k]='\0';
    1630:	f8 01       	movw	r30, r16
    1632:	ed 0f       	add	r30, r29
    1634:	f1 1d       	adc	r31, r1
    1636:	10 82       	st	Z, r1
	return k;
}
    1638:	8d 2f       	mov	r24, r29
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	1f 91       	pop	r17
    1640:	0f 91       	pop	r16
    1642:	ff 90       	pop	r15
    1644:	ef 90       	pop	r14
    1646:	bf 90       	pop	r11
    1648:	af 90       	pop	r10
    164a:	9f 90       	pop	r9
    164c:	8f 90       	pop	r8
    164e:	08 95       	ret

00001650 <FUNCftoa>:
/***ftoa***/
char* FUNCftoa(float n, char* res, uint8_t afterpoint)
{
    1650:	4f 92       	push	r4
    1652:	5f 92       	push	r5
    1654:	6f 92       	push	r6
    1656:	7f 92       	push	r7
    1658:	8f 92       	push	r8
    165a:	9f 92       	push	r9
    165c:	af 92       	push	r10
    165e:	bf 92       	push	r11
    1660:	cf 92       	push	r12
    1662:	df 92       	push	r13
    1664:	ef 92       	push	r14
    1666:	ff 92       	push	r15
    1668:	1f 93       	push	r17
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	6b 01       	movw	r12, r22
    1670:	7c 01       	movw	r14, r24
    1672:	ea 01       	movw	r28, r20
    1674:	12 2f       	mov	r17, r18
	uint8_t k=ZERO;
	int32_t ipart;
	float fpart;
	int8_t sign;
	if (n < ZERO){
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	a9 01       	movw	r20, r18
    167c:	0e 94 20 15 	call	0x2a40	; 0x2a40 <__cmpsf2>
    1680:	88 23       	and	r24, r24
    1682:	0c f0       	brlt	.+2      	; 0x1686 <FUNCftoa+0x36>
    1684:	4d c0       	rjmp	.+154    	; 0x1720 <FUNCftoa+0xd0>
		n = -n;
    1686:	f7 fa       	bst	r15, 7
    1688:	f0 94       	com	r15
    168a:	f7 f8       	bld	r15, 7
    168c:	f0 94       	com	r15
		sign=-ONE;
	}else
		sign=ONE;
	ipart = (int32_t) n;
    168e:	c7 01       	movw	r24, r14
    1690:	b6 01       	movw	r22, r12
    1692:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__fixsfsi>
    1696:	4b 01       	movw	r8, r22
    1698:	5c 01       	movw	r10, r24
	fpart = n - (float)ipart;
    169a:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <__floatsisf>
    169e:	9b 01       	movw	r18, r22
    16a0:	ac 01       	movw	r20, r24
    16a2:	c7 01       	movw	r24, r14
    16a4:	b6 01       	movw	r22, r12
    16a6:	0e 94 bb 14 	call	0x2976	; 0x2976 <__subsf3>
    16aa:	2b 01       	movw	r4, r22
    16ac:	3c 01       	movw	r6, r24
	k=FUNCintinvstr( ipart, res, ONE );
    16ae:	21 e0       	ldi	r18, 0x01	; 1
    16b0:	ae 01       	movw	r20, r28
    16b2:	c5 01       	movw	r24, r10
    16b4:	b4 01       	movw	r22, r8
    16b6:	72 df       	rcall	.-284    	; 0x159c <FUNCintinvstr>
	if (sign < ZERO)
		res[k++] = '-';
    16b8:	ff 24       	eor	r15, r15
    16ba:	f3 94       	inc	r15
    16bc:	f8 0e       	add	r15, r24
    16be:	fe 01       	movw	r30, r28
    16c0:	e8 0f       	add	r30, r24
    16c2:	f1 1d       	adc	r31, r1
    16c4:	8d e2       	ldi	r24, 0x2D	; 45
    16c6:	80 83       	st	Z, r24
	else
		res[k++] = ' ';
	res[k]='\0';
    16c8:	6e 01       	movw	r12, r28
    16ca:	cf 0c       	add	r12, r15
    16cc:	d1 1c       	adc	r13, r1
    16ce:	f6 01       	movw	r30, r12
    16d0:	10 82       	st	Z, r1
	Reverse(res);
    16d2:	ce 01       	movw	r24, r28
    16d4:	0a dd       	rcall	.-1516   	; 0x10ea <Reverse>
	if (afterpoint > ZERO) {
    16d6:	11 23       	and	r17, r17
    16d8:	09 f4       	brne	.+2      	; 0x16dc <FUNCftoa+0x8c>
    16da:	40 c0       	rjmp	.+128    	; 0x175c <FUNCftoa+0x10c>
		res[k++] = '.';
    16dc:	8e e2       	ldi	r24, 0x2E	; 46
    16de:	f6 01       	movw	r30, r12
    16e0:	80 83       	st	Z, r24
		FUNCintinvstr( fpart * pow(10, afterpoint), res+k, afterpoint );
    16e2:	f3 94       	inc	r15
    16e4:	ce 01       	movw	r24, r28
    16e6:	8f 0d       	add	r24, r15
    16e8:	91 1d       	adc	r25, r1
    16ea:	7c 01       	movw	r14, r24
    16ec:	61 2f       	mov	r22, r17
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <__floatunsisf>
    16f8:	9b 01       	movw	r18, r22
    16fa:	ac 01       	movw	r20, r24
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	80 e2       	ldi	r24, 0x20	; 32
    1702:	91 e4       	ldi	r25, 0x41	; 65
    1704:	0e 94 d6 16 	call	0x2dac	; 0x2dac <pow>
    1708:	a3 01       	movw	r20, r6
    170a:	92 01       	movw	r18, r4
    170c:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__mulsf3>
    1710:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__fixsfsi>
    1714:	21 2f       	mov	r18, r17
    1716:	a7 01       	movw	r20, r14
		Reverse(res+k);
    1718:	41 df       	rcall	.-382    	; 0x159c <FUNCintinvstr>
    171a:	c7 01       	movw	r24, r14
    171c:	e6 dc       	rcall	.-1588   	; 0x10ea <Reverse>
	}	
	return res;
    171e:	1e c0       	rjmp	.+60     	; 0x175c <FUNCftoa+0x10c>
	if (n < ZERO){
		n = -n;
		sign=-ONE;
	}else
		sign=ONE;
	ipart = (int32_t) n;
    1720:	c7 01       	movw	r24, r14
    1722:	b6 01       	movw	r22, r12
    1724:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__fixsfsi>
    1728:	4b 01       	movw	r8, r22
    172a:	5c 01       	movw	r10, r24
	fpart = n - (float)ipart;
    172c:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <__floatsisf>
    1730:	9b 01       	movw	r18, r22
    1732:	ac 01       	movw	r20, r24
    1734:	c7 01       	movw	r24, r14
    1736:	b6 01       	movw	r22, r12
    1738:	0e 94 bb 14 	call	0x2976	; 0x2976 <__subsf3>
    173c:	2b 01       	movw	r4, r22
    173e:	3c 01       	movw	r6, r24
	k=FUNCintinvstr( ipart, res, ONE );
    1740:	21 e0       	ldi	r18, 0x01	; 1
    1742:	ae 01       	movw	r20, r28
    1744:	c5 01       	movw	r24, r10
    1746:	b4 01       	movw	r22, r8
    1748:	29 df       	rcall	.-430    	; 0x159c <FUNCintinvstr>
	if (sign < ZERO)
		res[k++] = '-';
	else
		res[k++] = ' ';
    174a:	ff 24       	eor	r15, r15
    174c:	f3 94       	inc	r15
    174e:	f8 0e       	add	r15, r24
    1750:	fe 01       	movw	r30, r28
    1752:	e8 0f       	add	r30, r24
    1754:	f1 1d       	adc	r31, r1
    1756:	80 e2       	ldi	r24, 0x20	; 32
    1758:	80 83       	st	Z, r24
    175a:	b6 cf       	rjmp	.-148    	; 0x16c8 <FUNCftoa+0x78>
		res[k++] = '.';
		FUNCintinvstr( fpart * pow(10, afterpoint), res+k, afterpoint );
		Reverse(res+k);
	}	
	return res;
}
    175c:	ce 01       	movw	r24, r28
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	1f 91       	pop	r17
    1764:	ff 90       	pop	r15
    1766:	ef 90       	pop	r14
    1768:	df 90       	pop	r13
    176a:	cf 90       	pop	r12
    176c:	bf 90       	pop	r11
    176e:	af 90       	pop	r10
    1770:	9f 90       	pop	r9
    1772:	8f 90       	pop	r8
    1774:	7f 90       	pop	r7
    1776:	6f 90       	pop	r6
    1778:	5f 90       	pop	r5
    177a:	4f 90       	pop	r4
    177c:	08 95       	ret

0000177e <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    177e:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1782:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1786:	90 81       	ld	r25, Z
    1788:	9d 7f       	andi	r25, 0xFD	; 253
    178a:	90 83       	st	Z, r25
    178c:	67 2b       	or	r22, r23
    178e:	41 f0       	breq	.+16     	; 0x17a0 <LCD0_write+0x22>
    1790:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1794:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1798:	90 81       	ld	r25, Z
    179a:	91 60       	ori	r25, 0x01	; 1
    179c:	90 83       	st	Z, r25
    179e:	07 c0       	rjmp	.+14     	; 0x17ae <LCD0_write+0x30>
    17a0:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    17a4:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    17a8:	90 81       	ld	r25, Z
    17aa:	9e 7f       	andi	r25, 0xFE	; 254
    17ac:	90 83       	st	Z, r25
    17ae:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <lcd0_DDR>
    17b2:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <lcd0_DDR+0x1>
    17b6:	90 81       	ld	r25, Z
    17b8:	90 6f       	ori	r25, 0xF0	; 240
    17ba:	90 83       	st	Z, r25
    17bc:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    17c0:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    17c4:	90 81       	ld	r25, Z
    17c6:	94 60       	ori	r25, 0x04	; 4
    17c8:	90 83       	st	Z, r25
    17ca:	88 23       	and	r24, r24
    17cc:	44 f4       	brge	.+16     	; 0x17de <LCD0_write+0x60>
    17ce:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    17d2:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    17d6:	90 81       	ld	r25, Z
    17d8:	90 68       	ori	r25, 0x80	; 128
    17da:	90 83       	st	Z, r25
    17dc:	07 c0       	rjmp	.+14     	; 0x17ec <LCD0_write+0x6e>
    17de:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    17e2:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    17e6:	90 81       	ld	r25, Z
    17e8:	9f 77       	andi	r25, 0x7F	; 127
    17ea:	90 83       	st	Z, r25
    17ec:	86 ff       	sbrs	r24, 6
    17ee:	08 c0       	rjmp	.+16     	; 0x1800 <LCD0_write+0x82>
    17f0:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    17f4:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    17f8:	90 81       	ld	r25, Z
    17fa:	90 64       	ori	r25, 0x40	; 64
    17fc:	90 83       	st	Z, r25
    17fe:	07 c0       	rjmp	.+14     	; 0x180e <LCD0_write+0x90>
    1800:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1804:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1808:	90 81       	ld	r25, Z
    180a:	9f 7b       	andi	r25, 0xBF	; 191
    180c:	90 83       	st	Z, r25
    180e:	85 ff       	sbrs	r24, 5
    1810:	08 c0       	rjmp	.+16     	; 0x1822 <LCD0_write+0xa4>
    1812:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1816:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    181a:	90 81       	ld	r25, Z
    181c:	90 62       	ori	r25, 0x20	; 32
    181e:	90 83       	st	Z, r25
    1820:	07 c0       	rjmp	.+14     	; 0x1830 <LCD0_write+0xb2>
    1822:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1826:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    182a:	90 81       	ld	r25, Z
    182c:	9f 7d       	andi	r25, 0xDF	; 223
    182e:	90 83       	st	Z, r25
    1830:	84 ff       	sbrs	r24, 4
    1832:	08 c0       	rjmp	.+16     	; 0x1844 <LCD0_write+0xc6>
    1834:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1838:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    183c:	90 81       	ld	r25, Z
    183e:	90 61       	ori	r25, 0x10	; 16
    1840:	90 83       	st	Z, r25
    1842:	07 c0       	rjmp	.+14     	; 0x1852 <LCD0_write+0xd4>
    1844:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1848:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    184c:	90 81       	ld	r25, Z
    184e:	9f 7e       	andi	r25, 0xEF	; 239
    1850:	90 83       	st	Z, r25
    1852:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1856:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    185a:	90 81       	ld	r25, Z
    185c:	9b 7f       	andi	r25, 0xFB	; 251
    185e:	90 83       	st	Z, r25
    1860:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1864:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1868:	90 81       	ld	r25, Z
    186a:	94 60       	ori	r25, 0x04	; 4
    186c:	90 83       	st	Z, r25
    186e:	83 ff       	sbrs	r24, 3
    1870:	08 c0       	rjmp	.+16     	; 0x1882 <LCD0_write+0x104>
    1872:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1876:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    187a:	90 81       	ld	r25, Z
    187c:	90 68       	ori	r25, 0x80	; 128
    187e:	90 83       	st	Z, r25
    1880:	07 c0       	rjmp	.+14     	; 0x1890 <LCD0_write+0x112>
    1882:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1886:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    188a:	90 81       	ld	r25, Z
    188c:	9f 77       	andi	r25, 0x7F	; 127
    188e:	90 83       	st	Z, r25
    1890:	82 ff       	sbrs	r24, 2
    1892:	08 c0       	rjmp	.+16     	; 0x18a4 <LCD0_write+0x126>
    1894:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1898:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    189c:	90 81       	ld	r25, Z
    189e:	90 64       	ori	r25, 0x40	; 64
    18a0:	90 83       	st	Z, r25
    18a2:	07 c0       	rjmp	.+14     	; 0x18b2 <LCD0_write+0x134>
    18a4:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    18a8:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    18ac:	90 81       	ld	r25, Z
    18ae:	9f 7b       	andi	r25, 0xBF	; 191
    18b0:	90 83       	st	Z, r25
    18b2:	81 ff       	sbrs	r24, 1
    18b4:	08 c0       	rjmp	.+16     	; 0x18c6 <LCD0_write+0x148>
    18b6:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    18ba:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    18be:	90 81       	ld	r25, Z
    18c0:	90 62       	ori	r25, 0x20	; 32
    18c2:	90 83       	st	Z, r25
    18c4:	07 c0       	rjmp	.+14     	; 0x18d4 <LCD0_write+0x156>
    18c6:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    18ca:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    18ce:	90 81       	ld	r25, Z
    18d0:	9f 7d       	andi	r25, 0xDF	; 223
    18d2:	90 83       	st	Z, r25
    18d4:	80 ff       	sbrs	r24, 0
    18d6:	08 c0       	rjmp	.+16     	; 0x18e8 <LCD0_write+0x16a>
    18d8:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    18dc:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    18e0:	80 81       	ld	r24, Z
    18e2:	80 61       	ori	r24, 0x10	; 16
    18e4:	80 83       	st	Z, r24
    18e6:	07 c0       	rjmp	.+14     	; 0x18f6 <LCD0_write+0x178>
    18e8:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    18ec:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    18f0:	80 81       	ld	r24, Z
    18f2:	8f 7e       	andi	r24, 0xEF	; 239
    18f4:	80 83       	st	Z, r24
    18f6:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    18fa:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    18fe:	80 81       	ld	r24, Z
    1900:	8b 7f       	andi	r24, 0xFB	; 251
    1902:	80 83       	st	Z, r24
    1904:	08 95       	ret

00001906 <LCD0_read>:
    1906:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <lcd0_DDR>
    190a:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <lcd0_DDR+0x1>
    190e:	20 81       	ld	r18, Z
    1910:	2f 70       	andi	r18, 0x0F	; 15
    1912:	20 83       	st	Z, r18
    1914:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1918:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    191c:	20 81       	ld	r18, Z
    191e:	20 6f       	ori	r18, 0xF0	; 240
    1920:	20 83       	st	Z, r18
    1922:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1926:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    192a:	20 81       	ld	r18, Z
    192c:	22 60       	ori	r18, 0x02	; 2
    192e:	20 83       	st	Z, r18
    1930:	89 2b       	or	r24, r25
    1932:	41 f0       	breq	.+16     	; 0x1944 <LCD0_read+0x3e>
    1934:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1938:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    193c:	80 81       	ld	r24, Z
    193e:	81 60       	ori	r24, 0x01	; 1
    1940:	80 83       	st	Z, r24
    1942:	07 c0       	rjmp	.+14     	; 0x1952 <LCD0_read+0x4c>
    1944:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1948:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    194c:	80 81       	ld	r24, Z
    194e:	8e 7f       	andi	r24, 0xFE	; 254
    1950:	80 83       	st	Z, r24
    1952:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1956:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    195a:	80 81       	ld	r24, Z
    195c:	84 60       	ori	r24, 0x04	; 4
    195e:	80 83       	st	Z, r24
    1960:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <lcd0_PIN>
    1964:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <lcd0_PIN+0x1>
    1968:	80 81       	ld	r24, Z
    196a:	88 23       	and	r24, r24
    196c:	14 f0       	brlt	.+4      	; 0x1972 <LCD0_read+0x6c>
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	01 c0       	rjmp	.+2      	; 0x1974 <LCD0_read+0x6e>
    1972:	80 e8       	ldi	r24, 0x80	; 128
    1974:	90 81       	ld	r25, Z
    1976:	96 ff       	sbrs	r25, 6
    1978:	02 c0       	rjmp	.+4      	; 0x197e <LCD0_read+0x78>
    197a:	80 64       	ori	r24, 0x40	; 64
    197c:	01 c0       	rjmp	.+2      	; 0x1980 <LCD0_read+0x7a>
    197e:	8f 7b       	andi	r24, 0xBF	; 191
    1980:	90 81       	ld	r25, Z
    1982:	95 ff       	sbrs	r25, 5
    1984:	02 c0       	rjmp	.+4      	; 0x198a <LCD0_read+0x84>
    1986:	80 62       	ori	r24, 0x20	; 32
    1988:	01 c0       	rjmp	.+2      	; 0x198c <LCD0_read+0x86>
    198a:	8f 7d       	andi	r24, 0xDF	; 223
    198c:	90 81       	ld	r25, Z
    198e:	94 ff       	sbrs	r25, 4
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <LCD0_read+0x90>
    1992:	80 61       	ori	r24, 0x10	; 16
    1994:	01 c0       	rjmp	.+2      	; 0x1998 <LCD0_read+0x92>
    1996:	8f 7e       	andi	r24, 0xEF	; 239
    1998:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    199c:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    19a0:	90 81       	ld	r25, Z
    19a2:	9b 7f       	andi	r25, 0xFB	; 251
    19a4:	90 83       	st	Z, r25
    19a6:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    19aa:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    19ae:	90 81       	ld	r25, Z
    19b0:	94 60       	ori	r25, 0x04	; 4
    19b2:	90 83       	st	Z, r25
    19b4:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <lcd0_PIN>
    19b8:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <lcd0_PIN+0x1>
    19bc:	90 81       	ld	r25, Z
    19be:	99 23       	and	r25, r25
    19c0:	14 f4       	brge	.+4      	; 0x19c6 <LCD0_read+0xc0>
    19c2:	88 60       	ori	r24, 0x08	; 8
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <LCD0_read+0xc2>
    19c6:	87 7f       	andi	r24, 0xF7	; 247
    19c8:	90 81       	ld	r25, Z
    19ca:	96 ff       	sbrs	r25, 6
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <LCD0_read+0xcc>
    19ce:	84 60       	ori	r24, 0x04	; 4
    19d0:	01 c0       	rjmp	.+2      	; 0x19d4 <LCD0_read+0xce>
    19d2:	8b 7f       	andi	r24, 0xFB	; 251
    19d4:	90 81       	ld	r25, Z
    19d6:	95 ff       	sbrs	r25, 5
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <LCD0_read+0xd8>
    19da:	82 60       	ori	r24, 0x02	; 2
    19dc:	01 c0       	rjmp	.+2      	; 0x19e0 <LCD0_read+0xda>
    19de:	8d 7f       	andi	r24, 0xFD	; 253
    19e0:	90 81       	ld	r25, Z
    19e2:	94 ff       	sbrs	r25, 4
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <LCD0_read+0xe4>
    19e6:	81 60       	ori	r24, 0x01	; 1
    19e8:	01 c0       	rjmp	.+2      	; 0x19ec <LCD0_read+0xe6>
    19ea:	8e 7f       	andi	r24, 0xFE	; 254
    19ec:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    19f0:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    19f4:	90 81       	ld	r25, Z
    19f6:	9b 7f       	andi	r25, 0xFB	; 251
    19f8:	90 83       	st	Z, r25
    19fa:	08 95       	ret

000019fc <LCD0_BF>:
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	80 df       	rcall	.-256    	; 0x1906 <LCD0_read>
    1a06:	cb e0       	ldi	r28, 0x0B	; 11
    1a08:	d0 e0       	ldi	r29, 0x00	; 0
    1a0a:	05 c0       	rjmp	.+10     	; 0x1a16 <LCD0_BF+0x1a>
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	7a df       	rcall	.-268    	; 0x1906 <LCD0_read>
    1a12:	21 97       	sbiw	r28, 0x01	; 1
    1a14:	11 f0       	breq	.+4      	; 0x1a1a <LCD0_BF+0x1e>
    1a16:	88 23       	and	r24, r24
    1a18:	cc f3       	brlt	.-14     	; 0x1a0c <LCD0_BF+0x10>
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	08 95       	ret

00001a20 <LCD0_putch>:
    1a20:	61 e0       	ldi	r22, 0x01	; 1
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	ac de       	rcall	.-680    	; 0x177e <LCD0_write>
    1a26:	ea cf       	rjmp	.-44     	; 0x19fc <LCD0_BF>
    1a28:	08 95       	ret

00001a2a <LCD0_getch>:
    1a2a:	cf 93       	push	r28
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	6a df       	rcall	.-300    	; 0x1906 <LCD0_read>
    1a32:	c8 2f       	mov	r28, r24
    1a34:	e3 df       	rcall	.-58     	; 0x19fc <LCD0_BF>
    1a36:	8c 2f       	mov	r24, r28
    1a38:	cf 91       	pop	r28
    1a3a:	08 95       	ret

00001a3c <LCD0_string>:
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	ec 01       	movw	r28, r24
    1a42:	88 81       	ld	r24, Y
    1a44:	88 23       	and	r24, r24
    1a46:	41 f0       	breq	.+16     	; 0x1a58 <LCD0_string+0x1c>
    1a48:	21 96       	adiw	r28, 0x01	; 1
    1a4a:	61 e0       	ldi	r22, 0x01	; 1
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	97 de       	rcall	.-722    	; 0x177e <LCD0_write>
    1a50:	d5 df       	rcall	.-86     	; 0x19fc <LCD0_BF>
    1a52:	89 91       	ld	r24, Y+
    1a54:	81 11       	cpse	r24, r1
    1a56:	f9 cf       	rjmp	.-14     	; 0x1a4a <LCD0_string+0xe>
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	08 95       	ret

00001a5e <LCD0_string_size>:
    1a5e:	0f 93       	push	r16
    1a60:	1f 93       	push	r17
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	fc 01       	movw	r30, r24
    1a68:	d6 2f       	mov	r29, r22
    1a6a:	80 81       	ld	r24, Z
    1a6c:	88 23       	and	r24, r24
    1a6e:	51 f0       	breq	.+20     	; 0x1a84 <LCD0_string_size+0x26>
    1a70:	8f 01       	movw	r16, r30
    1a72:	0f 5f       	subi	r16, 0xFF	; 255
    1a74:	1f 4f       	sbci	r17, 0xFF	; 255
    1a76:	61 11       	cpse	r22, r1
    1a78:	09 c0       	rjmp	.+18     	; 0x1a8c <LCD0_string_size+0x2e>
    1a7a:	1b c0       	rjmp	.+54     	; 0x1ab2 <LCD0_string_size+0x54>
    1a7c:	cf 5f       	subi	r28, 0xFF	; 255
    1a7e:	dc 17       	cp	r29, r28
    1a80:	30 f4       	brcc	.+12     	; 0x1a8e <LCD0_string_size+0x30>
    1a82:	01 c0       	rjmp	.+2      	; 0x1a86 <LCD0_string_size+0x28>
    1a84:	c0 e0       	ldi	r28, 0x00	; 0
    1a86:	cd 17       	cp	r28, r29
    1a88:	60 f0       	brcs	.+24     	; 0x1aa2 <LCD0_string_size+0x44>
    1a8a:	13 c0       	rjmp	.+38     	; 0x1ab2 <LCD0_string_size+0x54>
    1a8c:	c1 e0       	ldi	r28, 0x01	; 1
    1a8e:	61 e0       	ldi	r22, 0x01	; 1
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	75 de       	rcall	.-790    	; 0x177e <LCD0_write>
    1a94:	b3 df       	rcall	.-154    	; 0x19fc <LCD0_BF>
    1a96:	f8 01       	movw	r30, r16
    1a98:	81 91       	ld	r24, Z+
    1a9a:	8f 01       	movw	r16, r30
    1a9c:	81 11       	cpse	r24, r1
    1a9e:	ee cf       	rjmp	.-36     	; 0x1a7c <LCD0_string_size+0x1e>
    1aa0:	f2 cf       	rjmp	.-28     	; 0x1a86 <LCD0_string_size+0x28>
    1aa2:	cf 5f       	subi	r28, 0xFF	; 255
    1aa4:	61 e0       	ldi	r22, 0x01	; 1
    1aa6:	70 e0       	ldi	r23, 0x00	; 0
    1aa8:	80 e2       	ldi	r24, 0x20	; 32
    1aaa:	69 de       	rcall	.-814    	; 0x177e <LCD0_write>
    1aac:	a7 df       	rcall	.-178    	; 0x19fc <LCD0_BF>
    1aae:	cd 17       	cp	r28, r29
    1ab0:	c0 f3       	brcs	.-16     	; 0x1aa2 <LCD0_string_size+0x44>
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	1f 91       	pop	r17
    1ab8:	0f 91       	pop	r16
    1aba:	08 95       	ret

00001abc <LCD0_hspace>:
    1abc:	cf 93       	push	r28
    1abe:	c8 2f       	mov	r28, r24
    1ac0:	88 23       	and	r24, r24
    1ac2:	39 f0       	breq	.+14     	; 0x1ad2 <LCD0_hspace+0x16>
    1ac4:	61 e0       	ldi	r22, 0x01	; 1
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	80 e2       	ldi	r24, 0x20	; 32
    1aca:	59 de       	rcall	.-846    	; 0x177e <LCD0_write>
    1acc:	97 df       	rcall	.-210    	; 0x19fc <LCD0_BF>
    1ace:	c1 50       	subi	r28, 0x01	; 1
    1ad0:	c9 f7       	brne	.-14     	; 0x1ac4 <LCD0_hspace+0x8>
    1ad2:	cf 91       	pop	r28
    1ad4:	08 95       	ret

00001ad6 <LCD0_gotoxy>:
    1ad6:	26 2f       	mov	r18, r22
    1ad8:	81 30       	cpi	r24, 0x01	; 1
    1ada:	91 05       	cpc	r25, r1
    1adc:	71 f0       	breq	.+28     	; 0x1afa <LCD0_gotoxy+0x24>
    1ade:	30 f0       	brcs	.+12     	; 0x1aec <LCD0_gotoxy+0x16>
    1ae0:	82 30       	cpi	r24, 0x02	; 2
    1ae2:	91 05       	cpc	r25, r1
    1ae4:	89 f0       	breq	.+34     	; 0x1b08 <LCD0_gotoxy+0x32>
    1ae6:	03 97       	sbiw	r24, 0x03	; 3
    1ae8:	b1 f0       	breq	.+44     	; 0x1b16 <LCD0_gotoxy+0x40>
    1aea:	08 95       	ret
    1aec:	60 e0       	ldi	r22, 0x00	; 0
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	80 e8       	ldi	r24, 0x80	; 128
    1af2:	82 0f       	add	r24, r18
    1af4:	44 de       	rcall	.-888    	; 0x177e <LCD0_write>
    1af6:	82 cf       	rjmp	.-252    	; 0x19fc <LCD0_BF>
    1af8:	08 95       	ret
    1afa:	60 e0       	ldi	r22, 0x00	; 0
    1afc:	70 e0       	ldi	r23, 0x00	; 0
    1afe:	80 ec       	ldi	r24, 0xC0	; 192
    1b00:	82 0f       	add	r24, r18
    1b02:	3d de       	rcall	.-902    	; 0x177e <LCD0_write>
    1b04:	7b cf       	rjmp	.-266    	; 0x19fc <LCD0_BF>
    1b06:	08 95       	ret
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	70 e0       	ldi	r23, 0x00	; 0
    1b0c:	84 e9       	ldi	r24, 0x94	; 148
    1b0e:	82 0f       	add	r24, r18
    1b10:	36 de       	rcall	.-916    	; 0x177e <LCD0_write>
    1b12:	74 cf       	rjmp	.-280    	; 0x19fc <LCD0_BF>
    1b14:	08 95       	ret
    1b16:	60 e0       	ldi	r22, 0x00	; 0
    1b18:	70 e0       	ldi	r23, 0x00	; 0
    1b1a:	84 ed       	ldi	r24, 0xD4	; 212
    1b1c:	82 0f       	add	r24, r18
    1b1e:	2f de       	rcall	.-930    	; 0x177e <LCD0_write>
    1b20:	6d cf       	rjmp	.-294    	; 0x19fc <LCD0_BF>
    1b22:	08 95       	ret

00001b24 <LCD0_clear>:
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	70 e0       	ldi	r23, 0x00	; 0
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	29 de       	rcall	.-942    	; 0x177e <LCD0_write>
    1b2c:	87 ee       	ldi	r24, 0xE7	; 231
    1b2e:	97 e1       	ldi	r25, 0x17	; 23
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	f1 f7       	brne	.-4      	; 0x1b30 <LCD0_clear+0xc>
    1b34:	00 c0       	rjmp	.+0      	; 0x1b36 <LCD0_clear+0x12>
    1b36:	00 00       	nop
    1b38:	08 95       	ret

00001b3a <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    1b3a:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <lcd0_DDR>
    1b3e:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <lcd0_DDR+0x1>
    1b42:	87 e0       	ldi	r24, 0x07	; 7
    1b44:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    1b46:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1b4a:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1b4e:	88 e0       	ldi	r24, 0x08	; 8
    1b50:	80 83       	st	Z, r24
    1b52:	2f ef       	ldi	r18, 0xFF	; 255
    1b54:	83 ef       	ldi	r24, 0xF3	; 243
    1b56:	91 e0       	ldi	r25, 0x01	; 1
    1b58:	21 50       	subi	r18, 0x01	; 1
    1b5a:	80 40       	sbci	r24, 0x00	; 0
    1b5c:	90 40       	sbci	r25, 0x00	; 0
    1b5e:	e1 f7       	brne	.-8      	; 0x1b58 <LCD0_inic+0x1e>
    1b60:	00 c0       	rjmp	.+0      	; 0x1b62 <LCD0_inic+0x28>
    1b62:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	70 e0       	ldi	r23, 0x00	; 0
    1b68:	83 e3       	ldi	r24, 0x33	; 51
    1b6a:	09 de       	rcall	.-1006   	; 0x177e <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b6c:	20 ed       	ldi	r18, 0xD0	; 208
    1b6e:	2a 95       	dec	r18
    1b70:	f1 f7       	brne	.-4      	; 0x1b6e <LCD0_inic+0x34>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	83 e3       	ldi	r24, 0x33	; 51
    1b78:	02 de       	rcall	.-1020   	; 0x177e <LCD0_write>
    1b7a:	80 ed       	ldi	r24, 0xD0	; 208
    1b7c:	8a 95       	dec	r24
    1b7e:	f1 f7       	brne	.-4      	; 0x1b7c <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	8b e2       	ldi	r24, 0x2B	; 43
    1b86:	fb dd       	rcall	.-1034   	; 0x177e <LCD0_write>
    1b88:	95 ec       	ldi	r25, 0xC5	; 197
    1b8a:	9a 95       	dec	r25
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <LCD0_inic+0x50>
    1b8e:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    1b90:	60 e0       	ldi	r22, 0x00	; 0
    1b92:	70 e0       	ldi	r23, 0x00	; 0
    1b94:	8c e0       	ldi	r24, 0x0C	; 12
    1b96:	f3 dd       	rcall	.-1050   	; 0x177e <LCD0_write>
    1b98:	25 ec       	ldi	r18, 0xC5	; 197
    1b9a:	2a 95       	dec	r18
    1b9c:	f1 f7       	brne	.-4      	; 0x1b9a <LCD0_inic+0x60>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    1b9e:	00 00       	nop
    1ba0:	60 e0       	ldi	r22, 0x00	; 0
    1ba2:	70 e0       	ldi	r23, 0x00	; 0
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	eb dd       	rcall	.-1066   	; 0x177e <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ba8:	87 ee       	ldi	r24, 0xE7	; 231
    1baa:	97 e1       	ldi	r25, 0x17	; 23
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <LCD0_inic+0x72>
    1bb0:	00 c0       	rjmp	.+0      	; 0x1bb2 <LCD0_inic+0x78>
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    1bb2:	00 00       	nop
    1bb4:	60 e0       	ldi	r22, 0x00	; 0
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	86 e0       	ldi	r24, 0x06	; 6
    1bba:	e1 dd       	rcall	.-1086   	; 0x177e <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1bbc:	95 ec       	ldi	r25, 0xC5	; 197
    1bbe:	9a 95       	dec	r25
    1bc0:	f1 f7       	brne	.-4      	; 0x1bbe <LCD0_inic+0x84>
    1bc2:	00 00       	nop
    1bc4:	08 95       	ret

00001bc6 <LCD0enable>:
void LCD1_strobe(unsigned int num);
void LCD1_reboot(void);
unsigned int LCD_ticks(unsigned int num);
/***Procedure & Function***/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1bc6:	1f 93       	push	r17
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    1bce:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1bd0:	8f b7       	in	r24, 0x3f	; 63
    1bd2:	8f 77       	andi	r24, 0x7F	; 127
    1bd4:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    1bd6:	70 93 66 01 	sts	0x0166, r23	; 0x800166 <lcd0_DDR+0x1>
    1bda:	60 93 65 01 	sts	0x0165, r22	; 0x800165 <lcd0_DDR>
	lcd0_PIN=pin;
    1bde:	50 93 5f 01 	sts	0x015F, r21	; 0x80015f <lcd0_PIN+0x1>
    1be2:	40 93 5e 01 	sts	0x015E, r20	; 0x80015e <lcd0_PIN>
	lcd0_PORT=port;
    1be6:	30 93 69 01 	sts	0x0169, r19	; 0x800169 <lcd0_PORT+0x1>
    1bea:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    1bee:	fb 01       	movw	r30, r22
    1bf0:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    1bf2:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1bf6:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1bfa:	8f ef       	ldi	r24, 0xFF	; 255
    1bfc:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    1bfe:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <lcd0_PIN>
    1c02:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <lcd0_PIN+0x1>
    1c06:	80 81       	ld	r24, Z
    1c08:	88 70       	andi	r24, 0x08	; 8
    1c0a:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    1c0e:	95 df       	rcall	.-214    	; 0x1b3a <LCD0_inic>
	SREG=tSREG;
    1c10:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    1c12:	8f eb       	ldi	r24, 0xBF	; 191
    1c14:	9b e0       	ldi	r25, 0x0B	; 11
    1c16:	99 83       	std	Y+1, r25	; 0x01
    1c18:	88 83       	st	Y, r24
    1c1a:	83 e8       	ldi	r24, 0x83	; 131
    1c1c:	9c e0       	ldi	r25, 0x0C	; 12
    1c1e:	9b 83       	std	Y+3, r25	; 0x03
    1c20:	8a 83       	std	Y+2, r24	; 0x02
    1c22:	8e ef       	ldi	r24, 0xFE	; 254
    1c24:	9c e0       	ldi	r25, 0x0C	; 12
    1c26:	9d 83       	std	Y+5, r25	; 0x05
    1c28:	8c 83       	std	Y+4, r24	; 0x04
    1c2a:	80 e1       	ldi	r24, 0x10	; 16
    1c2c:	9d e0       	ldi	r25, 0x0D	; 13
    1c2e:	9f 83       	std	Y+7, r25	; 0x07
    1c30:	8e 83       	std	Y+6, r24	; 0x06
    1c32:	85 e1       	ldi	r24, 0x15	; 21
    1c34:	9d e0       	ldi	r25, 0x0D	; 13
    1c36:	99 87       	std	Y+9, r25	; 0x09
    1c38:	88 87       	std	Y+8, r24	; 0x08
    1c3a:	8e e1       	ldi	r24, 0x1E	; 30
    1c3c:	9d e0       	ldi	r25, 0x0D	; 13
    1c3e:	9b 87       	std	Y+11, r25	; 0x0b
    1c40:	8a 87       	std	Y+10, r24	; 0x0a
    1c42:	8f e2       	ldi	r24, 0x2F	; 47
    1c44:	9d e0       	ldi	r25, 0x0D	; 13
    1c46:	9d 87       	std	Y+13, r25	; 0x0d
    1c48:	8c 87       	std	Y+12, r24	; 0x0c
    1c4a:	8e e5       	ldi	r24, 0x5E	; 94
    1c4c:	9d e0       	ldi	r25, 0x0D	; 13
    1c4e:	9f 87       	std	Y+15, r25	; 0x0f
    1c50:	8e 87       	std	Y+14, r24	; 0x0e
    1c52:	82 e9       	ldi	r24, 0x92	; 146
    1c54:	9d e0       	ldi	r25, 0x0D	; 13
    1c56:	99 8b       	std	Y+17, r25	; 0x11
    1c58:	88 8b       	std	Y+16, r24	; 0x10
    1c5a:	8b e6       	ldi	r24, 0x6B	; 107
    1c5c:	9d e0       	ldi	r25, 0x0D	; 13
    1c5e:	9b 8b       	std	Y+19, r25	; 0x13
    1c60:	8a 8b       	std	Y+18, r24	; 0x12
    1c62:	8a e3       	ldi	r24, 0x3A	; 58
    1c64:	9e e0       	ldi	r25, 0x0E	; 14
    1c66:	9d 8b       	std	Y+21, r25	; 0x15
    1c68:	8c 8b       	std	Y+20, r24	; 0x14
}
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	1f 91       	pop	r17
    1c72:	08 95       	ret

00001c74 <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    1c74:	cf 93       	push	r28
    1c76:	df 93       	push	r29
	uint8_t tSREG;
	tSREG=SREG;
    1c78:	df b7       	in	r29, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1c7a:	8f b7       	in	r24, 0x3f	; 63
    1c7c:	8f 77       	andi	r24, 0x7F	; 127
    1c7e:	8f bf       	out	0x3f, r24	; 63
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    1c80:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <lcd0_PIN>
    1c84:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <lcd0_PIN+0x1>
    1c88:	c0 81       	ld	r28, Z
    1c8a:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    1c8c:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <lcd0_detect>
    1c90:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    1c92:	8c 23       	and	r24, r28
    1c94:	09 f0       	breq	.+2      	; 0x1c98 <LCD0_reboot+0x24>
		LCD0_inic();
    1c96:	51 df       	rcall	.-350    	; 0x1b3a <LCD0_inic>
	lcd0_detect=tmp;
    1c98:	c0 93 67 01 	sts	0x0167, r28	; 0x800167 <lcd0_detect>
	SREG=tSREG;
    1c9c:	df bf       	out	0x3f, r29	; 63
}
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	08 95       	ret

00001ca4 <HX711_read_bit>:
	self->readflag=OFF;
}
uint8_t HX711_read_bit(void)
{	
	uint16_t ibool;
	*hx711_PORT|=(ONE<<hx711_clkpin);
    1ca4:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <hx711_PORT>
    1ca8:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <hx711_PORT+0x1>
    1cac:	20 81       	ld	r18, Z
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	00 90 73 01 	lds	r0, 0x0173	; 0x800173 <hx711_clkpin>
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <HX711_read_bit+0x18>
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	0a 94       	dec	r0
    1cbe:	e2 f7       	brpl	.-8      	; 0x1cb8 <HX711_read_bit+0x14>
    1cc0:	82 2b       	or	r24, r18
    1cc2:	80 83       	st	Z, r24
    1cc4:	84 e2       	ldi	r24, 0x24	; 36
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
	/**0.1us minimum**/
	for(ibool=ZERO; ibool<HX711_ticks; ibool++); //inline delay
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <HX711_read_bit+0x24>
	ibool=*hx711_PIN & (ONE<<hx711_datapin);
    1ccc:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <hx711_PIN>
    1cd0:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <hx711_PIN+0x1>
    1cd4:	40 81       	ld	r20, Z
    1cd6:	21 e0       	ldi	r18, 0x01	; 1
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	c9 01       	movw	r24, r18
    1cdc:	00 90 6c 01 	lds	r0, 0x016C	; 0x80016c <hx711_datapin>
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <HX711_read_bit+0x42>
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	0a 94       	dec	r0
    1ce8:	e2 f7       	brpl	.-8      	; 0x1ce2 <HX711_read_bit+0x3e>
	*hx711_PORT &= ~(ONE<<hx711_clkpin);
    1cea:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <hx711_PORT>
    1cee:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <hx711_PORT+0x1>
    1cf2:	90 81       	ld	r25, Z
    1cf4:	00 90 73 01 	lds	r0, 0x0173	; 0x800173 <hx711_clkpin>
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <HX711_read_bit+0x5a>
    1cfa:	22 0f       	add	r18, r18
    1cfc:	33 1f       	adc	r19, r19
    1cfe:	0a 94       	dec	r0
    1d00:	e2 f7       	brpl	.-8      	; 0x1cfa <HX711_read_bit+0x56>
    1d02:	20 95       	com	r18
    1d04:	29 23       	and	r18, r25
    1d06:	20 83       	st	Z, r18
	return ibool;
}
    1d08:	84 23       	and	r24, r20
    1d0a:	08 95       	ret

00001d0c <HX711_set_amplify>:
// Gain selector
// AVDD connected to 5V, channel B gain=32
void HX711_set_amplify(HX711* self, uint8_t amplify)
{
	switch(amplify){
    1d0c:	60 34       	cpi	r22, 0x40	; 64
    1d0e:	79 f0       	breq	.+30     	; 0x1d2e <HX711_set_amplify+0x22>
    1d10:	60 38       	cpi	r22, 0x80	; 128
    1d12:	19 f0       	breq	.+6      	; 0x1d1a <HX711_set_amplify+0xe>
    1d14:	60 32       	cpi	r22, 0x20	; 32
    1d16:	81 f4       	brne	.+32     	; 0x1d38 <HX711_set_amplify+0x2c>
    1d18:	05 c0       	rjmp	.+10     	; 0x1d24 <HX711_set_amplify+0x18>
		case 128:
			self->amplify = ONE; //channel A
    1d1a:	21 e0       	ldi	r18, 0x01	; 1
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	22 83       	std	Z+2, r18	; 0x02
			self->ampcount = ONE;
    1d20:	23 83       	std	Z+3, r18	; 0x03
			break;
    1d22:	08 95       	ret
		case 32:
			self->amplify = 2; //channel B
    1d24:	22 e0       	ldi	r18, 0x02	; 2
    1d26:	fc 01       	movw	r30, r24
    1d28:	22 83       	std	Z+2, r18	; 0x02
			self->ampcount = 2; 
    1d2a:	23 83       	std	Z+3, r18	; 0x03
			break;
    1d2c:	08 95       	ret
		case 64:
			self->amplify = 3; //channel A
    1d2e:	23 e0       	ldi	r18, 0x03	; 3
    1d30:	fc 01       	movw	r30, r24
    1d32:	22 83       	std	Z+2, r18	; 0x02
			self->ampcount = 3;
    1d34:	23 83       	std	Z+3, r18	; 0x03
			break;
    1d36:	08 95       	ret
		default:
			self->amplify = ONE;
    1d38:	21 e0       	ldi	r18, 0x01	; 1
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	22 83       	std	Z+2, r18	; 0x02
			self->ampcount = ONE;
    1d3e:	23 83       	std	Z+3, r18	; 0x03
    1d40:	08 95       	ret

00001d42 <HX711_query>:
	}
}
uint8_t HX711_query(HX711* self)
{
	uint8_t flag=OFF; // one shot
	if(!self->readflag){
    1d42:	fc 01       	movw	r30, r24
    1d44:	20 81       	ld	r18, Z
    1d46:	21 11       	cpse	r18, r1
    1d48:	14 c0       	rjmp	.+40     	; 0x1d72 <HX711_query+0x30>
		if(!(*hx711_PIN & (ONE << hx711_datapin))){
    1d4a:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <hx711_PIN>
    1d4e:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <hx711_PIN+0x1>
    1d52:	20 81       	ld	r18, Z
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	00 90 6c 01 	lds	r0, 0x016C	; 0x80016c <hx711_datapin>
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <HX711_query+0x1e>
    1d5c:	35 95       	asr	r19
    1d5e:	27 95       	ror	r18
    1d60:	0a 94       	dec	r0
    1d62:	e2 f7       	brpl	.-8      	; 0x1d5c <HX711_query+0x1a>
    1d64:	20 fd       	sbrc	r18, 0
    1d66:	07 c0       	rjmp	.+14     	; 0x1d76 <HX711_query+0x34>
			self->readflag=ON;
    1d68:	2f ef       	ldi	r18, 0xFF	; 255
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	20 83       	st	Z, r18
			flag=ON;
    1d6e:	8f ef       	ldi	r24, 0xFF	; 255
    1d70:	08 95       	ret
			break;
	}
}
uint8_t HX711_query(HX711* self)
{
	uint8_t flag=OFF; // one shot
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	08 95       	ret
    1d76:	80 e0       	ldi	r24, 0x00	; 0
			self->readflag=ON;
			flag=ON;
		}
	}
	return flag;
}
    1d78:	08 95       	ret

00001d7a <HX711_raw_average>:
		}
	}
	return self->raw_reading;
}
float HX711_raw_average(HX711* self, uint8_t n)
{
    1d7a:	0f 93       	push	r16
    1d7c:	1f 93       	push	r17
    1d7e:	cf 93       	push	r28
    1d80:	df 93       	push	r29
    1d82:	ec 01       	movw	r28, r24
	if(self->trigger){
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	88 23       	and	r24, r24
    1d88:	91 f1       	breq	.+100    	; 0x1dee <HX711_raw_average+0x74>
		if(self->av_n < n){
    1d8a:	8a 89       	ldd	r24, Y+18	; 0x12
    1d8c:	86 17       	cp	r24, r22
    1d8e:	98 f4       	brcc	.+38     	; 0x1db6 <HX711_raw_average+0x3c>
			self->sum += self->raw_reading;
    1d90:	0e 85       	ldd	r16, Y+14	; 0x0e
    1d92:	1f 85       	ldd	r17, Y+15	; 0x0f
    1d94:	28 89       	ldd	r18, Y+16	; 0x10
    1d96:	39 89       	ldd	r19, Y+17	; 0x11
    1d98:	4a 85       	ldd	r20, Y+10	; 0x0a
    1d9a:	5b 85       	ldd	r21, Y+11	; 0x0b
    1d9c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d9e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1da0:	40 0f       	add	r20, r16
    1da2:	51 1f       	adc	r21, r17
    1da4:	62 1f       	adc	r22, r18
    1da6:	73 1f       	adc	r23, r19
    1da8:	4e 87       	std	Y+14, r20	; 0x0e
    1daa:	5f 87       	std	Y+15, r21	; 0x0f
    1dac:	68 8b       	std	Y+16, r22	; 0x10
    1dae:	79 8b       	std	Y+17, r23	; 0x11
			self->av_n++;
    1db0:	8f 5f       	subi	r24, 0xFF	; 255
    1db2:	8a 8b       	std	Y+18, r24	; 0x12
    1db4:	1b c0       	rjmp	.+54     	; 0x1dec <HX711_raw_average+0x72>
		}else{
			self->av_n = ZERO;
			self->raw_mean = self->sum / n;
    1db6:	26 2f       	mov	r18, r22
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	40 e0       	ldi	r20, 0x00	; 0
    1dbc:	50 e0       	ldi	r21, 0x00	; 0
    1dbe:	6e 85       	ldd	r22, Y+14	; 0x0e
    1dc0:	7f 85       	ldd	r23, Y+15	; 0x0f
    1dc2:	88 89       	ldd	r24, Y+16	; 0x10
    1dc4:	99 89       	ldd	r25, Y+17	; 0x11
    1dc6:	0e 94 5d 18 	call	0x30ba	; 0x30ba <__divmodsi4>
    1dca:	ca 01       	movw	r24, r20
    1dcc:	b9 01       	movw	r22, r18
    1dce:	d7 d6       	rcall	.+3502   	; 0x2b7e <__floatsisf>
    1dd0:	6b 8b       	std	Y+19, r22	; 0x13
    1dd2:	7c 8b       	std	Y+20, r23	; 0x14
    1dd4:	8d 8b       	std	Y+21, r24	; 0x15
    1dd6:	9e 8b       	std	Y+22, r25	; 0x16
			self->sum = ZERO;
			self->sum += self->raw_reading;
    1dd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dda:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ddc:	ac 85       	ldd	r26, Y+12	; 0x0c
    1dde:	bd 85       	ldd	r27, Y+13	; 0x0d
    1de0:	8e 87       	std	Y+14, r24	; 0x0e
    1de2:	9f 87       	std	Y+15, r25	; 0x0f
    1de4:	a8 8b       	std	Y+16, r26	; 0x10
    1de6:	b9 8b       	std	Y+17, r27	; 0x11
			self->av_n++;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	8a 8b       	std	Y+18, r24	; 0x12
		}
		self->trigger = ZERO;
    1dec:	19 82       	std	Y+1, r1	; 0x01
	}
	return self->raw_mean;
    1dee:	6b 89       	ldd	r22, Y+19	; 0x13
    1df0:	7c 89       	ldd	r23, Y+20	; 0x14
    1df2:	8d 89       	ldd	r24, Y+21	; 0x15
    1df4:	9e 89       	ldd	r25, Y+22	; 0x16
}
    1df6:	df 91       	pop	r29
    1df8:	cf 91       	pop	r28
    1dfa:	1f 91       	pop	r17
    1dfc:	0f 91       	pop	r16
    1dfe:	08 95       	ret

00001e00 <HX711_get_readflag>:
uint8_t HX711_get_readflag(HX711* self)
{
	return self->readflag;
    1e00:	fc 01       	movw	r30, r24
    1e02:	80 81       	ld	r24, Z
}
    1e04:	08 95       	ret

00001e06 <HX711_get_cal>:
struct HX711_calibration* HX711_get_cal(HX711* self)
{
	return &(self->cal_data);
}
    1e06:	47 96       	adiw	r24, 0x17	; 23
    1e08:	08 95       	ret

00001e0a <HX711_read_raw>:
}
/***
Function to be used in the interrupt routine with appropriate cycle period.
***/
int32_t HX711_read_raw(HX711* self)
{
    1e0a:	0f 93       	push	r16
    1e0c:	1f 93       	push	r17
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    1e12:	ec 01       	movw	r28, r24
	uint8_t aindex, bindex;
	int32_t value;
	aindex = self->bufferindex-ONE;
    1e14:	09 85       	ldd	r16, Y+9	; 0x09
	bindex = self->bitcount-ONE;
    1e16:	1c 81       	ldd	r17, Y+4	; 0x04
	ptr=(int32_t*)self->buffer;
    1e18:	05 96       	adiw	r24, 0x05	; 5
    1e1a:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <ptr+0x1>
    1e1e:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <ptr>
	/***Detect query for reading***/
	//if((!(*hx711_PIN & ONE << hx711_datapin)) && !self->readflag){
		//HX711_set_readflag(self);
	//}
	/***Interrupt 24 times sequence***/
	if(self->readflag){
    1e22:	88 81       	ld	r24, Y
    1e24:	88 23       	and	r24, r24
    1e26:	09 f4       	brne	.+2      	; 0x1e2a <HX711_read_raw+0x20>
    1e28:	44 c0       	rjmp	.+136    	; 0x1eb2 <HX711_read_raw+0xa8>
		if(self->bitcount){
    1e2a:	11 23       	and	r17, r17
    1e2c:	29 f1       	breq	.+74     	; 0x1e78 <HX711_read_raw+0x6e>
			if (HX711_read_bit())
    1e2e:	3a df       	rcall	.-396    	; 0x1ca4 <HX711_read_bit>
    1e30:	88 23       	and	r24, r24
    1e32:	a9 f0       	breq	.+42     	; 0x1e5e <HX711_read_raw+0x54>
				self->buffer[aindex] |= ONE<<(bindex-(aindex*8));
    1e34:	01 50       	subi	r16, 0x01	; 1
    1e36:	80 2f       	mov	r24, r16
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	e8 0f       	add	r30, r24
    1e3e:	f9 1f       	adc	r31, r25
    1e40:	11 50       	subi	r17, 0x01	; 1
    1e42:	28 e0       	ldi	r18, 0x08	; 8
    1e44:	02 9f       	mul	r16, r18
    1e46:	10 19       	sub	r17, r0
    1e48:	11 24       	eor	r1, r1
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <HX711_read_raw+0x4a>
    1e50:	88 0f       	add	r24, r24
    1e52:	99 1f       	adc	r25, r25
    1e54:	1a 95       	dec	r17
    1e56:	e2 f7       	brpl	.-8      	; 0x1e50 <HX711_read_raw+0x46>
    1e58:	95 81       	ldd	r25, Z+5	; 0x05
    1e5a:	89 2b       	or	r24, r25
    1e5c:	85 83       	std	Z+5, r24	; 0x05
			self->bitcount--;
    1e5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e60:	81 50       	subi	r24, 0x01	; 1
    1e62:	8c 83       	std	Y+4, r24	; 0x04
			if(self->bitcount == 16)
    1e64:	80 31       	cpi	r24, 0x10	; 16
    1e66:	19 f4       	brne	.+6      	; 0x1e6e <HX711_read_raw+0x64>
				self->bufferindex=2;
    1e68:	82 e0       	ldi	r24, 0x02	; 2
    1e6a:	89 87       	std	Y+9, r24	; 0x09
    1e6c:	22 c0       	rjmp	.+68     	; 0x1eb2 <HX711_read_raw+0xa8>
			if(self->bitcount == 8)
    1e6e:	88 30       	cpi	r24, 0x08	; 8
    1e70:	01 f5       	brne	.+64     	; 0x1eb2 <HX711_read_raw+0xa8>
				self->bufferindex=ONE;
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	89 87       	std	Y+9, r24	; 0x09
    1e76:	1d c0       	rjmp	.+58     	; 0x1eb2 <HX711_read_raw+0xa8>
		}else{
			if(self->ampcount){
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	88 23       	and	r24, r24
				HX711_read_bit();
    1e7c:	29 f0       	breq	.+10     	; 0x1e88 <HX711_read_raw+0x7e>
    1e7e:	12 df       	rcall	.-476    	; 0x1ca4 <HX711_read_bit>
				self->ampcount--;
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	81 50       	subi	r24, 0x01	; 1
    1e84:	8b 83       	std	Y+3, r24	; 0x03
    1e86:	15 c0       	rjmp	.+42     	; 0x1eb2 <HX711_read_raw+0xa8>
			}else{
				value = *(ptr);
				self->raw_reading = value;
    1e88:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8c:	af 81       	ldd	r26, Y+7	; 0x07
    1e8e:	b8 85       	ldd	r27, Y+8	; 0x08
    1e90:	8a 87       	std	Y+10, r24	; 0x0a
    1e92:	9b 87       	std	Y+11, r25	; 0x0b
    1e94:	ac 87       	std	Y+12, r26	; 0x0c
    1e96:	bd 87       	std	Y+13, r27	; 0x0d
				self->bitcount = HX711_ADC_bits;
    1e98:	88 e1       	ldi	r24, 0x18	; 24
    1e9a:	8c 83       	std	Y+4, r24	; 0x04
				self->bufferindex = HX711_VECT_SIZE-ONE;
    1e9c:	83 e0       	ldi	r24, 0x03	; 3
    1e9e:	89 87       	std	Y+9, r24	; 0x09
				self->ampcount = self->amplify;
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	8b 83       	std	Y+3, r24	; 0x03
				self->buffer[0] = ZERO;
    1ea4:	1d 82       	std	Y+5, r1	; 0x05
				self->buffer[1] = ZERO;
    1ea6:	1e 82       	std	Y+6, r1	; 0x06
				self->buffer[2] = ZERO;
    1ea8:	1f 82       	std	Y+7, r1	; 0x07
				self->buffer[3] = ZERO;
    1eaa:	18 86       	std	Y+8, r1	; 0x08
				self->trigger = ONE;
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	89 83       	std	Y+1, r24	; 0x01
//{
	//self->readflag=ON;
//}
void HX711_reset_readflag(HX711* self)
{
	self->readflag=OFF;
    1eb0:	18 82       	st	Y, r1
				/***Reset ready for next query***/
				HX711_reset_readflag(self);
			}
		}
	}
	return self->raw_reading;
    1eb2:	6a 85       	ldd	r22, Y+10	; 0x0a
    1eb4:	7b 85       	ldd	r23, Y+11	; 0x0b
    1eb6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1eb8:	9d 85       	ldd	r25, Y+13	; 0x0d
}
    1eba:	df 91       	pop	r29
    1ebc:	cf 91       	pop	r28
    1ebe:	1f 91       	pop	r17
    1ec0:	0f 91       	pop	r16
    1ec2:	08 95       	ret

00001ec4 <HX711enable>:
float HX711_raw_average(HX711* self, uint8_t n);
uint8_t HX711_get_readflag(HX711* self);
struct HX711_calibration* HX711_get_cal(HX711* self);
/***Procedure & Function***/
HX711 HX711enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port, uint8_t datapin, uint8_t clkpin)
{
    1ec4:	ef 92       	push	r14
    1ec6:	0f 93       	push	r16
    1ec8:	fc 01       	movw	r30, r24
    1eca:	da 01       	movw	r26, r20
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG = STATUS_REGISTER;
    1ecc:	5f b7       	in	r21, 0x3f	; 63
	STATUS_REGISTER &= ~(1<<GLOBAL_INTERRUPT_ENABLE);
    1ece:	8f b7       	in	r24, 0x3f	; 63
    1ed0:	8f 77       	andi	r24, 0x7F	; 127
    1ed2:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	HX711 hx711;
	//import parametros
	hx711_DDR = ddr;
    1ed4:	70 93 75 01 	sts	0x0175, r23	; 0x800175 <hx711_DDR+0x1>
    1ed8:	60 93 74 01 	sts	0x0174, r22	; 0x800174 <hx711_DDR>
	hx711_PIN = pin;
    1edc:	b0 93 6e 01 	sts	0x016E, r27	; 0x80016e <hx711_PIN+0x1>
    1ee0:	a0 93 6d 01 	sts	0x016D, r26	; 0x80016d <hx711_PIN>
	hx711_PORT = port;
    1ee4:	30 93 70 01 	sts	0x0170, r19	; 0x800170 <hx711_PORT+0x1>
    1ee8:	20 93 6f 01 	sts	0x016F, r18	; 0x80016f <hx711_PORT>
	hx711_datapin = datapin;
    1eec:	00 93 6c 01 	sts	0x016C, r16	; 0x80016c <hx711_datapin>
	hx711_clkpin = clkpin;
    1ef0:	e0 92 73 01 	sts	0x0173, r14	; 0x800173 <hx711_clkpin>
	//inic variables
	*hx711_DDR |= (ONE<<clkpin);
    1ef4:	db 01       	movw	r26, r22
    1ef6:	4c 91       	ld	r20, X
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9c 01       	movw	r18, r24
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <HX711enable+0x40>
    1f00:	22 0f       	add	r18, r18
    1f02:	33 1f       	adc	r19, r19
    1f04:	ea 94       	dec	r14
    1f06:	e2 f7       	brpl	.-8      	; 0x1f00 <HX711enable+0x3c>
    1f08:	24 2b       	or	r18, r20
    1f0a:	2c 93       	st	X, r18
	*hx711_PORT |= (ONE<<datapin);
    1f0c:	a0 91 6f 01 	lds	r26, 0x016F	; 0x80016f <hx711_PORT>
    1f10:	b0 91 70 01 	lds	r27, 0x0170	; 0x800170 <hx711_PORT+0x1>
    1f14:	2c 91       	ld	r18, X
    1f16:	02 c0       	rjmp	.+4      	; 0x1f1c <HX711enable+0x58>
    1f18:	88 0f       	add	r24, r24
    1f1a:	99 1f       	adc	r25, r25
    1f1c:	0a 95       	dec	r16
    1f1e:	e2 f7       	brpl	.-8      	; 0x1f18 <HX711enable+0x54>
    1f20:	82 2b       	or	r24, r18
    1f22:	8c 93       	st	X, r24
	hx711.readflag = ZERO;
    1f24:	10 82       	st	Z, r1
	hx711.trigger = ZERO;
    1f26:	11 82       	std	Z+1, r1	; 0x01
	hx711.amplify = ONE;
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	82 83       	std	Z+2, r24	; 0x02
	hx711.ampcount = ONE;
    1f2c:	83 83       	std	Z+3, r24	; 0x03
	hx711.bitcount = HX711_ADC_bits;
    1f2e:	88 e1       	ldi	r24, 0x18	; 24
    1f30:	84 83       	std	Z+4, r24	; 0x04
	hx711.buffer[0] = ZERO;
    1f32:	15 82       	std	Z+5, r1	; 0x05
	hx711.buffer[1] = ZERO;
    1f34:	16 82       	std	Z+6, r1	; 0x06
	hx711.buffer[2] = ZERO;
    1f36:	17 82       	std	Z+7, r1	; 0x07
	hx711.buffer[3] = ZERO;
    1f38:	10 86       	std	Z+8, r1	; 0x08
	hx711.bufferindex = HX711_VECT_SIZE-ONE;
    1f3a:	83 e0       	ldi	r24, 0x03	; 3
    1f3c:	81 87       	std	Z+9, r24	; 0x09
	hx711.raw_reading = ZERO;
    1f3e:	12 86       	std	Z+10, r1	; 0x0a
    1f40:	13 86       	std	Z+11, r1	; 0x0b
    1f42:	14 86       	std	Z+12, r1	; 0x0c
    1f44:	15 86       	std	Z+13, r1	; 0x0d
	hx711.sum = ZERO;
    1f46:	16 86       	std	Z+14, r1	; 0x0e
    1f48:	17 86       	std	Z+15, r1	; 0x0f
    1f4a:	10 8a       	std	Z+16, r1	; 0x10
    1f4c:	11 8a       	std	Z+17, r1	; 0x11
	hx711.av_n = ZERO;
    1f4e:	12 8a       	std	Z+18, r1	; 0x12
	hx711.raw_mean = ZERO;
    1f50:	13 8a       	std	Z+19, r1	; 0x13
    1f52:	14 8a       	std	Z+20, r1	; 0x14
    1f54:	15 8a       	std	Z+21, r1	; 0x15
    1f56:	16 8a       	std	Z+22, r1	; 0x16
	// offset para mesa usada.
	hx711.cal_data.offset_32 = 36800; // to subtract B
    1f58:	80 ec       	ldi	r24, 0xC0	; 192
    1f5a:	9f e8       	ldi	r25, 0x8F	; 143
    1f5c:	a0 e0       	ldi	r26, 0x00	; 0
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	87 8b       	std	Z+23, r24	; 0x17
    1f62:	90 8f       	std	Z+24, r25	; 0x18
    1f64:	a1 8f       	std	Z+25, r26	; 0x19
    1f66:	b2 8f       	std	Z+26, r27	; 0x1a
	hx711.cal_data.offset_64 = 72700; // to subtract A 64
    1f68:	8c ef       	ldi	r24, 0xFC	; 252
    1f6a:	9b e1       	ldi	r25, 0x1B	; 27
    1f6c:	a1 e0       	ldi	r26, 0x01	; 1
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	83 8f       	std	Z+27, r24	; 0x1b
    1f72:	94 8f       	std	Z+28, r25	; 0x1c
    1f74:	a5 8f       	std	Z+29, r26	; 0x1d
    1f76:	b6 8f       	std	Z+30, r27	; 0x1e
	hx711.cal_data.offset_128 = 147200; // to subtract A 128
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	9f e3       	ldi	r25, 0x3F	; 63
    1f7c:	a2 e0       	ldi	r26, 0x02	; 2
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	87 8f       	std	Z+31, r24	; 0x1f
    1f82:	90 a3       	std	Z+32, r25	; 0x20
    1f84:	a1 a3       	std	Z+33, r26	; 0x21
    1f86:	b2 a3       	std	Z+34, r27	; 0x22
	//div factor
	hx711.cal_data.divfactor_32=23; // to divide
    1f88:	87 e1       	ldi	r24, 0x17	; 23
    1f8a:	83 a3       	std	Z+35, r24	; 0x23
	hx711.cal_data.divfactor_64=46; // to divide
    1f8c:	8e e2       	ldi	r24, 0x2E	; 46
    1f8e:	84 a3       	std	Z+36, r24	; 0x24
	hx711.cal_data.divfactor_128=92; // to divide
    1f90:	8c e5       	ldi	r24, 0x5C	; 92
    1f92:	85 a3       	std	Z+37, r24	; 0x25
	hx711.cal_data.status=ZERO;
    1f94:	16 a2       	std	Z+38, r1	; 0x26
	//Direccionar apontadores para PROTOTIPOS
	//hx711.set_readflag=HX711_set_readflag;
	hx711.read_bit=HX711_read_bit;
    1f96:	82 e5       	ldi	r24, 0x52	; 82
    1f98:	9e e0       	ldi	r25, 0x0E	; 14
    1f9a:	90 a7       	std	Z+40, r25	; 0x28
    1f9c:	87 a3       	std	Z+39, r24	; 0x27
	hx711.set_amplify=HX711_set_amplify;
    1f9e:	86 e8       	ldi	r24, 0x86	; 134
    1fa0:	9e e0       	ldi	r25, 0x0E	; 14
    1fa2:	92 a7       	std	Z+42, r25	; 0x2a
    1fa4:	81 a7       	std	Z+41, r24	; 0x29
	hx711.query=HX711_query;
    1fa6:	81 ea       	ldi	r24, 0xA1	; 161
    1fa8:	9e e0       	ldi	r25, 0x0E	; 14
    1faa:	94 a7       	std	Z+44, r25	; 0x2c
    1fac:	83 a7       	std	Z+43, r24	; 0x2b
	hx711.read_raw=HX711_read_raw;
    1fae:	85 e0       	ldi	r24, 0x05	; 5
    1fb0:	9f e0       	ldi	r25, 0x0F	; 15
    1fb2:	96 a7       	std	Z+46, r25	; 0x2e
    1fb4:	85 a7       	std	Z+45, r24	; 0x2d
	hx711.raw_average=HX711_raw_average;
    1fb6:	8d eb       	ldi	r24, 0xBD	; 189
    1fb8:	9e e0       	ldi	r25, 0x0E	; 14
    1fba:	90 ab       	std	Z+48, r25	; 0x30
    1fbc:	87 a7       	std	Z+47, r24	; 0x2f
	hx711.get_readflag=HX711_get_readflag;
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	9f e0       	ldi	r25, 0x0F	; 15
    1fc2:	92 ab       	std	Z+50, r25	; 0x32
    1fc4:	81 ab       	std	Z+49, r24	; 0x31
	hx711.get_cal=HX711_get_cal;
    1fc6:	83 e0       	ldi	r24, 0x03	; 3
    1fc8:	9f e0       	ldi	r25, 0x0F	; 15
    1fca:	94 ab       	std	Z+52, r25	; 0x34
    1fcc:	83 ab       	std	Z+51, r24	; 0x33
	STATUS_REGISTER = tSREG;
    1fce:	5f bf       	out	0x3f, r21	; 63
	// returns a copy
	return hx711;
}
    1fd0:	cf 01       	movw	r24, r30
    1fd2:	0f 91       	pop	r16
    1fd4:	ef 90       	pop	r14
    1fd6:	08 95       	ret

00001fd8 <PORTINIT>:
** procedure and function
*/
void PORTINIT(void)
{
	//Control buttons
	PORTF |= IMASK;
    1fd8:	e2 e6       	ldi	r30, 0x62	; 98
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	8f 63       	ori	r24, 0x3F	; 63
    1fe0:	80 83       	st	Z, r24
	//troubleshooting output
	DDRC = 0x00;
    1fe2:	14 ba       	out	0x14, r1	; 20
	PORTD=0xFF;
    1fe4:	8f ef       	ldi	r24, 0xFF	; 255
    1fe6:	82 bb       	out	0x12, r24	; 18
	DDRC = 0xFF;
    1fe8:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
    1fea:	85 bb       	out	0x15, r24	; 21
    1fec:	08 95       	ret

00001fee <main>:
** Header
*/
void PORTINIT();
/****MAIN****/
int main(void)
{
    1fee:	cf 93       	push	r28
    1ff0:	df 93       	push	r29
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	cd 5b       	subi	r28, 0xBD	; 189
    1ff8:	d1 09       	sbc	r29, r1
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
	PORTINIT();
    2004:	e9 df       	rcall	.-46     	; 0x1fd8 <PORTINIT>
	
	HX711_ptr = &HX711_data; // CALIBRATION DATA BUS
    2006:	0f 2e       	mov	r0, r31
    2008:	f0 eb       	ldi	r31, 0xB0	; 176
    200a:	cf 2e       	mov	r12, r31
    200c:	f1 e0       	ldi	r31, 0x01	; 1
    200e:	df 2e       	mov	r13, r31
    2010:	f0 2d       	mov	r31, r0
    2012:	d0 92 c1 01 	sts	0x01C1, r13	; 0x8001c1 <HX711_ptr+0x1>
    2016:	c0 92 c0 01 	sts	0x01C0, r12	; 0x8001c0 <HX711_ptr>
	
	/***INICIALIZE OBJECTS***/
	F = EXPLODEenable();
    201a:	ce 01       	movw	r24, r28
    201c:	83 5a       	subi	r24, 0xA3	; 163
    201e:	9f 4f       	sbci	r25, 0xFF	; 255
    2020:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <EXPLODEenable>
    2024:	84 e1       	ldi	r24, 0x14	; 20
    2026:	fe 01       	movw	r30, r28
    2028:	e3 5a       	subi	r30, 0xA3	; 163
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	ad e2       	ldi	r26, 0x2D	; 45
    202e:	b2 e0       	ldi	r27, 0x02	; 2
    2030:	01 90       	ld	r0, Z+
    2032:	0d 92       	st	X+, r0
    2034:	8a 95       	dec	r24
    2036:	e1 f7       	brne	.-8      	; 0x2030 <main+0x42>
	FUNC function = FUNCenable();
    2038:	ce 01       	movw	r24, r28
    203a:	01 96       	adiw	r24, 0x01	; 1
    203c:	02 da       	rcall	.-3068   	; 0x1442 <FUNCenable>
    203e:	2d 96       	adiw	r28, 0x0d	; 13
    2040:	8e ad       	ldd	r24, Y+62	; 0x3e
    2042:	9f ad       	ldd	r25, Y+63	; 0x3f
    2044:	2d 97       	sbiw	r28, 0x0d	; 13
    2046:	c4 54       	subi	r28, 0x44	; 68
    2048:	df 4f       	sbci	r29, 0xFF	; 255
    204a:	99 83       	std	Y+1, r25	; 0x01
    204c:	88 83       	st	Y, r24
    204e:	cc 5b       	subi	r28, 0xBC	; 188
    2050:	d0 40       	sbci	r29, 0x00	; 0
	lcd0 = LCD0enable(&DDRA,&PINA,&PORTA);
    2052:	2b e3       	ldi	r18, 0x3B	; 59
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	49 e3       	ldi	r20, 0x39	; 57
    2058:	50 e0       	ldi	r21, 0x00	; 0
    205a:	6a e3       	ldi	r22, 0x3A	; 58
    205c:	70 e0       	ldi	r23, 0x00	; 0
    205e:	ce 01       	movw	r24, r28
    2060:	8f 58       	subi	r24, 0x8F	; 143
    2062:	9f 4f       	sbci	r25, 0xFF	; 255
    2064:	b0 dd       	rcall	.-1184   	; 0x1bc6 <LCD0enable>
    2066:	86 e1       	ldi	r24, 0x16	; 22
    2068:	fe 01       	movw	r30, r28
    206a:	ef 58       	subi	r30, 0x8F	; 143
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	a2 ee       	ldi	r26, 0xE2	; 226
    2070:	b1 e0       	ldi	r27, 0x01	; 1
    2072:	01 90       	ld	r0, Z+
    2074:	0d 92       	st	X+, r0
    2076:	8a 95       	dec	r24
    2078:	e1 f7       	brne	.-8      	; 0x2072 <main+0x84>
	timer0 = TIMER_COUNTER0enable(2,2); //2,2
    207a:	42 e0       	ldi	r20, 0x02	; 2
    207c:	62 e0       	ldi	r22, 0x02	; 2
    207e:	ce 01       	movw	r24, r28
    2080:	83 5a       	subi	r24, 0xA3	; 163
    2082:	9f 4f       	sbci	r25, 0xFF	; 255
    2084:	0e 94 be 03 	call	0x77c	; 0x77c <TIMER_COUNTER0enable>
    2088:	80 e1       	ldi	r24, 0x10	; 16
    208a:	fe 01       	movw	r30, r28
    208c:	e3 5a       	subi	r30, 0xA3	; 163
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	aa e7       	ldi	r26, 0x7A	; 122
    2092:	b1 e0       	ldi	r27, 0x01	; 1
    2094:	01 90       	ld	r0, Z+
    2096:	0d 92       	st	X+, r0
    2098:	8a 95       	dec	r24
    209a:	e1 f7       	brne	.-8      	; 0x2094 <main+0xa6>
	TIMER_COUNTER1 timer1 = TIMER_COUNTER1enable(4,2); //4,2
    209c:	42 e0       	ldi	r20, 0x02	; 2
    209e:	64 e0       	ldi	r22, 0x04	; 4
    20a0:	ce 01       	movw	r24, r28
    20a2:	83 5b       	subi	r24, 0xB3	; 179
    20a4:	9f 4f       	sbci	r25, 0xFF	; 255
    20a6:	0e 94 02 04 	call	0x804	; 0x804 <TIMER_COUNTER1enable>
	hx = HX711enable(&DDRF, &PINF, &PORTF, 6, 7); //6,7
    20aa:	0f 2e       	mov	r0, r31
    20ac:	f7 e0       	ldi	r31, 0x07	; 7
    20ae:	ef 2e       	mov	r14, r31
    20b0:	f0 2d       	mov	r31, r0
    20b2:	06 e0       	ldi	r16, 0x06	; 6
    20b4:	22 e6       	ldi	r18, 0x62	; 98
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e2       	ldi	r20, 0x20	; 32
    20ba:	50 e0       	ldi	r21, 0x00	; 0
    20bc:	61 e6       	ldi	r22, 0x61	; 97
    20be:	70 e0       	ldi	r23, 0x00	; 0
    20c0:	ce 01       	movw	r24, r28
    20c2:	89 57       	subi	r24, 0x79	; 121
    20c4:	9f 4f       	sbci	r25, 0xFF	; 255
    20c6:	fe de       	rcall	.-516    	; 0x1ec4 <HX711enable>
    20c8:	85 e3       	ldi	r24, 0x35	; 53
    20ca:	fe 01       	movw	r30, r28
    20cc:	e9 57       	subi	r30, 0x79	; 121
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	a8 ef       	ldi	r26, 0xF8	; 248
    20d2:	b1 e0       	ldi	r27, 0x01	; 1
    20d4:	01 90       	ld	r0, Z+
    20d6:	0d 92       	st	X+, r0
    20d8:	8a 95       	dec	r24
    20da:	e1 f7       	brne	.-8      	; 0x20d4 <main+0xe6>
	eprom = EEPROMenable();
    20dc:	ce 01       	movw	r24, r28
    20de:	83 5a       	subi	r24, 0xA3	; 163
    20e0:	9f 4f       	sbci	r25, 0xFF	; 255
    20e2:	0e 94 6a 05 	call	0xad4	; 0xad4 <EEPROMenable>
    20e6:	8e e1       	ldi	r24, 0x1E	; 30
    20e8:	fe 01       	movw	r30, r28
    20ea:	e3 5a       	subi	r30, 0xA3	; 163
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	aa e8       	ldi	r26, 0x8A	; 138
    20f0:	b1 e0       	ldi	r27, 0x01	; 1
    20f2:	01 90       	ld	r0, Z+
    20f4:	0d 92       	st	X+, r0
    20f6:	8a 95       	dec	r24
    20f8:	e1 f7       	brne	.-8      	; 0x20f2 <main+0x104>
	intx = INTERRUPTenable();
    20fa:	0e 94 45 02 	call	0x48a	; 0x48a <INTERRUPTenable>
    20fe:	08 ea       	ldi	r16, 0xA8	; 168
    2100:	11 e0       	ldi	r17, 0x01	; 1
    2102:	d8 01       	movw	r26, r16
    2104:	2c 93       	st	X, r18
    2106:	11 96       	adiw	r26, 0x01	; 1
    2108:	3c 93       	st	X, r19
    210a:	11 97       	sbiw	r26, 0x01	; 1
    210c:	12 96       	adiw	r26, 0x02	; 2
    210e:	4c 93       	st	X, r20
    2110:	12 97       	sbiw	r26, 0x02	; 2
    2112:	13 96       	adiw	r26, 0x03	; 3
    2114:	5c 93       	st	X, r21
    2116:	13 97       	sbiw	r26, 0x03	; 3
    2118:	14 96       	adiw	r26, 0x04	; 4
    211a:	6c 93       	st	X, r22
    211c:	14 97       	sbiw	r26, 0x04	; 4
    211e:	15 96       	adiw	r26, 0x05	; 5
    2120:	7c 93       	st	X, r23
    2122:	15 97       	sbiw	r26, 0x05	; 5
    2124:	16 96       	adiw	r26, 0x06	; 6
    2126:	8c 93       	st	X, r24
    2128:	16 97       	sbiw	r26, 0x06	; 6
    212a:	17 96       	adiw	r26, 0x07	; 7
    212c:	9c 93       	st	X, r25
	
	float value=0;
	float publish=0;
	
	// Get default values to buss memory
	HX711_data.offset_32 = hx.get_cal(&hx)->offset_32;
    212e:	0f 2e       	mov	r0, r31
    2130:	f8 ef       	ldi	r31, 0xF8	; 248
    2132:	ef 2e       	mov	r14, r31
    2134:	f1 e0       	ldi	r31, 0x01	; 1
    2136:	ff 2e       	mov	r15, r31
    2138:	f0 2d       	mov	r31, r0
    213a:	d7 01       	movw	r26, r14
    213c:	d3 96       	adiw	r26, 0x33	; 51
    213e:	ed 91       	ld	r30, X+
    2140:	fc 91       	ld	r31, X
    2142:	d4 97       	sbiw	r26, 0x34	; 52
    2144:	c7 01       	movw	r24, r14
    2146:	09 95       	icall
    2148:	fc 01       	movw	r30, r24
    214a:	80 81       	ld	r24, Z
    214c:	91 81       	ldd	r25, Z+1	; 0x01
    214e:	a2 81       	ldd	r26, Z+2	; 0x02
    2150:	b3 81       	ldd	r27, Z+3	; 0x03
    2152:	f6 01       	movw	r30, r12
    2154:	80 83       	st	Z, r24
    2156:	91 83       	std	Z+1, r25	; 0x01
    2158:	a2 83       	std	Z+2, r26	; 0x02
    215a:	b3 83       	std	Z+3, r27	; 0x03
	HX711_data.offset_64 = hx.get_cal(&hx)->offset_64;
    215c:	d7 01       	movw	r26, r14
    215e:	d3 96       	adiw	r26, 0x33	; 51
    2160:	ed 91       	ld	r30, X+
    2162:	fc 91       	ld	r31, X
    2164:	d4 97       	sbiw	r26, 0x34	; 52
    2166:	c7 01       	movw	r24, r14
    2168:	09 95       	icall
    216a:	fc 01       	movw	r30, r24
    216c:	84 81       	ldd	r24, Z+4	; 0x04
    216e:	95 81       	ldd	r25, Z+5	; 0x05
    2170:	a6 81       	ldd	r26, Z+6	; 0x06
    2172:	b7 81       	ldd	r27, Z+7	; 0x07
    2174:	f6 01       	movw	r30, r12
    2176:	84 83       	std	Z+4, r24	; 0x04
    2178:	95 83       	std	Z+5, r25	; 0x05
    217a:	a6 83       	std	Z+6, r26	; 0x06
    217c:	b7 83       	std	Z+7, r27	; 0x07
	HX711_data.offset_128 = hx.get_cal(&hx)->offset_128;
    217e:	d7 01       	movw	r26, r14
    2180:	d3 96       	adiw	r26, 0x33	; 51
    2182:	ed 91       	ld	r30, X+
    2184:	fc 91       	ld	r31, X
    2186:	d4 97       	sbiw	r26, 0x34	; 52
    2188:	c7 01       	movw	r24, r14
    218a:	09 95       	icall
    218c:	fc 01       	movw	r30, r24
    218e:	80 85       	ldd	r24, Z+8	; 0x08
    2190:	91 85       	ldd	r25, Z+9	; 0x09
    2192:	a2 85       	ldd	r26, Z+10	; 0x0a
    2194:	b3 85       	ldd	r27, Z+11	; 0x0b
    2196:	f6 01       	movw	r30, r12
    2198:	80 87       	std	Z+8, r24	; 0x08
    219a:	91 87       	std	Z+9, r25	; 0x09
    219c:	a2 87       	std	Z+10, r26	; 0x0a
    219e:	b3 87       	std	Z+11, r27	; 0x0b
	HX711_data.divfactor_32 = hx.get_cal(&hx)->divfactor_32;
    21a0:	d7 01       	movw	r26, r14
    21a2:	d3 96       	adiw	r26, 0x33	; 51
    21a4:	ed 91       	ld	r30, X+
    21a6:	fc 91       	ld	r31, X
    21a8:	d4 97       	sbiw	r26, 0x34	; 52
    21aa:	c7 01       	movw	r24, r14
    21ac:	09 95       	icall
    21ae:	fc 01       	movw	r30, r24
    21b0:	84 85       	ldd	r24, Z+12	; 0x0c
    21b2:	d6 01       	movw	r26, r12
    21b4:	1c 96       	adiw	r26, 0x0c	; 12
    21b6:	8c 93       	st	X, r24
	HX711_data.divfactor_64 = hx.get_cal(&hx)->divfactor_64;
    21b8:	d7 01       	movw	r26, r14
    21ba:	d3 96       	adiw	r26, 0x33	; 51
    21bc:	ed 91       	ld	r30, X+
    21be:	fc 91       	ld	r31, X
    21c0:	d4 97       	sbiw	r26, 0x34	; 52
    21c2:	c7 01       	movw	r24, r14
    21c4:	09 95       	icall
    21c6:	fc 01       	movw	r30, r24
    21c8:	85 85       	ldd	r24, Z+13	; 0x0d
    21ca:	d6 01       	movw	r26, r12
    21cc:	1d 96       	adiw	r26, 0x0d	; 13
    21ce:	8c 93       	st	X, r24
	HX711_data.divfactor_128 = hx.get_cal(&hx)->divfactor_128;
    21d0:	d7 01       	movw	r26, r14
    21d2:	d3 96       	adiw	r26, 0x33	; 51
    21d4:	ed 91       	ld	r30, X+
    21d6:	fc 91       	ld	r31, X
    21d8:	d4 97       	sbiw	r26, 0x34	; 52
    21da:	c7 01       	movw	r24, r14
    21dc:	09 95       	icall
    21de:	fc 01       	movw	r30, r24
    21e0:	86 85       	ldd	r24, Z+14	; 0x0e
    21e2:	d6 01       	movw	r26, r12
    21e4:	1e 96       	adiw	r26, 0x0e	; 14
    21e6:	8c 93       	st	X, r24
	HX711_data.status = hx.get_cal(&hx)->status;
    21e8:	d7 01       	movw	r26, r14
    21ea:	d3 96       	adiw	r26, 0x33	; 51
    21ec:	ed 91       	ld	r30, X+
    21ee:	fc 91       	ld	r31, X
    21f0:	d4 97       	sbiw	r26, 0x34	; 52
    21f2:	c7 01       	movw	r24, r14
    21f4:	09 95       	icall
    21f6:	fc 01       	movw	r30, r24
    21f8:	87 85       	ldd	r24, Z+15	; 0x0f
    21fa:	d6 01       	movw	r26, r12
    21fc:	1f 96       	adiw	r26, 0x0f	; 15
    21fe:	8c 93       	st	X, r24
	
	/***Parameters timers***/
	timer0.compoutmode(1); // troubleshooting blinking PORTB 5
    2200:	0f 2e       	mov	r0, r31
    2202:	fa e7       	ldi	r31, 0x7A	; 122
    2204:	cf 2e       	mov	r12, r31
    2206:	f1 e0       	ldi	r31, 0x01	; 1
    2208:	df 2e       	mov	r13, r31
    220a:	f0 2d       	mov	r31, r0
    220c:	d6 01       	movw	r26, r12
    220e:	ed 91       	ld	r30, X+
    2210:	fc 91       	ld	r31, X
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	09 95       	icall
	/***79 and 8  -> 80 us***/
	timer0.compare(60); // 8 -> 79 -> 80 us, fine tunned = 8 -> 60 -> 30.4us
    2216:	d6 01       	movw	r26, r12
    2218:	16 96       	adiw	r26, 0x06	; 6
    221a:	ed 91       	ld	r30, X+
    221c:	fc 91       	ld	r31, X
    221e:	17 97       	sbiw	r26, 0x07	; 7
    2220:	8c e3       	ldi	r24, 0x3C	; 60
    2222:	09 95       	icall
	timer0.start(8); // 1 -> 32 us , 8 -> 256 us , 32 64 128 256 1024
    2224:	d6 01       	movw	r26, r12
    2226:	1c 96       	adiw	r26, 0x0c	; 12
    2228:	ed 91       	ld	r30, X+
    222a:	fc 91       	ld	r31, X
    222c:	1d 97       	sbiw	r26, 0x0d	; 13
    222e:	88 e0       	ldi	r24, 0x08	; 8
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	09 95       	icall
	
	// to be used to jump menu for calibration in progress
	timer1.compoutmodeA(1); // troubleshooting blinking PORTB 6
    2234:	2f 96       	adiw	r28, 0x0f	; 15
    2236:	ee ad       	ldd	r30, Y+62	; 0x3e
    2238:	ff ad       	ldd	r31, Y+63	; 0x3f
    223a:	2f 97       	sbiw	r28, 0x0f	; 15
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	09 95       	icall
	timer1.compareA(62800); // Freq = 256 -> 62800 -> 2 s
    2240:	65 96       	adiw	r28, 0x15	; 21
    2242:	ee ad       	ldd	r30, Y+62	; 0x3e
    2244:	ff ad       	ldd	r31, Y+63	; 0x3f
    2246:	65 97       	sbiw	r28, 0x15	; 21
    2248:	80 e5       	ldi	r24, 0x50	; 80
    224a:	95 ef       	ldi	r25, 0xF5	; 245
    224c:	09 95       	icall
	timer1.start(256);
    224e:	6b 96       	adiw	r28, 0x1b	; 27
    2250:	ee ad       	ldd	r30, Y+62	; 0x3e
    2252:	ff ad       	ldd	r31, Y+63	; 0x3f
    2254:	6b 97       	sbiw	r28, 0x1b	; 27
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	91 e0       	ldi	r25, 0x01	; 1
    225a:	09 95       	icall
	
	intx.set(1,0);
    225c:	d8 01       	movw	r26, r16
    225e:	ed 91       	ld	r30, X+
    2260:	fc 91       	ld	r31, X
    2262:	60 e0       	ldi	r22, 0x00	; 0
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	09 95       	icall
	
	// HX711 Gain
	hx.set_amplify(&hx, 64); // 32 64 128
    2268:	d7 01       	movw	r26, r14
    226a:	99 96       	adiw	r26, 0x29	; 41
    226c:	ed 91       	ld	r30, X+
    226e:	fc 91       	ld	r31, X
    2270:	9a 97       	sbiw	r26, 0x2a	; 42
    2272:	60 e4       	ldi	r22, 0x40	; 64
    2274:	c7 01       	movw	r24, r14
    2276:	09 95       	icall
	
	//Get stored calibration values and put them to effect
	eprom.read_block(HX711_ptr, (const void*) ZERO, sizeblock);
    2278:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <eprom+0x18>
    227c:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <eprom+0x19>
    2280:	40 e1       	ldi	r20, 0x10	; 16
    2282:	50 e0       	ldi	r21, 0x00	; 0
    2284:	60 e0       	ldi	r22, 0x00	; 0
    2286:	70 e0       	ldi	r23, 0x00	; 0
    2288:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <HX711_ptr>
    228c:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    2290:	09 95       	icall
	if(HX711_ptr->status == 1){
    2292:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    2296:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    229a:	87 85       	ldd	r24, Z+15	; 0x0f
    229c:	81 30       	cpi	r24, 0x01	; 1
    229e:	09 f0       	breq	.+2      	; 0x22a2 <main+0x2b4>
    22a0:	70 c0       	rjmp	.+224    	; 0x2382 <main+0x394>
		//Load stored value 
		hx.get_cal(&hx)->offset_32 = HX711_ptr->offset_32;
    22a2:	d7 01       	movw	r26, r14
    22a4:	d3 96       	adiw	r26, 0x33	; 51
    22a6:	ed 91       	ld	r30, X+
    22a8:	fc 91       	ld	r31, X
    22aa:	d4 97       	sbiw	r26, 0x34	; 52
    22ac:	c7 01       	movw	r24, r14
    22ae:	09 95       	icall
    22b0:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    22b4:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    22b8:	40 81       	ld	r20, Z
    22ba:	51 81       	ldd	r21, Z+1	; 0x01
    22bc:	62 81       	ldd	r22, Z+2	; 0x02
    22be:	73 81       	ldd	r23, Z+3	; 0x03
    22c0:	fc 01       	movw	r30, r24
    22c2:	40 83       	st	Z, r20
    22c4:	51 83       	std	Z+1, r21	; 0x01
    22c6:	62 83       	std	Z+2, r22	; 0x02
    22c8:	73 83       	std	Z+3, r23	; 0x03
		hx.get_cal(&hx)->offset_64 = HX711_ptr->offset_64;
    22ca:	d7 01       	movw	r26, r14
    22cc:	d3 96       	adiw	r26, 0x33	; 51
    22ce:	ed 91       	ld	r30, X+
    22d0:	fc 91       	ld	r31, X
    22d2:	d4 97       	sbiw	r26, 0x34	; 52
    22d4:	c7 01       	movw	r24, r14
    22d6:	09 95       	icall
    22d8:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    22dc:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    22e0:	44 81       	ldd	r20, Z+4	; 0x04
    22e2:	55 81       	ldd	r21, Z+5	; 0x05
    22e4:	66 81       	ldd	r22, Z+6	; 0x06
    22e6:	77 81       	ldd	r23, Z+7	; 0x07
    22e8:	fc 01       	movw	r30, r24
    22ea:	44 83       	std	Z+4, r20	; 0x04
    22ec:	55 83       	std	Z+5, r21	; 0x05
    22ee:	66 83       	std	Z+6, r22	; 0x06
    22f0:	77 83       	std	Z+7, r23	; 0x07
		hx.get_cal(&hx)->offset_128 = HX711_ptr->offset_128;
    22f2:	d7 01       	movw	r26, r14
    22f4:	d3 96       	adiw	r26, 0x33	; 51
    22f6:	ed 91       	ld	r30, X+
    22f8:	fc 91       	ld	r31, X
    22fa:	d4 97       	sbiw	r26, 0x34	; 52
    22fc:	c7 01       	movw	r24, r14
    22fe:	09 95       	icall
    2300:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    2304:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    2308:	40 85       	ldd	r20, Z+8	; 0x08
    230a:	51 85       	ldd	r21, Z+9	; 0x09
    230c:	62 85       	ldd	r22, Z+10	; 0x0a
    230e:	73 85       	ldd	r23, Z+11	; 0x0b
    2310:	fc 01       	movw	r30, r24
    2312:	40 87       	std	Z+8, r20	; 0x08
    2314:	51 87       	std	Z+9, r21	; 0x09
    2316:	62 87       	std	Z+10, r22	; 0x0a
    2318:	73 87       	std	Z+11, r23	; 0x0b
		hx.get_cal(&hx)->divfactor_32 = HX711_ptr->divfactor_32;
    231a:	d7 01       	movw	r26, r14
    231c:	d3 96       	adiw	r26, 0x33	; 51
    231e:	ed 91       	ld	r30, X+
    2320:	fc 91       	ld	r31, X
    2322:	d4 97       	sbiw	r26, 0x34	; 52
    2324:	c7 01       	movw	r24, r14
    2326:	09 95       	icall
    2328:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    232c:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    2330:	24 85       	ldd	r18, Z+12	; 0x0c
    2332:	fc 01       	movw	r30, r24
    2334:	24 87       	std	Z+12, r18	; 0x0c
		hx.get_cal(&hx)->divfactor_64 = HX711_ptr->divfactor_64;
    2336:	d7 01       	movw	r26, r14
    2338:	d3 96       	adiw	r26, 0x33	; 51
    233a:	ed 91       	ld	r30, X+
    233c:	fc 91       	ld	r31, X
    233e:	d4 97       	sbiw	r26, 0x34	; 52
    2340:	c7 01       	movw	r24, r14
    2342:	09 95       	icall
    2344:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    2348:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    234c:	25 85       	ldd	r18, Z+13	; 0x0d
    234e:	fc 01       	movw	r30, r24
    2350:	25 87       	std	Z+13, r18	; 0x0d
		hx.get_cal(&hx)->divfactor_128 = HX711_ptr->divfactor_128;
    2352:	d7 01       	movw	r26, r14
    2354:	d3 96       	adiw	r26, 0x33	; 51
    2356:	ed 91       	ld	r30, X+
    2358:	fc 91       	ld	r31, X
    235a:	d4 97       	sbiw	r26, 0x34	; 52
    235c:	c7 01       	movw	r24, r14
    235e:	09 95       	icall
    2360:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    2364:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    2368:	26 85       	ldd	r18, Z+14	; 0x0e
    236a:	fc 01       	movw	r30, r24
    236c:	26 87       	std	Z+14, r18	; 0x0e
		hx.get_cal(&hx)->status=ZERO;
    236e:	d7 01       	movw	r26, r14
    2370:	d3 96       	adiw	r26, 0x33	; 51
    2372:	ed 91       	ld	r30, X+
    2374:	fc 91       	ld	r31, X
    2376:	d4 97       	sbiw	r26, 0x34	; 52
    2378:	c7 01       	movw	r24, r14
    237a:	09 95       	icall
    237c:	fc 01       	movw	r30, r24
    237e:	17 86       	std	Z+15, r1	; 0x0f
		PORTC &= ~(ONE << 5); // troubleshooting
    2380:	ad 98       	cbi	0x15, 5	; 21
	//lcd0.string_size(function.ftoa(HX711_data.status, result, ZERO), 13);
	//lcd0.string_size(function.ftoa(hx.get_cal(&hx)->offset_64, result, ZERO), 13);
	/***********************************************************************************************/
	while(TRUE){
		/******PREAMBLE******/
		lcd0.reboot();
    2382:	0f 2e       	mov	r0, r31
    2384:	f2 ee       	ldi	r31, 0xE2	; 226
    2386:	ef 2e       	mov	r14, r31
    2388:	f1 e0       	ldi	r31, 0x01	; 1
    238a:	ff 2e       	mov	r15, r31
    238c:	f0 2d       	mov	r31, r0
		F.boot(&F,PINF);
    238e:	0f 2e       	mov	r0, r31
    2390:	fd e2       	ldi	r31, 0x2D	; 45
    2392:	cf 2e       	mov	r12, r31
    2394:	f2 e0       	ldi	r31, 0x02	; 2
    2396:	df 2e       	mov	r13, r31
    2398:	f0 2d       	mov	r31, r0
		hx.query(&hx);
    239a:	08 ef       	ldi	r16, 0xF8	; 248
    239c:	11 e0       	ldi	r17, 0x01	; 1
				
				
				
				// Jump Menus signal
				if(signal == 2){
					Menu = '1';
    239e:	0f 2e       	mov	r0, r31
    23a0:	f1 e3       	ldi	r31, 0x31	; 49
    23a2:	3f 2e       	mov	r3, r31
    23a4:	f0 2d       	mov	r31, r0
				
				//lcd0.gotoxy(1,0); // for troubleshooting
				//lcd0.string_size(function.ftoa(hx.read_raw(&hx), result, ZERO), 13);
				
				if(F.hl(&F) & ONE){ // calibrate offset by pressing button 1
					HX711_data.offset_32 = tmp;
    23a6:	0f 2e       	mov	r0, r31
    23a8:	f0 eb       	ldi	r31, 0xB0	; 176
    23aa:	8f 2e       	mov	r8, r31
    23ac:	f1 e0       	ldi	r31, 0x01	; 1
    23ae:	9f 2e       	mov	r9, r31
    23b0:	f0 2d       	mov	r31, r0
					HX711_data.offset_64 = tmp;
					HX711_data.offset_128 = tmp;
					HX711_data.divfactor_32 = hx.get_cal(&hx)->divfactor_32;
					HX711_data.divfactor_64 = hx.get_cal(&hx)->divfactor_64;
					HX711_data.divfactor_128 = hx.get_cal(&hx)->divfactor_128;
					HX711_data.status = ONE;
    23b2:	22 24       	eor	r2, r2
    23b4:	23 94       	inc	r2
	//lcd0.string_size(function.ftoa(HX711_data.status, result, ZERO), 13);
	//lcd0.string_size(function.ftoa(hx.get_cal(&hx)->offset_64, result, ZERO), 13);
	/***********************************************************************************************/
	while(TRUE){
		/******PREAMBLE******/
		lcd0.reboot();
    23b6:	d7 01       	movw	r26, r14
    23b8:	54 96       	adiw	r26, 0x14	; 20
    23ba:	ed 91       	ld	r30, X+
    23bc:	fc 91       	ld	r31, X
    23be:	55 97       	sbiw	r26, 0x15	; 21
    23c0:	09 95       	icall
		F.boot(&F,PINF);
    23c2:	60 b1       	in	r22, 0x00	; 0
    23c4:	d6 01       	movw	r26, r12
    23c6:	14 96       	adiw	r26, 0x04	; 4
    23c8:	ed 91       	ld	r30, X+
    23ca:	fc 91       	ld	r31, X
    23cc:	15 97       	sbiw	r26, 0x05	; 5
    23ce:	c6 01       	movw	r24, r12
    23d0:	09 95       	icall
		hx.query(&hx);
    23d2:	d8 01       	movw	r26, r16
    23d4:	9b 96       	adiw	r26, 0x2b	; 43
    23d6:	ed 91       	ld	r30, X+
    23d8:	fc 91       	ld	r31, X
    23da:	9c 97       	sbiw	r26, 0x2c	; 44
    23dc:	c8 01       	movw	r24, r16
    23de:	09 95       	icall
		//if(hx.query(&hx)){ // one shot
			//timer0.start(8);
			//hx.read_raw(&hx);
		//}
		/************INPUT***********/
		tmp = hx.raw_average(&hx, average_n); // average_n  25 or 50, smaller means faster or more readings
    23e0:	d8 01       	movw	r26, r16
    23e2:	9f 96       	adiw	r26, 0x2f	; 47
    23e4:	ed 91       	ld	r30, X+
    23e6:	fc 91       	ld	r31, X
    23e8:	d0 97       	sbiw	r26, 0x30	; 48
    23ea:	68 e1       	ldi	r22, 0x18	; 24
    23ec:	c8 01       	movw	r24, r16
    23ee:	09 95       	icall
    23f0:	60 93 76 01 	sts	0x0176, r22	; 0x800176 <tmp>
    23f4:	70 93 77 01 	sts	0x0177, r23	; 0x800177 <tmp+0x1>
    23f8:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <tmp+0x2>
    23fc:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <tmp+0x3>
		/****************************/
		switch(Menu){
    2400:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2404:	82 33       	cpi	r24, 0x32	; 50
    2406:	09 f4       	brne	.+2      	; 0x240a <main+0x41c>
    2408:	87 c1       	rjmp	.+782    	; 0x2718 <main+0x72a>
    240a:	83 33       	cpi	r24, 0x33	; 51
    240c:	09 f4       	brne	.+2      	; 0x2410 <main+0x422>
    240e:	a5 c1       	rjmp	.+842    	; 0x275a <main+0x76c>
    2410:	81 33       	cpi	r24, 0x31	; 49
    2412:	09 f0       	breq	.+2      	; 0x2416 <main+0x428>
    2414:	b6 c1       	rjmp	.+876    	; 0x2782 <main+0x794>
			/***MENU 1***/
			case '1': // Main Program Menu
				lcd0.gotoxy(0,3); //TITLE
    2416:	d7 01       	movw	r26, r14
    2418:	52 96       	adiw	r26, 0x12	; 18
    241a:	ed 91       	ld	r30, X+
    241c:	fc 91       	ld	r31, X
    241e:	53 97       	sbiw	r26, 0x13	; 19
    2420:	63 e0       	ldi	r22, 0x03	; 3
    2422:	70 e0       	ldi	r23, 0x00	; 0
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	09 95       	icall
				lcd0.string_size("Weight Scale", 12); //TITLE
    242a:	d7 01       	movw	r26, r14
    242c:	1c 96       	adiw	r26, 0x0c	; 12
    242e:	ed 91       	ld	r30, X+
    2430:	fc 91       	ld	r31, X
    2432:	1d 97       	sbiw	r26, 0x0d	; 13
    2434:	6c e0       	ldi	r22, 0x0C	; 12
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	91 e0       	ldi	r25, 0x01	; 1
    243a:	09 95       	icall
				
				//lcd0.gotoxy(1,0); // for troubleshooting
				//lcd0.string_size(function.ftoa(hx.read_raw(&hx), result, ZERO), 13);
				
				if(F.hl(&F) & ONE){ // calibrate offset by pressing button 1
    243c:	d6 01       	movw	r26, r12
    243e:	1e 96       	adiw	r26, 0x0e	; 14
    2440:	ed 91       	ld	r30, X+
    2442:	fc 91       	ld	r31, X
    2444:	1f 97       	sbiw	r26, 0x0f	; 15
    2446:	c6 01       	movw	r24, r12
    2448:	09 95       	icall
    244a:	80 ff       	sbrs	r24, 0
    244c:	bf c0       	rjmp	.+382    	; 0x25cc <main+0x5de>
					HX711_data.offset_32 = tmp;
    244e:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <tmp>
    2452:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <tmp+0x1>
    2456:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <tmp+0x2>
    245a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <tmp+0x3>
    245e:	5c d3       	rcall	.+1720   	; 0x2b18 <__fixsfsi>
    2460:	f4 01       	movw	r30, r8
    2462:	60 83       	st	Z, r22
    2464:	71 83       	std	Z+1, r23	; 0x01
    2466:	82 83       	std	Z+2, r24	; 0x02
    2468:	93 83       	std	Z+3, r25	; 0x03
					HX711_data.offset_64 = tmp;
    246a:	64 83       	std	Z+4, r22	; 0x04
    246c:	75 83       	std	Z+5, r23	; 0x05
    246e:	86 83       	std	Z+6, r24	; 0x06
    2470:	97 83       	std	Z+7, r25	; 0x07
					HX711_data.offset_128 = tmp;
    2472:	60 87       	std	Z+8, r22	; 0x08
    2474:	71 87       	std	Z+9, r23	; 0x09
    2476:	82 87       	std	Z+10, r24	; 0x0a
    2478:	93 87       	std	Z+11, r25	; 0x0b
					HX711_data.divfactor_32 = hx.get_cal(&hx)->divfactor_32;
    247a:	d8 01       	movw	r26, r16
    247c:	d3 96       	adiw	r26, 0x33	; 51
    247e:	ed 91       	ld	r30, X+
    2480:	fc 91       	ld	r31, X
    2482:	d4 97       	sbiw	r26, 0x34	; 52
    2484:	c8 01       	movw	r24, r16
    2486:	09 95       	icall
    2488:	fc 01       	movw	r30, r24
    248a:	84 85       	ldd	r24, Z+12	; 0x0c
    248c:	d4 01       	movw	r26, r8
    248e:	1c 96       	adiw	r26, 0x0c	; 12
    2490:	8c 93       	st	X, r24
					HX711_data.divfactor_64 = hx.get_cal(&hx)->divfactor_64;
    2492:	d8 01       	movw	r26, r16
    2494:	d3 96       	adiw	r26, 0x33	; 51
    2496:	ed 91       	ld	r30, X+
    2498:	fc 91       	ld	r31, X
    249a:	d4 97       	sbiw	r26, 0x34	; 52
    249c:	c8 01       	movw	r24, r16
    249e:	09 95       	icall
    24a0:	fc 01       	movw	r30, r24
    24a2:	85 85       	ldd	r24, Z+13	; 0x0d
    24a4:	d4 01       	movw	r26, r8
    24a6:	1d 96       	adiw	r26, 0x0d	; 13
    24a8:	8c 93       	st	X, r24
					HX711_data.divfactor_128 = hx.get_cal(&hx)->divfactor_128;
    24aa:	d8 01       	movw	r26, r16
    24ac:	d3 96       	adiw	r26, 0x33	; 51
    24ae:	ed 91       	ld	r30, X+
    24b0:	fc 91       	ld	r31, X
    24b2:	d4 97       	sbiw	r26, 0x34	; 52
    24b4:	c8 01       	movw	r24, r16
    24b6:	09 95       	icall
    24b8:	fc 01       	movw	r30, r24
    24ba:	86 85       	ldd	r24, Z+14	; 0x0e
    24bc:	d4 01       	movw	r26, r8
    24be:	1e 96       	adiw	r26, 0x0e	; 14
    24c0:	8c 93       	st	X, r24
    24c2:	1e 97       	sbiw	r26, 0x0e	; 14
					HX711_data.status = ONE;
    24c4:	1f 96       	adiw	r26, 0x0f	; 15
    24c6:	2c 92       	st	X, r2
					eprom.update_block(HX711_ptr, (void*) ZERO, sizeblock);
    24c8:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <eprom+0x1c>
    24cc:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <eprom+0x1d>
    24d0:	40 e1       	ldi	r20, 0x10	; 16
    24d2:	50 e0       	ldi	r21, 0x00	; 0
    24d4:	60 e0       	ldi	r22, 0x00	; 0
    24d6:	70 e0       	ldi	r23, 0x00	; 0
    24d8:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <HX711_ptr>
    24dc:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    24e0:	09 95       	icall
					hx.get_cal(&hx)->offset_32 = HX711_ptr->offset_32;
    24e2:	d8 01       	movw	r26, r16
    24e4:	d3 96       	adiw	r26, 0x33	; 51
    24e6:	ed 91       	ld	r30, X+
    24e8:	fc 91       	ld	r31, X
    24ea:	d4 97       	sbiw	r26, 0x34	; 52
    24ec:	c8 01       	movw	r24, r16
    24ee:	09 95       	icall
    24f0:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    24f4:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    24f8:	40 81       	ld	r20, Z
    24fa:	51 81       	ldd	r21, Z+1	; 0x01
    24fc:	62 81       	ldd	r22, Z+2	; 0x02
    24fe:	73 81       	ldd	r23, Z+3	; 0x03
    2500:	fc 01       	movw	r30, r24
    2502:	40 83       	st	Z, r20
    2504:	51 83       	std	Z+1, r21	; 0x01
    2506:	62 83       	std	Z+2, r22	; 0x02
    2508:	73 83       	std	Z+3, r23	; 0x03
					hx.get_cal(&hx)->offset_64 = HX711_ptr->offset_64;
    250a:	d8 01       	movw	r26, r16
    250c:	d3 96       	adiw	r26, 0x33	; 51
    250e:	ed 91       	ld	r30, X+
    2510:	fc 91       	ld	r31, X
    2512:	d4 97       	sbiw	r26, 0x34	; 52
    2514:	c8 01       	movw	r24, r16
    2516:	09 95       	icall
    2518:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    251c:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    2520:	44 81       	ldd	r20, Z+4	; 0x04
    2522:	55 81       	ldd	r21, Z+5	; 0x05
    2524:	66 81       	ldd	r22, Z+6	; 0x06
    2526:	77 81       	ldd	r23, Z+7	; 0x07
    2528:	fc 01       	movw	r30, r24
    252a:	44 83       	std	Z+4, r20	; 0x04
    252c:	55 83       	std	Z+5, r21	; 0x05
    252e:	66 83       	std	Z+6, r22	; 0x06
    2530:	77 83       	std	Z+7, r23	; 0x07
					hx.get_cal(&hx)->offset_128 = HX711_ptr->offset_128;
    2532:	d8 01       	movw	r26, r16
    2534:	d3 96       	adiw	r26, 0x33	; 51
    2536:	ed 91       	ld	r30, X+
    2538:	fc 91       	ld	r31, X
    253a:	d4 97       	sbiw	r26, 0x34	; 52
    253c:	c8 01       	movw	r24, r16
    253e:	09 95       	icall
    2540:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    2544:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    2548:	40 85       	ldd	r20, Z+8	; 0x08
    254a:	51 85       	ldd	r21, Z+9	; 0x09
    254c:	62 85       	ldd	r22, Z+10	; 0x0a
    254e:	73 85       	ldd	r23, Z+11	; 0x0b
    2550:	fc 01       	movw	r30, r24
    2552:	40 87       	std	Z+8, r20	; 0x08
    2554:	51 87       	std	Z+9, r21	; 0x09
    2556:	62 87       	std	Z+10, r22	; 0x0a
    2558:	73 87       	std	Z+11, r23	; 0x0b
					hx.get_cal(&hx)->divfactor_32 = HX711_ptr->divfactor_32;
    255a:	d8 01       	movw	r26, r16
    255c:	d3 96       	adiw	r26, 0x33	; 51
    255e:	ed 91       	ld	r30, X+
    2560:	fc 91       	ld	r31, X
    2562:	d4 97       	sbiw	r26, 0x34	; 52
    2564:	c8 01       	movw	r24, r16
    2566:	09 95       	icall
    2568:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    256c:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    2570:	24 85       	ldd	r18, Z+12	; 0x0c
    2572:	fc 01       	movw	r30, r24
    2574:	24 87       	std	Z+12, r18	; 0x0c
					hx.get_cal(&hx)->divfactor_64 = HX711_ptr->divfactor_64;
    2576:	d8 01       	movw	r26, r16
    2578:	d3 96       	adiw	r26, 0x33	; 51
    257a:	ed 91       	ld	r30, X+
    257c:	fc 91       	ld	r31, X
    257e:	d4 97       	sbiw	r26, 0x34	; 52
    2580:	c8 01       	movw	r24, r16
    2582:	09 95       	icall
    2584:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    2588:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    258c:	25 85       	ldd	r18, Z+13	; 0x0d
    258e:	fc 01       	movw	r30, r24
    2590:	25 87       	std	Z+13, r18	; 0x0d
					hx.get_cal(&hx)->divfactor_128 = HX711_ptr->divfactor_128;
    2592:	d8 01       	movw	r26, r16
    2594:	d3 96       	adiw	r26, 0x33	; 51
    2596:	ed 91       	ld	r30, X+
    2598:	fc 91       	ld	r31, X
    259a:	d4 97       	sbiw	r26, 0x34	; 52
    259c:	c8 01       	movw	r24, r16
    259e:	09 95       	icall
    25a0:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    25a4:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    25a8:	26 85       	ldd	r18, Z+14	; 0x0e
    25aa:	fc 01       	movw	r30, r24
    25ac:	26 87       	std	Z+14, r18	; 0x0e
					hx.get_cal(&hx)->status=ZERO;
    25ae:	d8 01       	movw	r26, r16
    25b0:	d3 96       	adiw	r26, 0x33	; 51
    25b2:	ed 91       	ld	r30, X+
    25b4:	fc 91       	ld	r31, X
    25b6:	d4 97       	sbiw	r26, 0x34	; 52
    25b8:	c8 01       	movw	r24, r16
    25ba:	09 95       	icall
    25bc:	fc 01       	movw	r30, r24
    25be:	17 86       	std	Z+15, r1	; 0x0f
					intx.on(1);
    25c0:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <intx+0x4>
    25c4:	f0 91 ad 01 	lds	r31, 0x01AD	; 0x8001ad <intx+0x5>
    25c8:	82 2d       	mov	r24, r2
    25ca:	09 95       	icall
				}
				
				//value = (value - hx.get_cal(&hx)->offset_128) / hx.get_cal(&hx)->divfactor_128; //value to be published to LCD
				value = (tmp - hx.get_cal(&hx)->offset_64) / hx.get_cal(&hx)->divfactor_64; //value to be published to LCD
    25cc:	40 90 76 01 	lds	r4, 0x0176	; 0x800176 <tmp>
    25d0:	50 90 77 01 	lds	r5, 0x0177	; 0x800177 <tmp+0x1>
    25d4:	60 90 78 01 	lds	r6, 0x0178	; 0x800178 <tmp+0x2>
    25d8:	70 90 79 01 	lds	r7, 0x0179	; 0x800179 <tmp+0x3>
    25dc:	d8 01       	movw	r26, r16
    25de:	d3 96       	adiw	r26, 0x33	; 51
    25e0:	ed 91       	ld	r30, X+
    25e2:	fc 91       	ld	r31, X
    25e4:	d4 97       	sbiw	r26, 0x34	; 52
    25e6:	c8 01       	movw	r24, r16
    25e8:	09 95       	icall
    25ea:	fc 01       	movw	r30, r24
    25ec:	64 81       	ldd	r22, Z+4	; 0x04
    25ee:	75 81       	ldd	r23, Z+5	; 0x05
    25f0:	86 81       	ldd	r24, Z+6	; 0x06
    25f2:	97 81       	ldd	r25, Z+7	; 0x07
    25f4:	c4 d2       	rcall	.+1416   	; 0x2b7e <__floatsisf>
    25f6:	9b 01       	movw	r18, r22
    25f8:	ac 01       	movw	r20, r24
    25fa:	c3 01       	movw	r24, r6
    25fc:	b2 01       	movw	r22, r4
    25fe:	bb d1       	rcall	.+886    	; 0x2976 <__subsf3>
    2600:	2b 01       	movw	r4, r22
    2602:	3c 01       	movw	r6, r24
    2604:	d8 01       	movw	r26, r16
    2606:	d3 96       	adiw	r26, 0x33	; 51
    2608:	ed 91       	ld	r30, X+
    260a:	fc 91       	ld	r31, X
    260c:	d4 97       	sbiw	r26, 0x34	; 52
    260e:	c8 01       	movw	r24, r16
    2610:	09 95       	icall
    2612:	fc 01       	movw	r30, r24
    2614:	65 85       	ldd	r22, Z+13	; 0x0d
    2616:	70 e0       	ldi	r23, 0x00	; 0
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	b0 d2       	rcall	.+1376   	; 0x2b7e <__floatsisf>
    261e:	9b 01       	movw	r18, r22
    2620:	ac 01       	movw	r20, r24
    2622:	c3 01       	movw	r24, r6
    2624:	b2 01       	movw	r22, r4
    2626:	10 d2       	rcall	.+1056   	; 0x2a48 <__divsf3>
    2628:	2b 01       	movw	r4, r22
				
				//lcd0.gotoxy(3,0);
				//lcd0.string_size(function.ftoa(hx.get_cal(&hx)->offset_64, result, ZERO), 13);
				
				//Display
				if (value > 1000 || value < -1000){
    262a:	3c 01       	movw	r6, r24
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	4a e7       	ldi	r20, 0x7A	; 122
    2632:	54 e4       	ldi	r21, 0x44	; 68
    2634:	54 d3       	rcall	.+1704   	; 0x2cde <__gesf2>
    2636:	18 16       	cp	r1, r24
    2638:	4c f0       	brlt	.+18     	; 0x264c <main+0x65e>
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	4a e7       	ldi	r20, 0x7A	; 122
    2640:	54 ec       	ldi	r21, 0xC4	; 196
    2642:	c3 01       	movw	r24, r6
    2644:	b2 01       	movw	r22, r4
    2646:	fc d1       	rcall	.+1016   	; 0x2a40 <__cmpsf2>
    2648:	88 23       	and	r24, r24
    264a:	5c f5       	brge	.+86     	; 0x26a2 <main+0x6b4>
					publish = value / 1000;
					lcd0.gotoxy(2,0);
    264c:	d7 01       	movw	r26, r14
    264e:	52 96       	adiw	r26, 0x12	; 18
    2650:	ed 91       	ld	r30, X+
    2652:	fc 91       	ld	r31, X
    2654:	53 97       	sbiw	r26, 0x13	; 19
    2656:	60 e0       	ldi	r22, 0x00	; 0
    2658:	70 e0       	ldi	r23, 0x00	; 0
    265a:	82 e0       	ldi	r24, 0x02	; 2
    265c:	90 e0       	ldi	r25, 0x00	; 0
					lcd0.string_size(function.ftoa(publish, result, 3), 13); lcd0.string_size("Kg", 4);
    265e:	09 95       	icall
    2660:	f7 01       	movw	r30, r14
    2662:	a4 84       	ldd	r10, Z+12	; 0x0c
    2664:	b5 84       	ldd	r11, Z+13	; 0x0d
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	4a e7       	ldi	r20, 0x7A	; 122
    266c:	54 e4       	ldi	r21, 0x44	; 68
    266e:	c3 01       	movw	r24, r6
    2670:	b2 01       	movw	r22, r4
    2672:	ea d1       	rcall	.+980    	; 0x2a48 <__divsf3>
    2674:	23 e0       	ldi	r18, 0x03	; 3
    2676:	42 ec       	ldi	r20, 0xC2	; 194
    2678:	51 e0       	ldi	r21, 0x01	; 1
    267a:	c4 54       	subi	r28, 0x44	; 68
    267c:	df 4f       	sbci	r29, 0xFF	; 255
    267e:	e8 81       	ld	r30, Y
    2680:	f9 81       	ldd	r31, Y+1	; 0x01
    2682:	cc 5b       	subi	r28, 0xBC	; 188
    2684:	d0 40       	sbci	r29, 0x00	; 0
    2686:	09 95       	icall
    2688:	6d e0       	ldi	r22, 0x0D	; 13
    268a:	f5 01       	movw	r30, r10
    268c:	09 95       	icall
    268e:	d7 01       	movw	r26, r14
    2690:	1c 96       	adiw	r26, 0x0c	; 12
    2692:	ed 91       	ld	r30, X+
    2694:	fc 91       	ld	r31, X
    2696:	1d 97       	sbiw	r26, 0x0d	; 13
    2698:	64 e0       	ldi	r22, 0x04	; 4
    269a:	8e e0       	ldi	r24, 0x0E	; 14
    269c:	91 e0       	ldi	r25, 0x01	; 1
    269e:	09 95       	icall
    26a0:	2c c0       	rjmp	.+88     	; 0x26fa <main+0x70c>
				}else{
					publish = value;
					lcd0.gotoxy(2,0);
    26a2:	d7 01       	movw	r26, r14
    26a4:	52 96       	adiw	r26, 0x12	; 18
    26a6:	ed 91       	ld	r30, X+
    26a8:	fc 91       	ld	r31, X
    26aa:	53 97       	sbiw	r26, 0x13	; 19
    26ac:	60 e0       	ldi	r22, 0x00	; 0
    26ae:	70 e0       	ldi	r23, 0x00	; 0
    26b0:	82 e0       	ldi	r24, 0x02	; 2
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	09 95       	icall
					lcd0.string_size(function.ftoa(publish, result, ZERO), 13); lcd0.string_size("gram", 4);
    26b6:	f7 01       	movw	r30, r14
    26b8:	a4 84       	ldd	r10, Z+12	; 0x0c
    26ba:	b5 84       	ldd	r11, Z+13	; 0x0d
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	42 ec       	ldi	r20, 0xC2	; 194
    26c0:	51 e0       	ldi	r21, 0x01	; 1
    26c2:	c3 01       	movw	r24, r6
    26c4:	b2 01       	movw	r22, r4
    26c6:	c4 54       	subi	r28, 0x44	; 68
    26c8:	df 4f       	sbci	r29, 0xFF	; 255
    26ca:	e8 81       	ld	r30, Y
    26cc:	f9 81       	ldd	r31, Y+1	; 0x01
    26ce:	cc 5b       	subi	r28, 0xBC	; 188
    26d0:	d0 40       	sbci	r29, 0x00	; 0
    26d2:	09 95       	icall
    26d4:	6d e0       	ldi	r22, 0x0D	; 13
    26d6:	f5 01       	movw	r30, r10
    26d8:	09 95       	icall
    26da:	d7 01       	movw	r26, r14
    26dc:	1c 96       	adiw	r26, 0x0c	; 12
    26de:	ed 91       	ld	r30, X+
    26e0:	fc 91       	ld	r31, X
    26e2:	1d 97       	sbiw	r26, 0x0d	; 13
    26e4:	64 e0       	ldi	r22, 0x04	; 4
    26e6:	81 e1       	ldi	r24, 0x11	; 17
    26e8:	91 e0       	ldi	r25, 0x01	; 1
    26ea:	09 95       	icall
					hx.query(&hx);
    26ec:	d8 01       	movw	r26, r16
    26ee:	9b 96       	adiw	r26, 0x2b	; 43
    26f0:	ed 91       	ld	r30, X+
    26f2:	fc 91       	ld	r31, X
    26f4:	9c 97       	sbiw	r26, 0x2c	; 44
    26f6:	c8 01       	movw	r24, r16
    26f8:	09 95       	icall
				}
				
				// Jump Menu signal
				if(signal == 1){
    26fa:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    26fe:	81 30       	cpi	r24, 0x01	; 1
    2700:	09 f0       	breq	.+2      	; 0x2704 <main+0x716>
    2702:	59 ce       	rjmp	.-846    	; 0x23b6 <main+0x3c8>
					Menu = '2';
    2704:	b2 e3       	ldi	r27, 0x32	; 50
    2706:	b0 93 00 01 	sts	0x0100, r27	; 0x800100 <__DATA_REGION_ORIGIN__>
					lcd0.clear();
    270a:	d7 01       	movw	r26, r14
    270c:	50 96       	adiw	r26, 0x10	; 16
    270e:	ed 91       	ld	r30, X+
    2710:	fc 91       	ld	r31, X
    2712:	51 97       	sbiw	r26, 0x11	; 17
    2714:	09 95       	icall
    2716:	4f ce       	rjmp	.-866    	; 0x23b6 <main+0x3c8>
				
				break;
			/***MENU 2***/
			case '2': //
				/**/
				lcd0.gotoxy(0,3);
    2718:	d7 01       	movw	r26, r14
    271a:	52 96       	adiw	r26, 0x12	; 18
    271c:	ed 91       	ld	r30, X+
    271e:	fc 91       	ld	r31, X
    2720:	53 97       	sbiw	r26, 0x13	; 19
    2722:	63 e0       	ldi	r22, 0x03	; 3
    2724:	70 e0       	ldi	r23, 0x00	; 0
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	09 95       	icall
				lcd0.string_size("SETUP DIVFACTOR",15);
    272c:	d7 01       	movw	r26, r14
    272e:	1c 96       	adiw	r26, 0x0c	; 12
    2730:	ed 91       	ld	r30, X+
    2732:	fc 91       	ld	r31, X
    2734:	1d 97       	sbiw	r26, 0x0d	; 13
    2736:	6f e0       	ldi	r22, 0x0F	; 15
    2738:	86 e1       	ldi	r24, 0x16	; 22
    273a:	91 e0       	ldi	r25, 0x01	; 1
    273c:	09 95       	icall
				
				
				
				
				// Jump Menus signal
				if(signal == 2){
    273e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    2742:	82 30       	cpi	r24, 0x02	; 2
    2744:	09 f0       	breq	.+2      	; 0x2748 <main+0x75a>
    2746:	37 ce       	rjmp	.-914    	; 0x23b6 <main+0x3c8>
					Menu = '1';
    2748:	30 92 00 01 	sts	0x0100, r3	; 0x800100 <__DATA_REGION_ORIGIN__>
					lcd0.clear();
    274c:	d7 01       	movw	r26, r14
    274e:	50 96       	adiw	r26, 0x10	; 16
    2750:	ed 91       	ld	r30, X+
    2752:	fc 91       	ld	r31, X
    2754:	51 97       	sbiw	r26, 0x11	; 17
    2756:	09 95       	icall
    2758:	2e ce       	rjmp	.-932    	; 0x23b6 <main+0x3c8>
				}
				/**/
				break;
			/***MENU 3***/
			case '3': //
				lcd0.gotoxy(0,0);
    275a:	d7 01       	movw	r26, r14
    275c:	52 96       	adiw	r26, 0x12	; 18
    275e:	ed 91       	ld	r30, X+
    2760:	fc 91       	ld	r31, X
    2762:	53 97       	sbiw	r26, 0x13	; 19
    2764:	60 e0       	ldi	r22, 0x00	; 0
    2766:	70 e0       	ldi	r23, 0x00	; 0
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	09 95       	icall
				lcd0.string_size("Not being used",19);
    276e:	d7 01       	movw	r26, r14
    2770:	1c 96       	adiw	r26, 0x0c	; 12
    2772:	ed 91       	ld	r30, X+
    2774:	fc 91       	ld	r31, X
    2776:	1d 97       	sbiw	r26, 0x0d	; 13
    2778:	63 e1       	ldi	r22, 0x13	; 19
    277a:	86 e2       	ldi	r24, 0x26	; 38
    277c:	91 e0       	ldi	r25, 0x01	; 1
    277e:	09 95       	icall
				/***Play around***/
				break;
    2780:	1a ce       	rjmp	.-972    	; 0x23b6 <main+0x3c8>
				/********************************************************************/
			default:
				Menu = '1';
    2782:	30 92 00 01 	sts	0x0100, r3	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
    2786:	17 ce       	rjmp	.-978    	; 0x23b6 <main+0x3c8>

00002788 <__vector_2>:
	PORTC = 0xFF;
}
/*
** interrupt
*/
ISR(INT1_vect){
    2788:	1f 92       	push	r1
    278a:	0f 92       	push	r0
    278c:	0f b6       	in	r0, 0x3f	; 63
    278e:	0f 92       	push	r0
    2790:	11 24       	eor	r1, r1
    2792:	0b b6       	in	r0, 0x3b	; 59
    2794:	0f 92       	push	r0
    2796:	2f 93       	push	r18
    2798:	3f 93       	push	r19
    279a:	4f 93       	push	r20
    279c:	5f 93       	push	r21
    279e:	6f 93       	push	r22
    27a0:	7f 93       	push	r23
    27a2:	8f 93       	push	r24
    27a4:	9f 93       	push	r25
    27a6:	af 93       	push	r26
    27a8:	bf 93       	push	r27
    27aa:	ef 93       	push	r30
    27ac:	ff 93       	push	r31
	
	PORTC ^= (ONE << 7);
    27ae:	85 b3       	in	r24, 0x15	; 21
    27b0:	80 58       	subi	r24, 0x80	; 128
    27b2:	85 bb       	out	0x15, r24	; 21
	intx.off(1);
    27b4:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <intx+0x2>
    27b8:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <intx+0x3>
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	09 95       	icall
	
}
    27c0:	ff 91       	pop	r31
    27c2:	ef 91       	pop	r30
    27c4:	bf 91       	pop	r27
    27c6:	af 91       	pop	r26
    27c8:	9f 91       	pop	r25
    27ca:	8f 91       	pop	r24
    27cc:	7f 91       	pop	r23
    27ce:	6f 91       	pop	r22
    27d0:	5f 91       	pop	r21
    27d2:	4f 91       	pop	r20
    27d4:	3f 91       	pop	r19
    27d6:	2f 91       	pop	r18
    27d8:	0f 90       	pop	r0
    27da:	0b be       	out	0x3b, r0	; 59
    27dc:	0f 90       	pop	r0
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	0f 90       	pop	r0
    27e2:	1f 90       	pop	r1
    27e4:	18 95       	reti

000027e6 <__vector_15>:
ISR(TIMER0_COMP_vect) // 15.4 us intervals
{
    27e6:	1f 92       	push	r1
    27e8:	0f 92       	push	r0
    27ea:	0f b6       	in	r0, 0x3f	; 63
    27ec:	0f 92       	push	r0
    27ee:	11 24       	eor	r1, r1
    27f0:	0b b6       	in	r0, 0x3b	; 59
    27f2:	0f 92       	push	r0
    27f4:	2f 93       	push	r18
    27f6:	3f 93       	push	r19
    27f8:	4f 93       	push	r20
    27fa:	5f 93       	push	r21
    27fc:	6f 93       	push	r22
    27fe:	7f 93       	push	r23
    2800:	8f 93       	push	r24
    2802:	9f 93       	push	r25
    2804:	af 93       	push	r26
    2806:	bf 93       	push	r27
    2808:	cf 93       	push	r28
    280a:	ef 93       	push	r30
    280c:	ff 93       	push	r31
	/***Block other interrupts during this procedure***/
	uint8_t Sreg;
	Sreg = STATUS_REGISTER;
    280e:	cf b7       	in	r28, 0x3f	; 63
	STATUS_REGISTER &= ~(ONE << GLOBAL_INTERRUPT_ENABLE);	
    2810:	8f b7       	in	r24, 0x3f	; 63
    2812:	8f 77       	andi	r24, 0x7F	; 127
    2814:	8f bf       	out	0x3f, r24	; 63
	hx.read_raw(&hx);
    2816:	e0 91 25 02 	lds	r30, 0x0225	; 0x800225 <hx+0x2d>
    281a:	f0 91 26 02 	lds	r31, 0x0226	; 0x800226 <hx+0x2e>
    281e:	88 ef       	ldi	r24, 0xF8	; 248
    2820:	91 e0       	ldi	r25, 0x01	; 1
    2822:	09 95       	icall
	//if(!hx.get_readflag(&hx))
		//timer0.stop();
	/***enable interrupts again***/
	STATUS_REGISTER = Sreg;
    2824:	cf bf       	out	0x3f, r28	; 63
}
    2826:	ff 91       	pop	r31
    2828:	ef 91       	pop	r30
    282a:	cf 91       	pop	r28
    282c:	bf 91       	pop	r27
    282e:	af 91       	pop	r26
    2830:	9f 91       	pop	r25
    2832:	8f 91       	pop	r24
    2834:	7f 91       	pop	r23
    2836:	6f 91       	pop	r22
    2838:	5f 91       	pop	r21
    283a:	4f 91       	pop	r20
    283c:	3f 91       	pop	r19
    283e:	2f 91       	pop	r18
    2840:	0f 90       	pop	r0
    2842:	0b be       	out	0x3b, r0	; 59
    2844:	0f 90       	pop	r0
    2846:	0f be       	out	0x3f, r0	; 63
    2848:	0f 90       	pop	r0
    284a:	1f 90       	pop	r1
    284c:	18 95       	reti

0000284e <__vector_12>:
ISR(TIMER1_COMPA_vect) // 1 second intervals
{
    284e:	1f 92       	push	r1
    2850:	0f 92       	push	r0
    2852:	0f b6       	in	r0, 0x3f	; 63
    2854:	0f 92       	push	r0
    2856:	11 24       	eor	r1, r1
    2858:	0b b6       	in	r0, 0x3b	; 59
    285a:	0f 92       	push	r0
    285c:	2f 93       	push	r18
    285e:	3f 93       	push	r19
    2860:	4f 93       	push	r20
    2862:	5f 93       	push	r21
    2864:	6f 93       	push	r22
    2866:	7f 93       	push	r23
    2868:	8f 93       	push	r24
    286a:	9f 93       	push	r25
    286c:	af 93       	push	r26
    286e:	bf 93       	push	r27
    2870:	ef 93       	push	r30
    2872:	ff 93       	push	r31
	/***CLEAR EEPROM OFFSET SEQUENCE START***/
	if((F.ll(&F) & IMASK) == (ONE << 3)) //button 4
    2874:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <F+0xa>
    2878:	f0 91 38 02 	lds	r31, 0x0238	; 0x800238 <F+0xb>
    287c:	8d e2       	ldi	r24, 0x2D	; 45
    287e:	92 e0       	ldi	r25, 0x02	; 2
    2880:	09 95       	icall
    2882:	8f 73       	andi	r24, 0x3F	; 63
    2884:	88 30       	cpi	r24, 0x08	; 8
    2886:	41 f4       	brne	.+16     	; 0x2898 <__vector_12+0x4a>
		counter_1++;
    2888:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <counter_1>
    288c:	8f 5f       	subi	r24, 0xFF	; 255
    288e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <counter_1>
	else if(counter_1 < _5sec+ONE)
		counter_1=0;
		
	if(counter_1 > _5sec){
    2892:	86 30       	cpi	r24, 0x06	; 6
    2894:	58 f1       	brcs	.+86     	; 0x28ec <__vector_12+0x9e>
    2896:	07 c0       	rjmp	.+14     	; 0x28a6 <__vector_12+0x58>
ISR(TIMER1_COMPA_vect) // 1 second intervals
{
	/***CLEAR EEPROM OFFSET SEQUENCE START***/
	if((F.ll(&F) & IMASK) == (ONE << 3)) //button 4
		counter_1++;
	else if(counter_1 < _5sec+ONE)
    2898:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <counter_1>
    289c:	86 30       	cpi	r24, 0x06	; 6
    289e:	18 f4       	brcc	.+6      	; 0x28a6 <__vector_12+0x58>
		counter_1=0;
    28a0:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <counter_1>
    28a4:	23 c0       	rjmp	.+70     	; 0x28ec <__vector_12+0x9e>
		
	if(counter_1 > _5sec){
		counter_1 = _5sec+ONE; //lock in place
    28a6:	86 e0       	ldi	r24, 0x06	; 6
    28a8:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <counter_1>
		PORTC ^= (ONE << 6); // troubleshooting
    28ac:	95 b3       	in	r25, 0x15	; 21
    28ae:	80 e4       	ldi	r24, 0x40	; 64
    28b0:	89 27       	eor	r24, r25
    28b2:	85 bb       	out	0x15, r24	; 21
		if((F.ll(&F) & IMASK) == (ONE << 5)){ //button 6
    28b4:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <F+0xa>
    28b8:	f0 91 38 02 	lds	r31, 0x0238	; 0x800238 <F+0xb>
    28bc:	8d e2       	ldi	r24, 0x2D	; 45
    28be:	92 e0       	ldi	r25, 0x02	; 2
    28c0:	09 95       	icall
    28c2:	8f 73       	andi	r24, 0x3F	; 63
    28c4:	80 32       	cpi	r24, 0x20	; 32
    28c6:	91 f4       	brne	.+36     	; 0x28ec <__vector_12+0x9e>
			// Delete eerpom memory ZERO
			HX711_data.status = ZERO;
    28c8:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <HX711_data+0xf>
			eprom.update_block(HX711_ptr, (void*) ZERO, sizeblock);
    28cc:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <eprom+0x1c>
    28d0:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <eprom+0x1d>
    28d4:	40 e1       	ldi	r20, 0x10	; 16
    28d6:	50 e0       	ldi	r21, 0x00	; 0
    28d8:	60 e0       	ldi	r22, 0x00	; 0
    28da:	70 e0       	ldi	r23, 0x00	; 0
    28dc:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <HX711_ptr>
    28e0:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    28e4:	09 95       	icall
			PORTC |= (ONE << 6); // troubleshooting
    28e6:	ae 9a       	sbi	0x15, 6	; 21
			counter_1 = ZERO;
    28e8:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <counter_1>
		}
	}
	/***CLEAR EEPROM OFFSET SEQUENCE END***/
	
	/***CAL DIVFACTOR DEFINE START***/
	if((F.ll(&F) & IMASK) == (ONE << 4)) //button 5
    28ec:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <F+0xa>
    28f0:	f0 91 38 02 	lds	r31, 0x0238	; 0x800238 <F+0xb>
    28f4:	8d e2       	ldi	r24, 0x2D	; 45
    28f6:	92 e0       	ldi	r25, 0x02	; 2
    28f8:	09 95       	icall
    28fa:	8f 73       	andi	r24, 0x3F	; 63
    28fc:	80 31       	cpi	r24, 0x10	; 16
    28fe:	41 f4       	brne	.+16     	; 0x2910 <__vector_12+0xc2>
		counter_2++;
    2900:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <counter_2>
    2904:	8f 5f       	subi	r24, 0xFF	; 255
    2906:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <counter_2>
	else if(counter_2 < _5sec+ONE)
		counter_2=0;
	
	if(counter_2 > _5sec){
    290a:	86 30       	cpi	r24, 0x06	; 6
    290c:	08 f1       	brcs	.+66     	; 0x2950 <__vector_12+0x102>
    290e:	07 c0       	rjmp	.+14     	; 0x291e <__vector_12+0xd0>
	/***CLEAR EEPROM OFFSET SEQUENCE END***/
	
	/***CAL DIVFACTOR DEFINE START***/
	if((F.ll(&F) & IMASK) == (ONE << 4)) //button 5
		counter_2++;
	else if(counter_2 < _5sec+ONE)
    2910:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <counter_2>
    2914:	86 30       	cpi	r24, 0x06	; 6
    2916:	18 f4       	brcc	.+6      	; 0x291e <__vector_12+0xd0>
		counter_2=0;
    2918:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <counter_2>
    291c:	19 c0       	rjmp	.+50     	; 0x2950 <__vector_12+0x102>
	
	if(counter_2 > _5sec){
		counter_2 = _5sec+ONE; //lock in place
    291e:	86 e0       	ldi	r24, 0x06	; 6
    2920:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <counter_2>
		signal = ONE;
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
		PORTC ^= (ONE << 7); // troubleshooting
    292a:	85 b3       	in	r24, 0x15	; 21
    292c:	80 58       	subi	r24, 0x80	; 128
    292e:	85 bb       	out	0x15, r24	; 21
		if((F.ll(&F) & IMASK) == (ONE << 5)){ //button 6
    2930:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <F+0xa>
    2934:	f0 91 38 02 	lds	r31, 0x0238	; 0x800238 <F+0xb>
    2938:	8d e2       	ldi	r24, 0x2D	; 45
    293a:	92 e0       	ldi	r25, 0x02	; 2
    293c:	09 95       	icall
    293e:	8f 73       	andi	r24, 0x3F	; 63
    2940:	80 32       	cpi	r24, 0x20	; 32
    2942:	31 f4       	brne	.+12     	; 0x2950 <__vector_12+0x102>
			signal = 2;
    2944:	82 e0       	ldi	r24, 0x02	; 2
    2946:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
			PORTC |= (ONE << 7); // troubleshooting
    294a:	af 9a       	sbi	0x15, 7	; 21
			counter_2 = ZERO;
    294c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <counter_2>
		}
	}
	/***CAL DIVFACTOR DEFINE END***/
}
    2950:	ff 91       	pop	r31
    2952:	ef 91       	pop	r30
    2954:	bf 91       	pop	r27
    2956:	af 91       	pop	r26
    2958:	9f 91       	pop	r25
    295a:	8f 91       	pop	r24
    295c:	7f 91       	pop	r23
    295e:	6f 91       	pop	r22
    2960:	5f 91       	pop	r21
    2962:	4f 91       	pop	r20
    2964:	3f 91       	pop	r19
    2966:	2f 91       	pop	r18
    2968:	0f 90       	pop	r0
    296a:	0b be       	out	0x3b, r0	; 59
    296c:	0f 90       	pop	r0
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	0f 90       	pop	r0
    2972:	1f 90       	pop	r1
    2974:	18 95       	reti

00002976 <__subsf3>:
    2976:	50 58       	subi	r21, 0x80	; 128

00002978 <__addsf3>:
    2978:	bb 27       	eor	r27, r27
    297a:	aa 27       	eor	r26, r26
    297c:	0e d0       	rcall	.+28     	; 0x299a <__addsf3x>
    297e:	75 c1       	rjmp	.+746    	; 0x2c6a <__fp_round>
    2980:	66 d1       	rcall	.+716    	; 0x2c4e <__fp_pscA>
    2982:	30 f0       	brcs	.+12     	; 0x2990 <__addsf3+0x18>
    2984:	6b d1       	rcall	.+726    	; 0x2c5c <__fp_pscB>
    2986:	20 f0       	brcs	.+8      	; 0x2990 <__addsf3+0x18>
    2988:	31 f4       	brne	.+12     	; 0x2996 <__addsf3+0x1e>
    298a:	9f 3f       	cpi	r25, 0xFF	; 255
    298c:	11 f4       	brne	.+4      	; 0x2992 <__addsf3+0x1a>
    298e:	1e f4       	brtc	.+6      	; 0x2996 <__addsf3+0x1e>
    2990:	5b c1       	rjmp	.+694    	; 0x2c48 <__fp_nan>
    2992:	0e f4       	brtc	.+2      	; 0x2996 <__addsf3+0x1e>
    2994:	e0 95       	com	r30
    2996:	e7 fb       	bst	r30, 7
    2998:	51 c1       	rjmp	.+674    	; 0x2c3c <__fp_inf>

0000299a <__addsf3x>:
    299a:	e9 2f       	mov	r30, r25
    299c:	77 d1       	rcall	.+750    	; 0x2c8c <__fp_split3>
    299e:	80 f3       	brcs	.-32     	; 0x2980 <__addsf3+0x8>
    29a0:	ba 17       	cp	r27, r26
    29a2:	62 07       	cpc	r22, r18
    29a4:	73 07       	cpc	r23, r19
    29a6:	84 07       	cpc	r24, r20
    29a8:	95 07       	cpc	r25, r21
    29aa:	18 f0       	brcs	.+6      	; 0x29b2 <__addsf3x+0x18>
    29ac:	71 f4       	brne	.+28     	; 0x29ca <__addsf3x+0x30>
    29ae:	9e f5       	brtc	.+102    	; 0x2a16 <__addsf3x+0x7c>
    29b0:	8f c1       	rjmp	.+798    	; 0x2cd0 <__fp_zero>
    29b2:	0e f4       	brtc	.+2      	; 0x29b6 <__addsf3x+0x1c>
    29b4:	e0 95       	com	r30
    29b6:	0b 2e       	mov	r0, r27
    29b8:	ba 2f       	mov	r27, r26
    29ba:	a0 2d       	mov	r26, r0
    29bc:	0b 01       	movw	r0, r22
    29be:	b9 01       	movw	r22, r18
    29c0:	90 01       	movw	r18, r0
    29c2:	0c 01       	movw	r0, r24
    29c4:	ca 01       	movw	r24, r20
    29c6:	a0 01       	movw	r20, r0
    29c8:	11 24       	eor	r1, r1
    29ca:	ff 27       	eor	r31, r31
    29cc:	59 1b       	sub	r21, r25
    29ce:	99 f0       	breq	.+38     	; 0x29f6 <__addsf3x+0x5c>
    29d0:	59 3f       	cpi	r21, 0xF9	; 249
    29d2:	50 f4       	brcc	.+20     	; 0x29e8 <__addsf3x+0x4e>
    29d4:	50 3e       	cpi	r21, 0xE0	; 224
    29d6:	68 f1       	brcs	.+90     	; 0x2a32 <__addsf3x+0x98>
    29d8:	1a 16       	cp	r1, r26
    29da:	f0 40       	sbci	r31, 0x00	; 0
    29dc:	a2 2f       	mov	r26, r18
    29de:	23 2f       	mov	r18, r19
    29e0:	34 2f       	mov	r19, r20
    29e2:	44 27       	eor	r20, r20
    29e4:	58 5f       	subi	r21, 0xF8	; 248
    29e6:	f3 cf       	rjmp	.-26     	; 0x29ce <__addsf3x+0x34>
    29e8:	46 95       	lsr	r20
    29ea:	37 95       	ror	r19
    29ec:	27 95       	ror	r18
    29ee:	a7 95       	ror	r26
    29f0:	f0 40       	sbci	r31, 0x00	; 0
    29f2:	53 95       	inc	r21
    29f4:	c9 f7       	brne	.-14     	; 0x29e8 <__addsf3x+0x4e>
    29f6:	7e f4       	brtc	.+30     	; 0x2a16 <__addsf3x+0x7c>
    29f8:	1f 16       	cp	r1, r31
    29fa:	ba 0b       	sbc	r27, r26
    29fc:	62 0b       	sbc	r22, r18
    29fe:	73 0b       	sbc	r23, r19
    2a00:	84 0b       	sbc	r24, r20
    2a02:	ba f0       	brmi	.+46     	; 0x2a32 <__addsf3x+0x98>
    2a04:	91 50       	subi	r25, 0x01	; 1
    2a06:	a1 f0       	breq	.+40     	; 0x2a30 <__addsf3x+0x96>
    2a08:	ff 0f       	add	r31, r31
    2a0a:	bb 1f       	adc	r27, r27
    2a0c:	66 1f       	adc	r22, r22
    2a0e:	77 1f       	adc	r23, r23
    2a10:	88 1f       	adc	r24, r24
    2a12:	c2 f7       	brpl	.-16     	; 0x2a04 <__addsf3x+0x6a>
    2a14:	0e c0       	rjmp	.+28     	; 0x2a32 <__addsf3x+0x98>
    2a16:	ba 0f       	add	r27, r26
    2a18:	62 1f       	adc	r22, r18
    2a1a:	73 1f       	adc	r23, r19
    2a1c:	84 1f       	adc	r24, r20
    2a1e:	48 f4       	brcc	.+18     	; 0x2a32 <__addsf3x+0x98>
    2a20:	87 95       	ror	r24
    2a22:	77 95       	ror	r23
    2a24:	67 95       	ror	r22
    2a26:	b7 95       	ror	r27
    2a28:	f7 95       	ror	r31
    2a2a:	9e 3f       	cpi	r25, 0xFE	; 254
    2a2c:	08 f0       	brcs	.+2      	; 0x2a30 <__addsf3x+0x96>
    2a2e:	b3 cf       	rjmp	.-154    	; 0x2996 <__addsf3+0x1e>
    2a30:	93 95       	inc	r25
    2a32:	88 0f       	add	r24, r24
    2a34:	08 f0       	brcs	.+2      	; 0x2a38 <__addsf3x+0x9e>
    2a36:	99 27       	eor	r25, r25
    2a38:	ee 0f       	add	r30, r30
    2a3a:	97 95       	ror	r25
    2a3c:	87 95       	ror	r24
    2a3e:	08 95       	ret

00002a40 <__cmpsf2>:
    2a40:	d9 d0       	rcall	.+434    	; 0x2bf4 <__fp_cmp>
    2a42:	08 f4       	brcc	.+2      	; 0x2a46 <__cmpsf2+0x6>
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	08 95       	ret

00002a48 <__divsf3>:
    2a48:	0c d0       	rcall	.+24     	; 0x2a62 <__divsf3x>
    2a4a:	0f c1       	rjmp	.+542    	; 0x2c6a <__fp_round>
    2a4c:	07 d1       	rcall	.+526    	; 0x2c5c <__fp_pscB>
    2a4e:	40 f0       	brcs	.+16     	; 0x2a60 <__divsf3+0x18>
    2a50:	fe d0       	rcall	.+508    	; 0x2c4e <__fp_pscA>
    2a52:	30 f0       	brcs	.+12     	; 0x2a60 <__divsf3+0x18>
    2a54:	21 f4       	brne	.+8      	; 0x2a5e <__divsf3+0x16>
    2a56:	5f 3f       	cpi	r21, 0xFF	; 255
    2a58:	19 f0       	breq	.+6      	; 0x2a60 <__divsf3+0x18>
    2a5a:	f0 c0       	rjmp	.+480    	; 0x2c3c <__fp_inf>
    2a5c:	51 11       	cpse	r21, r1
    2a5e:	39 c1       	rjmp	.+626    	; 0x2cd2 <__fp_szero>
    2a60:	f3 c0       	rjmp	.+486    	; 0x2c48 <__fp_nan>

00002a62 <__divsf3x>:
    2a62:	14 d1       	rcall	.+552    	; 0x2c8c <__fp_split3>
    2a64:	98 f3       	brcs	.-26     	; 0x2a4c <__divsf3+0x4>

00002a66 <__divsf3_pse>:
    2a66:	99 23       	and	r25, r25
    2a68:	c9 f3       	breq	.-14     	; 0x2a5c <__divsf3+0x14>
    2a6a:	55 23       	and	r21, r21
    2a6c:	b1 f3       	breq	.-20     	; 0x2a5a <__divsf3+0x12>
    2a6e:	95 1b       	sub	r25, r21
    2a70:	55 0b       	sbc	r21, r21
    2a72:	bb 27       	eor	r27, r27
    2a74:	aa 27       	eor	r26, r26
    2a76:	62 17       	cp	r22, r18
    2a78:	73 07       	cpc	r23, r19
    2a7a:	84 07       	cpc	r24, r20
    2a7c:	38 f0       	brcs	.+14     	; 0x2a8c <__divsf3_pse+0x26>
    2a7e:	9f 5f       	subi	r25, 0xFF	; 255
    2a80:	5f 4f       	sbci	r21, 0xFF	; 255
    2a82:	22 0f       	add	r18, r18
    2a84:	33 1f       	adc	r19, r19
    2a86:	44 1f       	adc	r20, r20
    2a88:	aa 1f       	adc	r26, r26
    2a8a:	a9 f3       	breq	.-22     	; 0x2a76 <__divsf3_pse+0x10>
    2a8c:	33 d0       	rcall	.+102    	; 0x2af4 <__divsf3_pse+0x8e>
    2a8e:	0e 2e       	mov	r0, r30
    2a90:	3a f0       	brmi	.+14     	; 0x2aa0 <__divsf3_pse+0x3a>
    2a92:	e0 e8       	ldi	r30, 0x80	; 128
    2a94:	30 d0       	rcall	.+96     	; 0x2af6 <__divsf3_pse+0x90>
    2a96:	91 50       	subi	r25, 0x01	; 1
    2a98:	50 40       	sbci	r21, 0x00	; 0
    2a9a:	e6 95       	lsr	r30
    2a9c:	00 1c       	adc	r0, r0
    2a9e:	ca f7       	brpl	.-14     	; 0x2a92 <__divsf3_pse+0x2c>
    2aa0:	29 d0       	rcall	.+82     	; 0x2af4 <__divsf3_pse+0x8e>
    2aa2:	fe 2f       	mov	r31, r30
    2aa4:	27 d0       	rcall	.+78     	; 0x2af4 <__divsf3_pse+0x8e>
    2aa6:	66 0f       	add	r22, r22
    2aa8:	77 1f       	adc	r23, r23
    2aaa:	88 1f       	adc	r24, r24
    2aac:	bb 1f       	adc	r27, r27
    2aae:	26 17       	cp	r18, r22
    2ab0:	37 07       	cpc	r19, r23
    2ab2:	48 07       	cpc	r20, r24
    2ab4:	ab 07       	cpc	r26, r27
    2ab6:	b0 e8       	ldi	r27, 0x80	; 128
    2ab8:	09 f0       	breq	.+2      	; 0x2abc <__divsf3_pse+0x56>
    2aba:	bb 0b       	sbc	r27, r27
    2abc:	80 2d       	mov	r24, r0
    2abe:	bf 01       	movw	r22, r30
    2ac0:	ff 27       	eor	r31, r31
    2ac2:	93 58       	subi	r25, 0x83	; 131
    2ac4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ac6:	2a f0       	brmi	.+10     	; 0x2ad2 <__divsf3_pse+0x6c>
    2ac8:	9e 3f       	cpi	r25, 0xFE	; 254
    2aca:	51 05       	cpc	r21, r1
    2acc:	68 f0       	brcs	.+26     	; 0x2ae8 <__divsf3_pse+0x82>
    2ace:	b6 c0       	rjmp	.+364    	; 0x2c3c <__fp_inf>
    2ad0:	00 c1       	rjmp	.+512    	; 0x2cd2 <__fp_szero>
    2ad2:	5f 3f       	cpi	r21, 0xFF	; 255
    2ad4:	ec f3       	brlt	.-6      	; 0x2ad0 <__divsf3_pse+0x6a>
    2ad6:	98 3e       	cpi	r25, 0xE8	; 232
    2ad8:	dc f3       	brlt	.-10     	; 0x2ad0 <__divsf3_pse+0x6a>
    2ada:	86 95       	lsr	r24
    2adc:	77 95       	ror	r23
    2ade:	67 95       	ror	r22
    2ae0:	b7 95       	ror	r27
    2ae2:	f7 95       	ror	r31
    2ae4:	9f 5f       	subi	r25, 0xFF	; 255
    2ae6:	c9 f7       	brne	.-14     	; 0x2ada <__divsf3_pse+0x74>
    2ae8:	88 0f       	add	r24, r24
    2aea:	91 1d       	adc	r25, r1
    2aec:	96 95       	lsr	r25
    2aee:	87 95       	ror	r24
    2af0:	97 f9       	bld	r25, 7
    2af2:	08 95       	ret
    2af4:	e1 e0       	ldi	r30, 0x01	; 1
    2af6:	66 0f       	add	r22, r22
    2af8:	77 1f       	adc	r23, r23
    2afa:	88 1f       	adc	r24, r24
    2afc:	bb 1f       	adc	r27, r27
    2afe:	62 17       	cp	r22, r18
    2b00:	73 07       	cpc	r23, r19
    2b02:	84 07       	cpc	r24, r20
    2b04:	ba 07       	cpc	r27, r26
    2b06:	20 f0       	brcs	.+8      	; 0x2b10 <__divsf3_pse+0xaa>
    2b08:	62 1b       	sub	r22, r18
    2b0a:	73 0b       	sbc	r23, r19
    2b0c:	84 0b       	sbc	r24, r20
    2b0e:	ba 0b       	sbc	r27, r26
    2b10:	ee 1f       	adc	r30, r30
    2b12:	88 f7       	brcc	.-30     	; 0x2af6 <__divsf3_pse+0x90>
    2b14:	e0 95       	com	r30
    2b16:	08 95       	ret

00002b18 <__fixsfsi>:
    2b18:	04 d0       	rcall	.+8      	; 0x2b22 <__fixunssfsi>
    2b1a:	68 94       	set
    2b1c:	b1 11       	cpse	r27, r1
    2b1e:	d9 c0       	rjmp	.+434    	; 0x2cd2 <__fp_szero>
    2b20:	08 95       	ret

00002b22 <__fixunssfsi>:
    2b22:	bc d0       	rcall	.+376    	; 0x2c9c <__fp_splitA>
    2b24:	88 f0       	brcs	.+34     	; 0x2b48 <__fixunssfsi+0x26>
    2b26:	9f 57       	subi	r25, 0x7F	; 127
    2b28:	90 f0       	brcs	.+36     	; 0x2b4e <__fixunssfsi+0x2c>
    2b2a:	b9 2f       	mov	r27, r25
    2b2c:	99 27       	eor	r25, r25
    2b2e:	b7 51       	subi	r27, 0x17	; 23
    2b30:	a0 f0       	brcs	.+40     	; 0x2b5a <__fixunssfsi+0x38>
    2b32:	d1 f0       	breq	.+52     	; 0x2b68 <__fixunssfsi+0x46>
    2b34:	66 0f       	add	r22, r22
    2b36:	77 1f       	adc	r23, r23
    2b38:	88 1f       	adc	r24, r24
    2b3a:	99 1f       	adc	r25, r25
    2b3c:	1a f0       	brmi	.+6      	; 0x2b44 <__fixunssfsi+0x22>
    2b3e:	ba 95       	dec	r27
    2b40:	c9 f7       	brne	.-14     	; 0x2b34 <__fixunssfsi+0x12>
    2b42:	12 c0       	rjmp	.+36     	; 0x2b68 <__fixunssfsi+0x46>
    2b44:	b1 30       	cpi	r27, 0x01	; 1
    2b46:	81 f0       	breq	.+32     	; 0x2b68 <__fixunssfsi+0x46>
    2b48:	c3 d0       	rcall	.+390    	; 0x2cd0 <__fp_zero>
    2b4a:	b1 e0       	ldi	r27, 0x01	; 1
    2b4c:	08 95       	ret
    2b4e:	c0 c0       	rjmp	.+384    	; 0x2cd0 <__fp_zero>
    2b50:	67 2f       	mov	r22, r23
    2b52:	78 2f       	mov	r23, r24
    2b54:	88 27       	eor	r24, r24
    2b56:	b8 5f       	subi	r27, 0xF8	; 248
    2b58:	39 f0       	breq	.+14     	; 0x2b68 <__fixunssfsi+0x46>
    2b5a:	b9 3f       	cpi	r27, 0xF9	; 249
    2b5c:	cc f3       	brlt	.-14     	; 0x2b50 <__fixunssfsi+0x2e>
    2b5e:	86 95       	lsr	r24
    2b60:	77 95       	ror	r23
    2b62:	67 95       	ror	r22
    2b64:	b3 95       	inc	r27
    2b66:	d9 f7       	brne	.-10     	; 0x2b5e <__fixunssfsi+0x3c>
    2b68:	3e f4       	brtc	.+14     	; 0x2b78 <__fixunssfsi+0x56>
    2b6a:	90 95       	com	r25
    2b6c:	80 95       	com	r24
    2b6e:	70 95       	com	r23
    2b70:	61 95       	neg	r22
    2b72:	7f 4f       	sbci	r23, 0xFF	; 255
    2b74:	8f 4f       	sbci	r24, 0xFF	; 255
    2b76:	9f 4f       	sbci	r25, 0xFF	; 255
    2b78:	08 95       	ret

00002b7a <__floatunsisf>:
    2b7a:	e8 94       	clt
    2b7c:	09 c0       	rjmp	.+18     	; 0x2b90 <__floatsisf+0x12>

00002b7e <__floatsisf>:
    2b7e:	97 fb       	bst	r25, 7
    2b80:	3e f4       	brtc	.+14     	; 0x2b90 <__floatsisf+0x12>
    2b82:	90 95       	com	r25
    2b84:	80 95       	com	r24
    2b86:	70 95       	com	r23
    2b88:	61 95       	neg	r22
    2b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b8c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b90:	99 23       	and	r25, r25
    2b92:	a9 f0       	breq	.+42     	; 0x2bbe <__floatsisf+0x40>
    2b94:	f9 2f       	mov	r31, r25
    2b96:	96 e9       	ldi	r25, 0x96	; 150
    2b98:	bb 27       	eor	r27, r27
    2b9a:	93 95       	inc	r25
    2b9c:	f6 95       	lsr	r31
    2b9e:	87 95       	ror	r24
    2ba0:	77 95       	ror	r23
    2ba2:	67 95       	ror	r22
    2ba4:	b7 95       	ror	r27
    2ba6:	f1 11       	cpse	r31, r1
    2ba8:	f8 cf       	rjmp	.-16     	; 0x2b9a <__floatsisf+0x1c>
    2baa:	fa f4       	brpl	.+62     	; 0x2bea <__floatsisf+0x6c>
    2bac:	bb 0f       	add	r27, r27
    2bae:	11 f4       	brne	.+4      	; 0x2bb4 <__floatsisf+0x36>
    2bb0:	60 ff       	sbrs	r22, 0
    2bb2:	1b c0       	rjmp	.+54     	; 0x2bea <__floatsisf+0x6c>
    2bb4:	6f 5f       	subi	r22, 0xFF	; 255
    2bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb8:	8f 4f       	sbci	r24, 0xFF	; 255
    2bba:	9f 4f       	sbci	r25, 0xFF	; 255
    2bbc:	16 c0       	rjmp	.+44     	; 0x2bea <__floatsisf+0x6c>
    2bbe:	88 23       	and	r24, r24
    2bc0:	11 f0       	breq	.+4      	; 0x2bc6 <__floatsisf+0x48>
    2bc2:	96 e9       	ldi	r25, 0x96	; 150
    2bc4:	11 c0       	rjmp	.+34     	; 0x2be8 <__floatsisf+0x6a>
    2bc6:	77 23       	and	r23, r23
    2bc8:	21 f0       	breq	.+8      	; 0x2bd2 <__floatsisf+0x54>
    2bca:	9e e8       	ldi	r25, 0x8E	; 142
    2bcc:	87 2f       	mov	r24, r23
    2bce:	76 2f       	mov	r23, r22
    2bd0:	05 c0       	rjmp	.+10     	; 0x2bdc <__floatsisf+0x5e>
    2bd2:	66 23       	and	r22, r22
    2bd4:	71 f0       	breq	.+28     	; 0x2bf2 <__floatsisf+0x74>
    2bd6:	96 e8       	ldi	r25, 0x86	; 134
    2bd8:	86 2f       	mov	r24, r22
    2bda:	70 e0       	ldi	r23, 0x00	; 0
    2bdc:	60 e0       	ldi	r22, 0x00	; 0
    2bde:	2a f0       	brmi	.+10     	; 0x2bea <__floatsisf+0x6c>
    2be0:	9a 95       	dec	r25
    2be2:	66 0f       	add	r22, r22
    2be4:	77 1f       	adc	r23, r23
    2be6:	88 1f       	adc	r24, r24
    2be8:	da f7       	brpl	.-10     	; 0x2be0 <__floatsisf+0x62>
    2bea:	88 0f       	add	r24, r24
    2bec:	96 95       	lsr	r25
    2bee:	87 95       	ror	r24
    2bf0:	97 f9       	bld	r25, 7
    2bf2:	08 95       	ret

00002bf4 <__fp_cmp>:
    2bf4:	99 0f       	add	r25, r25
    2bf6:	00 08       	sbc	r0, r0
    2bf8:	55 0f       	add	r21, r21
    2bfa:	aa 0b       	sbc	r26, r26
    2bfc:	e0 e8       	ldi	r30, 0x80	; 128
    2bfe:	fe ef       	ldi	r31, 0xFE	; 254
    2c00:	16 16       	cp	r1, r22
    2c02:	17 06       	cpc	r1, r23
    2c04:	e8 07       	cpc	r30, r24
    2c06:	f9 07       	cpc	r31, r25
    2c08:	c0 f0       	brcs	.+48     	; 0x2c3a <__fp_cmp+0x46>
    2c0a:	12 16       	cp	r1, r18
    2c0c:	13 06       	cpc	r1, r19
    2c0e:	e4 07       	cpc	r30, r20
    2c10:	f5 07       	cpc	r31, r21
    2c12:	98 f0       	brcs	.+38     	; 0x2c3a <__fp_cmp+0x46>
    2c14:	62 1b       	sub	r22, r18
    2c16:	73 0b       	sbc	r23, r19
    2c18:	84 0b       	sbc	r24, r20
    2c1a:	95 0b       	sbc	r25, r21
    2c1c:	39 f4       	brne	.+14     	; 0x2c2c <__fp_cmp+0x38>
    2c1e:	0a 26       	eor	r0, r26
    2c20:	61 f0       	breq	.+24     	; 0x2c3a <__fp_cmp+0x46>
    2c22:	23 2b       	or	r18, r19
    2c24:	24 2b       	or	r18, r20
    2c26:	25 2b       	or	r18, r21
    2c28:	21 f4       	brne	.+8      	; 0x2c32 <__fp_cmp+0x3e>
    2c2a:	08 95       	ret
    2c2c:	0a 26       	eor	r0, r26
    2c2e:	09 f4       	brne	.+2      	; 0x2c32 <__fp_cmp+0x3e>
    2c30:	a1 40       	sbci	r26, 0x01	; 1
    2c32:	a6 95       	lsr	r26
    2c34:	8f ef       	ldi	r24, 0xFF	; 255
    2c36:	81 1d       	adc	r24, r1
    2c38:	81 1d       	adc	r24, r1
    2c3a:	08 95       	ret

00002c3c <__fp_inf>:
    2c3c:	97 f9       	bld	r25, 7
    2c3e:	9f 67       	ori	r25, 0x7F	; 127
    2c40:	80 e8       	ldi	r24, 0x80	; 128
    2c42:	70 e0       	ldi	r23, 0x00	; 0
    2c44:	60 e0       	ldi	r22, 0x00	; 0
    2c46:	08 95       	ret

00002c48 <__fp_nan>:
    2c48:	9f ef       	ldi	r25, 0xFF	; 255
    2c4a:	80 ec       	ldi	r24, 0xC0	; 192
    2c4c:	08 95       	ret

00002c4e <__fp_pscA>:
    2c4e:	00 24       	eor	r0, r0
    2c50:	0a 94       	dec	r0
    2c52:	16 16       	cp	r1, r22
    2c54:	17 06       	cpc	r1, r23
    2c56:	18 06       	cpc	r1, r24
    2c58:	09 06       	cpc	r0, r25
    2c5a:	08 95       	ret

00002c5c <__fp_pscB>:
    2c5c:	00 24       	eor	r0, r0
    2c5e:	0a 94       	dec	r0
    2c60:	12 16       	cp	r1, r18
    2c62:	13 06       	cpc	r1, r19
    2c64:	14 06       	cpc	r1, r20
    2c66:	05 06       	cpc	r0, r21
    2c68:	08 95       	ret

00002c6a <__fp_round>:
    2c6a:	09 2e       	mov	r0, r25
    2c6c:	03 94       	inc	r0
    2c6e:	00 0c       	add	r0, r0
    2c70:	11 f4       	brne	.+4      	; 0x2c76 <__fp_round+0xc>
    2c72:	88 23       	and	r24, r24
    2c74:	52 f0       	brmi	.+20     	; 0x2c8a <__fp_round+0x20>
    2c76:	bb 0f       	add	r27, r27
    2c78:	40 f4       	brcc	.+16     	; 0x2c8a <__fp_round+0x20>
    2c7a:	bf 2b       	or	r27, r31
    2c7c:	11 f4       	brne	.+4      	; 0x2c82 <__fp_round+0x18>
    2c7e:	60 ff       	sbrs	r22, 0
    2c80:	04 c0       	rjmp	.+8      	; 0x2c8a <__fp_round+0x20>
    2c82:	6f 5f       	subi	r22, 0xFF	; 255
    2c84:	7f 4f       	sbci	r23, 0xFF	; 255
    2c86:	8f 4f       	sbci	r24, 0xFF	; 255
    2c88:	9f 4f       	sbci	r25, 0xFF	; 255
    2c8a:	08 95       	ret

00002c8c <__fp_split3>:
    2c8c:	57 fd       	sbrc	r21, 7
    2c8e:	90 58       	subi	r25, 0x80	; 128
    2c90:	44 0f       	add	r20, r20
    2c92:	55 1f       	adc	r21, r21
    2c94:	59 f0       	breq	.+22     	; 0x2cac <__fp_splitA+0x10>
    2c96:	5f 3f       	cpi	r21, 0xFF	; 255
    2c98:	71 f0       	breq	.+28     	; 0x2cb6 <__fp_splitA+0x1a>
    2c9a:	47 95       	ror	r20

00002c9c <__fp_splitA>:
    2c9c:	88 0f       	add	r24, r24
    2c9e:	97 fb       	bst	r25, 7
    2ca0:	99 1f       	adc	r25, r25
    2ca2:	61 f0       	breq	.+24     	; 0x2cbc <__fp_splitA+0x20>
    2ca4:	9f 3f       	cpi	r25, 0xFF	; 255
    2ca6:	79 f0       	breq	.+30     	; 0x2cc6 <__fp_splitA+0x2a>
    2ca8:	87 95       	ror	r24
    2caa:	08 95       	ret
    2cac:	12 16       	cp	r1, r18
    2cae:	13 06       	cpc	r1, r19
    2cb0:	14 06       	cpc	r1, r20
    2cb2:	55 1f       	adc	r21, r21
    2cb4:	f2 cf       	rjmp	.-28     	; 0x2c9a <__fp_split3+0xe>
    2cb6:	46 95       	lsr	r20
    2cb8:	f1 df       	rcall	.-30     	; 0x2c9c <__fp_splitA>
    2cba:	08 c0       	rjmp	.+16     	; 0x2ccc <__fp_splitA+0x30>
    2cbc:	16 16       	cp	r1, r22
    2cbe:	17 06       	cpc	r1, r23
    2cc0:	18 06       	cpc	r1, r24
    2cc2:	99 1f       	adc	r25, r25
    2cc4:	f1 cf       	rjmp	.-30     	; 0x2ca8 <__fp_splitA+0xc>
    2cc6:	86 95       	lsr	r24
    2cc8:	71 05       	cpc	r23, r1
    2cca:	61 05       	cpc	r22, r1
    2ccc:	08 94       	sec
    2cce:	08 95       	ret

00002cd0 <__fp_zero>:
    2cd0:	e8 94       	clt

00002cd2 <__fp_szero>:
    2cd2:	bb 27       	eor	r27, r27
    2cd4:	66 27       	eor	r22, r22
    2cd6:	77 27       	eor	r23, r23
    2cd8:	cb 01       	movw	r24, r22
    2cda:	97 f9       	bld	r25, 7
    2cdc:	08 95       	ret

00002cde <__gesf2>:
    2cde:	8a df       	rcall	.-236    	; 0x2bf4 <__fp_cmp>
    2ce0:	08 f4       	brcc	.+2      	; 0x2ce4 <__gesf2+0x6>
    2ce2:	8f ef       	ldi	r24, 0xFF	; 255
    2ce4:	08 95       	ret

00002ce6 <__mulsf3>:
    2ce6:	0b d0       	rcall	.+22     	; 0x2cfe <__mulsf3x>
    2ce8:	c0 cf       	rjmp	.-128    	; 0x2c6a <__fp_round>
    2cea:	b1 df       	rcall	.-158    	; 0x2c4e <__fp_pscA>
    2cec:	28 f0       	brcs	.+10     	; 0x2cf8 <__mulsf3+0x12>
    2cee:	b6 df       	rcall	.-148    	; 0x2c5c <__fp_pscB>
    2cf0:	18 f0       	brcs	.+6      	; 0x2cf8 <__mulsf3+0x12>
    2cf2:	95 23       	and	r25, r21
    2cf4:	09 f0       	breq	.+2      	; 0x2cf8 <__mulsf3+0x12>
    2cf6:	a2 cf       	rjmp	.-188    	; 0x2c3c <__fp_inf>
    2cf8:	a7 cf       	rjmp	.-178    	; 0x2c48 <__fp_nan>
    2cfa:	11 24       	eor	r1, r1
    2cfc:	ea cf       	rjmp	.-44     	; 0x2cd2 <__fp_szero>

00002cfe <__mulsf3x>:
    2cfe:	c6 df       	rcall	.-116    	; 0x2c8c <__fp_split3>
    2d00:	a0 f3       	brcs	.-24     	; 0x2cea <__mulsf3+0x4>

00002d02 <__mulsf3_pse>:
    2d02:	95 9f       	mul	r25, r21
    2d04:	d1 f3       	breq	.-12     	; 0x2cfa <__mulsf3+0x14>
    2d06:	95 0f       	add	r25, r21
    2d08:	50 e0       	ldi	r21, 0x00	; 0
    2d0a:	55 1f       	adc	r21, r21
    2d0c:	62 9f       	mul	r22, r18
    2d0e:	f0 01       	movw	r30, r0
    2d10:	72 9f       	mul	r23, r18
    2d12:	bb 27       	eor	r27, r27
    2d14:	f0 0d       	add	r31, r0
    2d16:	b1 1d       	adc	r27, r1
    2d18:	63 9f       	mul	r22, r19
    2d1a:	aa 27       	eor	r26, r26
    2d1c:	f0 0d       	add	r31, r0
    2d1e:	b1 1d       	adc	r27, r1
    2d20:	aa 1f       	adc	r26, r26
    2d22:	64 9f       	mul	r22, r20
    2d24:	66 27       	eor	r22, r22
    2d26:	b0 0d       	add	r27, r0
    2d28:	a1 1d       	adc	r26, r1
    2d2a:	66 1f       	adc	r22, r22
    2d2c:	82 9f       	mul	r24, r18
    2d2e:	22 27       	eor	r18, r18
    2d30:	b0 0d       	add	r27, r0
    2d32:	a1 1d       	adc	r26, r1
    2d34:	62 1f       	adc	r22, r18
    2d36:	73 9f       	mul	r23, r19
    2d38:	b0 0d       	add	r27, r0
    2d3a:	a1 1d       	adc	r26, r1
    2d3c:	62 1f       	adc	r22, r18
    2d3e:	83 9f       	mul	r24, r19
    2d40:	a0 0d       	add	r26, r0
    2d42:	61 1d       	adc	r22, r1
    2d44:	22 1f       	adc	r18, r18
    2d46:	74 9f       	mul	r23, r20
    2d48:	33 27       	eor	r19, r19
    2d4a:	a0 0d       	add	r26, r0
    2d4c:	61 1d       	adc	r22, r1
    2d4e:	23 1f       	adc	r18, r19
    2d50:	84 9f       	mul	r24, r20
    2d52:	60 0d       	add	r22, r0
    2d54:	21 1d       	adc	r18, r1
    2d56:	82 2f       	mov	r24, r18
    2d58:	76 2f       	mov	r23, r22
    2d5a:	6a 2f       	mov	r22, r26
    2d5c:	11 24       	eor	r1, r1
    2d5e:	9f 57       	subi	r25, 0x7F	; 127
    2d60:	50 40       	sbci	r21, 0x00	; 0
    2d62:	8a f0       	brmi	.+34     	; 0x2d86 <__mulsf3_pse+0x84>
    2d64:	e1 f0       	breq	.+56     	; 0x2d9e <__mulsf3_pse+0x9c>
    2d66:	88 23       	and	r24, r24
    2d68:	4a f0       	brmi	.+18     	; 0x2d7c <__mulsf3_pse+0x7a>
    2d6a:	ee 0f       	add	r30, r30
    2d6c:	ff 1f       	adc	r31, r31
    2d6e:	bb 1f       	adc	r27, r27
    2d70:	66 1f       	adc	r22, r22
    2d72:	77 1f       	adc	r23, r23
    2d74:	88 1f       	adc	r24, r24
    2d76:	91 50       	subi	r25, 0x01	; 1
    2d78:	50 40       	sbci	r21, 0x00	; 0
    2d7a:	a9 f7       	brne	.-22     	; 0x2d66 <__mulsf3_pse+0x64>
    2d7c:	9e 3f       	cpi	r25, 0xFE	; 254
    2d7e:	51 05       	cpc	r21, r1
    2d80:	70 f0       	brcs	.+28     	; 0x2d9e <__mulsf3_pse+0x9c>
    2d82:	5c cf       	rjmp	.-328    	; 0x2c3c <__fp_inf>
    2d84:	a6 cf       	rjmp	.-180    	; 0x2cd2 <__fp_szero>
    2d86:	5f 3f       	cpi	r21, 0xFF	; 255
    2d88:	ec f3       	brlt	.-6      	; 0x2d84 <__mulsf3_pse+0x82>
    2d8a:	98 3e       	cpi	r25, 0xE8	; 232
    2d8c:	dc f3       	brlt	.-10     	; 0x2d84 <__mulsf3_pse+0x82>
    2d8e:	86 95       	lsr	r24
    2d90:	77 95       	ror	r23
    2d92:	67 95       	ror	r22
    2d94:	b7 95       	ror	r27
    2d96:	f7 95       	ror	r31
    2d98:	e7 95       	ror	r30
    2d9a:	9f 5f       	subi	r25, 0xFF	; 255
    2d9c:	c1 f7       	brne	.-16     	; 0x2d8e <__mulsf3_pse+0x8c>
    2d9e:	fe 2b       	or	r31, r30
    2da0:	88 0f       	add	r24, r24
    2da2:	91 1d       	adc	r25, r1
    2da4:	96 95       	lsr	r25
    2da6:	87 95       	ror	r24
    2da8:	97 f9       	bld	r25, 7
    2daa:	08 95       	ret

00002dac <pow>:
    2dac:	fa 01       	movw	r30, r20
    2dae:	ee 0f       	add	r30, r30
    2db0:	ff 1f       	adc	r31, r31
    2db2:	30 96       	adiw	r30, 0x00	; 0
    2db4:	21 05       	cpc	r18, r1
    2db6:	31 05       	cpc	r19, r1
    2db8:	99 f1       	breq	.+102    	; 0x2e20 <pow+0x74>
    2dba:	61 15       	cp	r22, r1
    2dbc:	71 05       	cpc	r23, r1
    2dbe:	61 f4       	brne	.+24     	; 0x2dd8 <pow+0x2c>
    2dc0:	80 38       	cpi	r24, 0x80	; 128
    2dc2:	bf e3       	ldi	r27, 0x3F	; 63
    2dc4:	9b 07       	cpc	r25, r27
    2dc6:	49 f1       	breq	.+82     	; 0x2e1a <pow+0x6e>
    2dc8:	68 94       	set
    2dca:	90 38       	cpi	r25, 0x80	; 128
    2dcc:	81 05       	cpc	r24, r1
    2dce:	61 f0       	breq	.+24     	; 0x2de8 <pow+0x3c>
    2dd0:	80 38       	cpi	r24, 0x80	; 128
    2dd2:	bf ef       	ldi	r27, 0xFF	; 255
    2dd4:	9b 07       	cpc	r25, r27
    2dd6:	41 f0       	breq	.+16     	; 0x2de8 <pow+0x3c>
    2dd8:	99 23       	and	r25, r25
    2dda:	42 f5       	brpl	.+80     	; 0x2e2c <pow+0x80>
    2ddc:	ff 3f       	cpi	r31, 0xFF	; 255
    2dde:	e1 05       	cpc	r30, r1
    2de0:	31 05       	cpc	r19, r1
    2de2:	21 05       	cpc	r18, r1
    2de4:	11 f1       	breq	.+68     	; 0x2e2a <pow+0x7e>
    2de6:	e8 94       	clt
    2de8:	08 94       	sec
    2dea:	e7 95       	ror	r30
    2dec:	d9 01       	movw	r26, r18
    2dee:	aa 23       	and	r26, r26
    2df0:	29 f4       	brne	.+10     	; 0x2dfc <pow+0x50>
    2df2:	ab 2f       	mov	r26, r27
    2df4:	be 2f       	mov	r27, r30
    2df6:	f8 5f       	subi	r31, 0xF8	; 248
    2df8:	d0 f3       	brcs	.-12     	; 0x2dee <pow+0x42>
    2dfa:	10 c0       	rjmp	.+32     	; 0x2e1c <pow+0x70>
    2dfc:	ff 5f       	subi	r31, 0xFF	; 255
    2dfe:	70 f4       	brcc	.+28     	; 0x2e1c <pow+0x70>
    2e00:	a6 95       	lsr	r26
    2e02:	e0 f7       	brcc	.-8      	; 0x2dfc <pow+0x50>
    2e04:	f7 39       	cpi	r31, 0x97	; 151
    2e06:	50 f0       	brcs	.+20     	; 0x2e1c <pow+0x70>
    2e08:	19 f0       	breq	.+6      	; 0x2e10 <pow+0x64>
    2e0a:	ff 3a       	cpi	r31, 0xAF	; 175
    2e0c:	38 f4       	brcc	.+14     	; 0x2e1c <pow+0x70>
    2e0e:	9f 77       	andi	r25, 0x7F	; 127
    2e10:	9f 93       	push	r25
    2e12:	0c d0       	rcall	.+24     	; 0x2e2c <pow+0x80>
    2e14:	0f 90       	pop	r0
    2e16:	07 fc       	sbrc	r0, 7
    2e18:	90 58       	subi	r25, 0x80	; 128
    2e1a:	08 95       	ret
    2e1c:	3e f0       	brts	.+14     	; 0x2e2c <pow+0x80>
    2e1e:	14 cf       	rjmp	.-472    	; 0x2c48 <__fp_nan>
    2e20:	60 e0       	ldi	r22, 0x00	; 0
    2e22:	70 e0       	ldi	r23, 0x00	; 0
    2e24:	80 e8       	ldi	r24, 0x80	; 128
    2e26:	9f e3       	ldi	r25, 0x3F	; 63
    2e28:	08 95       	ret
    2e2a:	4f e7       	ldi	r20, 0x7F	; 127
    2e2c:	9f 77       	andi	r25, 0x7F	; 127
    2e2e:	5f 93       	push	r21
    2e30:	4f 93       	push	r20
    2e32:	3f 93       	push	r19
    2e34:	2f 93       	push	r18
    2e36:	9e d0       	rcall	.+316    	; 0x2f74 <log>
    2e38:	2f 91       	pop	r18
    2e3a:	3f 91       	pop	r19
    2e3c:	4f 91       	pop	r20
    2e3e:	5f 91       	pop	r21
    2e40:	52 df       	rcall	.-348    	; 0x2ce6 <__mulsf3>
    2e42:	05 c0       	rjmp	.+10     	; 0x2e4e <exp>
    2e44:	19 f4       	brne	.+6      	; 0x2e4c <pow+0xa0>
    2e46:	0e f0       	brts	.+2      	; 0x2e4a <pow+0x9e>
    2e48:	f9 ce       	rjmp	.-526    	; 0x2c3c <__fp_inf>
    2e4a:	42 cf       	rjmp	.-380    	; 0x2cd0 <__fp_zero>
    2e4c:	fd ce       	rjmp	.-518    	; 0x2c48 <__fp_nan>

00002e4e <exp>:
    2e4e:	26 df       	rcall	.-436    	; 0x2c9c <__fp_splitA>
    2e50:	c8 f3       	brcs	.-14     	; 0x2e44 <pow+0x98>
    2e52:	96 38       	cpi	r25, 0x86	; 134
    2e54:	c0 f7       	brcc	.-16     	; 0x2e46 <pow+0x9a>
    2e56:	07 f8       	bld	r0, 7
    2e58:	0f 92       	push	r0
    2e5a:	e8 94       	clt
    2e5c:	2b e3       	ldi	r18, 0x3B	; 59
    2e5e:	3a ea       	ldi	r19, 0xAA	; 170
    2e60:	48 eb       	ldi	r20, 0xB8	; 184
    2e62:	5f e7       	ldi	r21, 0x7F	; 127
    2e64:	4e df       	rcall	.-356    	; 0x2d02 <__mulsf3_pse>
    2e66:	0f 92       	push	r0
    2e68:	0f 92       	push	r0
    2e6a:	0f 92       	push	r0
    2e6c:	4d b7       	in	r20, 0x3d	; 61
    2e6e:	5e b7       	in	r21, 0x3e	; 62
    2e70:	0f 92       	push	r0
    2e72:	c0 d0       	rcall	.+384    	; 0x2ff4 <modf>
    2e74:	e2 ef       	ldi	r30, 0xF2	; 242
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	16 d0       	rcall	.+44     	; 0x2ea6 <__fp_powser>
    2e7a:	4f 91       	pop	r20
    2e7c:	5f 91       	pop	r21
    2e7e:	ef 91       	pop	r30
    2e80:	ff 91       	pop	r31
    2e82:	e5 95       	asr	r30
    2e84:	ee 1f       	adc	r30, r30
    2e86:	ff 1f       	adc	r31, r31
    2e88:	49 f0       	breq	.+18     	; 0x2e9c <exp+0x4e>
    2e8a:	fe 57       	subi	r31, 0x7E	; 126
    2e8c:	e0 68       	ori	r30, 0x80	; 128
    2e8e:	44 27       	eor	r20, r20
    2e90:	ee 0f       	add	r30, r30
    2e92:	44 1f       	adc	r20, r20
    2e94:	fa 95       	dec	r31
    2e96:	e1 f7       	brne	.-8      	; 0x2e90 <exp+0x42>
    2e98:	41 95       	neg	r20
    2e9a:	55 0b       	sbc	r21, r21
    2e9c:	32 d0       	rcall	.+100    	; 0x2f02 <ldexp>
    2e9e:	0f 90       	pop	r0
    2ea0:	07 fe       	sbrs	r0, 7
    2ea2:	26 c0       	rjmp	.+76     	; 0x2ef0 <inverse>
    2ea4:	08 95       	ret

00002ea6 <__fp_powser>:
    2ea6:	df 93       	push	r29
    2ea8:	cf 93       	push	r28
    2eaa:	1f 93       	push	r17
    2eac:	0f 93       	push	r16
    2eae:	ff 92       	push	r15
    2eb0:	ef 92       	push	r14
    2eb2:	df 92       	push	r13
    2eb4:	7b 01       	movw	r14, r22
    2eb6:	8c 01       	movw	r16, r24
    2eb8:	68 94       	set
    2eba:	05 c0       	rjmp	.+10     	; 0x2ec6 <__fp_powser+0x20>
    2ebc:	da 2e       	mov	r13, r26
    2ebe:	ef 01       	movw	r28, r30
    2ec0:	1e df       	rcall	.-452    	; 0x2cfe <__mulsf3x>
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	e8 94       	clt
    2ec6:	a5 91       	lpm	r26, Z+
    2ec8:	25 91       	lpm	r18, Z+
    2eca:	35 91       	lpm	r19, Z+
    2ecc:	45 91       	lpm	r20, Z+
    2ece:	55 91       	lpm	r21, Z+
    2ed0:	ae f3       	brts	.-22     	; 0x2ebc <__fp_powser+0x16>
    2ed2:	ef 01       	movw	r28, r30
    2ed4:	62 dd       	rcall	.-1340   	; 0x299a <__addsf3x>
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	97 01       	movw	r18, r14
    2eda:	a8 01       	movw	r20, r16
    2edc:	da 94       	dec	r13
    2ede:	79 f7       	brne	.-34     	; 0x2ebe <__fp_powser+0x18>
    2ee0:	df 90       	pop	r13
    2ee2:	ef 90       	pop	r14
    2ee4:	ff 90       	pop	r15
    2ee6:	0f 91       	pop	r16
    2ee8:	1f 91       	pop	r17
    2eea:	cf 91       	pop	r28
    2eec:	df 91       	pop	r29
    2eee:	08 95       	ret

00002ef0 <inverse>:
    2ef0:	9b 01       	movw	r18, r22
    2ef2:	ac 01       	movw	r20, r24
    2ef4:	60 e0       	ldi	r22, 0x00	; 0
    2ef6:	70 e0       	ldi	r23, 0x00	; 0
    2ef8:	80 e8       	ldi	r24, 0x80	; 128
    2efa:	9f e3       	ldi	r25, 0x3F	; 63
    2efc:	a5 cd       	rjmp	.-1206   	; 0x2a48 <__divsf3>
    2efe:	9e ce       	rjmp	.-708    	; 0x2c3c <__fp_inf>
    2f00:	ac c0       	rjmp	.+344    	; 0x305a <__fp_mpack>

00002f02 <ldexp>:
    2f02:	cc de       	rcall	.-616    	; 0x2c9c <__fp_splitA>
    2f04:	e8 f3       	brcs	.-6      	; 0x2f00 <inverse+0x10>
    2f06:	99 23       	and	r25, r25
    2f08:	d9 f3       	breq	.-10     	; 0x2f00 <inverse+0x10>
    2f0a:	94 0f       	add	r25, r20
    2f0c:	51 1d       	adc	r21, r1
    2f0e:	bb f3       	brvs	.-18     	; 0x2efe <inverse+0xe>
    2f10:	91 50       	subi	r25, 0x01	; 1
    2f12:	50 40       	sbci	r21, 0x00	; 0
    2f14:	94 f0       	brlt	.+36     	; 0x2f3a <ldexp+0x38>
    2f16:	59 f0       	breq	.+22     	; 0x2f2e <ldexp+0x2c>
    2f18:	88 23       	and	r24, r24
    2f1a:	32 f0       	brmi	.+12     	; 0x2f28 <ldexp+0x26>
    2f1c:	66 0f       	add	r22, r22
    2f1e:	77 1f       	adc	r23, r23
    2f20:	88 1f       	adc	r24, r24
    2f22:	91 50       	subi	r25, 0x01	; 1
    2f24:	50 40       	sbci	r21, 0x00	; 0
    2f26:	c1 f7       	brne	.-16     	; 0x2f18 <ldexp+0x16>
    2f28:	9e 3f       	cpi	r25, 0xFE	; 254
    2f2a:	51 05       	cpc	r21, r1
    2f2c:	44 f7       	brge	.-48     	; 0x2efe <inverse+0xe>
    2f2e:	88 0f       	add	r24, r24
    2f30:	91 1d       	adc	r25, r1
    2f32:	96 95       	lsr	r25
    2f34:	87 95       	ror	r24
    2f36:	97 f9       	bld	r25, 7
    2f38:	08 95       	ret
    2f3a:	5f 3f       	cpi	r21, 0xFF	; 255
    2f3c:	ac f0       	brlt	.+42     	; 0x2f68 <ldexp+0x66>
    2f3e:	98 3e       	cpi	r25, 0xE8	; 232
    2f40:	9c f0       	brlt	.+38     	; 0x2f68 <ldexp+0x66>
    2f42:	bb 27       	eor	r27, r27
    2f44:	86 95       	lsr	r24
    2f46:	77 95       	ror	r23
    2f48:	67 95       	ror	r22
    2f4a:	b7 95       	ror	r27
    2f4c:	08 f4       	brcc	.+2      	; 0x2f50 <ldexp+0x4e>
    2f4e:	b1 60       	ori	r27, 0x01	; 1
    2f50:	93 95       	inc	r25
    2f52:	c1 f7       	brne	.-16     	; 0x2f44 <ldexp+0x42>
    2f54:	bb 0f       	add	r27, r27
    2f56:	58 f7       	brcc	.-42     	; 0x2f2e <ldexp+0x2c>
    2f58:	11 f4       	brne	.+4      	; 0x2f5e <ldexp+0x5c>
    2f5a:	60 ff       	sbrs	r22, 0
    2f5c:	e8 cf       	rjmp	.-48     	; 0x2f2e <ldexp+0x2c>
    2f5e:	6f 5f       	subi	r22, 0xFF	; 255
    2f60:	7f 4f       	sbci	r23, 0xFF	; 255
    2f62:	8f 4f       	sbci	r24, 0xFF	; 255
    2f64:	9f 4f       	sbci	r25, 0xFF	; 255
    2f66:	e3 cf       	rjmp	.-58     	; 0x2f2e <ldexp+0x2c>
    2f68:	b4 ce       	rjmp	.-664    	; 0x2cd2 <__fp_szero>
    2f6a:	0e f0       	brts	.+2      	; 0x2f6e <ldexp+0x6c>
    2f6c:	76 c0       	rjmp	.+236    	; 0x305a <__fp_mpack>
    2f6e:	6c ce       	rjmp	.-808    	; 0x2c48 <__fp_nan>
    2f70:	68 94       	set
    2f72:	64 ce       	rjmp	.-824    	; 0x2c3c <__fp_inf>

00002f74 <log>:
    2f74:	93 de       	rcall	.-730    	; 0x2c9c <__fp_splitA>
    2f76:	c8 f3       	brcs	.-14     	; 0x2f6a <ldexp+0x68>
    2f78:	99 23       	and	r25, r25
    2f7a:	d1 f3       	breq	.-12     	; 0x2f70 <ldexp+0x6e>
    2f7c:	c6 f3       	brts	.-16     	; 0x2f6e <ldexp+0x6c>
    2f7e:	df 93       	push	r29
    2f80:	cf 93       	push	r28
    2f82:	1f 93       	push	r17
    2f84:	0f 93       	push	r16
    2f86:	ff 92       	push	r15
    2f88:	c9 2f       	mov	r28, r25
    2f8a:	dd 27       	eor	r29, r29
    2f8c:	88 23       	and	r24, r24
    2f8e:	2a f0       	brmi	.+10     	; 0x2f9a <log+0x26>
    2f90:	21 97       	sbiw	r28, 0x01	; 1
    2f92:	66 0f       	add	r22, r22
    2f94:	77 1f       	adc	r23, r23
    2f96:	88 1f       	adc	r24, r24
    2f98:	da f7       	brpl	.-10     	; 0x2f90 <log+0x1c>
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	40 e8       	ldi	r20, 0x80	; 128
    2fa0:	5f eb       	ldi	r21, 0xBF	; 191
    2fa2:	9f e3       	ldi	r25, 0x3F	; 63
    2fa4:	88 39       	cpi	r24, 0x98	; 152
    2fa6:	20 f0       	brcs	.+8      	; 0x2fb0 <log+0x3c>
    2fa8:	80 3e       	cpi	r24, 0xE0	; 224
    2faa:	30 f0       	brcs	.+12     	; 0x2fb8 <log+0x44>
    2fac:	21 96       	adiw	r28, 0x01	; 1
    2fae:	8f 77       	andi	r24, 0x7F	; 127
    2fb0:	e3 dc       	rcall	.-1594   	; 0x2978 <__addsf3>
    2fb2:	ea e1       	ldi	r30, 0x1A	; 26
    2fb4:	f1 e0       	ldi	r31, 0x01	; 1
    2fb6:	03 c0       	rjmp	.+6      	; 0x2fbe <log+0x4a>
    2fb8:	df dc       	rcall	.-1602   	; 0x2978 <__addsf3>
    2fba:	e7 e4       	ldi	r30, 0x47	; 71
    2fbc:	f1 e0       	ldi	r31, 0x01	; 1
    2fbe:	73 df       	rcall	.-282    	; 0x2ea6 <__fp_powser>
    2fc0:	8b 01       	movw	r16, r22
    2fc2:	be 01       	movw	r22, r28
    2fc4:	ec 01       	movw	r28, r24
    2fc6:	fb 2e       	mov	r15, r27
    2fc8:	6f 57       	subi	r22, 0x7F	; 127
    2fca:	71 09       	sbc	r23, r1
    2fcc:	75 95       	asr	r23
    2fce:	77 1f       	adc	r23, r23
    2fd0:	88 0b       	sbc	r24, r24
    2fd2:	99 0b       	sbc	r25, r25
    2fd4:	d4 dd       	rcall	.-1112   	; 0x2b7e <__floatsisf>
    2fd6:	28 e1       	ldi	r18, 0x18	; 24
    2fd8:	32 e7       	ldi	r19, 0x72	; 114
    2fda:	41 e3       	ldi	r20, 0x31	; 49
    2fdc:	5f e3       	ldi	r21, 0x3F	; 63
    2fde:	8f de       	rcall	.-738    	; 0x2cfe <__mulsf3x>
    2fe0:	af 2d       	mov	r26, r15
    2fe2:	98 01       	movw	r18, r16
    2fe4:	ae 01       	movw	r20, r28
    2fe6:	ff 90       	pop	r15
    2fe8:	0f 91       	pop	r16
    2fea:	1f 91       	pop	r17
    2fec:	cf 91       	pop	r28
    2fee:	df 91       	pop	r29
    2ff0:	d4 dc       	rcall	.-1624   	; 0x299a <__addsf3x>
    2ff2:	3b ce       	rjmp	.-906    	; 0x2c6a <__fp_round>

00002ff4 <modf>:
    2ff4:	fa 01       	movw	r30, r20
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	aa 0f       	add	r26, r26
    2ffa:	bb 1f       	adc	r27, r27
    2ffc:	9b 01       	movw	r18, r22
    2ffe:	ac 01       	movw	r20, r24
    3000:	bf 57       	subi	r27, 0x7F	; 127
    3002:	28 f4       	brcc	.+10     	; 0x300e <modf+0x1a>
    3004:	22 27       	eor	r18, r18
    3006:	33 27       	eor	r19, r19
    3008:	44 27       	eor	r20, r20
    300a:	50 78       	andi	r21, 0x80	; 128
    300c:	1f c0       	rjmp	.+62     	; 0x304c <modf+0x58>
    300e:	b7 51       	subi	r27, 0x17	; 23
    3010:	88 f4       	brcc	.+34     	; 0x3034 <modf+0x40>
    3012:	ab 2f       	mov	r26, r27
    3014:	00 24       	eor	r0, r0
    3016:	46 95       	lsr	r20
    3018:	37 95       	ror	r19
    301a:	27 95       	ror	r18
    301c:	01 1c       	adc	r0, r1
    301e:	a3 95       	inc	r26
    3020:	d2 f3       	brmi	.-12     	; 0x3016 <modf+0x22>
    3022:	00 20       	and	r0, r0
    3024:	69 f0       	breq	.+26     	; 0x3040 <modf+0x4c>
    3026:	22 0f       	add	r18, r18
    3028:	33 1f       	adc	r19, r19
    302a:	44 1f       	adc	r20, r20
    302c:	b3 95       	inc	r27
    302e:	da f3       	brmi	.-10     	; 0x3026 <modf+0x32>
    3030:	0d d0       	rcall	.+26     	; 0x304c <modf+0x58>
    3032:	a1 cc       	rjmp	.-1726   	; 0x2976 <__subsf3>
    3034:	61 30       	cpi	r22, 0x01	; 1
    3036:	71 05       	cpc	r23, r1
    3038:	a0 e8       	ldi	r26, 0x80	; 128
    303a:	8a 07       	cpc	r24, r26
    303c:	b9 46       	sbci	r27, 0x69	; 105
    303e:	30 f4       	brcc	.+12     	; 0x304c <modf+0x58>
    3040:	9b 01       	movw	r18, r22
    3042:	ac 01       	movw	r20, r24
    3044:	66 27       	eor	r22, r22
    3046:	77 27       	eor	r23, r23
    3048:	88 27       	eor	r24, r24
    304a:	90 78       	andi	r25, 0x80	; 128
    304c:	30 96       	adiw	r30, 0x00	; 0
    304e:	21 f0       	breq	.+8      	; 0x3058 <modf+0x64>
    3050:	20 83       	st	Z, r18
    3052:	31 83       	std	Z+1, r19	; 0x01
    3054:	42 83       	std	Z+2, r20	; 0x02
    3056:	53 83       	std	Z+3, r21	; 0x03
    3058:	08 95       	ret

0000305a <__fp_mpack>:
    305a:	9f 3f       	cpi	r25, 0xFF	; 255
    305c:	31 f0       	breq	.+12     	; 0x306a <__fp_mpack_finite+0xc>

0000305e <__fp_mpack_finite>:
    305e:	91 50       	subi	r25, 0x01	; 1
    3060:	20 f4       	brcc	.+8      	; 0x306a <__fp_mpack_finite+0xc>
    3062:	87 95       	ror	r24
    3064:	77 95       	ror	r23
    3066:	67 95       	ror	r22
    3068:	b7 95       	ror	r27
    306a:	88 0f       	add	r24, r24
    306c:	91 1d       	adc	r25, r1
    306e:	96 95       	lsr	r25
    3070:	87 95       	ror	r24
    3072:	97 f9       	bld	r25, 7
    3074:	08 95       	ret

00003076 <__mulsi3>:
    3076:	db 01       	movw	r26, r22
    3078:	8f 93       	push	r24
    307a:	9f 93       	push	r25
    307c:	52 d0       	rcall	.+164    	; 0x3122 <__muluhisi3>
    307e:	bf 91       	pop	r27
    3080:	af 91       	pop	r26
    3082:	a2 9f       	mul	r26, r18
    3084:	80 0d       	add	r24, r0
    3086:	91 1d       	adc	r25, r1
    3088:	a3 9f       	mul	r26, r19
    308a:	90 0d       	add	r25, r0
    308c:	b2 9f       	mul	r27, r18
    308e:	90 0d       	add	r25, r0
    3090:	11 24       	eor	r1, r1
    3092:	08 95       	ret

00003094 <__divmodhi4>:
    3094:	97 fb       	bst	r25, 7
    3096:	07 2e       	mov	r0, r23
    3098:	16 f4       	brtc	.+4      	; 0x309e <__divmodhi4+0xa>
    309a:	00 94       	com	r0
    309c:	06 d0       	rcall	.+12     	; 0x30aa <__divmodhi4_neg1>
    309e:	77 fd       	sbrc	r23, 7
    30a0:	08 d0       	rcall	.+16     	; 0x30b2 <__divmodhi4_neg2>
    30a2:	49 d0       	rcall	.+146    	; 0x3136 <__udivmodhi4>
    30a4:	07 fc       	sbrc	r0, 7
    30a6:	05 d0       	rcall	.+10     	; 0x30b2 <__divmodhi4_neg2>
    30a8:	3e f4       	brtc	.+14     	; 0x30b8 <__divmodhi4_exit>

000030aa <__divmodhi4_neg1>:
    30aa:	90 95       	com	r25
    30ac:	81 95       	neg	r24
    30ae:	9f 4f       	sbci	r25, 0xFF	; 255
    30b0:	08 95       	ret

000030b2 <__divmodhi4_neg2>:
    30b2:	70 95       	com	r23
    30b4:	61 95       	neg	r22
    30b6:	7f 4f       	sbci	r23, 0xFF	; 255

000030b8 <__divmodhi4_exit>:
    30b8:	08 95       	ret

000030ba <__divmodsi4>:
    30ba:	05 2e       	mov	r0, r21
    30bc:	97 fb       	bst	r25, 7
    30be:	16 f4       	brtc	.+4      	; 0x30c4 <__divmodsi4+0xa>
    30c0:	00 94       	com	r0
    30c2:	0f d0       	rcall	.+30     	; 0x30e2 <__negsi2>
    30c4:	57 fd       	sbrc	r21, 7
    30c6:	05 d0       	rcall	.+10     	; 0x30d2 <__divmodsi4_neg2>
    30c8:	4a d0       	rcall	.+148    	; 0x315e <__udivmodsi4>
    30ca:	07 fc       	sbrc	r0, 7
    30cc:	02 d0       	rcall	.+4      	; 0x30d2 <__divmodsi4_neg2>
    30ce:	46 f4       	brtc	.+16     	; 0x30e0 <__divmodsi4_exit>
    30d0:	08 c0       	rjmp	.+16     	; 0x30e2 <__negsi2>

000030d2 <__divmodsi4_neg2>:
    30d2:	50 95       	com	r21
    30d4:	40 95       	com	r20
    30d6:	30 95       	com	r19
    30d8:	21 95       	neg	r18
    30da:	3f 4f       	sbci	r19, 0xFF	; 255
    30dc:	4f 4f       	sbci	r20, 0xFF	; 255
    30de:	5f 4f       	sbci	r21, 0xFF	; 255

000030e0 <__divmodsi4_exit>:
    30e0:	08 95       	ret

000030e2 <__negsi2>:
    30e2:	90 95       	com	r25
    30e4:	80 95       	com	r24
    30e6:	70 95       	com	r23
    30e8:	61 95       	neg	r22
    30ea:	7f 4f       	sbci	r23, 0xFF	; 255
    30ec:	8f 4f       	sbci	r24, 0xFF	; 255
    30ee:	9f 4f       	sbci	r25, 0xFF	; 255
    30f0:	08 95       	ret

000030f2 <__tablejump2__>:
    30f2:	ee 0f       	add	r30, r30
    30f4:	ff 1f       	adc	r31, r31
    30f6:	00 24       	eor	r0, r0
    30f8:	00 1c       	adc	r0, r0
    30fa:	0b be       	out	0x3b, r0	; 59
    30fc:	07 90       	elpm	r0, Z+
    30fe:	f6 91       	elpm	r31, Z
    3100:	e0 2d       	mov	r30, r0
    3102:	09 94       	ijmp

00003104 <__umulhisi3>:
    3104:	a2 9f       	mul	r26, r18
    3106:	b0 01       	movw	r22, r0
    3108:	b3 9f       	mul	r27, r19
    310a:	c0 01       	movw	r24, r0
    310c:	a3 9f       	mul	r26, r19
    310e:	70 0d       	add	r23, r0
    3110:	81 1d       	adc	r24, r1
    3112:	11 24       	eor	r1, r1
    3114:	91 1d       	adc	r25, r1
    3116:	b2 9f       	mul	r27, r18
    3118:	70 0d       	add	r23, r0
    311a:	81 1d       	adc	r24, r1
    311c:	11 24       	eor	r1, r1
    311e:	91 1d       	adc	r25, r1
    3120:	08 95       	ret

00003122 <__muluhisi3>:
    3122:	f0 df       	rcall	.-32     	; 0x3104 <__umulhisi3>
    3124:	a5 9f       	mul	r26, r21
    3126:	90 0d       	add	r25, r0
    3128:	b4 9f       	mul	r27, r20
    312a:	90 0d       	add	r25, r0
    312c:	a4 9f       	mul	r26, r20
    312e:	80 0d       	add	r24, r0
    3130:	91 1d       	adc	r25, r1
    3132:	11 24       	eor	r1, r1
    3134:	08 95       	ret

00003136 <__udivmodhi4>:
    3136:	aa 1b       	sub	r26, r26
    3138:	bb 1b       	sub	r27, r27
    313a:	51 e1       	ldi	r21, 0x11	; 17
    313c:	07 c0       	rjmp	.+14     	; 0x314c <__udivmodhi4_ep>

0000313e <__udivmodhi4_loop>:
    313e:	aa 1f       	adc	r26, r26
    3140:	bb 1f       	adc	r27, r27
    3142:	a6 17       	cp	r26, r22
    3144:	b7 07       	cpc	r27, r23
    3146:	10 f0       	brcs	.+4      	; 0x314c <__udivmodhi4_ep>
    3148:	a6 1b       	sub	r26, r22
    314a:	b7 0b       	sbc	r27, r23

0000314c <__udivmodhi4_ep>:
    314c:	88 1f       	adc	r24, r24
    314e:	99 1f       	adc	r25, r25
    3150:	5a 95       	dec	r21
    3152:	a9 f7       	brne	.-22     	; 0x313e <__udivmodhi4_loop>
    3154:	80 95       	com	r24
    3156:	90 95       	com	r25
    3158:	bc 01       	movw	r22, r24
    315a:	cd 01       	movw	r24, r26
    315c:	08 95       	ret

0000315e <__udivmodsi4>:
    315e:	a1 e2       	ldi	r26, 0x21	; 33
    3160:	1a 2e       	mov	r1, r26
    3162:	aa 1b       	sub	r26, r26
    3164:	bb 1b       	sub	r27, r27
    3166:	fd 01       	movw	r30, r26
    3168:	0d c0       	rjmp	.+26     	; 0x3184 <__udivmodsi4_ep>

0000316a <__udivmodsi4_loop>:
    316a:	aa 1f       	adc	r26, r26
    316c:	bb 1f       	adc	r27, r27
    316e:	ee 1f       	adc	r30, r30
    3170:	ff 1f       	adc	r31, r31
    3172:	a2 17       	cp	r26, r18
    3174:	b3 07       	cpc	r27, r19
    3176:	e4 07       	cpc	r30, r20
    3178:	f5 07       	cpc	r31, r21
    317a:	20 f0       	brcs	.+8      	; 0x3184 <__udivmodsi4_ep>
    317c:	a2 1b       	sub	r26, r18
    317e:	b3 0b       	sbc	r27, r19
    3180:	e4 0b       	sbc	r30, r20
    3182:	f5 0b       	sbc	r31, r21

00003184 <__udivmodsi4_ep>:
    3184:	66 1f       	adc	r22, r22
    3186:	77 1f       	adc	r23, r23
    3188:	88 1f       	adc	r24, r24
    318a:	99 1f       	adc	r25, r25
    318c:	1a 94       	dec	r1
    318e:	69 f7       	brne	.-38     	; 0x316a <__udivmodsi4_loop>
    3190:	60 95       	com	r22
    3192:	70 95       	com	r23
    3194:	80 95       	com	r24
    3196:	90 95       	com	r25
    3198:	9b 01       	movw	r18, r22
    319a:	ac 01       	movw	r20, r24
    319c:	bd 01       	movw	r22, r26
    319e:	cf 01       	movw	r24, r30
    31a0:	08 95       	ret

000031a2 <eeprom_read_block>:
    31a2:	dc 01       	movw	r26, r24
    31a4:	cb 01       	movw	r24, r22

000031a6 <eeprom_read_blraw>:
    31a6:	fc 01       	movw	r30, r24
    31a8:	e1 99       	sbic	0x1c, 1	; 28
    31aa:	fe cf       	rjmp	.-4      	; 0x31a8 <eeprom_read_blraw+0x2>
    31ac:	06 c0       	rjmp	.+12     	; 0x31ba <eeprom_read_blraw+0x14>
    31ae:	ff bb       	out	0x1f, r31	; 31
    31b0:	ee bb       	out	0x1e, r30	; 30
    31b2:	e0 9a       	sbi	0x1c, 0	; 28
    31b4:	31 96       	adiw	r30, 0x01	; 1
    31b6:	0d b2       	in	r0, 0x1d	; 29
    31b8:	0d 92       	st	X+, r0
    31ba:	41 50       	subi	r20, 0x01	; 1
    31bc:	50 40       	sbci	r21, 0x00	; 0
    31be:	b8 f7       	brcc	.-18     	; 0x31ae <eeprom_read_blraw+0x8>
    31c0:	08 95       	ret

000031c2 <eeprom_read_byte>:
    31c2:	e1 99       	sbic	0x1c, 1	; 28
    31c4:	fe cf       	rjmp	.-4      	; 0x31c2 <eeprom_read_byte>
    31c6:	9f bb       	out	0x1f, r25	; 31
    31c8:	8e bb       	out	0x1e, r24	; 30
    31ca:	e0 9a       	sbi	0x1c, 0	; 28
    31cc:	99 27       	eor	r25, r25
    31ce:	8d b3       	in	r24, 0x1d	; 29
    31d0:	08 95       	ret

000031d2 <eeprom_read_word>:
    31d2:	a8 e1       	ldi	r26, 0x18	; 24
    31d4:	b0 e0       	ldi	r27, 0x00	; 0
    31d6:	42 e0       	ldi	r20, 0x02	; 2
    31d8:	50 e0       	ldi	r21, 0x00	; 0
    31da:	e5 cf       	rjmp	.-54     	; 0x31a6 <eeprom_read_blraw>

000031dc <eeprom_update_block>:
    31dc:	dc 01       	movw	r26, r24
    31de:	a4 0f       	add	r26, r20
    31e0:	b5 1f       	adc	r27, r21
    31e2:	41 50       	subi	r20, 0x01	; 1
    31e4:	50 40       	sbci	r21, 0x00	; 0
    31e6:	40 f0       	brcs	.+16     	; 0x31f8 <eeprom_update_block+0x1c>
    31e8:	cb 01       	movw	r24, r22
    31ea:	84 0f       	add	r24, r20
    31ec:	95 1f       	adc	r25, r21
    31ee:	2e 91       	ld	r18, -X
    31f0:	05 d0       	rcall	.+10     	; 0x31fc <eeprom_update_r18>
    31f2:	41 50       	subi	r20, 0x01	; 1
    31f4:	50 40       	sbci	r21, 0x00	; 0
    31f6:	d8 f7       	brcc	.-10     	; 0x31ee <eeprom_update_block+0x12>
    31f8:	08 95       	ret

000031fa <eeprom_update_byte>:
    31fa:	26 2f       	mov	r18, r22

000031fc <eeprom_update_r18>:
    31fc:	e1 99       	sbic	0x1c, 1	; 28
    31fe:	fe cf       	rjmp	.-4      	; 0x31fc <eeprom_update_r18>
    3200:	9f bb       	out	0x1f, r25	; 31
    3202:	8e bb       	out	0x1e, r24	; 30
    3204:	e0 9a       	sbi	0x1c, 0	; 28
    3206:	01 97       	sbiw	r24, 0x01	; 1
    3208:	0d b2       	in	r0, 0x1d	; 29
    320a:	02 16       	cp	r0, r18
    320c:	31 f0       	breq	.+12     	; 0x321a <eeprom_update_r18+0x1e>
    320e:	2d bb       	out	0x1d, r18	; 29
    3210:	0f b6       	in	r0, 0x3f	; 63
    3212:	f8 94       	cli
    3214:	e2 9a       	sbi	0x1c, 2	; 28
    3216:	e1 9a       	sbi	0x1c, 1	; 28
    3218:	0f be       	out	0x3f, r0	; 63
    321a:	08 95       	ret

0000321c <eeprom_update_dword>:
    321c:	03 96       	adiw	r24, 0x03	; 3
    321e:	27 2f       	mov	r18, r23
    3220:	ed df       	rcall	.-38     	; 0x31fc <eeprom_update_r18>
    3222:	eb df       	rcall	.-42     	; 0x31fa <eeprom_update_byte>
    3224:	25 2f       	mov	r18, r21
    3226:	ea df       	rcall	.-44     	; 0x31fc <eeprom_update_r18>
    3228:	24 2f       	mov	r18, r20
    322a:	e8 cf       	rjmp	.-48     	; 0x31fc <eeprom_update_r18>

0000322c <eeprom_update_word>:
    322c:	01 96       	adiw	r24, 0x01	; 1
    322e:	27 2f       	mov	r18, r23
    3230:	e5 df       	rcall	.-54     	; 0x31fc <eeprom_update_r18>
    3232:	e3 cf       	rjmp	.-58     	; 0x31fa <eeprom_update_byte>

00003234 <eeprom_write_block>:
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	02 c0       	rjmp	.+4      	; 0x323e <eeprom_write_block+0xa>
    323a:	2d 91       	ld	r18, X+
    323c:	05 d0       	rcall	.+10     	; 0x3248 <eeprom_write_r18>
    323e:	41 50       	subi	r20, 0x01	; 1
    3240:	50 40       	sbci	r21, 0x00	; 0
    3242:	d8 f7       	brcc	.-10     	; 0x323a <eeprom_write_block+0x6>
    3244:	08 95       	ret

00003246 <eeprom_write_byte>:
    3246:	26 2f       	mov	r18, r22

00003248 <eeprom_write_r18>:
    3248:	e1 99       	sbic	0x1c, 1	; 28
    324a:	fe cf       	rjmp	.-4      	; 0x3248 <eeprom_write_r18>
    324c:	9f bb       	out	0x1f, r25	; 31
    324e:	8e bb       	out	0x1e, r24	; 30
    3250:	2d bb       	out	0x1d, r18	; 29
    3252:	0f b6       	in	r0, 0x3f	; 63
    3254:	f8 94       	cli
    3256:	e2 9a       	sbi	0x1c, 2	; 28
    3258:	e1 9a       	sbi	0x1c, 1	; 28
    325a:	0f be       	out	0x3f, r0	; 63
    325c:	01 96       	adiw	r24, 0x01	; 1
    325e:	08 95       	ret

00003260 <eeprom_write_dword>:
    3260:	24 2f       	mov	r18, r20
    3262:	f2 df       	rcall	.-28     	; 0x3248 <eeprom_write_r18>
    3264:	25 2f       	mov	r18, r21
    3266:	f0 df       	rcall	.-32     	; 0x3248 <eeprom_write_r18>
    3268:	00 c0       	rjmp	.+0      	; 0x326a <eeprom_write_word>

0000326a <eeprom_write_word>:
    326a:	ed df       	rcall	.-38     	; 0x3246 <eeprom_write_byte>
    326c:	27 2f       	mov	r18, r23
    326e:	ec cf       	rjmp	.-40     	; 0x3248 <eeprom_write_r18>

00003270 <_exit>:
    3270:	f8 94       	cli

00003272 <__stop_program>:
    3272:	ff cf       	rjmp	.-2      	; 0x3272 <__stop_program>
