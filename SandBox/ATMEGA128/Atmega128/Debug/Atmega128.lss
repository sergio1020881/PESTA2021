
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  000035de  00003672  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002fa  00800154  00800154  000036c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000036c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000036f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000670  00000000  00000000  00003734  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007764  00000000  00000000  00003da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cf4  00000000  00000000  0000b508  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004071  00000000  00000000  0000d1fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001338  00000000  00000000  00011270  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000156a  00000000  00000000  000125a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006970  00000000  00000000  00013b12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005d0  00000000  00000000  0001a482  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a1 c0       	rjmp	.+322    	; 0x144 <__ctors_end>
       2:	00 00       	nop
       4:	be c0       	rjmp	.+380    	; 0x182 <__bad_interrupt>
       6:	00 00       	nop
       8:	bc c0       	rjmp	.+376    	; 0x182 <__bad_interrupt>
       a:	00 00       	nop
       c:	ba c0       	rjmp	.+372    	; 0x182 <__bad_interrupt>
       e:	00 00       	nop
      10:	b8 c0       	rjmp	.+368    	; 0x182 <__bad_interrupt>
      12:	00 00       	nop
      14:	b6 c0       	rjmp	.+364    	; 0x182 <__bad_interrupt>
      16:	00 00       	nop
      18:	b4 c0       	rjmp	.+360    	; 0x182 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b2 c0       	rjmp	.+356    	; 0x182 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b0 c0       	rjmp	.+352    	; 0x182 <__bad_interrupt>
      22:	00 00       	nop
      24:	ae c0       	rjmp	.+348    	; 0x182 <__bad_interrupt>
      26:	00 00       	nop
      28:	28 c5       	rjmp	.+2640   	; 0xa7a <__vector_10>
      2a:	00 00       	nop
      2c:	f4 c4       	rjmp	.+2536   	; 0xa16 <__vector_11>
      2e:	00 00       	nop
      30:	fc c4       	rjmp	.+2552   	; 0xa2a <__vector_12>
      32:	00 00       	nop
      34:	04 c5       	rjmp	.+2568   	; 0xa3e <__vector_13>
      36:	00 00       	nop
      38:	16 c5       	rjmp	.+2604   	; 0xa66 <__vector_14>
      3a:	00 00       	nop
      3c:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__vector_15>
      40:	e0 c4       	rjmp	.+2496   	; 0xa02 <__vector_16>
      42:	00 00       	nop
      44:	9e c0       	rjmp	.+316    	; 0x182 <__bad_interrupt>
      46:	00 00       	nop
      48:	54 c5       	rjmp	.+2728   	; 0xaf2 <__vector_18>
      4a:	00 00       	nop
      4c:	88 c5       	rjmp	.+2832   	; 0xb5e <__vector_19>
      4e:	00 00       	nop
      50:	98 c0       	rjmp	.+304    	; 0x182 <__bad_interrupt>
      52:	00 00       	nop
      54:	14 c2       	rjmp	.+1064   	; 0x47e <__vector_21>
      56:	00 00       	nop
      58:	94 c0       	rjmp	.+296    	; 0x182 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	92 c0       	rjmp	.+292    	; 0x182 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f8 c4       	rjmp	.+2544   	; 0xa52 <__vector_24>
      62:	00 00       	nop
      64:	14 c5       	rjmp	.+2600   	; 0xa8e <__vector_25>
      66:	00 00       	nop
      68:	1c c5       	rjmp	.+2616   	; 0xaa2 <__vector_26>
      6a:	00 00       	nop
      6c:	24 c5       	rjmp	.+2632   	; 0xab6 <__vector_27>
      6e:	00 00       	nop
      70:	2c c5       	rjmp	.+2648   	; 0xaca <__vector_28>
      72:	00 00       	nop
      74:	34 c5       	rjmp	.+2664   	; 0xade <__vector_29>
      76:	00 00       	nop
      78:	9b c5       	rjmp	.+2870   	; 0xbb0 <__vector_30>
      7a:	00 00       	nop
      7c:	d2 c5       	rjmp	.+2980   	; 0xc22 <__vector_31>
      7e:	00 00       	nop
      80:	80 c0       	rjmp	.+256    	; 0x182 <__bad_interrupt>
      82:	00 00       	nop
      84:	7e c0       	rjmp	.+252    	; 0x182 <__bad_interrupt>
      86:	00 00       	nop
      88:	7c c0       	rjmp	.+248    	; 0x182 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	22 04       	cpc	r2, r2
      8e:	26 04       	cpc	r2, r6
      90:	2a 04       	cpc	r2, r10
      92:	2e 04       	cpc	r2, r14
      94:	32 04       	cpc	r3, r2
      96:	39 04       	cpc	r3, r9
      98:	40 04       	cpc	r4, r0
      9a:	47 04       	cpc	r4, r7
      9c:	4b 04       	cpc	r4, r11
      9e:	52 04       	cpc	r5, r2
      a0:	59 04       	cpc	r5, r9
      a2:	60 04       	cpc	r6, r0
      a4:	64 04       	cpc	r6, r4
      a6:	6b 04       	cpc	r6, r11
      a8:	72 04       	cpc	r7, r2
      aa:	8e 04       	cpc	r8, r14
      ac:	92 04       	cpc	r9, r2
      ae:	96 04       	cpc	r9, r6
      b0:	9a 04       	cpc	r9, r10
      b2:	a0 04       	cpc	r10, r0
      b4:	a4 04       	cpc	r10, r4
      b6:	a8 04       	cpc	r10, r8
      b8:	ac 04       	cpc	r10, r12
      ba:	b5 04       	cpc	r11, r5
      bc:	b9 04       	cpc	r11, r9
      be:	bd 04       	cpc	r11, r13
      c0:	c6 04       	cpc	r12, r6
      c2:	07 63       	ori	r16, 0x37	; 55
      c4:	42 36       	cpi	r20, 0x62	; 98
      c6:	b7 9b       	sbis	0x16, 7	; 22
      c8:	d8 a7       	std	Y+40, r29	; 0x28
      ca:	1a 39       	cpi	r17, 0x9A	; 154
      cc:	68 56       	subi	r22, 0x68	; 104
      ce:	18 ae       	std	Y+56, r1	; 0x38
      d0:	ba ab       	std	Y+50, r27	; 0x32
      d2:	55 8c       	ldd	r5, Z+29	; 0x1d
      d4:	1d 3c       	cpi	r17, 0xCD	; 205
      d6:	b7 cc       	rjmp	.-1682   	; 0xfffffa46 <__eeprom_end+0xff7efa46>
      d8:	57 63       	ori	r21, 0x37	; 55
      da:	bd 6d       	ori	r27, 0xDD	; 221
      dc:	ed fd       	.word	0xfded	; ????
      de:	75 3e       	cpi	r23, 0xE5	; 229
      e0:	f6 17       	cp	r31, r22
      e2:	72 31       	cpi	r23, 0x12	; 18
      e4:	bf 00       	.word	0x00bf	; ????
      e6:	00 00       	nop
      e8:	80 3f       	cpi	r24, 0xF0	; 240
      ea:	08 00       	.word	0x0008	; ????
      ec:	00 00       	nop
      ee:	be 92       	st	-X, r11
      f0:	24 49       	sbci	r18, 0x94	; 148
      f2:	12 3e       	cpi	r17, 0xE2	; 226
      f4:	ab aa       	std	Y+51, r10	; 0x33
      f6:	aa 2a       	or	r10, r26
      f8:	be cd       	rjmp	.-1156   	; 0xfffffc76 <__eeprom_end+0xff7efc76>
      fa:	cc cc       	rjmp	.-1640   	; 0xfffffa94 <__eeprom_end+0xff7efa94>
      fc:	4c 3e       	cpi	r20, 0xEC	; 236
      fe:	00 00       	nop
     100:	00 80       	ld	r0, Z
     102:	be ab       	std	Y+54, r27	; 0x36
     104:	aa aa       	std	Y+50, r10	; 0x32
     106:	aa 3e       	cpi	r26, 0xEA	; 234
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	bf 00       	.word	0x00bf	; ????
     10e:	00 00       	nop
     110:	80 3f       	cpi	r24, 0xF0	; 240
     112:	00 00       	nop
     114:	00 00       	nop
     116:	00 08       	sbc	r0, r0
     118:	41 78       	andi	r20, 0x81	; 129
     11a:	d3 bb       	out	0x13, r29	; 19
     11c:	43 87       	std	Z+11, r20	; 0x0b
     11e:	d1 13       	cpse	r29, r17
     120:	3d 19       	sub	r19, r13
     122:	0e 3c       	cpi	r16, 0xCE	; 206
     124:	c3 bd       	out	0x23, r28	; 35
     126:	42 82       	std	Z+2, r4	; 0x02
     128:	ad 2b       	or	r26, r29
     12a:	3e 68       	ori	r19, 0x8E	; 142
     12c:	ec 82       	std	Y+4, r14	; 0x04
     12e:	76 be       	out	0x36, r7	; 54
     130:	d9 8f       	std	Y+25, r29	; 0x19
     132:	e1 a9       	ldd	r30, Z+49	; 0x31
     134:	3e 4c       	sbci	r19, 0xCE	; 206
     136:	80 ef       	ldi	r24, 0xF0	; 240
     138:	ff be       	out	0x3f, r15	; 63
     13a:	01 c4       	rjmp	.+2050   	; 0x93e <TIMER_COUNTER1enable+0x128>
     13c:	ff 7f       	andi	r31, 0xFF	; 255
     13e:	3f 00       	.word	0x003f	; ????
     140:	00 00       	nop
	...

00000144 <__ctors_end>:
     144:	11 24       	eor	r1, r1
     146:	1f be       	out	0x3f, r1	; 63
     148:	cf ef       	ldi	r28, 0xFF	; 255
     14a:	d0 e1       	ldi	r29, 0x10	; 16
     14c:	de bf       	out	0x3e, r29	; 62
     14e:	cd bf       	out	0x3d, r28	; 61

00000150 <__do_copy_data>:
     150:	11 e0       	ldi	r17, 0x01	; 1
     152:	a0 e0       	ldi	r26, 0x00	; 0
     154:	b1 e0       	ldi	r27, 0x01	; 1
     156:	ee ed       	ldi	r30, 0xDE	; 222
     158:	f5 e3       	ldi	r31, 0x35	; 53
     15a:	00 e0       	ldi	r16, 0x00	; 0
     15c:	0b bf       	out	0x3b, r16	; 59
     15e:	02 c0       	rjmp	.+4      	; 0x164 <__do_copy_data+0x14>
     160:	07 90       	elpm	r0, Z+
     162:	0d 92       	st	X+, r0
     164:	a4 35       	cpi	r26, 0x54	; 84
     166:	b1 07       	cpc	r27, r17
     168:	d9 f7       	brne	.-10     	; 0x160 <__do_copy_data+0x10>

0000016a <__do_clear_bss>:
     16a:	24 e0       	ldi	r18, 0x04	; 4
     16c:	a4 e5       	ldi	r26, 0x54	; 84
     16e:	b1 e0       	ldi	r27, 0x01	; 1
     170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
     172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
     174:	ae 34       	cpi	r26, 0x4E	; 78
     176:	b2 07       	cpc	r27, r18
     178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>
     17a:	0e 94 0b 12 	call	0x2416	; 0x2416 <main>
     17e:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <_exit>

00000182 <__bad_interrupt>:
     182:	3e cf       	rjmp	.-388    	; 0x0 <__vectors>

00000184 <HC595_shift_bit>:
	//
	return hc595;
}
void HC595_shift_bit(uint8_t bool)
{
	if (bool)
     184:	88 23       	and	r24, r24
     186:	89 f0       	breq	.+34     	; 0x1aa <HC595_shift_bit+0x26>
		*hc595_PORT |= (1<<HC595_datapin); //Data bit HIGH
     188:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <hc595_PORT>
     18c:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <hc595_PORT+0x1>
     190:	20 81       	ld	r18, Z
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	00 90 85 01 	lds	r0, 0x0185	; 0x800185 <HC595_datapin>
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <HC595_shift_bit+0x1c>
     19c:	88 0f       	add	r24, r24
     19e:	99 1f       	adc	r25, r25
     1a0:	0a 94       	dec	r0
     1a2:	e2 f7       	brpl	.-8      	; 0x19c <HC595_shift_bit+0x18>
     1a4:	82 2b       	or	r24, r18
     1a6:	80 83       	st	Z, r24
     1a8:	11 c0       	rjmp	.+34     	; 0x1cc <HC595_shift_bit+0x48>
	else
		*hc595_PORT &= ~(1<<HC595_datapin); //Data bit LOW
     1aa:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <hc595_PORT>
     1ae:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <hc595_PORT+0x1>
     1b2:	20 81       	ld	r18, Z
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	00 90 85 01 	lds	r0, 0x0185	; 0x800185 <HC595_datapin>
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <HC595_shift_bit+0x3e>
     1be:	88 0f       	add	r24, r24
     1c0:	99 1f       	adc	r25, r25
     1c2:	0a 94       	dec	r0
     1c4:	e2 f7       	brpl	.-8      	; 0x1be <HC595_shift_bit+0x3a>
     1c6:	80 95       	com	r24
     1c8:	82 23       	and	r24, r18
     1ca:	80 83       	st	Z, r24
	*hc595_PORT |= (1<<HC595_clkpin); // Shift bit
     1cc:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <hc595_PORT>
     1d0:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <hc595_PORT+0x1>
     1d4:	40 81       	ld	r20, Z
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	9c 01       	movw	r18, r24
     1dc:	00 90 87 01 	lds	r0, 0x0187	; 0x800187 <HC595_clkpin>
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <HC595_shift_bit+0x62>
     1e2:	22 0f       	add	r18, r18
     1e4:	33 1f       	adc	r19, r19
     1e6:	0a 94       	dec	r0
     1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <HC595_shift_bit+0x5e>
     1ea:	24 2b       	or	r18, r20
     1ec:	20 83       	st	Z, r18
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
     1ee:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <hc595_PORT>
     1f2:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <hc595_PORT+0x1>
     1f6:	20 81       	ld	r18, Z
     1f8:	00 90 87 01 	lds	r0, 0x0187	; 0x800187 <HC595_clkpin>
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <HC595_shift_bit+0x7e>
     1fe:	88 0f       	add	r24, r24
     200:	99 1f       	adc	r25, r25
     202:	0a 94       	dec	r0
     204:	e2 f7       	brpl	.-8      	; 0x1fe <HC595_shift_bit+0x7a>
     206:	80 95       	com	r24
     208:	82 23       	and	r24, r18
     20a:	80 83       	st	Z, r24
     20c:	08 95       	ret

0000020e <HC595_shift_out>:
		HC595_shift_bit(byte & (1<<i));
	HC595_shift_out();
}
void HC595_shift_out(void)
{
	*hc595_PORT |= (1<<HC595_outpin); //Output enable
     20e:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <hc595_PORT>
     212:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <hc595_PORT+0x1>
     216:	40 81       	ld	r20, Z
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	9c 01       	movw	r18, r24
     21e:	00 90 86 01 	lds	r0, 0x0186	; 0x800186 <HC595_outpin>
     222:	02 c0       	rjmp	.+4      	; 0x228 <HC595_shift_out+0x1a>
     224:	22 0f       	add	r18, r18
     226:	33 1f       	adc	r19, r19
     228:	0a 94       	dec	r0
     22a:	e2 f7       	brpl	.-8      	; 0x224 <HC595_shift_out+0x16>
     22c:	24 2b       	or	r18, r20
     22e:	20 83       	st	Z, r18
	*hc595_PORT &= ~(1<<HC595_outpin); //Output disable
     230:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <hc595_PORT>
     234:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <hc595_PORT+0x1>
     238:	20 81       	ld	r18, Z
     23a:	00 90 86 01 	lds	r0, 0x0186	; 0x800186 <HC595_outpin>
     23e:	02 c0       	rjmp	.+4      	; 0x244 <HC595_shift_out+0x36>
     240:	88 0f       	add	r24, r24
     242:	99 1f       	adc	r25, r25
     244:	0a 94       	dec	r0
     246:	e2 f7       	brpl	.-8      	; 0x240 <HC595_shift_out+0x32>
     248:	80 95       	com	r24
     24a:	82 23       	and	r24, r18
     24c:	80 83       	st	Z, r24
     24e:	08 95       	ret

00000250 <HC595_shift_byte>:
		*hc595_PORT &= ~(1<<HC595_datapin); //Data bit LOW
	*hc595_PORT |= (1<<HC595_clkpin); // Shift bit
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
}
void HC595_shift_byte(uint8_t byte)
{
     250:	ff 92       	push	r15
     252:	0f 93       	push	r16
     254:	1f 93       	push	r17
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	f8 2e       	mov	r15, r24
     25c:	c0 e0       	ldi	r28, 0x00	; 0
     25e:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for(i=0;i<8;i++)
		HC595_shift_bit(byte & (1<<i));
     260:	01 e0       	ldi	r16, 0x01	; 1
     262:	10 e0       	ldi	r17, 0x00	; 0
     264:	c8 01       	movw	r24, r16
     266:	0c 2e       	mov	r0, r28
     268:	02 c0       	rjmp	.+4      	; 0x26e <HC595_shift_byte+0x1e>
     26a:	88 0f       	add	r24, r24
     26c:	99 1f       	adc	r25, r25
     26e:	0a 94       	dec	r0
     270:	e2 f7       	brpl	.-8      	; 0x26a <HC595_shift_byte+0x1a>
     272:	8f 21       	and	r24, r15
     274:	87 df       	rcall	.-242    	; 0x184 <HC595_shift_bit>
     276:	21 96       	adiw	r28, 0x01	; 1
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
}
void HC595_shift_byte(uint8_t byte)
{
	uint8_t i;
	for(i=0;i<8;i++)
     278:	c8 30       	cpi	r28, 0x08	; 8
     27a:	d1 05       	cpc	r29, r1
		HC595_shift_bit(byte & (1<<i));
	HC595_shift_out();
     27c:	99 f7       	brne	.-26     	; 0x264 <HC595_shift_byte+0x14>
     27e:	c7 df       	rcall	.-114    	; 0x20e <HC595_shift_out>
}
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	1f 91       	pop	r17
     286:	0f 91       	pop	r16
     288:	ff 90       	pop	r15
     28a:	08 95       	ret

0000028c <HC595enable>:
void HC595_shift_bit(uint8_t bool);
void HC595_shift_byte(uint8_t byte);
void HC595_shift_out(void);
/***Procedure & Function***/
HC595 HC595enable(volatile uint8_t *ddr, volatile uint8_t *port, uint8_t datapin, uint8_t clkpin, uint8_t outpin)
{
     28c:	0f 93       	push	r16
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	00 d0       	rcall	.+0      	; 0x294 <HC595enable+0x8>
     294:	00 d0       	rcall	.+0      	; 0x296 <HC595enable+0xa>
     296:	00 d0       	rcall	.+0      	; 0x298 <HC595enable+0xc>
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
     29c:	5f b7       	in	r21, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     29e:	3f b7       	in	r19, 0x3f	; 63
     2a0:	3f 77       	andi	r19, 0x7F	; 127
     2a2:	3f bf       	out	0x3f, r19	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	HC595 hc595;
	//import parametros
	hc595_DDR=ddr;
     2a4:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <hc595_DDR+0x1>
     2a8:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <hc595_DDR>
	hc595_PORT=port;
     2ac:	70 93 84 01 	sts	0x0184, r23	; 0x800184 <hc595_PORT+0x1>
     2b0:	60 93 83 01 	sts	0x0183, r22	; 0x800183 <hc595_PORT>
	HC595_datapin=datapin;
     2b4:	40 93 85 01 	sts	0x0185, r20	; 0x800185 <HC595_datapin>
	HC595_clkpin=clkpin;
     2b8:	20 93 87 01 	sts	0x0187, r18	; 0x800187 <HC595_clkpin>
	HC595_outpin=outpin;
     2bc:	00 93 86 01 	sts	0x0186, r16	; 0x800186 <HC595_outpin>
	//inic variables
    *hc595_DDR |= (1<<datapin) | (1<<clkpin) | (1<<outpin);
     2c0:	fc 01       	movw	r30, r24
     2c2:	30 81       	ld	r19, Z
     2c4:	61 e0       	ldi	r22, 0x01	; 1
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	db 01       	movw	r26, r22
     2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <HC595enable+0x44>
     2cc:	aa 0f       	add	r26, r26
     2ce:	bb 1f       	adc	r27, r27
     2d0:	2a 95       	dec	r18
     2d2:	e2 f7       	brpl	.-8      	; 0x2cc <HC595enable+0x40>
     2d4:	fb 01       	movw	r30, r22
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <HC595enable+0x50>
     2d8:	ee 0f       	add	r30, r30
     2da:	ff 1f       	adc	r31, r31
     2dc:	0a 95       	dec	r16
     2de:	e2 f7       	brpl	.-8      	; 0x2d8 <HC595enable+0x4c>
     2e0:	ea 2b       	or	r30, r26
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <HC595enable+0x5c>
     2e4:	66 0f       	add	r22, r22
     2e6:	77 1f       	adc	r23, r23
     2e8:	4a 95       	dec	r20
     2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <HC595enable+0x58>
     2ec:	6e 2b       	or	r22, r30
     2ee:	23 2f       	mov	r18, r19
     2f0:	26 2b       	or	r18, r22
     2f2:	fc 01       	movw	r30, r24
     2f4:	20 83       	st	Z, r18
	*hc595_PORT &= ~((1<<datapin) | (1<<clkpin) | (1<<outpin));
     2f6:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <hc595_PORT>
     2fa:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <hc595_PORT+0x1>
     2fe:	80 81       	ld	r24, Z
     300:	60 95       	com	r22
     302:	68 23       	and	r22, r24
     304:	60 83       	st	Z, r22
	//Direccionar apontadores para PROTOTIPOS
	hc595.bit=HC595_shift_bit;
	hc595.byte=HC595_shift_byte;
	hc595.out=HC595_shift_out;
	SREG=tSREG;
     306:	5f bf       	out	0x3f, r21	; 63
	//
	return hc595;
     308:	22 ec       	ldi	r18, 0xC2	; 194
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	3a 83       	std	Y+2, r19	; 0x02
     30e:	29 83       	std	Y+1, r18	; 0x01
     310:	48 e2       	ldi	r20, 0x28	; 40
     312:	51 e0       	ldi	r21, 0x01	; 1
     314:	5c 83       	std	Y+4, r21	; 0x04
     316:	4b 83       	std	Y+3, r20	; 0x03
     318:	67 e0       	ldi	r22, 0x07	; 7
     31a:	71 e0       	ldi	r23, 0x01	; 1
     31c:	7e 83       	std	Y+6, r23	; 0x06
     31e:	6d 83       	std	Y+5, r22	; 0x05
     320:	3a 81       	ldd	r19, Y+2	; 0x02
     322:	5c 81       	ldd	r21, Y+4	; 0x04
     324:	7e 81       	ldd	r23, Y+6	; 0x06
}
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	26 96       	adiw	r28, 0x06	; 6
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	de bf       	out	0x3e, r29	; 62
     332:	0f be       	out	0x3f, r0	; 63
     334:	cd bf       	out	0x3d, r28	; 61
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	0f 91       	pop	r16
     33c:	08 95       	ret

0000033e <ANALOG_read>:
Returns selected Channel ADC_VALUE
***/
{
	uint8_t ADSC_FLAG;
	ADSC_FLAG=(1<<ADSC);
	if( !(ADC_CONTROL & ADSC_FLAG) ){
     33e:	36 9b       	sbis	0x06, 6	; 6
		//ADC_SELECT
		/***/
		ADC_CONTROL|=(1<<ADSC);
     340:	36 9a       	sbi	0x06, 6	; 6
	}	
	return ADC_VALUE[selection];
     342:	fc 01       	movw	r30, r24
     344:	ee 0f       	add	r30, r30
     346:	ff 1f       	adc	r31, r31
     348:	e3 59       	subi	r30, 0x93	; 147
     34a:	fe 4f       	sbci	r31, 0xFE	; 254
     34c:	80 81       	ld	r24, Z
     34e:	91 81       	ldd	r25, Z+1	; 0x01
}
     350:	08 95       	ret

00000352 <ANALOGenable>:
ANALOG ANALOGenable( uint8_t Vreff, uint8_t Divfactor, int n_channel, ... )
/***
Interrupt running mode setup
setup, and list of channels to be probed
***/
{
     352:	0f 93       	push	r16
     354:	1f 93       	push	r17
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	cd b7       	in	r28, 0x3d	; 61
     35c:	de b7       	in	r29, 0x3e	; 62
     35e:	9f 81       	ldd	r25, Y+7	; 0x07
     360:	68 85       	ldd	r22, Y+8	; 0x08
     362:	49 85       	ldd	r20, Y+9	; 0x09
     364:	5a 85       	ldd	r21, Y+10	; 0x0a
	/***LOCAL VARIABLES***/
	uint8_t tSREG;
	va_list list;
	int i;
	//inic variables
	tSREG=STATUS_REGISTER;
     366:	1f b7       	in	r17, 0x3f	; 63
	STATUS_REGISTER&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     368:	8f b7       	in	r24, 0x3f	; 63
     36a:	8f 77       	andi	r24, 0x7F	; 127
     36c:	8f bf       	out	0x3f, r24	; 63
	/***GLOBAL VARIABLES INICIALIZE***/
	ADC_N_CHANNEL=n_channel;
     36e:	50 93 5c 01 	sts	0x015C, r21	; 0x80015c <ADC_N_CHANNEL+0x1>
     372:	40 93 5b 01 	sts	0x015B, r20	; 0x80015b <ADC_N_CHANNEL>
	ADC_SELECTOR=0;
     376:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <ADC_SELECTOR+0x1>
     37a:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <ADC_SELECTOR>
	adc_n_sample=0;
     37e:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__data_end>
	//import parametros
	//inic parameters
	//Direccionar apontadores para PROTOTIPOS
	analog.read=ANALOG_read;
		/******/
		ADC_SELECT&=~(3<<REFS0);
     382:	87 b1       	in	r24, 0x07	; 7
     384:	8f 73       	andi	r24, 0x3F	; 63
     386:	87 b9       	out	0x07, r24	; 7
		switch( Vreff ){
     388:	91 30       	cpi	r25, 0x01	; 1
     38a:	19 f0       	breq	.+6      	; 0x392 <ANALOGenable+0x40>
     38c:	93 30       	cpi	r25, 0x03	; 3
     38e:	21 f0       	breq	.+8      	; 0x398 <ANALOGenable+0x46>
     390:	08 c0       	rjmp	.+16     	; 0x3a2 <ANALOGenable+0x50>
			case 0:
				analog.VREFF=0;
				break;
			case 1:
				ADC_SELECT|=(1<<REFS0);
     392:	3e 9a       	sbi	0x07, 6	; 7
				analog.VREFF=1;
     394:	01 e0       	ldi	r16, 0x01	; 1
				break;
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <ANALOGenable+0x52>
			case 3:
				ADC_SELECT|=(3<<REFS0);
     398:	87 b1       	in	r24, 0x07	; 7
     39a:	80 6c       	ori	r24, 0xC0	; 192
     39c:	87 b9       	out	0x07, r24	; 7
				analog.VREFF=3;
     39e:	03 e0       	ldi	r16, 0x03	; 3
				break;
     3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <ANALOGenable+0x52>
	analog.read=ANALOG_read;
		/******/
		ADC_SELECT&=~(3<<REFS0);
		switch( Vreff ){
			case 0:
				analog.VREFF=0;
     3a2:	00 e0       	ldi	r16, 0x00	; 0
			default:
				analog.VREFF=0;
				break;
		}
		//
		ADC_SELECT&=~(1<<ADLAR);
     3a4:	3d 98       	cbi	0x07, 5	; 7
		/******/
		va_start(list, n_channel);
		for(i=0;i<n_channel;i++){
     3a6:	14 16       	cp	r1, r20
     3a8:	15 06       	cpc	r1, r21
     3aa:	8c f4       	brge	.+34     	; 0x3ce <ANALOGenable+0x7c>
     3ac:	de 01       	movw	r26, r28
     3ae:	1b 96       	adiw	r26, 0x0b	; 11
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	90 e0       	ldi	r25, 0x00	; 0
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
     3b4:	2d 91       	ld	r18, X+
     3b6:	3d 91       	ld	r19, X+
     3b8:	fc 01       	movw	r30, r24
     3ba:	ee 0f       	add	r30, r30
     3bc:	ff 1f       	adc	r31, r31
     3be:	e3 5a       	subi	r30, 0xA3	; 163
     3c0:	fe 4f       	sbci	r31, 0xFE	; 254
     3c2:	31 83       	std	Z+1, r19	; 0x01
     3c4:	20 83       	st	Z, r18
		}
		//
		ADC_SELECT&=~(1<<ADLAR);
		/******/
		va_start(list, n_channel);
		for(i=0;i<n_channel;i++){
     3c6:	01 96       	adiw	r24, 0x01	; 1
     3c8:	48 17       	cp	r20, r24
     3ca:	59 07       	cpc	r21, r25
     3cc:	99 f7       	brne	.-26     	; 0x3b4 <ANALOGenable+0x62>
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
		}
		va_end(list);
		ADC_SELECT&=~MUX_MASK;
     3ce:	87 b1       	in	r24, 0x07	; 7
     3d0:	80 7e       	andi	r24, 0xE0	; 224
     3d2:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT|=(MUX_MASK & ADC_CHANNEL_GAIN[ADC_SELECTOR]);
     3d4:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <ADC_SELECTOR>
     3d8:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <ADC_SELECTOR+0x1>
     3dc:	ee 0f       	add	r30, r30
     3de:	ff 1f       	adc	r31, r31
     3e0:	e3 5a       	subi	r30, 0xA3	; 163
     3e2:	fe 4f       	sbci	r31, 0xFE	; 254
     3e4:	80 81       	ld	r24, Z
     3e6:	91 81       	ldd	r25, Z+1	; 0x01
     3e8:	27 b1       	in	r18, 0x07	; 7
     3ea:	8f 71       	andi	r24, 0x1F	; 31
     3ec:	99 27       	eor	r25, r25
     3ee:	82 2b       	or	r24, r18
     3f0:	87 b9       	out	0x07, r24	; 7
		/******/
		ADC_CONTROL|=(1<<ADEN);
     3f2:	37 9a       	sbi	0x06, 7	; 6
		ADC_CONTROL|=(1<<ADSC);
     3f4:	36 9a       	sbi	0x06, 6	; 6
		ADC_CONTROL&=~(1<<ADFR);
     3f6:	35 98       	cbi	0x06, 5	; 6
		ADC_CONTROL|=(1<<ADIE);
     3f8:	33 9a       	sbi	0x06, 3	; 6
		/******/
		ADC_CONTROL&=~(7<<ADPS0);
     3fa:	86 b1       	in	r24, 0x06	; 6
     3fc:	88 7f       	andi	r24, 0xF8	; 248
     3fe:	86 b9       	out	0x06, r24	; 6
		switch( Divfactor ){
     400:	60 31       	cpi	r22, 0x10	; 16
     402:	d1 f0       	breq	.+52     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     404:	38 f4       	brcc	.+14     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     406:	64 30       	cpi	r22, 0x04	; 4
     408:	79 f0       	breq	.+30     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     40a:	68 30       	cpi	r22, 0x08	; 8
     40c:	81 f0       	breq	.+32     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     40e:	62 30       	cpi	r22, 0x02	; 2
     410:	29 f5       	brne	.+74     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     412:	07 c0       	rjmp	.+14     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     414:	60 34       	cpi	r22, 0x40	; 64
     416:	c1 f0       	breq	.+48     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     418:	60 38       	cpi	r22, 0x80	; 128
     41a:	d9 f0       	breq	.+54     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     41c:	60 32       	cpi	r22, 0x20	; 32
     41e:	f1 f4       	brne	.+60     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     420:	0e c0       	rjmp	.+28     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
			case 2://1
				ADC_CONTROL|=(1<<ADPS0);
     422:	30 9a       	sbi	0x06, 0	; 6
				analog.DIVISION_FACTOR=2;
     424:	22 e0       	ldi	r18, 0x02	; 2
				break;
     426:	1e c0       	rjmp	.+60     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
			case 4://2
				ADC_CONTROL|=(1<<ADPS1);
     428:	31 9a       	sbi	0x06, 1	; 6
				analog.DIVISION_FACTOR=4;
     42a:	24 e0       	ldi	r18, 0x04	; 4
				break;
     42c:	1b c0       	rjmp	.+54     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
			case 8://3
				ADC_CONTROL|=(3<<ADPS0);
     42e:	86 b1       	in	r24, 0x06	; 6
     430:	83 60       	ori	r24, 0x03	; 3
     432:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=8;
     434:	28 e0       	ldi	r18, 0x08	; 8
				break;
     436:	16 c0       	rjmp	.+44     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
			case 16://4
				ADC_CONTROL|=(1<<ADPS2);
     438:	32 9a       	sbi	0x06, 2	; 6
				analog.DIVISION_FACTOR=16;
     43a:	20 e1       	ldi	r18, 0x10	; 16
				break;
     43c:	13 c0       	rjmp	.+38     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
			case 32://5
				ADC_CONTROL|=(5<<ADPS0);
     43e:	86 b1       	in	r24, 0x06	; 6
     440:	85 60       	ori	r24, 0x05	; 5
     442:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=32;
     444:	20 e2       	ldi	r18, 0x20	; 32
				break;
     446:	0e c0       	rjmp	.+28     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
			case 64://6
				ADC_CONTROL|=(6<<ADPS0);
     448:	86 b1       	in	r24, 0x06	; 6
     44a:	86 60       	ori	r24, 0x06	; 6
     44c:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=64;
     44e:	20 e4       	ldi	r18, 0x40	; 64
				break;
     450:	09 c0       	rjmp	.+18     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
			case 128://7
				ADC_CONTROL|=(7<<ADPS0);
     452:	86 b1       	in	r24, 0x06	; 6
     454:	87 60       	ori	r24, 0x07	; 7
     456:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=128;
     458:	20 e8       	ldi	r18, 0x80	; 128
				break;
     45a:	04 c0       	rjmp	.+8      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
			default:
				ADC_CONTROL|=(7<<ADPS0);
     45c:	86 b1       	in	r24, 0x06	; 6
     45e:	87 60       	ori	r24, 0x07	; 7
     460:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=128;
     462:	20 e8       	ldi	r18, 0x80	; 128
				break;
		}
	
	STATUS_REGISTER=tSREG;
     464:	1f bf       	out	0x3f, r17	; 63
	STATUS_REGISTER|=(1<<GLOBAL_INTERRUPT_ENABLE);
     466:	8f b7       	in	r24, 0x3f	; 63
     468:	80 68       	ori	r24, 0x80	; 128
     46a:	8f bf       	out	0x3f, r24	; 63
	/******/
	return analog;
     46c:	60 2f       	mov	r22, r16
     46e:	72 2f       	mov	r23, r18
     470:	8f e9       	ldi	r24, 0x9F	; 159
     472:	91 e0       	ldi	r25, 0x01	; 1
}
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	1f 91       	pop	r17
     47a:	0f 91       	pop	r16
     47c:	08 95       	ret

0000047e <__vector_21>:
ISR(ANALOG_INTERRUPT)
/*************************************************************************
Function: ANALOG interrupt
Purpose:  Read Analog Input
**************************************************************************/
{
     47e:	1f 92       	push	r1
     480:	0f 92       	push	r0
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	0f 92       	push	r0
     486:	11 24       	eor	r1, r1
     488:	0b b6       	in	r0, 0x3b	; 59
     48a:	0f 92       	push	r0
     48c:	2f 93       	push	r18
     48e:	3f 93       	push	r19
     490:	4f 93       	push	r20
     492:	5f 93       	push	r21
     494:	8f 93       	push	r24
     496:	9f 93       	push	r25
     498:	ef 93       	push	r30
     49a:	ff 93       	push	r31
	uint8_t Sreg;
	Sreg=STATUS_REGISTER;
     49c:	2f b7       	in	r18, 0x3f	; 63
	STATUS_REGISTER&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     49e:	8f b7       	in	r24, 0x3f	; 63
     4a0:	8f 77       	andi	r24, 0x7F	; 127
     4a2:	8f bf       	out	0x3f, r24	; 63
	adc_tmp=ADCL;
     4a4:	84 b1       	in	r24, 0x04	; 4
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <adc_tmp+0x1>
     4ac:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <adc_tmp>
	adc_tmp|=(ADCH<<8);
     4b0:	35 b1       	in	r19, 0x05	; 5
     4b2:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <adc_tmp>
     4b6:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <adc_tmp+0x1>
     4ba:	93 2b       	or	r25, r19
     4bc:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <adc_tmp+0x1>
     4c0:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <adc_tmp>
	if(adc_n_sample < (1<<ADC_NUMBER_SAMPLE)){
     4c4:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
     4c8:	84 30       	cpi	r24, 0x04	; 4
     4ca:	a0 f4       	brcc	.+40     	; 0x4f4 <__vector_21+0x76>
		adc_n_sample++;
     4cc:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
     4d0:	8f 5f       	subi	r24, 0xFF	; 255
     4d2:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end>
		adc_sample+=adc_tmp;
     4d6:	40 91 55 01 	lds	r20, 0x0155	; 0x800155 <adc_tmp>
     4da:	50 91 56 01 	lds	r21, 0x0156	; 0x800156 <adc_tmp+0x1>
     4de:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <adc_sample>
     4e2:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <adc_sample+0x1>
     4e6:	84 0f       	add	r24, r20
     4e8:	95 1f       	adc	r25, r21
     4ea:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <adc_sample+0x1>
     4ee:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <adc_sample>
     4f2:	43 c0       	rjmp	.+134    	; 0x57a <__vector_21+0xfc>
	}else{
		ADC_VALUE[ADC_SELECTOR]=adc_sample>>ADC_NUMBER_SAMPLE;
     4f4:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <ADC_SELECTOR>
     4f8:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <ADC_SELECTOR+0x1>
     4fc:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <adc_sample>
     500:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <adc_sample+0x1>
     504:	95 95       	asr	r25
     506:	87 95       	ror	r24
     508:	95 95       	asr	r25
     50a:	87 95       	ror	r24
     50c:	ee 0f       	add	r30, r30
     50e:	ff 1f       	adc	r31, r31
     510:	e3 59       	subi	r30, 0x93	; 147
     512:	fe 4f       	sbci	r31, 0xFE	; 254
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	80 83       	st	Z, r24
		adc_n_sample=adc_sample=0;
     518:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <adc_sample+0x1>
     51c:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <adc_sample>
     520:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__data_end>
		/******/
		if(ADC_SELECTOR < ADC_N_CHANNEL)
     524:	40 91 59 01 	lds	r20, 0x0159	; 0x800159 <ADC_SELECTOR>
     528:	50 91 5a 01 	lds	r21, 0x015A	; 0x80015a <ADC_SELECTOR+0x1>
     52c:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <ADC_N_CHANNEL>
     530:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <ADC_N_CHANNEL+0x1>
     534:	48 17       	cp	r20, r24
     536:	59 07       	cpc	r21, r25
     538:	54 f4       	brge	.+20     	; 0x54e <__vector_21+0xd0>
			ADC_SELECTOR++;
     53a:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <ADC_SELECTOR>
     53e:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <ADC_SELECTOR+0x1>
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <ADC_SELECTOR+0x1>
     548:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <ADC_SELECTOR>
     54c:	04 c0       	rjmp	.+8      	; 0x556 <__vector_21+0xd8>
		else
			ADC_SELECTOR=0;
     54e:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <ADC_SELECTOR+0x1>
     552:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <ADC_SELECTOR>
		ADC_SELECT &= ~MUX_MASK;
     556:	87 b1       	in	r24, 0x07	; 7
     558:	80 7e       	andi	r24, 0xE0	; 224
     55a:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
     55c:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <ADC_SELECTOR>
     560:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <ADC_SELECTOR+0x1>
     564:	ee 0f       	add	r30, r30
     566:	ff 1f       	adc	r31, r31
     568:	e3 5a       	subi	r30, 0xA3	; 163
     56a:	fe 4f       	sbci	r31, 0xFE	; 254
     56c:	80 81       	ld	r24, Z
     56e:	91 81       	ldd	r25, Z+1	; 0x01
     570:	37 b1       	in	r19, 0x07	; 7
     572:	8f 71       	andi	r24, 0x1F	; 31
     574:	99 27       	eor	r25, r25
     576:	83 2b       	or	r24, r19
     578:	87 b9       	out	0x07, r24	; 7
	}
	STATUS_REGISTER=Sreg;
     57a:	2f bf       	out	0x3f, r18	; 63
}
     57c:	ff 91       	pop	r31
     57e:	ef 91       	pop	r30
     580:	9f 91       	pop	r25
     582:	8f 91       	pop	r24
     584:	5f 91       	pop	r21
     586:	4f 91       	pop	r20
     588:	3f 91       	pop	r19
     58a:	2f 91       	pop	r18
     58c:	0f 90       	pop	r0
     58e:	0b be       	out	0x3b, r0	; 59
     590:	0f 90       	pop	r0
     592:	0f be       	out	0x3f, r0	; 63
     594:	0f 90       	pop	r0
     596:	1f 90       	pop	r1
     598:	18 95       	reti

0000059a <TIMER_COUNTER0_start>:
	timer3.compareB=TIMER_COUNTER3_compareB;
	timer3.compareC=TIMER_COUNTER3_compareC;
	timer3.start=TIMER_COUNTER3_start;
	timer3.stop=TIMER_COUNTER3_stop;
	return timer3;
}
     59a:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <timer0_state>
     59e:	21 11       	cpse	r18, r1
     5a0:	40 c0       	rjmp	.+128    	; 0x622 <TIMER_COUNTER0_start+0x88>
     5a2:	2f ef       	ldi	r18, 0xFF	; 255
     5a4:	21 bf       	out	0x31, r18	; 49
     5a6:	23 b7       	in	r18, 0x33	; 51
     5a8:	28 7f       	andi	r18, 0xF8	; 248
     5aa:	23 bf       	out	0x33, r18	; 51
     5ac:	80 34       	cpi	r24, 0x40	; 64
     5ae:	91 05       	cpc	r25, r1
     5b0:	11 f1       	breq	.+68     	; 0x5f6 <TIMER_COUNTER0_start+0x5c>
     5b2:	48 f4       	brcc	.+18     	; 0x5c6 <TIMER_COUNTER0_start+0x2c>
     5b4:	88 30       	cpi	r24, 0x08	; 8
     5b6:	91 05       	cpc	r25, r1
     5b8:	b1 f0       	breq	.+44     	; 0x5e6 <TIMER_COUNTER0_start+0x4c>
     5ba:	80 32       	cpi	r24, 0x20	; 32
     5bc:	91 05       	cpc	r25, r1
     5be:	b9 f0       	breq	.+46     	; 0x5ee <TIMER_COUNTER0_start+0x54>
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	49 f5       	brne	.+82     	; 0x616 <TIMER_COUNTER0_start+0x7c>
     5c4:	0c c0       	rjmp	.+24     	; 0x5de <TIMER_COUNTER0_start+0x44>
     5c6:	81 15       	cp	r24, r1
     5c8:	21 e0       	ldi	r18, 0x01	; 1
     5ca:	92 07       	cpc	r25, r18
     5cc:	e1 f0       	breq	.+56     	; 0x606 <TIMER_COUNTER0_start+0x6c>
     5ce:	81 15       	cp	r24, r1
     5d0:	24 e0       	ldi	r18, 0x04	; 4
     5d2:	92 07       	cpc	r25, r18
     5d4:	e1 f0       	breq	.+56     	; 0x60e <TIMER_COUNTER0_start+0x74>
     5d6:	80 38       	cpi	r24, 0x80	; 128
     5d8:	91 05       	cpc	r25, r1
     5da:	e9 f4       	brne	.+58     	; 0x616 <TIMER_COUNTER0_start+0x7c>
     5dc:	10 c0       	rjmp	.+32     	; 0x5fe <TIMER_COUNTER0_start+0x64>
     5de:	83 b7       	in	r24, 0x33	; 51
     5e0:	81 60       	ori	r24, 0x01	; 1
     5e2:	83 bf       	out	0x33, r24	; 51
     5e4:	1b c0       	rjmp	.+54     	; 0x61c <TIMER_COUNTER0_start+0x82>
     5e6:	83 b7       	in	r24, 0x33	; 51
     5e8:	82 60       	ori	r24, 0x02	; 2
     5ea:	83 bf       	out	0x33, r24	; 51
     5ec:	17 c0       	rjmp	.+46     	; 0x61c <TIMER_COUNTER0_start+0x82>
     5ee:	83 b7       	in	r24, 0x33	; 51
     5f0:	83 60       	ori	r24, 0x03	; 3
     5f2:	83 bf       	out	0x33, r24	; 51
     5f4:	13 c0       	rjmp	.+38     	; 0x61c <TIMER_COUNTER0_start+0x82>
     5f6:	83 b7       	in	r24, 0x33	; 51
     5f8:	84 60       	ori	r24, 0x04	; 4
     5fa:	83 bf       	out	0x33, r24	; 51
     5fc:	0f c0       	rjmp	.+30     	; 0x61c <TIMER_COUNTER0_start+0x82>
     5fe:	83 b7       	in	r24, 0x33	; 51
     600:	85 60       	ori	r24, 0x05	; 5
     602:	83 bf       	out	0x33, r24	; 51
     604:	0b c0       	rjmp	.+22     	; 0x61c <TIMER_COUNTER0_start+0x82>
     606:	83 b7       	in	r24, 0x33	; 51
     608:	86 60       	ori	r24, 0x06	; 6
     60a:	83 bf       	out	0x33, r24	; 51
     60c:	07 c0       	rjmp	.+14     	; 0x61c <TIMER_COUNTER0_start+0x82>
     60e:	83 b7       	in	r24, 0x33	; 51
     610:	87 60       	ori	r24, 0x07	; 7
     612:	83 bf       	out	0x33, r24	; 51
     614:	03 c0       	rjmp	.+6      	; 0x61c <TIMER_COUNTER0_start+0x82>
     616:	83 b7       	in	r24, 0x33	; 51
     618:	87 60       	ori	r24, 0x07	; 7
     61a:	83 bf       	out	0x33, r24	; 51
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <timer0_state>
     622:	08 95       	ret

00000624 <TIMER_COUNTER0_compoutmode>:
     624:	93 b7       	in	r25, 0x33	; 51
     626:	9f 7c       	andi	r25, 0xCF	; 207
     628:	93 bf       	out	0x33, r25	; 51
     62a:	82 30       	cpi	r24, 0x02	; 2
     62c:	41 f0       	breq	.+16     	; 0x63e <TIMER_COUNTER0_compoutmode+0x1a>
     62e:	83 30       	cpi	r24, 0x03	; 3
     630:	51 f0       	breq	.+20     	; 0x646 <TIMER_COUNTER0_compoutmode+0x22>
     632:	81 30       	cpi	r24, 0x01	; 1
     634:	59 f4       	brne	.+22     	; 0x64c <TIMER_COUNTER0_compoutmode+0x28>
     636:	83 b7       	in	r24, 0x33	; 51
     638:	80 61       	ori	r24, 0x10	; 16
     63a:	83 bf       	out	0x33, r24	; 51
     63c:	08 95       	ret
     63e:	83 b7       	in	r24, 0x33	; 51
     640:	80 62       	ori	r24, 0x20	; 32
     642:	83 bf       	out	0x33, r24	; 51
     644:	08 95       	ret
     646:	83 b7       	in	r24, 0x33	; 51
     648:	80 63       	ori	r24, 0x30	; 48
     64a:	83 bf       	out	0x33, r24	; 51
     64c:	08 95       	ret

0000064e <TIMER_COUNTER0_compare>:
     64e:	81 bf       	out	0x31, r24	; 49
     650:	08 95       	ret

00000652 <TIMER_COUNTER0_stop>:
     652:	83 b7       	in	r24, 0x33	; 51
     654:	88 7f       	andi	r24, 0xF8	; 248
     656:	83 bf       	out	0x33, r24	; 51
     658:	12 be       	out	0x32, r1	; 50
     65a:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <timer0_state>
     65e:	08 95       	ret

00000660 <TIMER_COUNTER1_start>:
     660:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <timer1_state>
     664:	21 11       	cpse	r18, r1
     666:	42 c0       	rjmp	.+132    	; 0x6ec <TIMER_COUNTER1_start+0x8c>
     668:	2f ef       	ldi	r18, 0xFF	; 255
     66a:	3f ef       	ldi	r19, 0xFF	; 255
     66c:	3b bd       	out	0x2b, r19	; 43
     66e:	2a bd       	out	0x2a, r18	; 42
     670:	2e b5       	in	r18, 0x2e	; 46
     672:	28 7f       	andi	r18, 0xF8	; 248
     674:	2e bd       	out	0x2e, r18	; 46
     676:	88 30       	cpi	r24, 0x08	; 8
     678:	91 05       	cpc	r25, r1
     67a:	d1 f0       	breq	.+52     	; 0x6b0 <TIMER_COUNTER1_start+0x50>
     67c:	48 f4       	brcc	.+18     	; 0x690 <TIMER_COUNTER1_start+0x30>
     67e:	83 30       	cpi	r24, 0x03	; 3
     680:	91 05       	cpc	r25, r1
     682:	31 f1       	breq	.+76     	; 0x6d0 <TIMER_COUNTER1_start+0x70>
     684:	85 30       	cpi	r24, 0x05	; 5
     686:	91 05       	cpc	r25, r1
     688:	39 f1       	breq	.+78     	; 0x6d8 <TIMER_COUNTER1_start+0x78>
     68a:	01 97       	sbiw	r24, 0x01	; 1
     68c:	49 f5       	brne	.+82     	; 0x6e0 <TIMER_COUNTER1_start+0x80>
     68e:	0c c0       	rjmp	.+24     	; 0x6a8 <TIMER_COUNTER1_start+0x48>
     690:	81 15       	cp	r24, r1
     692:	21 e0       	ldi	r18, 0x01	; 1
     694:	92 07       	cpc	r25, r18
     696:	a1 f0       	breq	.+40     	; 0x6c0 <TIMER_COUNTER1_start+0x60>
     698:	81 15       	cp	r24, r1
     69a:	24 e0       	ldi	r18, 0x04	; 4
     69c:	92 07       	cpc	r25, r18
     69e:	a1 f0       	breq	.+40     	; 0x6c8 <TIMER_COUNTER1_start+0x68>
     6a0:	80 34       	cpi	r24, 0x40	; 64
     6a2:	91 05       	cpc	r25, r1
     6a4:	e9 f4       	brne	.+58     	; 0x6e0 <TIMER_COUNTER1_start+0x80>
     6a6:	08 c0       	rjmp	.+16     	; 0x6b8 <TIMER_COUNTER1_start+0x58>
     6a8:	8e b5       	in	r24, 0x2e	; 46
     6aa:	81 60       	ori	r24, 0x01	; 1
     6ac:	8e bd       	out	0x2e, r24	; 46
     6ae:	1b c0       	rjmp	.+54     	; 0x6e6 <TIMER_COUNTER1_start+0x86>
     6b0:	8e b5       	in	r24, 0x2e	; 46
     6b2:	82 60       	ori	r24, 0x02	; 2
     6b4:	8e bd       	out	0x2e, r24	; 46
     6b6:	17 c0       	rjmp	.+46     	; 0x6e6 <TIMER_COUNTER1_start+0x86>
     6b8:	8e b5       	in	r24, 0x2e	; 46
     6ba:	83 60       	ori	r24, 0x03	; 3
     6bc:	8e bd       	out	0x2e, r24	; 46
     6be:	13 c0       	rjmp	.+38     	; 0x6e6 <TIMER_COUNTER1_start+0x86>
     6c0:	8e b5       	in	r24, 0x2e	; 46
     6c2:	84 60       	ori	r24, 0x04	; 4
     6c4:	8e bd       	out	0x2e, r24	; 46
     6c6:	0f c0       	rjmp	.+30     	; 0x6e6 <TIMER_COUNTER1_start+0x86>
     6c8:	8e b5       	in	r24, 0x2e	; 46
     6ca:	85 60       	ori	r24, 0x05	; 5
     6cc:	8e bd       	out	0x2e, r24	; 46
     6ce:	0b c0       	rjmp	.+22     	; 0x6e6 <TIMER_COUNTER1_start+0x86>
     6d0:	8e b5       	in	r24, 0x2e	; 46
     6d2:	86 60       	ori	r24, 0x06	; 6
     6d4:	8e bd       	out	0x2e, r24	; 46
     6d6:	07 c0       	rjmp	.+14     	; 0x6e6 <TIMER_COUNTER1_start+0x86>
     6d8:	8e b5       	in	r24, 0x2e	; 46
     6da:	87 60       	ori	r24, 0x07	; 7
     6dc:	8e bd       	out	0x2e, r24	; 46
     6de:	03 c0       	rjmp	.+6      	; 0x6e6 <TIMER_COUNTER1_start+0x86>
     6e0:	8e b5       	in	r24, 0x2e	; 46
     6e2:	85 60       	ori	r24, 0x05	; 5
     6e4:	8e bd       	out	0x2e, r24	; 46
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <timer1_state>
     6ec:	08 95       	ret

000006ee <TIMER_COUNTER1_compoutmodeA>:
     6ee:	9f b5       	in	r25, 0x2f	; 47
     6f0:	9f 73       	andi	r25, 0x3F	; 63
     6f2:	9f bd       	out	0x2f, r25	; 47
     6f4:	82 30       	cpi	r24, 0x02	; 2
     6f6:	41 f0       	breq	.+16     	; 0x708 <TIMER_COUNTER1_compoutmodeA+0x1a>
     6f8:	83 30       	cpi	r24, 0x03	; 3
     6fa:	51 f0       	breq	.+20     	; 0x710 <TIMER_COUNTER1_compoutmodeA+0x22>
     6fc:	81 30       	cpi	r24, 0x01	; 1
     6fe:	59 f4       	brne	.+22     	; 0x716 <TIMER_COUNTER1_compoutmodeA+0x28>
     700:	8f b5       	in	r24, 0x2f	; 47
     702:	80 64       	ori	r24, 0x40	; 64
     704:	8f bd       	out	0x2f, r24	; 47
     706:	08 95       	ret
     708:	8f b5       	in	r24, 0x2f	; 47
     70a:	80 68       	ori	r24, 0x80	; 128
     70c:	8f bd       	out	0x2f, r24	; 47
     70e:	08 95       	ret
     710:	8f b5       	in	r24, 0x2f	; 47
     712:	80 6c       	ori	r24, 0xC0	; 192
     714:	8f bd       	out	0x2f, r24	; 47
     716:	08 95       	ret

00000718 <TIMER_COUNTER1_compoutmodeB>:
     718:	9f b5       	in	r25, 0x2f	; 47
     71a:	9f 7c       	andi	r25, 0xCF	; 207
     71c:	9f bd       	out	0x2f, r25	; 47
     71e:	82 30       	cpi	r24, 0x02	; 2
     720:	41 f0       	breq	.+16     	; 0x732 <TIMER_COUNTER1_compoutmodeB+0x1a>
     722:	83 30       	cpi	r24, 0x03	; 3
     724:	51 f0       	breq	.+20     	; 0x73a <TIMER_COUNTER1_compoutmodeB+0x22>
     726:	81 30       	cpi	r24, 0x01	; 1
     728:	59 f4       	brne	.+22     	; 0x740 <TIMER_COUNTER1_compoutmodeB+0x28>
     72a:	8f b5       	in	r24, 0x2f	; 47
     72c:	80 61       	ori	r24, 0x10	; 16
     72e:	8f bd       	out	0x2f, r24	; 47
     730:	08 95       	ret
     732:	8f b5       	in	r24, 0x2f	; 47
     734:	80 62       	ori	r24, 0x20	; 32
     736:	8f bd       	out	0x2f, r24	; 47
     738:	08 95       	ret
     73a:	8f b5       	in	r24, 0x2f	; 47
     73c:	80 63       	ori	r24, 0x30	; 48
     73e:	8f bd       	out	0x2f, r24	; 47
     740:	08 95       	ret

00000742 <TIMER_COUNTER1_compoutmodeC>:
     742:	9f b5       	in	r25, 0x2f	; 47
     744:	93 7f       	andi	r25, 0xF3	; 243
     746:	9f bd       	out	0x2f, r25	; 47
     748:	82 30       	cpi	r24, 0x02	; 2
     74a:	41 f0       	breq	.+16     	; 0x75c <TIMER_COUNTER1_compoutmodeC+0x1a>
     74c:	83 30       	cpi	r24, 0x03	; 3
     74e:	51 f0       	breq	.+20     	; 0x764 <TIMER_COUNTER1_compoutmodeC+0x22>
     750:	81 30       	cpi	r24, 0x01	; 1
     752:	59 f4       	brne	.+22     	; 0x76a <TIMER_COUNTER1_compoutmodeC+0x28>
     754:	8f b5       	in	r24, 0x2f	; 47
     756:	84 60       	ori	r24, 0x04	; 4
     758:	8f bd       	out	0x2f, r24	; 47
     75a:	08 95       	ret
     75c:	8f b5       	in	r24, 0x2f	; 47
     75e:	88 60       	ori	r24, 0x08	; 8
     760:	8f bd       	out	0x2f, r24	; 47
     762:	08 95       	ret
     764:	8f b5       	in	r24, 0x2f	; 47
     766:	8c 60       	ori	r24, 0x0C	; 12
     768:	8f bd       	out	0x2f, r24	; 47
     76a:	08 95       	ret

0000076c <TIMER_COUNTER1_compareA>:
     76c:	9b bd       	out	0x2b, r25	; 43
     76e:	8a bd       	out	0x2a, r24	; 42
     770:	08 95       	ret

00000772 <TIMER_COUNTER1_compareB>:
     772:	99 bd       	out	0x29, r25	; 41
     774:	88 bd       	out	0x28, r24	; 40
     776:	08 95       	ret

00000778 <TIMER_COUNTER1_compareC>:
     778:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     77c:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     780:	08 95       	ret

00000782 <TIMER_COUNTER1_stop>:
     782:	8e b5       	in	r24, 0x2e	; 46
     784:	88 7f       	andi	r24, 0xF8	; 248
     786:	8e bd       	out	0x2e, r24	; 46
     788:	1d bc       	out	0x2d, r1	; 45
     78a:	1c bc       	out	0x2c, r1	; 44
     78c:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <timer1_state>
     790:	08 95       	ret

00000792 <TIMER_COUNTER0enable>:
     792:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <timer0_state>
     796:	23 b7       	in	r18, 0x33	; 51
     798:	27 7b       	andi	r18, 0xB7	; 183
     79a:	23 bf       	out	0x33, r18	; 51
     79c:	62 30       	cpi	r22, 0x02	; 2
     79e:	41 f0       	breq	.+16     	; 0x7b0 <TIMER_COUNTER0enable+0x1e>
     7a0:	63 30       	cpi	r22, 0x03	; 3
     7a2:	51 f0       	breq	.+20     	; 0x7b8 <TIMER_COUNTER0enable+0x26>
     7a4:	61 30       	cpi	r22, 0x01	; 1
     7a6:	59 f4       	brne	.+22     	; 0x7be <TIMER_COUNTER0enable+0x2c>
     7a8:	23 b7       	in	r18, 0x33	; 51
     7aa:	20 64       	ori	r18, 0x40	; 64
     7ac:	23 bf       	out	0x33, r18	; 51
     7ae:	07 c0       	rjmp	.+14     	; 0x7be <TIMER_COUNTER0enable+0x2c>
     7b0:	23 b7       	in	r18, 0x33	; 51
     7b2:	28 60       	ori	r18, 0x08	; 8
     7b4:	23 bf       	out	0x33, r18	; 51
     7b6:	03 c0       	rjmp	.+6      	; 0x7be <TIMER_COUNTER0enable+0x2c>
     7b8:	23 b7       	in	r18, 0x33	; 51
     7ba:	28 64       	ori	r18, 0x48	; 72
     7bc:	23 bf       	out	0x33, r18	; 51
     7be:	27 b7       	in	r18, 0x37	; 55
     7c0:	2e 7f       	andi	r18, 0xFE	; 254
     7c2:	27 bf       	out	0x37, r18	; 55
     7c4:	27 b7       	in	r18, 0x37	; 55
     7c6:	2d 7f       	andi	r18, 0xFD	; 253
     7c8:	27 bf       	out	0x37, r18	; 55
     7ca:	42 30       	cpi	r20, 0x02	; 2
     7cc:	41 f0       	breq	.+16     	; 0x7de <TIMER_COUNTER0enable+0x4c>
     7ce:	43 30       	cpi	r20, 0x03	; 3
     7d0:	51 f0       	breq	.+20     	; 0x7e6 <TIMER_COUNTER0enable+0x54>
     7d2:	41 30       	cpi	r20, 0x01	; 1
     7d4:	71 f4       	brne	.+28     	; 0x7f2 <TIMER_COUNTER0enable+0x60>
     7d6:	27 b7       	in	r18, 0x37	; 55
     7d8:	21 60       	ori	r18, 0x01	; 1
     7da:	27 bf       	out	0x37, r18	; 55
     7dc:	0a c0       	rjmp	.+20     	; 0x7f2 <TIMER_COUNTER0enable+0x60>
     7de:	27 b7       	in	r18, 0x37	; 55
     7e0:	22 60       	ori	r18, 0x02	; 2
     7e2:	27 bf       	out	0x37, r18	; 55
     7e4:	06 c0       	rjmp	.+12     	; 0x7f2 <TIMER_COUNTER0enable+0x60>
     7e6:	27 b7       	in	r18, 0x37	; 55
     7e8:	21 60       	ori	r18, 0x01	; 1
     7ea:	27 bf       	out	0x37, r18	; 55
     7ec:	27 b7       	in	r18, 0x37	; 55
     7ee:	22 60       	ori	r18, 0x02	; 2
     7f0:	27 bf       	out	0x37, r18	; 55
     7f2:	22 e1       	ldi	r18, 0x12	; 18
     7f4:	33 e0       	ldi	r19, 0x03	; 3
     7f6:	fc 01       	movw	r30, r24
     7f8:	31 83       	std	Z+1, r19	; 0x01
     7fa:	20 83       	st	Z, r18
     7fc:	27 e2       	ldi	r18, 0x27	; 39
     7fe:	33 e0       	ldi	r19, 0x03	; 3
     800:	37 83       	std	Z+7, r19	; 0x07
     802:	26 83       	std	Z+6, r18	; 0x06
     804:	2d ec       	ldi	r18, 0xCD	; 205
     806:	32 e0       	ldi	r19, 0x02	; 2
     808:	35 87       	std	Z+13, r19	; 0x0d
     80a:	24 87       	std	Z+12, r18	; 0x0c
     80c:	29 e2       	ldi	r18, 0x29	; 41
     80e:	33 e0       	ldi	r19, 0x03	; 3
     810:	37 87       	std	Z+15, r19	; 0x0f
     812:	26 87       	std	Z+14, r18	; 0x0e
     814:	08 95       	ret

00000816 <TIMER_COUNTER1enable>:
     816:	0f 93       	push	r16
     818:	1f 93       	push	r17
     81a:	dc 01       	movw	r26, r24
     81c:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <timer1_state>
     820:	8f b5       	in	r24, 0x2f	; 47
     822:	8c 7f       	andi	r24, 0xFC	; 252
     824:	8f bd       	out	0x2f, r24	; 47
     826:	8e b5       	in	r24, 0x2e	; 46
     828:	87 7e       	andi	r24, 0xE7	; 231
     82a:	8e bd       	out	0x2e, r24	; 46
     82c:	06 2f       	mov	r16, r22
     82e:	10 e0       	ldi	r17, 0x00	; 0
     830:	f8 01       	movw	r30, r16
     832:	31 97       	sbiw	r30, 0x01	; 1
     834:	ef 30       	cpi	r30, 0x0F	; 15
     836:	f1 05       	cpc	r31, r1
     838:	08 f0       	brcs	.+2      	; 0x83c <TIMER_COUNTER1enable+0x26>
     83a:	5a c0       	rjmp	.+180    	; 0x8f0 <TIMER_COUNTER1enable+0xda>
     83c:	ea 5b       	subi	r30, 0xBA	; 186
     83e:	ff 4f       	sbci	r31, 0xFF	; 255
     840:	0c 94 ac 1a 	jmp	0x3558	; 0x3558 <__tablejump2__>
     844:	8f b5       	in	r24, 0x2f	; 47
     846:	81 60       	ori	r24, 0x01	; 1
     848:	8f bd       	out	0x2f, r24	; 47
     84a:	52 c0       	rjmp	.+164    	; 0x8f0 <TIMER_COUNTER1enable+0xda>
     84c:	8f b5       	in	r24, 0x2f	; 47
     84e:	82 60       	ori	r24, 0x02	; 2
     850:	8f bd       	out	0x2f, r24	; 47
     852:	4e c0       	rjmp	.+156    	; 0x8f0 <TIMER_COUNTER1enable+0xda>
     854:	8f b5       	in	r24, 0x2f	; 47
     856:	83 60       	ori	r24, 0x03	; 3
     858:	8f bd       	out	0x2f, r24	; 47
     85a:	4a c0       	rjmp	.+148    	; 0x8f0 <TIMER_COUNTER1enable+0xda>
     85c:	8e b5       	in	r24, 0x2e	; 46
     85e:	88 60       	ori	r24, 0x08	; 8
     860:	8e bd       	out	0x2e, r24	; 46
     862:	46 c0       	rjmp	.+140    	; 0x8f0 <TIMER_COUNTER1enable+0xda>
     864:	8f b5       	in	r24, 0x2f	; 47
     866:	81 60       	ori	r24, 0x01	; 1
     868:	8f bd       	out	0x2f, r24	; 47
     86a:	8e b5       	in	r24, 0x2e	; 46
     86c:	88 60       	ori	r24, 0x08	; 8
     86e:	8e bd       	out	0x2e, r24	; 46
     870:	3f c0       	rjmp	.+126    	; 0x8f0 <TIMER_COUNTER1enable+0xda>
     872:	8f b5       	in	r24, 0x2f	; 47
     874:	82 60       	ori	r24, 0x02	; 2
     876:	8f bd       	out	0x2f, r24	; 47
     878:	8e b5       	in	r24, 0x2e	; 46
     87a:	88 60       	ori	r24, 0x08	; 8
     87c:	8e bd       	out	0x2e, r24	; 46
     87e:	38 c0       	rjmp	.+112    	; 0x8f0 <TIMER_COUNTER1enable+0xda>
     880:	8f b5       	in	r24, 0x2f	; 47
     882:	83 60       	ori	r24, 0x03	; 3
     884:	8f bd       	out	0x2f, r24	; 47
     886:	8e b5       	in	r24, 0x2e	; 46
     888:	88 60       	ori	r24, 0x08	; 8
     88a:	8e bd       	out	0x2e, r24	; 46
     88c:	31 c0       	rjmp	.+98     	; 0x8f0 <TIMER_COUNTER1enable+0xda>
     88e:	8e b5       	in	r24, 0x2e	; 46
     890:	80 61       	ori	r24, 0x10	; 16
     892:	8e bd       	out	0x2e, r24	; 46
     894:	2d c0       	rjmp	.+90     	; 0x8f0 <TIMER_COUNTER1enable+0xda>
     896:	8f b5       	in	r24, 0x2f	; 47
     898:	81 60       	ori	r24, 0x01	; 1
     89a:	8f bd       	out	0x2f, r24	; 47
     89c:	8e b5       	in	r24, 0x2e	; 46
     89e:	80 61       	ori	r24, 0x10	; 16
     8a0:	8e bd       	out	0x2e, r24	; 46
     8a2:	26 c0       	rjmp	.+76     	; 0x8f0 <TIMER_COUNTER1enable+0xda>
     8a4:	8f b5       	in	r24, 0x2f	; 47
     8a6:	82 60       	ori	r24, 0x02	; 2
     8a8:	8f bd       	out	0x2f, r24	; 47
     8aa:	8e b5       	in	r24, 0x2e	; 46
     8ac:	80 61       	ori	r24, 0x10	; 16
     8ae:	8e bd       	out	0x2e, r24	; 46
     8b0:	1f c0       	rjmp	.+62     	; 0x8f0 <TIMER_COUNTER1enable+0xda>
     8b2:	8f b5       	in	r24, 0x2f	; 47
     8b4:	83 60       	ori	r24, 0x03	; 3
     8b6:	8f bd       	out	0x2f, r24	; 47
     8b8:	8e b5       	in	r24, 0x2e	; 46
     8ba:	80 61       	ori	r24, 0x10	; 16
     8bc:	8e bd       	out	0x2e, r24	; 46
     8be:	18 c0       	rjmp	.+48     	; 0x8f0 <TIMER_COUNTER1enable+0xda>
     8c0:	8e b5       	in	r24, 0x2e	; 46
     8c2:	88 61       	ori	r24, 0x18	; 24
     8c4:	8e bd       	out	0x2e, r24	; 46
     8c6:	14 c0       	rjmp	.+40     	; 0x8f0 <TIMER_COUNTER1enable+0xda>
     8c8:	8f b5       	in	r24, 0x2f	; 47
     8ca:	81 60       	ori	r24, 0x01	; 1
     8cc:	8f bd       	out	0x2f, r24	; 47
     8ce:	8e b5       	in	r24, 0x2e	; 46
     8d0:	88 61       	ori	r24, 0x18	; 24
     8d2:	8e bd       	out	0x2e, r24	; 46
     8d4:	0d c0       	rjmp	.+26     	; 0x8f0 <TIMER_COUNTER1enable+0xda>
     8d6:	8f b5       	in	r24, 0x2f	; 47
     8d8:	82 60       	ori	r24, 0x02	; 2
     8da:	8f bd       	out	0x2f, r24	; 47
     8dc:	8e b5       	in	r24, 0x2e	; 46
     8de:	88 61       	ori	r24, 0x18	; 24
     8e0:	8e bd       	out	0x2e, r24	; 46
     8e2:	06 c0       	rjmp	.+12     	; 0x8f0 <TIMER_COUNTER1enable+0xda>
     8e4:	8f b5       	in	r24, 0x2f	; 47
     8e6:	83 60       	ori	r24, 0x03	; 3
     8e8:	8f bd       	out	0x2f, r24	; 47
     8ea:	8e b5       	in	r24, 0x2e	; 46
     8ec:	88 61       	ori	r24, 0x18	; 24
     8ee:	8e bd       	out	0x2e, r24	; 46
     8f0:	8f b5       	in	r24, 0x2f	; 47
     8f2:	83 70       	andi	r24, 0x03	; 3
     8f4:	8f bd       	out	0x2f, r24	; 47
     8f6:	87 b7       	in	r24, 0x37	; 55
     8f8:	83 7c       	andi	r24, 0xC3	; 195
     8fa:	87 bf       	out	0x37, r24	; 55
     8fc:	ed e7       	ldi	r30, 0x7D	; 125
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	80 81       	ld	r24, Z
     902:	8e 7f       	andi	r24, 0xFE	; 254
     904:	80 83       	st	Z, r24
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	fa 01       	movw	r30, r20
     90a:	31 97       	sbiw	r30, 0x01	; 1
     90c:	ec 30       	cpi	r30, 0x0C	; 12
     90e:	f1 05       	cpc	r31, r1
     910:	08 f0       	brcs	.+2      	; 0x914 <TIMER_COUNTER1enable+0xfe>
     912:	44 c0       	rjmp	.+136    	; 0x99c <TIMER_COUNTER1enable+0x186>
     914:	eb 5a       	subi	r30, 0xAB	; 171
     916:	ff 4f       	sbci	r31, 0xFF	; 255
     918:	0c 94 ac 1a 	jmp	0x3558	; 0x3558 <__tablejump2__>
     91c:	87 b7       	in	r24, 0x37	; 55
     91e:	84 60       	ori	r24, 0x04	; 4
     920:	87 bf       	out	0x37, r24	; 55
     922:	3c c0       	rjmp	.+120    	; 0x99c <TIMER_COUNTER1enable+0x186>
     924:	87 b7       	in	r24, 0x37	; 55
     926:	80 61       	ori	r24, 0x10	; 16
     928:	87 bf       	out	0x37, r24	; 55
     92a:	38 c0       	rjmp	.+112    	; 0x99c <TIMER_COUNTER1enable+0x186>
     92c:	87 b7       	in	r24, 0x37	; 55
     92e:	88 60       	ori	r24, 0x08	; 8
     930:	87 bf       	out	0x37, r24	; 55
     932:	34 c0       	rjmp	.+104    	; 0x99c <TIMER_COUNTER1enable+0x186>
     934:	ed e7       	ldi	r30, 0x7D	; 125
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	80 81       	ld	r24, Z
     93a:	81 60       	ori	r24, 0x01	; 1
     93c:	80 83       	st	Z, r24
     93e:	2e c0       	rjmp	.+92     	; 0x99c <TIMER_COUNTER1enable+0x186>
     940:	87 b7       	in	r24, 0x37	; 55
     942:	80 62       	ori	r24, 0x20	; 32
     944:	87 bf       	out	0x37, r24	; 55
     946:	2a c0       	rjmp	.+84     	; 0x99c <TIMER_COUNTER1enable+0x186>
     948:	87 b7       	in	r24, 0x37	; 55
     94a:	84 61       	ori	r24, 0x14	; 20
     94c:	87 bf       	out	0x37, r24	; 55
     94e:	26 c0       	rjmp	.+76     	; 0x99c <TIMER_COUNTER1enable+0x186>
     950:	87 b7       	in	r24, 0x37	; 55
     952:	8c 60       	ori	r24, 0x0C	; 12
     954:	87 bf       	out	0x37, r24	; 55
     956:	22 c0       	rjmp	.+68     	; 0x99c <TIMER_COUNTER1enable+0x186>
     958:	87 b7       	in	r24, 0x37	; 55
     95a:	84 60       	ori	r24, 0x04	; 4
     95c:	87 bf       	out	0x37, r24	; 55
     95e:	ed e7       	ldi	r30, 0x7D	; 125
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	80 81       	ld	r24, Z
     964:	81 60       	ori	r24, 0x01	; 1
     966:	80 83       	st	Z, r24
     968:	19 c0       	rjmp	.+50     	; 0x99c <TIMER_COUNTER1enable+0x186>
     96a:	87 b7       	in	r24, 0x37	; 55
     96c:	84 62       	ori	r24, 0x24	; 36
     96e:	87 bf       	out	0x37, r24	; 55
     970:	15 c0       	rjmp	.+42     	; 0x99c <TIMER_COUNTER1enable+0x186>
     972:	87 b7       	in	r24, 0x37	; 55
     974:	8c 61       	ori	r24, 0x1C	; 28
     976:	87 bf       	out	0x37, r24	; 55
     978:	11 c0       	rjmp	.+34     	; 0x99c <TIMER_COUNTER1enable+0x186>
     97a:	87 b7       	in	r24, 0x37	; 55
     97c:	8c 61       	ori	r24, 0x1C	; 28
     97e:	87 bf       	out	0x37, r24	; 55
     980:	ed e7       	ldi	r30, 0x7D	; 125
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	80 81       	ld	r24, Z
     986:	81 60       	ori	r24, 0x01	; 1
     988:	80 83       	st	Z, r24
     98a:	08 c0       	rjmp	.+16     	; 0x99c <TIMER_COUNTER1enable+0x186>
     98c:	87 b7       	in	r24, 0x37	; 55
     98e:	88 61       	ori	r24, 0x18	; 24
     990:	87 bf       	out	0x37, r24	; 55
     992:	ed e7       	ldi	r30, 0x7D	; 125
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	80 81       	ld	r24, Z
     998:	81 60       	ori	r24, 0x01	; 1
     99a:	80 83       	st	Z, r24
     99c:	87 e7       	ldi	r24, 0x77	; 119
     99e:	93 e0       	ldi	r25, 0x03	; 3
     9a0:	11 96       	adiw	r26, 0x01	; 1
     9a2:	9c 93       	st	X, r25
     9a4:	8e 93       	st	-X, r24
     9a6:	8c e8       	ldi	r24, 0x8C	; 140
     9a8:	93 e0       	ldi	r25, 0x03	; 3
     9aa:	13 96       	adiw	r26, 0x03	; 3
     9ac:	9c 93       	st	X, r25
     9ae:	8e 93       	st	-X, r24
     9b0:	12 97       	sbiw	r26, 0x02	; 2
     9b2:	81 ea       	ldi	r24, 0xA1	; 161
     9b4:	93 e0       	ldi	r25, 0x03	; 3
     9b6:	15 96       	adiw	r26, 0x05	; 5
     9b8:	9c 93       	st	X, r25
     9ba:	8e 93       	st	-X, r24
     9bc:	14 97       	sbiw	r26, 0x04	; 4
     9be:	86 eb       	ldi	r24, 0xB6	; 182
     9c0:	93 e0       	ldi	r25, 0x03	; 3
     9c2:	17 96       	adiw	r26, 0x07	; 7
     9c4:	9c 93       	st	X, r25
     9c6:	8e 93       	st	-X, r24
     9c8:	16 97       	sbiw	r26, 0x06	; 6
     9ca:	89 eb       	ldi	r24, 0xB9	; 185
     9cc:	93 e0       	ldi	r25, 0x03	; 3
     9ce:	19 96       	adiw	r26, 0x09	; 9
     9d0:	9c 93       	st	X, r25
     9d2:	8e 93       	st	-X, r24
     9d4:	18 97       	sbiw	r26, 0x08	; 8
     9d6:	8c eb       	ldi	r24, 0xBC	; 188
     9d8:	93 e0       	ldi	r25, 0x03	; 3
     9da:	1b 96       	adiw	r26, 0x0b	; 11
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	1a 97       	sbiw	r26, 0x0a	; 10
     9e2:	80 e3       	ldi	r24, 0x30	; 48
     9e4:	93 e0       	ldi	r25, 0x03	; 3
     9e6:	1d 96       	adiw	r26, 0x0d	; 13
     9e8:	9c 93       	st	X, r25
     9ea:	8e 93       	st	-X, r24
     9ec:	1c 97       	sbiw	r26, 0x0c	; 12
     9ee:	81 ec       	ldi	r24, 0xC1	; 193
     9f0:	93 e0       	ldi	r25, 0x03	; 3
     9f2:	1f 96       	adiw	r26, 0x0f	; 15
     9f4:	9c 93       	st	X, r25
     9f6:	8e 93       	st	-X, r24
     9f8:	1e 97       	sbiw	r26, 0x0e	; 14
     9fa:	cd 01       	movw	r24, r26
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	08 95       	ret

00000a02 <__vector_16>:
	timer3_state=0;
}
/***Interrupt***/
// So that main will not freeze when not defined, therefore exclude here! before use.
//ISR(TIMER0_COMP_vect){ }
ISR(TIMER0_OVF_vect){ }
     a02:	1f 92       	push	r1
     a04:	0f 92       	push	r0
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	0f 92       	push	r0
     a0a:	11 24       	eor	r1, r1
     a0c:	0f 90       	pop	r0
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	0f 90       	pop	r0
     a12:	1f 90       	pop	r1
     a14:	18 95       	reti

00000a16 <__vector_11>:
ISR(TIMER1_CAPT_vect){ }
     a16:	1f 92       	push	r1
     a18:	0f 92       	push	r0
     a1a:	0f b6       	in	r0, 0x3f	; 63
     a1c:	0f 92       	push	r0
     a1e:	11 24       	eor	r1, r1
     a20:	0f 90       	pop	r0
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	0f 90       	pop	r0
     a26:	1f 90       	pop	r1
     a28:	18 95       	reti

00000a2a <__vector_12>:
ISR(TIMER1_COMPA_vect){ }
     a2a:	1f 92       	push	r1
     a2c:	0f 92       	push	r0
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	0f 92       	push	r0
     a32:	11 24       	eor	r1, r1
     a34:	0f 90       	pop	r0
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	0f 90       	pop	r0
     a3a:	1f 90       	pop	r1
     a3c:	18 95       	reti

00000a3e <__vector_13>:
ISR(TIMER1_COMPB_vect){ }
     a3e:	1f 92       	push	r1
     a40:	0f 92       	push	r0
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	0f 92       	push	r0
     a46:	11 24       	eor	r1, r1
     a48:	0f 90       	pop	r0
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	0f 90       	pop	r0
     a4e:	1f 90       	pop	r1
     a50:	18 95       	reti

00000a52 <__vector_24>:
ISR(TIMER1_COMPC_vect){ }
     a52:	1f 92       	push	r1
     a54:	0f 92       	push	r0
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	0f 92       	push	r0
     a5a:	11 24       	eor	r1, r1
     a5c:	0f 90       	pop	r0
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	0f 90       	pop	r0
     a62:	1f 90       	pop	r1
     a64:	18 95       	reti

00000a66 <__vector_14>:
ISR(TIMER1_OVF_vect){ }
     a66:	1f 92       	push	r1
     a68:	0f 92       	push	r0
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	0f 92       	push	r0
     a6e:	11 24       	eor	r1, r1
     a70:	0f 90       	pop	r0
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	0f 90       	pop	r0
     a76:	1f 90       	pop	r1
     a78:	18 95       	reti

00000a7a <__vector_10>:
ISR(TIMER2_OVF_vect){ }
     a7a:	1f 92       	push	r1
     a7c:	0f 92       	push	r0
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	0f 92       	push	r0
     a82:	11 24       	eor	r1, r1
     a84:	0f 90       	pop	r0
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	0f 90       	pop	r0
     a8a:	1f 90       	pop	r1
     a8c:	18 95       	reti

00000a8e <__vector_25>:
ISR(TIMER3_CAPT_vect){ }
     a8e:	1f 92       	push	r1
     a90:	0f 92       	push	r0
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	0f 92       	push	r0
     a96:	11 24       	eor	r1, r1
     a98:	0f 90       	pop	r0
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	0f 90       	pop	r0
     a9e:	1f 90       	pop	r1
     aa0:	18 95       	reti

00000aa2 <__vector_26>:
ISR(TIMER3_COMPA_vect){ }
     aa2:	1f 92       	push	r1
     aa4:	0f 92       	push	r0
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	0f 92       	push	r0
     aaa:	11 24       	eor	r1, r1
     aac:	0f 90       	pop	r0
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	0f 90       	pop	r0
     ab2:	1f 90       	pop	r1
     ab4:	18 95       	reti

00000ab6 <__vector_27>:
ISR(TIMER3_COMPB_vect){ }
     ab6:	1f 92       	push	r1
     ab8:	0f 92       	push	r0
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	0f 92       	push	r0
     abe:	11 24       	eor	r1, r1
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	0f 90       	pop	r0
     ac6:	1f 90       	pop	r1
     ac8:	18 95       	reti

00000aca <__vector_28>:
ISR(TIMER3_COMPC_vect){ }
     aca:	1f 92       	push	r1
     acc:	0f 92       	push	r0
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	0f 92       	push	r0
     ad2:	11 24       	eor	r1, r1
     ad4:	0f 90       	pop	r0
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	0f 90       	pop	r0
     ada:	1f 90       	pop	r1
     adc:	18 95       	reti

00000ade <__vector_29>:
ISR(TIMER3_OVF_vect){ }
     ade:	1f 92       	push	r1
     ae0:	0f 92       	push	r0
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	0f 92       	push	r0
     ae6:	11 24       	eor	r1, r1
     ae8:	0f 90       	pop	r0
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	0f 90       	pop	r0
     aee:	1f 90       	pop	r1
     af0:	18 95       	reti

00000af2 <__vector_18>:
	}else{
		uart1_index=0;
		ret=uart1_msg;
	}
	return ret;
}
     af2:	1f 92       	push	r1
     af4:	0f 92       	push	r0
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	0f 92       	push	r0
     afa:	11 24       	eor	r1, r1
     afc:	0b b6       	in	r0, 0x3b	; 59
     afe:	0f 92       	push	r0
     b00:	8f 93       	push	r24
     b02:	9f 93       	push	r25
     b04:	ef 93       	push	r30
     b06:	ff 93       	push	r31
     b08:	8b b1       	in	r24, 0x0b	; 11
     b0a:	9a b1       	in	r25, 0x0a	; 10
     b0c:	88 71       	andi	r24, 0x18	; 24
     b0e:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <UART_LastRxError>
     b12:	e0 91 d6 02 	lds	r30, 0x02D6	; 0x8002d6 <UART_RxHead>
     b16:	ef 5f       	subi	r30, 0xFF	; 255
     b18:	ef 73       	andi	r30, 0x3F	; 63
     b1a:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <UART_RxTail>
     b1e:	e9 13       	cpse	r30, r25
     b20:	04 c0       	rjmp	.+8      	; 0xb2a <__vector_18+0x38>
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <UART_LastRxError>
     b28:	0f c0       	rjmp	.+30     	; 0xb48 <__vector_18+0x56>
     b2a:	9c b1       	in	r25, 0x0c	; 12
     b2c:	e0 93 d6 02 	sts	0x02D6, r30	; 0x8002d6 <UART_RxHead>
     b30:	88 23       	and	r24, r24
     b32:	31 f0       	breq	.+12     	; 0xb40 <__vector_18+0x4e>
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	e7 52       	subi	r30, 0x27	; 39
     b38:	fd 4f       	sbci	r31, 0xFD	; 253
     b3a:	88 e5       	ldi	r24, 0x58	; 88
     b3c:	80 83       	st	Z, r24
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__vector_18+0x56>
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	e7 52       	subi	r30, 0x27	; 39
     b44:	fd 4f       	sbci	r31, 0xFD	; 253
     b46:	90 83       	st	Z, r25
     b48:	ff 91       	pop	r31
     b4a:	ef 91       	pop	r30
     b4c:	9f 91       	pop	r25
     b4e:	8f 91       	pop	r24
     b50:	0f 90       	pop	r0
     b52:	0b be       	out	0x3b, r0	; 59
     b54:	0f 90       	pop	r0
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	0f 90       	pop	r0
     b5a:	1f 90       	pop	r1
     b5c:	18 95       	reti

00000b5e <__vector_19>:
     b5e:	1f 92       	push	r1
     b60:	0f 92       	push	r0
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	0f 92       	push	r0
     b66:	11 24       	eor	r1, r1
     b68:	0b b6       	in	r0, 0x3b	; 59
     b6a:	0f 92       	push	r0
     b6c:	8f 93       	push	r24
     b6e:	9f 93       	push	r25
     b70:	ef 93       	push	r30
     b72:	ff 93       	push	r31
     b74:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <UART_TxTail>
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	ea 56       	subi	r30, 0x6A	; 106
     b7c:	fd 4f       	sbci	r31, 0xFD	; 253
     b7e:	80 81       	ld	r24, Z
     b80:	8c b9       	out	0x0c, r24	; 12
     b82:	10 82       	st	Z, r1
     b84:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <UART_TxTail>
     b88:	8f 5f       	subi	r24, 0xFF	; 255
     b8a:	8f 73       	andi	r24, 0x3F	; 63
     b8c:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <UART_TxTail>
     b90:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <UART_TxHead>
     b94:	89 13       	cpse	r24, r25
     b96:	01 c0       	rjmp	.+2      	; 0xb9a <__vector_19+0x3c>
     b98:	55 98       	cbi	0x0a, 5	; 10
     b9a:	ff 91       	pop	r31
     b9c:	ef 91       	pop	r30
     b9e:	9f 91       	pop	r25
     ba0:	8f 91       	pop	r24
     ba2:	0f 90       	pop	r0
     ba4:	0b be       	out	0x3b, r0	; 59
     ba6:	0f 90       	pop	r0
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	0f 90       	pop	r0
     bac:	1f 90       	pop	r1
     bae:	18 95       	reti

00000bb0 <__vector_30>:
	UART1_TxHead = UART1_TxTail;
}
/***Interrupt***/
/***SIGNAL(UART1_RECEIVE_INTERRUPT)***/
SIGNAL(UART1_RECEIVE_INTERRUPT)
{
     bb0:	1f 92       	push	r1
     bb2:	0f 92       	push	r0
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	0f 92       	push	r0
     bb8:	11 24       	eor	r1, r1
     bba:	0b b6       	in	r0, 0x3b	; 59
     bbc:	0f 92       	push	r0
     bbe:	8f 93       	push	r24
     bc0:	9f 93       	push	r25
     bc2:	ef 93       	push	r30
     bc4:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /***read UART status register and UART data register***/
	usr  = UART1_STATUS;
     bc6:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    bit9 = UART1_CONTROL;
     bca:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    bit9 = 0x01 & (bit9>>1);
    /***/
    UART1_LastRxError = (usr & (_BV(FE1)|_BV(DOR1)));
     bce:	88 71       	andi	r24, 0x18	; 24
     bd0:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <UART1_LastRxError>
	/***calculate buffer index***/
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
     bd4:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <UART1_RxHead>
     bd8:	ef 5f       	subi	r30, 0xFF	; 255
     bda:	ef 73       	andi	r30, 0x3F	; 63
    if ( tmphead == UART1_RxTail ) {	
     bdc:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <UART1_RxTail>
     be0:	e9 13       	cpse	r30, r25
     be2:	04 c0       	rjmp	.+8      	; 0xbec <__vector_30+0x3c>
        /***error: receive buffer overflow, caracter is lost***/
        UART1_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
     be4:	82 e0       	ldi	r24, 0x02	; 2
     be6:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <UART1_LastRxError>
     bea:	10 c0       	rjmp	.+32     	; 0xc0c <__vector_30+0x5c>
	}else{
		data = UART1_DATA;
     bec:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
        /***store new index***/
        UART1_RxHead = tmphead;
     bf0:	e0 93 12 02 	sts	0x0212, r30	; 0x800212 <UART1_RxHead>
		if(UART1_LastRxError){
     bf4:	88 23       	and	r24, r24
     bf6:	31 f0       	breq	.+12     	; 0xc04 <__vector_30+0x54>
			/***store indication data error in buffer***/
			UART1_RxBuf[tmphead] = 'X';
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	e1 53       	subi	r30, 0x31	; 49
     bfc:	fe 4f       	sbci	r31, 0xFE	; 254
     bfe:	88 e5       	ldi	r24, 0x58	; 88
     c00:	80 83       	st	Z, r24
     c02:	04 c0       	rjmp	.+8      	; 0xc0c <__vector_30+0x5c>
		}else{
			/***store received data in buffer***/
			UART1_RxBuf[tmphead] = data;
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	e1 53       	subi	r30, 0x31	; 49
     c08:	fe 4f       	sbci	r31, 0xFE	; 254
     c0a:	90 83       	st	Z, r25
		}
    }
}
     c0c:	ff 91       	pop	r31
     c0e:	ef 91       	pop	r30
     c10:	9f 91       	pop	r25
     c12:	8f 91       	pop	r24
     c14:	0f 90       	pop	r0
     c16:	0b be       	out	0x3b, r0	; 59
     c18:	0f 90       	pop	r0
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	0f 90       	pop	r0
     c1e:	1f 90       	pop	r1
     c20:	18 95       	reti

00000c22 <__vector_31>:
/***SIGNAL(UART1_TRANSMIT_INTERRUPT)***/
SIGNAL(UART1_TRANSMIT_INTERRUPT)
{
     c22:	1f 92       	push	r1
     c24:	0f 92       	push	r0
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	0f 92       	push	r0
     c2a:	11 24       	eor	r1, r1
     c2c:	0b b6       	in	r0, 0x3b	; 59
     c2e:	0f 92       	push	r0
     c30:	8f 93       	push	r24
     c32:	9f 93       	push	r25
     c34:	ef 93       	push	r30
     c36:	ff 93       	push	r31
	uint8_t tail = UART1_TxTail;
	UART1_DATA = UART1_TxBuf[tail];
     c38:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <UART1_TxTail>
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	ea 5a       	subi	r30, 0xAA	; 170
     c40:	fd 4f       	sbci	r31, 0xFD	; 253
     c42:	80 81       	ld	r24, Z
     c44:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	UART1_TxBuf[tail]='\0';
     c48:	10 82       	st	Z, r1
	UART1_TxTail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
     c4a:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <UART1_TxTail>
     c4e:	8f 5f       	subi	r24, 0xFF	; 255
     c50:	8f 73       	andi	r24, 0x3F	; 63
     c52:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <UART1_TxTail>
	if ( UART1_TxTail != UART1_TxHead )
     c56:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <UART1_TxHead>
     c5a:	89 13       	cpse	r24, r25
     c5c:	05 c0       	rjmp	.+10     	; 0xc68 <__vector_31+0x46>
        ;
    else
		UART1_CONTROL &= ~_BV(UART1_UDRIE);
     c5e:	ea e9       	ldi	r30, 0x9A	; 154
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	8f 7d       	andi	r24, 0xDF	; 223
     c66:	80 83       	st	Z, r24
}
     c68:	ff 91       	pop	r31
     c6a:	ef 91       	pop	r30
     c6c:	9f 91       	pop	r25
     c6e:	8f 91       	pop	r24
     c70:	0f 90       	pop	r0
     c72:	0b be       	out	0x3b, r0	; 59
     c74:	0f 90       	pop	r0
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	0f 90       	pop	r0
     c7a:	1f 90       	pop	r1
     c7c:	18 95       	reti

00000c7e <FUNCpinmatch>:
	return i;
}
uint8_t  bintobcd(uint8_t bin)
{
	return (((bin) / 10) << 4) + ((bin) % 10);
}
     c7e:	68 23       	and	r22, r24
     c80:	44 23       	and	r20, r20
     c82:	21 f0       	breq	.+8      	; 0xc8c <FUNCpinmatch+0xe>
     c84:	86 17       	cp	r24, r22
     c86:	21 f0       	breq	.+8      	; 0xc90 <FUNCpinmatch+0x12>
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	08 95       	ret
     c8c:	61 11       	cpse	r22, r1
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	08 95       	ret

00000c92 <FUNChmerge>:
     c92:	86 2b       	or	r24, r22
     c94:	08 95       	ret

00000c96 <FUNClmerge>:
     c96:	86 23       	and	r24, r22
     c98:	08 95       	ret

00000c9a <FUNChh>:
     c9a:	86 23       	and	r24, r22
     c9c:	08 95       	ret

00000c9e <FUNCll>:
     c9e:	86 2b       	or	r24, r22
     ca0:	80 95       	com	r24
     ca2:	08 95       	ret

00000ca4 <FUNClh>:
     ca4:	86 27       	eor	r24, r22
     ca6:	86 23       	and	r24, r22
     ca8:	08 95       	ret

00000caa <FUNChl>:
     caa:	60 95       	com	r22
     cac:	86 23       	and	r24, r22
     cae:	08 95       	ret

00000cb0 <FUNCdiff>:
     cb0:	86 27       	eor	r24, r22
     cb2:	08 95       	ret

00000cb4 <FUNCswap>:
     cb4:	cf 92       	push	r12
     cb6:	df 92       	push	r13
     cb8:	ef 92       	push	r14
     cba:	ff 92       	push	r15
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	fc 01       	movw	r30, r24
     cc2:	00 81       	ld	r16, Z
     cc4:	11 81       	ldd	r17, Z+1	; 0x01
     cc6:	22 81       	ldd	r18, Z+2	; 0x02
     cc8:	33 81       	ldd	r19, Z+3	; 0x03
     cca:	fb 01       	movw	r30, r22
     ccc:	c0 80       	ld	r12, Z
     cce:	d1 80       	ldd	r13, Z+1	; 0x01
     cd0:	e2 80       	ldd	r14, Z+2	; 0x02
     cd2:	f3 80       	ldd	r15, Z+3	; 0x03
     cd4:	fc 01       	movw	r30, r24
     cd6:	c0 82       	st	Z, r12
     cd8:	d1 82       	std	Z+1, r13	; 0x01
     cda:	e2 82       	std	Z+2, r14	; 0x02
     cdc:	f3 82       	std	Z+3, r15	; 0x03
     cde:	fb 01       	movw	r30, r22
     ce0:	00 83       	st	Z, r16
     ce2:	11 83       	std	Z+1, r17	; 0x01
     ce4:	22 83       	std	Z+2, r18	; 0x02
     ce6:	33 83       	std	Z+3, r19	; 0x03
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	df 90       	pop	r13
     cf2:	cf 90       	pop	r12
     cf4:	08 95       	ret

00000cf6 <FUNCcopy>:
     cf6:	fb 01       	movw	r30, r22
     cf8:	20 81       	ld	r18, Z
     cfa:	fc 01       	movw	r30, r24
     cfc:	20 83       	st	Z, r18
     cfe:	22 23       	and	r18, r18
     d00:	39 f0       	breq	.+14     	; 0xd10 <FUNCcopy+0x1a>
     d02:	db 01       	movw	r26, r22
     d04:	11 96       	adiw	r26, 0x01	; 1
     d06:	31 96       	adiw	r30, 0x01	; 1
     d08:	9d 91       	ld	r25, X+
     d0a:	91 93       	st	Z+, r25
     d0c:	91 11       	cpse	r25, r1
     d0e:	fc cf       	rjmp	.-8      	; 0xd08 <FUNCcopy+0x12>
     d10:	08 95       	ret

00000d12 <FUNCsqueeze>:
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	ec 01       	movw	r28, r24
     d18:	98 81       	ld	r25, Y
     d1a:	99 23       	and	r25, r25
     d1c:	99 f0       	breq	.+38     	; 0xd44 <FUNCsqueeze+0x32>
     d1e:	fe 01       	movw	r30, r28
     d20:	31 96       	adiw	r30, 0x01	; 1
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	49 2f       	mov	r20, r25
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	46 17       	cp	r20, r22
     d2c:	57 07       	cpc	r21, r23
     d2e:	31 f0       	breq	.+12     	; 0xd3c <FUNCsqueeze+0x2a>
     d30:	de 01       	movw	r26, r28
     d32:	a2 0f       	add	r26, r18
     d34:	b3 1f       	adc	r27, r19
     d36:	9c 93       	st	X, r25
     d38:	2f 5f       	subi	r18, 0xFF	; 255
     d3a:	3f 4f       	sbci	r19, 0xFF	; 255
     d3c:	91 91       	ld	r25, Z+
     d3e:	91 11       	cpse	r25, r1
     d40:	f2 cf       	rjmp	.-28     	; 0xd26 <FUNCsqueeze+0x14>
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <FUNCsqueeze+0x36>
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	fe 01       	movw	r30, r28
     d4a:	e2 0f       	add	r30, r18
     d4c:	f3 1f       	adc	r31, r19
     d4e:	10 82       	st	Z, r1
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	08 95       	ret

00000d56 <FUNCshellsort>:
     d56:	2f 92       	push	r2
     d58:	3f 92       	push	r3
     d5a:	4f 92       	push	r4
     d5c:	5f 92       	push	r5
     d5e:	6f 92       	push	r6
     d60:	7f 92       	push	r7
     d62:	8f 92       	push	r8
     d64:	9f 92       	push	r9
     d66:	af 92       	push	r10
     d68:	bf 92       	push	r11
     d6a:	cf 92       	push	r12
     d6c:	df 92       	push	r13
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <FUNCshellsort+0x26>
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <FUNCshellsort+0x28>
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	2c 01       	movw	r4, r24
     d84:	1b 01       	movw	r2, r22
     d86:	4b 01       	movw	r8, r22
     d88:	77 23       	and	r23, r23
     d8a:	1c f4       	brge	.+6      	; 0xd92 <FUNCshellsort+0x3c>
     d8c:	2f ef       	ldi	r18, 0xFF	; 255
     d8e:	82 1a       	sub	r8, r18
     d90:	92 0a       	sbc	r9, r18
     d92:	95 94       	asr	r9
     d94:	87 94       	ror	r8
     d96:	18 14       	cp	r1, r8
     d98:	19 04       	cpc	r1, r9
     d9a:	0c f4       	brge	.+2      	; 0xd9e <FUNCshellsort+0x48>
     d9c:	51 c0       	rjmp	.+162    	; 0xe40 <FUNCshellsort+0xea>
     d9e:	6a c0       	rjmp	.+212    	; 0xe74 <FUNCshellsort+0x11e>
     da0:	96 01       	movw	r18, r12
     da2:	dd 20       	and	r13, r13
     da4:	9c f1       	brlt	.+102    	; 0xe0c <FUNCshellsort+0xb6>
     da6:	f5 01       	movw	r30, r10
     da8:	40 81       	ld	r20, Z
     daa:	51 81       	ldd	r21, Z+1	; 0x01
     dac:	f4 01       	movw	r30, r8
     dae:	60 81       	ld	r22, Z
     db0:	71 81       	ldd	r23, Z+1	; 0x01
     db2:	64 17       	cp	r22, r20
     db4:	75 07       	cpc	r23, r21
     db6:	54 f5       	brge	.+84     	; 0xe0c <FUNCshellsort+0xb6>
     db8:	8c 01       	movw	r16, r24
     dba:	0a 0d       	add	r16, r10
     dbc:	1b 1d       	adc	r17, r11
     dbe:	d4 01       	movw	r26, r8
     dc0:	bc 82       	std	Y+4, r11	; 0x04
     dc2:	ab 82       	std	Y+3, r10	; 0x03
     dc4:	ba 82       	std	Y+2, r11	; 0x02
     dc6:	a9 82       	std	Y+1, r10	; 0x01
     dc8:	eb 81       	ldd	r30, Y+3	; 0x03
     dca:	fc 81       	ldd	r31, Y+4	; 0x04
     dcc:	71 83       	std	Z+1, r23	; 0x01
     dce:	60 83       	st	Z, r22
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	5c 93       	st	X, r21
     dd4:	4e 93       	st	-X, r20
     dd6:	2e 19       	sub	r18, r14
     dd8:	3f 09       	sbc	r19, r15
     dda:	c2 f0       	brmi	.+48     	; 0xe0c <FUNCshellsort+0xb6>
     ddc:	f8 01       	movw	r30, r16
     dde:	40 81       	ld	r20, Z
     de0:	51 81       	ldd	r21, Z+1	; 0x01
     de2:	e9 81       	ldd	r30, Y+1	; 0x01
     de4:	fa 81       	ldd	r31, Y+2	; 0x02
     de6:	60 81       	ld	r22, Z
     de8:	71 81       	ldd	r23, Z+1	; 0x01
     dea:	08 0f       	add	r16, r24
     dec:	19 1f       	adc	r17, r25
     dee:	e8 0f       	add	r30, r24
     df0:	f9 1f       	adc	r31, r25
     df2:	fa 83       	std	Y+2, r31	; 0x02
     df4:	e9 83       	std	Y+1, r30	; 0x01
     df6:	eb 81       	ldd	r30, Y+3	; 0x03
     df8:	fc 81       	ldd	r31, Y+4	; 0x04
     dfa:	e8 0f       	add	r30, r24
     dfc:	f9 1f       	adc	r31, r25
     dfe:	fc 83       	std	Y+4, r31	; 0x04
     e00:	eb 83       	std	Y+3, r30	; 0x03
     e02:	a8 0f       	add	r26, r24
     e04:	b9 1f       	adc	r27, r25
     e06:	64 17       	cp	r22, r20
     e08:	75 07       	cpc	r23, r21
     e0a:	f4 f2       	brlt	.-68     	; 0xdc8 <FUNCshellsort+0x72>
     e0c:	ff ef       	ldi	r31, 0xFF	; 255
     e0e:	cf 1a       	sub	r12, r31
     e10:	df 0a       	sbc	r13, r31
     e12:	22 e0       	ldi	r18, 0x02	; 2
     e14:	a2 0e       	add	r10, r18
     e16:	b1 1c       	adc	r11, r1
     e18:	e2 e0       	ldi	r30, 0x02	; 2
     e1a:	8e 0e       	add	r8, r30
     e1c:	91 1c       	adc	r9, r1
     e1e:	c6 14       	cp	r12, r6
     e20:	d7 04       	cpc	r13, r7
     e22:	09 f0       	breq	.+2      	; 0xe26 <FUNCshellsort+0xd0>
     e24:	bd cf       	rjmp	.-134    	; 0xda0 <FUNCshellsort+0x4a>
     e26:	47 01       	movw	r8, r14
     e28:	ff 20       	and	r15, r15
     e2a:	1c f4       	brge	.+6      	; 0xe32 <FUNCshellsort+0xdc>
     e2c:	ff ef       	ldi	r31, 0xFF	; 255
     e2e:	8f 1a       	sub	r8, r31
     e30:	9f 0a       	sbc	r9, r31
     e32:	95 94       	asr	r9
     e34:	87 94       	ror	r8
     e36:	18 14       	cp	r1, r8
     e38:	19 04       	cpc	r1, r9
     e3a:	e4 f4       	brge	.+56     	; 0xe74 <FUNCshellsort+0x11e>
     e3c:	74 01       	movw	r14, r8
     e3e:	01 c0       	rjmp	.+2      	; 0xe42 <FUNCshellsort+0xec>
     e40:	74 01       	movw	r14, r8
     e42:	82 14       	cp	r8, r2
     e44:	93 04       	cpc	r9, r3
     e46:	7c f7       	brge	.-34     	; 0xe26 <FUNCshellsort+0xd0>
     e48:	64 01       	movw	r12, r8
     e4a:	ce 18       	sub	r12, r14
     e4c:	df 08       	sbc	r13, r15
     e4e:	56 01       	movw	r10, r12
     e50:	aa 0c       	add	r10, r10
     e52:	bb 1c       	adc	r11, r11
     e54:	a4 0c       	add	r10, r4
     e56:	b5 1c       	adc	r11, r5
     e58:	88 0c       	add	r8, r8
     e5a:	99 1c       	adc	r9, r9
     e5c:	84 0c       	add	r8, r4
     e5e:	95 1c       	adc	r9, r5
     e60:	31 01       	movw	r6, r2
     e62:	6e 18       	sub	r6, r14
     e64:	7f 08       	sbc	r7, r15
     e66:	c7 01       	movw	r24, r14
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	91 95       	neg	r25
     e6e:	81 95       	neg	r24
     e70:	91 09       	sbc	r25, r1
     e72:	96 cf       	rjmp	.-212    	; 0xda0 <FUNCshellsort+0x4a>
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	ff 90       	pop	r15
     e86:	ef 90       	pop	r14
     e88:	df 90       	pop	r13
     e8a:	cf 90       	pop	r12
     e8c:	bf 90       	pop	r11
     e8e:	af 90       	pop	r10
     e90:	9f 90       	pop	r9
     e92:	8f 90       	pop	r8
     e94:	7f 90       	pop	r7
     e96:	6f 90       	pop	r6
     e98:	5f 90       	pop	r5
     e9a:	4f 90       	pop	r4
     e9c:	3f 90       	pop	r3
     e9e:	2f 90       	pop	r2
     ea0:	08 95       	ret

00000ea2 <FUNCpmax>:
     ea2:	86 17       	cp	r24, r22
     ea4:	97 07       	cpc	r25, r23
     ea6:	0c f4       	brge	.+2      	; 0xeaa <FUNCpmax+0x8>
     ea8:	cb 01       	movw	r24, r22
     eaa:	08 95       	ret

00000eac <FUNCgcd>:
     eac:	9b 01       	movw	r18, r22
     eae:	67 2b       	or	r22, r23
     eb0:	11 f4       	brne	.+4      	; 0xeb6 <FUNCgcd+0xa>
     eb2:	08 95       	ret
     eb4:	9a 01       	movw	r18, r20
     eb6:	b9 01       	movw	r22, r18
     eb8:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__divmodhi4>
     ebc:	ac 01       	movw	r20, r24
     ebe:	82 2f       	mov	r24, r18
     ec0:	93 2f       	mov	r25, r19
     ec2:	41 15       	cp	r20, r1
     ec4:	51 05       	cpc	r21, r1
     ec6:	b1 f7       	brne	.-20     	; 0xeb4 <FUNCgcd+0x8>
     ec8:	08 95       	ret

00000eca <FUNCstrToInt>:
     eca:	fc 01       	movw	r30, r24
     ecc:	90 81       	ld	r25, Z
     ece:	80 ed       	ldi	r24, 0xD0	; 208
     ed0:	89 0f       	add	r24, r25
     ed2:	8a 30       	cpi	r24, 0x0A	; 10
     ed4:	d0 f4       	brcc	.+52     	; 0xf0a <FUNCstrToInt+0x40>
     ed6:	31 96       	adiw	r30, 0x01	; 1
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	a9 01       	movw	r20, r18
     ede:	44 0f       	add	r20, r20
     ee0:	55 1f       	adc	r21, r21
     ee2:	22 0f       	add	r18, r18
     ee4:	33 1f       	adc	r19, r19
     ee6:	22 0f       	add	r18, r18
     ee8:	33 1f       	adc	r19, r19
     eea:	22 0f       	add	r18, r18
     eec:	33 1f       	adc	r19, r19
     eee:	42 0f       	add	r20, r18
     ef0:	53 1f       	adc	r21, r19
     ef2:	29 2f       	mov	r18, r25
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	20 53       	subi	r18, 0x30	; 48
     ef8:	31 09       	sbc	r19, r1
     efa:	24 0f       	add	r18, r20
     efc:	35 1f       	adc	r19, r21
     efe:	91 91       	ld	r25, Z+
     f00:	80 ed       	ldi	r24, 0xD0	; 208
     f02:	89 0f       	add	r24, r25
     f04:	8a 30       	cpi	r24, 0x0A	; 10
     f06:	50 f3       	brcs	.-44     	; 0xedc <FUNCstrToInt+0x12>
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <FUNCstrToInt+0x44>
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	c9 01       	movw	r24, r18
     f10:	08 95       	ret

00000f12 <FUNCfilter>:
     f12:	86 23       	and	r24, r22
     f14:	08 95       	ret

00000f16 <FUNCticks>:
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	39 f0       	breq	.+14     	; 0xf28 <FUNCticks+0x12>
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	2f 5f       	subi	r18, 0xFF	; 255
     f20:	3f 4f       	sbci	r19, 0xFF	; 255
     f22:	82 17       	cp	r24, r18
     f24:	93 07       	cpc	r25, r19
     f26:	d9 f7       	brne	.-10     	; 0xf1e <FUNCticks+0x8>
     f28:	08 95       	ret

00000f2a <FUNCtwocomptoint8bit>:
     f2a:	87 ff       	sbrs	r24, 7
     f2c:	08 c0       	rjmp	.+16     	; 0xf3e <FUNCtwocomptoint8bit+0x14>
     f2e:	91 95       	neg	r25
     f30:	81 95       	neg	r24
     f32:	91 09       	sbc	r25, r1
     f34:	99 27       	eor	r25, r25
     f36:	91 95       	neg	r25
     f38:	81 95       	neg	r24
     f3a:	91 09       	sbc	r25, r1
     f3c:	08 95       	ret
     f3e:	8f 77       	andi	r24, 0x7F	; 127
     f40:	99 27       	eor	r25, r25
     f42:	08 95       	ret

00000f44 <FUNCtwocomptoint10bit>:
     f44:	91 ff       	sbrs	r25, 1
     f46:	08 c0       	rjmp	.+16     	; 0xf58 <FUNCtwocomptoint10bit+0x14>
     f48:	91 95       	neg	r25
     f4a:	81 95       	neg	r24
     f4c:	91 09       	sbc	r25, r1
     f4e:	93 70       	andi	r25, 0x03	; 3
     f50:	91 95       	neg	r25
     f52:	81 95       	neg	r24
     f54:	91 09       	sbc	r25, r1
     f56:	08 95       	ret
     f58:	91 70       	andi	r25, 0x01	; 1
     f5a:	08 95       	ret

00000f5c <FUNCtwocomptointnbit>:
     f5c:	61 50       	subi	r22, 0x01	; 1
     f5e:	21 e0       	ldi	r18, 0x01	; 1
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <FUNCtwocomptointnbit+0xc>
     f64:	22 0f       	add	r18, r18
     f66:	33 1f       	adc	r19, r19
     f68:	6a 95       	dec	r22
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <FUNCtwocomptointnbit+0x8>
     f6c:	a9 01       	movw	r20, r18
     f6e:	41 50       	subi	r20, 0x01	; 1
     f70:	51 09       	sbc	r21, r1
     f72:	b9 01       	movw	r22, r18
     f74:	68 23       	and	r22, r24
     f76:	79 23       	and	r23, r25
     f78:	67 2b       	or	r22, r23
     f7a:	29 f0       	breq	.+10     	; 0xf86 <FUNCtwocomptointnbit+0x2a>
     f7c:	84 23       	and	r24, r20
     f7e:	95 23       	and	r25, r21
     f80:	82 1b       	sub	r24, r18
     f82:	93 0b       	sbc	r25, r19
     f84:	08 95       	ret
     f86:	84 23       	and	r24, r20
     f88:	95 23       	and	r25, r21
     f8a:	08 95       	ret

00000f8c <FUNCdec2bcd>:
     f8c:	9d ec       	ldi	r25, 0xCD	; 205
     f8e:	89 9f       	mul	r24, r25
     f90:	91 2d       	mov	r25, r1
     f92:	11 24       	eor	r1, r1
     f94:	96 95       	lsr	r25
     f96:	96 95       	lsr	r25
     f98:	96 95       	lsr	r25
     f9a:	39 2f       	mov	r19, r25
     f9c:	33 0f       	add	r19, r19
     f9e:	23 2f       	mov	r18, r19
     fa0:	22 0f       	add	r18, r18
     fa2:	22 0f       	add	r18, r18
     fa4:	23 0f       	add	r18, r19
     fa6:	82 1b       	sub	r24, r18
     fa8:	20 e1       	ldi	r18, 0x10	; 16
     faa:	92 9f       	mul	r25, r18
     fac:	80 0d       	add	r24, r0
     fae:	11 24       	eor	r1, r1
     fb0:	08 95       	ret

00000fb2 <FUNCbcd2dec>:
     fb2:	98 2f       	mov	r25, r24
     fb4:	92 95       	swap	r25
     fb6:	9f 70       	andi	r25, 0x0F	; 15
     fb8:	99 0f       	add	r25, r25
     fba:	29 2f       	mov	r18, r25
     fbc:	22 0f       	add	r18, r18
     fbe:	22 0f       	add	r18, r18
     fc0:	92 0f       	add	r25, r18
     fc2:	8f 70       	andi	r24, 0x0F	; 15
     fc4:	89 0f       	add	r24, r25
     fc6:	08 95       	ret

00000fc8 <FUNCresizestr>:
     fc8:	fc 01       	movw	r30, r24
     fca:	db 01       	movw	r26, r22
     fcc:	a7 5e       	subi	r26, 0xE7	; 231
     fce:	bc 4f       	sbci	r27, 0xFC	; 252
     fd0:	1c 92       	st	X, r1
     fd2:	16 16       	cp	r1, r22
     fd4:	17 06       	cpc	r1, r23
     fd6:	14 f5       	brge	.+68     	; 0x101c <FUNCresizestr+0x54>
     fd8:	90 81       	ld	r25, Z
     fda:	91 11       	cpse	r25, r1
     fdc:	0c c0       	rjmp	.+24     	; 0xff6 <FUNCresizestr+0x2e>
     fde:	17 c0       	rjmp	.+46     	; 0x100e <FUNCresizestr+0x46>
     fe0:	91 91       	ld	r25, Z+
     fe2:	91 11       	cpse	r25, r1
     fe4:	0d c0       	rjmp	.+26     	; 0x1000 <FUNCresizestr+0x38>
     fe6:	15 c0       	rjmp	.+42     	; 0x1012 <FUNCresizestr+0x4a>
     fe8:	81 93       	st	Z+, r24
     fea:	2f 5f       	subi	r18, 0xFF	; 255
     fec:	3f 4f       	sbci	r19, 0xFF	; 255
     fee:	26 17       	cp	r18, r22
     ff0:	37 07       	cpc	r19, r23
     ff2:	d4 f3       	brlt	.-12     	; 0xfe8 <FUNCresizestr+0x20>
     ff4:	13 c0       	rjmp	.+38     	; 0x101c <FUNCresizestr+0x54>
     ff6:	a9 e1       	ldi	r26, 0x19	; 25
     ff8:	b3 e0       	ldi	r27, 0x03	; 3
     ffa:	31 96       	adiw	r30, 0x01	; 1
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	9d 93       	st	X+, r25
    1002:	2f 5f       	subi	r18, 0xFF	; 255
    1004:	3f 4f       	sbci	r19, 0xFF	; 255
    1006:	62 17       	cp	r22, r18
    1008:	73 07       	cpc	r23, r19
    100a:	51 f7       	brne	.-44     	; 0xfe0 <FUNCresizestr+0x18>
    100c:	07 c0       	rjmp	.+14     	; 0x101c <FUNCresizestr+0x54>
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	f9 01       	movw	r30, r18
    1014:	e7 5e       	subi	r30, 0xE7	; 231
    1016:	fc 4f       	sbci	r31, 0xFC	; 252
    1018:	80 e2       	ldi	r24, 0x20	; 32
    101a:	e6 cf       	rjmp	.-52     	; 0xfe8 <FUNCresizestr+0x20>
    101c:	89 e1       	ldi	r24, 0x19	; 25
    101e:	93 e0       	ldi	r25, 0x03	; 3
    1020:	08 95       	ret

00001022 <FUNCtrimmer>:
    1022:	4f 92       	push	r4
    1024:	5f 92       	push	r5
    1026:	6f 92       	push	r6
    1028:	7f 92       	push	r7
    102a:	af 92       	push	r10
    102c:	bf 92       	push	r11
    102e:	cf 92       	push	r12
    1030:	df 92       	push	r13
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	29 01       	movw	r4, r18
    1044:	3a 01       	movw	r6, r20
    1046:	9b 01       	movw	r18, r22
    1048:	ac 01       	movw	r20, r24
    104a:	24 19       	sub	r18, r4
    104c:	35 09       	sbc	r19, r5
    104e:	46 09       	sbc	r20, r6
    1050:	57 09       	sbc	r21, r7
    1052:	89 89       	ldd	r24, Y+17	; 0x11
    1054:	9a 89       	ldd	r25, Y+18	; 0x12
    1056:	ab 89       	ldd	r26, Y+19	; 0x13
    1058:	bc 89       	ldd	r27, Y+20	; 0x14
    105a:	bc 01       	movw	r22, r24
    105c:	cd 01       	movw	r24, r26
    105e:	6a 19       	sub	r22, r10
    1060:	7b 09       	sbc	r23, r11
    1062:	8c 09       	sbc	r24, r12
    1064:	9d 09       	sbc	r25, r13
    1066:	0e 94 38 1a 	call	0x3470	; 0x3470 <__mulsi3>
    106a:	a8 01       	movw	r20, r16
    106c:	97 01       	movw	r18, r14
    106e:	24 19       	sub	r18, r4
    1070:	35 09       	sbc	r19, r5
    1072:	46 09       	sbc	r20, r6
    1074:	57 09       	sbc	r21, r7
    1076:	0e 94 90 1a 	call	0x3520	; 0x3520 <__divmodsi4>
    107a:	ca 01       	movw	r24, r20
    107c:	b9 01       	movw	r22, r18
    107e:	6a 0d       	add	r22, r10
    1080:	7b 1d       	adc	r23, r11
    1082:	8c 1d       	adc	r24, r12
    1084:	9d 1d       	adc	r25, r13
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	ff 90       	pop	r15
    1090:	ef 90       	pop	r14
    1092:	df 90       	pop	r13
    1094:	cf 90       	pop	r12
    1096:	bf 90       	pop	r11
    1098:	af 90       	pop	r10
    109a:	7f 90       	pop	r7
    109c:	6f 90       	pop	r6
    109e:	5f 90       	pop	r5
    10a0:	4f 90       	pop	r4
    10a2:	08 95       	ret

000010a4 <Pwr>:
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	61 15       	cp	r22, r1
    10a8:	71 05       	cpc	r23, r1
    10aa:	99 f0       	breq	.+38     	; 0x10d2 <Pwr+0x2e>
    10ac:	41 e0       	ldi	r20, 0x01	; 1
    10ae:	50 e0       	ldi	r21, 0x00	; 0
    10b0:	21 e0       	ldi	r18, 0x01	; 1
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	fa 01       	movw	r30, r20
    10b8:	e8 9f       	mul	r30, r24
    10ba:	a0 01       	movw	r20, r0
    10bc:	e9 9f       	mul	r30, r25
    10be:	50 0d       	add	r21, r0
    10c0:	f8 9f       	mul	r31, r24
    10c2:	50 0d       	add	r21, r0
    10c4:	11 24       	eor	r1, r1
    10c6:	2f 5f       	subi	r18, 0xFF	; 255
    10c8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ca:	62 17       	cp	r22, r18
    10cc:	73 07       	cpc	r23, r19
    10ce:	98 f7       	brcc	.-26     	; 0x10b6 <Pwr+0x12>
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <Pwr+0x32>
    10d2:	41 e0       	ldi	r20, 0x01	; 1
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	ca 01       	movw	r24, r20
    10d8:	08 95       	ret

000010da <StringLength>:
    10da:	fc 01       	movw	r30, r24
    10dc:	20 81       	ld	r18, Z
    10de:	22 23       	and	r18, r18
    10e0:	41 f0       	breq	.+16     	; 0x10f2 <StringLength+0x18>
    10e2:	31 96       	adiw	r30, 0x01	; 1
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	21 91       	ld	r18, Z+
    10ec:	21 11       	cpse	r18, r1
    10ee:	fc cf       	rjmp	.-8      	; 0x10e8 <StringLength+0xe>
    10f0:	08 95       	ret
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	08 95       	ret

000010f8 <FUNCtrim>:
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	ec 01       	movw	r28, r24
    10fe:	ed df       	rcall	.-38     	; 0x10da <StringLength>
    1100:	9c 01       	movw	r18, r24
    1102:	21 50       	subi	r18, 0x01	; 1
    1104:	31 09       	sbc	r19, r1
    1106:	62 f0       	brmi	.+24     	; 0x1120 <__stack+0x21>
    1108:	fe 01       	movw	r30, r28
    110a:	e8 0f       	add	r30, r24
    110c:	f9 1f       	adc	r31, r25
    110e:	92 91       	ld	r25, -Z
    1110:	90 32       	cpi	r25, 0x20	; 32
    1112:	19 f0       	breq	.+6      	; 0x111a <__stack+0x1b>
    1114:	99 50       	subi	r25, 0x09	; 9
    1116:	92 30       	cpi	r25, 0x02	; 2
    1118:	18 f4       	brcc	.+6      	; 0x1120 <__stack+0x21>
    111a:	21 50       	subi	r18, 0x01	; 1
    111c:	31 09       	sbc	r19, r1
    111e:	b8 f7       	brcc	.-18     	; 0x110e <__stack+0xf>
    1120:	c2 0f       	add	r28, r18
    1122:	d3 1f       	adc	r29, r19
    1124:	19 82       	std	Y+1, r1	; 0x01
    1126:	c9 01       	movw	r24, r18
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	08 95       	ret

0000112e <Reverse>:
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	ec 01       	movw	r28, r24
    1134:	d2 df       	rcall	.-92     	; 0x10da <StringLength>
    1136:	9c 01       	movw	r18, r24
    1138:	21 50       	subi	r18, 0x01	; 1
    113a:	31 09       	sbc	r19, r1
    113c:	12 16       	cp	r1, r18
    113e:	13 06       	cpc	r1, r19
    1140:	84 f4       	brge	.+32     	; 0x1162 <Reverse+0x34>
    1142:	de 01       	movw	r26, r28
    1144:	a8 0f       	add	r26, r24
    1146:	b9 1f       	adc	r27, r25
    1148:	fe 01       	movw	r30, r28
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	40 81       	ld	r20, Z
    1150:	5e 91       	ld	r21, -X
    1152:	51 93       	st	Z+, r21
    1154:	4c 93       	st	X, r20
    1156:	01 96       	adiw	r24, 0x01	; 1
    1158:	21 50       	subi	r18, 0x01	; 1
    115a:	31 09       	sbc	r19, r1
    115c:	82 17       	cp	r24, r18
    115e:	93 07       	cpc	r25, r19
    1160:	b4 f3       	brlt	.-20     	; 0x114e <Reverse+0x20>
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	08 95       	ret

00001168 <FUNCi32toa>:
    1168:	8f 92       	push	r8
    116a:	9f 92       	push	r9
    116c:	af 92       	push	r10
    116e:	bf 92       	push	r11
    1170:	cf 92       	push	r12
    1172:	df 92       	push	r13
    1174:	ef 92       	push	r14
    1176:	ff 92       	push	r15
    1178:	0f 93       	push	r16
    117a:	1f 93       	push	r17
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	6b 01       	movw	r12, r22
    1182:	7c 01       	movw	r14, r24
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	ff 20       	and	r15, r15
    118a:	3c f4       	brge	.+14     	; 0x119a <FUNCi32toa+0x32>
    118c:	88 27       	eor	r24, r24
    118e:	99 27       	eor	r25, r25
    1190:	dc 01       	movw	r26, r24
    1192:	8c 19       	sub	r24, r12
    1194:	9d 09       	sbc	r25, r13
    1196:	ae 09       	sbc	r26, r14
    1198:	bf 09       	sbc	r27, r15
    119a:	bc 01       	movw	r22, r24
    119c:	cd 01       	movw	r24, r26
    119e:	10 e0       	ldi	r17, 0x00	; 0
    11a0:	0f 2e       	mov	r0, r31
    11a2:	fa e0       	ldi	r31, 0x0A	; 10
    11a4:	8f 2e       	mov	r8, r31
    11a6:	91 2c       	mov	r9, r1
    11a8:	a1 2c       	mov	r10, r1
    11aa:	b1 2c       	mov	r11, r1
    11ac:	f0 2d       	mov	r31, r0
    11ae:	01 c0       	rjmp	.+2      	; 0x11b2 <FUNCi32toa+0x4a>
    11b0:	10 2f       	mov	r17, r16
    11b2:	01 e0       	ldi	r16, 0x01	; 1
    11b4:	01 0f       	add	r16, r17
    11b6:	c1 2f       	mov	r28, r17
    11b8:	d0 e0       	ldi	r29, 0x00	; 0
    11ba:	c7 5e       	subi	r28, 0xE7	; 231
    11bc:	dc 4f       	sbci	r29, 0xFC	; 252
    11be:	a5 01       	movw	r20, r10
    11c0:	94 01       	movw	r18, r8
    11c2:	0e 94 90 1a 	call	0x3520	; 0x3520 <__divmodsi4>
    11c6:	60 5d       	subi	r22, 0xD0	; 208
    11c8:	68 83       	st	Y, r22
    11ca:	62 2f       	mov	r22, r18
    11cc:	73 2f       	mov	r23, r19
    11ce:	84 2f       	mov	r24, r20
    11d0:	95 2f       	mov	r25, r21
    11d2:	16 16       	cp	r1, r22
    11d4:	17 06       	cpc	r1, r23
    11d6:	18 06       	cpc	r1, r24
    11d8:	19 06       	cpc	r1, r25
    11da:	54 f3       	brlt	.-44     	; 0x11b0 <FUNCi32toa+0x48>
    11dc:	ff 20       	and	r15, r15
    11de:	44 f4       	brge	.+16     	; 0x11f0 <FUNCi32toa+0x88>
    11e0:	e0 2f       	mov	r30, r16
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	e7 5e       	subi	r30, 0xE7	; 231
    11e6:	fc 4f       	sbci	r31, 0xFC	; 252
    11e8:	8d e2       	ldi	r24, 0x2D	; 45
    11ea:	80 83       	st	Z, r24
    11ec:	02 e0       	ldi	r16, 0x02	; 2
    11ee:	01 0f       	add	r16, r17
    11f0:	e0 2f       	mov	r30, r16
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	e7 5e       	subi	r30, 0xE7	; 231
    11f6:	fc 4f       	sbci	r31, 0xFC	; 252
    11f8:	10 82       	st	Z, r1
    11fa:	89 e1       	ldi	r24, 0x19	; 25
    11fc:	93 e0       	ldi	r25, 0x03	; 3
    11fe:	97 df       	rcall	.-210    	; 0x112e <Reverse>
    1200:	89 e1       	ldi	r24, 0x19	; 25
    1202:	93 e0       	ldi	r25, 0x03	; 3
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	ff 90       	pop	r15
    120e:	ef 90       	pop	r14
    1210:	df 90       	pop	r13
    1212:	cf 90       	pop	r12
    1214:	bf 90       	pop	r11
    1216:	af 90       	pop	r10
    1218:	9f 90       	pop	r9
    121a:	8f 90       	pop	r8
    121c:	08 95       	ret

0000121e <FUNCi16toa>:
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	ec 01       	movw	r28, r24
    1228:	99 23       	and	r25, r25
    122a:	24 f4       	brge	.+8      	; 0x1234 <FUNCi16toa+0x16>
    122c:	88 27       	eor	r24, r24
    122e:	99 27       	eor	r25, r25
    1230:	8c 1b       	sub	r24, r28
    1232:	9d 0b       	sbc	r25, r29
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	0a e0       	ldi	r16, 0x0A	; 10
    1238:	10 e0       	ldi	r17, 0x00	; 0
    123a:	01 c0       	rjmp	.+2      	; 0x123e <FUNCi16toa+0x20>
    123c:	23 2f       	mov	r18, r19
    123e:	31 e0       	ldi	r19, 0x01	; 1
    1240:	32 0f       	add	r19, r18
    1242:	e2 2f       	mov	r30, r18
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	e7 5e       	subi	r30, 0xE7	; 231
    1248:	fc 4f       	sbci	r31, 0xFC	; 252
    124a:	b8 01       	movw	r22, r16
    124c:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__divmodhi4>
    1250:	80 5d       	subi	r24, 0xD0	; 208
    1252:	80 83       	st	Z, r24
    1254:	86 2f       	mov	r24, r22
    1256:	97 2f       	mov	r25, r23
    1258:	18 16       	cp	r1, r24
    125a:	19 06       	cpc	r1, r25
    125c:	7c f3       	brlt	.-34     	; 0x123c <FUNCi16toa+0x1e>
    125e:	dd 23       	and	r29, r29
    1260:	44 f4       	brge	.+16     	; 0x1272 <FUNCi16toa+0x54>
    1262:	e3 2f       	mov	r30, r19
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	e7 5e       	subi	r30, 0xE7	; 231
    1268:	fc 4f       	sbci	r31, 0xFC	; 252
    126a:	8d e2       	ldi	r24, 0x2D	; 45
    126c:	80 83       	st	Z, r24
    126e:	32 e0       	ldi	r19, 0x02	; 2
    1270:	32 0f       	add	r19, r18
    1272:	e3 2f       	mov	r30, r19
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	e7 5e       	subi	r30, 0xE7	; 231
    1278:	fc 4f       	sbci	r31, 0xFC	; 252
    127a:	10 82       	st	Z, r1
    127c:	89 e1       	ldi	r24, 0x19	; 25
    127e:	93 e0       	ldi	r25, 0x03	; 3
    1280:	56 df       	rcall	.-340    	; 0x112e <Reverse>
    1282:	89 e1       	ldi	r24, 0x19	; 25
    1284:	93 e0       	ldi	r25, 0x03	; 3
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	08 95       	ret

00001290 <FUNCui16toa>:
    1290:	cf 93       	push	r28
    1292:	ac 01       	movw	r20, r24
    1294:	e0 e0       	ldi	r30, 0x00	; 0
    1296:	c1 e0       	ldi	r28, 0x01	; 1
    1298:	ce 0f       	add	r28, r30
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	e7 5e       	subi	r30, 0xE7	; 231
    129e:	fc 4f       	sbci	r31, 0xFC	; 252
    12a0:	9a 01       	movw	r18, r20
    12a2:	ad ec       	ldi	r26, 0xCD	; 205
    12a4:	bc ec       	ldi	r27, 0xCC	; 204
    12a6:	0e 94 b5 1a 	call	0x356a	; 0x356a <__umulhisi3>
    12aa:	96 95       	lsr	r25
    12ac:	87 95       	ror	r24
    12ae:	96 95       	lsr	r25
    12b0:	87 95       	ror	r24
    12b2:	96 95       	lsr	r25
    12b4:	87 95       	ror	r24
    12b6:	9c 01       	movw	r18, r24
    12b8:	22 0f       	add	r18, r18
    12ba:	33 1f       	adc	r19, r19
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	82 0f       	add	r24, r18
    12ca:	93 1f       	adc	r25, r19
    12cc:	9a 01       	movw	r18, r20
    12ce:	28 1b       	sub	r18, r24
    12d0:	39 0b       	sbc	r19, r25
    12d2:	c9 01       	movw	r24, r18
    12d4:	80 5d       	subi	r24, 0xD0	; 208
    12d6:	80 83       	st	Z, r24
    12d8:	9a 01       	movw	r18, r20
    12da:	0e 94 b5 1a 	call	0x356a	; 0x356a <__umulhisi3>
    12de:	ac 01       	movw	r20, r24
    12e0:	56 95       	lsr	r21
    12e2:	47 95       	ror	r20
    12e4:	56 95       	lsr	r21
    12e6:	47 95       	ror	r20
    12e8:	56 95       	lsr	r21
    12ea:	47 95       	ror	r20
    12ec:	ec 2f       	mov	r30, r28
    12ee:	41 15       	cp	r20, r1
    12f0:	51 05       	cpc	r21, r1
    12f2:	89 f6       	brne	.-94     	; 0x1296 <FUNCui16toa+0x6>
    12f4:	ec 2f       	mov	r30, r28
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	e7 5e       	subi	r30, 0xE7	; 231
    12fa:	fc 4f       	sbci	r31, 0xFC	; 252
    12fc:	10 82       	st	Z, r1
    12fe:	89 e1       	ldi	r24, 0x19	; 25
    1300:	93 e0       	ldi	r25, 0x03	; 3
    1302:	15 df       	rcall	.-470    	; 0x112e <Reverse>
    1304:	89 e1       	ldi	r24, 0x19	; 25
    1306:	93 e0       	ldi	r25, 0x03	; 3
    1308:	cf 91       	pop	r28
    130a:	08 95       	ret

0000130c <FUNCbcd2bin>:
    130c:	98 2f       	mov	r25, r24
    130e:	92 95       	swap	r25
    1310:	9f 70       	andi	r25, 0x0F	; 15
    1312:	99 0f       	add	r25, r25
    1314:	29 2f       	mov	r18, r25
    1316:	22 0f       	add	r18, r18
    1318:	22 0f       	add	r18, r18
    131a:	92 0f       	add	r25, r18
    131c:	8f 70       	andi	r24, 0x0F	; 15
    131e:	89 0f       	add	r24, r25
    1320:	08 95       	ret

00001322 <FUNCbin2bcd>:
    1322:	ac 01       	movw	r20, r24
    1324:	9c 01       	movw	r18, r24
    1326:	ad ec       	ldi	r26, 0xCD	; 205
    1328:	bc ec       	ldi	r27, 0xCC	; 204
    132a:	0e 94 b5 1a 	call	0x356a	; 0x356a <__umulhisi3>
    132e:	96 95       	lsr	r25
    1330:	87 95       	ror	r24
    1332:	96 95       	lsr	r25
    1334:	87 95       	ror	r24
    1336:	96 95       	lsr	r25
    1338:	87 95       	ror	r24
    133a:	bc 01       	movw	r22, r24
    133c:	66 0f       	add	r22, r22
    133e:	77 1f       	adc	r23, r23
    1340:	9c 01       	movw	r18, r24
    1342:	22 0f       	add	r18, r18
    1344:	33 1f       	adc	r19, r19
    1346:	22 0f       	add	r18, r18
    1348:	33 1f       	adc	r19, r19
    134a:	22 0f       	add	r18, r18
    134c:	33 1f       	adc	r19, r19
    134e:	26 0f       	add	r18, r22
    1350:	37 1f       	adc	r19, r23
    1352:	42 1b       	sub	r20, r18
    1354:	53 0b       	sbc	r21, r19
    1356:	34 2f       	mov	r19, r20
    1358:	20 e1       	ldi	r18, 0x10	; 16
    135a:	82 9f       	mul	r24, r18
    135c:	30 0d       	add	r19, r0
    135e:	11 24       	eor	r1, r1
    1360:	83 2f       	mov	r24, r19
    1362:	08 95       	ret

00001364 <FUNCgcd1>:
    1364:	cf 92       	push	r12
    1366:	df 92       	push	r13
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	28 97       	sbiw	r28, 0x08	; 8
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	6b 01       	movw	r12, r22
    1382:	7c 01       	movw	r14, r24
    1384:	69 83       	std	Y+1, r22	; 0x01
    1386:	7a 83       	std	Y+2, r23	; 0x02
    1388:	8b 83       	std	Y+3, r24	; 0x03
    138a:	9c 83       	std	Y+4, r25	; 0x04
    138c:	2d 83       	std	Y+5, r18	; 0x05
    138e:	3e 83       	std	Y+6, r19	; 0x06
    1390:	4f 83       	std	Y+7, r20	; 0x07
    1392:	58 87       	std	Y+8, r21	; 0x08
    1394:	c2 16       	cp	r12, r18
    1396:	d3 06       	cpc	r13, r19
    1398:	e4 06       	cpc	r14, r20
    139a:	f5 06       	cpc	r15, r21
    139c:	34 f4       	brge	.+12     	; 0x13aa <FUNCgcd1+0x46>
    139e:	be 01       	movw	r22, r28
    13a0:	6b 5f       	subi	r22, 0xFB	; 251
    13a2:	7f 4f       	sbci	r23, 0xFF	; 255
    13a4:	ce 01       	movw	r24, r28
    13a6:	01 96       	adiw	r24, 0x01	; 1
    13a8:	85 dc       	rcall	.-1782   	; 0xcb4 <FUNCswap>
    13aa:	8d 81       	ldd	r24, Y+5	; 0x05
    13ac:	9e 81       	ldd	r25, Y+6	; 0x06
    13ae:	af 81       	ldd	r26, Y+7	; 0x07
    13b0:	b8 85       	ldd	r27, Y+8	; 0x08
    13b2:	89 2b       	or	r24, r25
    13b4:	8a 2b       	or	r24, r26
    13b6:	8b 2b       	or	r24, r27
    13b8:	71 f4       	brne	.+28     	; 0x13d6 <FUNCgcd1+0x72>
    13ba:	69 81       	ldd	r22, Y+1	; 0x01
    13bc:	7a 81       	ldd	r23, Y+2	; 0x02
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	a9 01       	movw	r20, r18
    13c8:	0e 94 90 1a 	call	0x3520	; 0x3520 <__divmodsi4>
    13cc:	61 15       	cp	r22, r1
    13ce:	71 05       	cpc	r23, r1
    13d0:	81 05       	cpc	r24, r1
    13d2:	91 05       	cpc	r25, r1
    13d4:	29 f4       	brne	.+10     	; 0x13e0 <FUNCgcd1+0x7c>
    13d6:	6d 81       	ldd	r22, Y+5	; 0x05
    13d8:	7e 81       	ldd	r23, Y+6	; 0x06
    13da:	8f 81       	ldd	r24, Y+7	; 0x07
    13dc:	98 85       	ldd	r25, Y+8	; 0x08
    13de:	05 c0       	rjmp	.+10     	; 0x13ea <FUNCgcd1+0x86>
    13e0:	6d 83       	std	Y+5, r22	; 0x05
    13e2:	7e 83       	std	Y+6, r23	; 0x06
    13e4:	8f 83       	std	Y+7, r24	; 0x07
    13e6:	98 87       	std	Y+8, r25	; 0x08
    13e8:	f6 cf       	rjmp	.-20     	; 0x13d6 <FUNCgcd1+0x72>
    13ea:	28 96       	adiw	r28, 0x08	; 8
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	f8 94       	cli
    13f0:	de bf       	out	0x3e, r29	; 62
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	cd bf       	out	0x3d, r28	; 61
    13f6:	df 91       	pop	r29
    13f8:	cf 91       	pop	r28
    13fa:	ff 90       	pop	r15
    13fc:	ef 90       	pop	r14
    13fe:	df 90       	pop	r13
    1400:	cf 90       	pop	r12
    1402:	08 95       	ret

00001404 <FUNCpincheck>:
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 c0       	rjmp	.+4      	; 0x140c <FUNCpincheck+0x8>
    1408:	95 95       	asr	r25
    140a:	87 95       	ror	r24
    140c:	6a 95       	dec	r22
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <FUNCpincheck+0x4>
    1410:	81 70       	andi	r24, 0x01	; 1
    1412:	08 95       	ret

00001414 <FUNCprint_binary>:
    1414:	e9 e1       	ldi	r30, 0x19	; 25
    1416:	f3 e0       	ldi	r31, 0x03	; 3
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	20 e8       	ldi	r18, 0x80	; 128
    141c:	50 e3       	ldi	r21, 0x30	; 48
    141e:	41 e3       	ldi	r20, 0x31	; 49
    1420:	38 2f       	mov	r19, r24
    1422:	32 23       	and	r19, r18
    1424:	11 f0       	breq	.+4      	; 0x142a <FUNCprint_binary+0x16>
    1426:	40 83       	st	Z, r20
    1428:	01 c0       	rjmp	.+2      	; 0x142c <FUNCprint_binary+0x18>
    142a:	50 83       	st	Z, r21
    142c:	26 95       	lsr	r18
    142e:	9f 5f       	subi	r25, 0xFF	; 255
    1430:	31 96       	adiw	r30, 0x01	; 1
    1432:	98 30       	cpi	r25, 0x08	; 8
    1434:	a9 f7       	brne	.-22     	; 0x1420 <FUNCprint_binary+0xc>
    1436:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <FUNCstr+0x8>
    143a:	89 e1       	ldi	r24, 0x19	; 25
    143c:	93 e0       	ldi	r25, 0x03	; 3
    143e:	08 95       	ret

00001440 <FUNCmayia>:
    1440:	a4 2f       	mov	r26, r20
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	10 97       	sbiw	r26, 0x00	; 0
    1446:	61 f0       	breq	.+24     	; 0x1460 <FUNCmayia+0x20>
    1448:	21 e0       	ldi	r18, 0x01	; 1
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	e1 e0       	ldi	r30, 0x01	; 1
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	ee 0f       	add	r30, r30
    1452:	ff 1f       	adc	r31, r31
    1454:	2f 5f       	subi	r18, 0xFF	; 255
    1456:	3f 4f       	sbci	r19, 0xFF	; 255
    1458:	a2 17       	cp	r26, r18
    145a:	b3 07       	cpc	r27, r19
    145c:	c8 f7       	brcc	.-14     	; 0x1450 <FUNCmayia+0x10>
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <FUNCmayia+0x24>
    1460:	e1 e0       	ldi	r30, 0x01	; 1
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	31 97       	sbiw	r30, 0x01	; 1
    1466:	6e 23       	and	r22, r30
    1468:	7f 23       	and	r23, r31
    146a:	8e 23       	and	r24, r30
    146c:	9f 23       	and	r25, r31
    146e:	86 27       	eor	r24, r22
    1470:	97 27       	eor	r25, r23
    1472:	68 23       	and	r22, r24
    1474:	79 23       	and	r23, r25
    1476:	02 c0       	rjmp	.+4      	; 0x147c <FUNCmayia+0x3c>
    1478:	66 0f       	add	r22, r22
    147a:	77 1f       	adc	r23, r23
    147c:	4a 95       	dec	r20
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <FUNCmayia+0x38>
    1480:	86 2b       	or	r24, r22
    1482:	97 2b       	or	r25, r23
    1484:	08 95       	ret

00001486 <FUNCenable>:
    1486:	fc 01       	movw	r30, r24
    1488:	9f b7       	in	r25, 0x3f	; 63
    148a:	8f b7       	in	r24, 0x3f	; 63
    148c:	8f 77       	andi	r24, 0x7F	; 127
    148e:	8f bf       	out	0x3f, r24	; 63
    1490:	9f bf       	out	0x3f, r25	; 63
    1492:	82 e5       	ldi	r24, 0x52	; 82
    1494:	98 e0       	ldi	r25, 0x08	; 8
    1496:	91 83       	std	Z+1, r25	; 0x01
    1498:	80 83       	st	Z, r24
    149a:	8d e6       	ldi	r24, 0x6D	; 109
    149c:	98 e0       	ldi	r25, 0x08	; 8
    149e:	93 83       	std	Z+3, r25	; 0x03
    14a0:	82 83       	std	Z+2, r24	; 0x02
    14a2:	87 e9       	ldi	r24, 0x97	; 151
    14a4:	98 e0       	ldi	r25, 0x08	; 8
    14a6:	95 83       	std	Z+5, r25	; 0x05
    14a8:	84 83       	std	Z+4, r24	; 0x04
    14aa:	80 e2       	ldi	r24, 0x20	; 32
    14ac:	9a e0       	ldi	r25, 0x0A	; 10
    14ae:	97 83       	std	Z+7, r25	; 0x07
    14b0:	86 83       	std	Z+6, r24	; 0x06
    14b2:	8f e3       	ldi	r24, 0x3F	; 63
    14b4:	96 e0       	ldi	r25, 0x06	; 6
    14b6:	91 87       	std	Z+9, r25	; 0x09
    14b8:	80 87       	std	Z+8, r24	; 0x08
    14ba:	8d e4       	ldi	r24, 0x4D	; 77
    14bc:	96 e0       	ldi	r25, 0x06	; 6
    14be:	93 87       	std	Z+11, r25	; 0x0b
    14c0:	82 87       	std	Z+10, r24	; 0x0a
    14c2:	8f e4       	ldi	r24, 0x4F	; 79
    14c4:	96 e0       	ldi	r25, 0x06	; 6
    14c6:	95 87       	std	Z+13, r25	; 0x0d
    14c8:	84 87       	std	Z+12, r24	; 0x0c
    14ca:	82 e5       	ldi	r24, 0x52	; 82
    14cc:	96 e0       	ldi	r25, 0x06	; 6
    14ce:	97 87       	std	Z+15, r25	; 0x0f
    14d0:	86 87       	std	Z+14, r24	; 0x0e
    14d2:	85 e5       	ldi	r24, 0x55	; 85
    14d4:	96 e0       	ldi	r25, 0x06	; 6
    14d6:	91 8b       	std	Z+17, r25	; 0x11
    14d8:	80 8b       	std	Z+16, r24	; 0x10
    14da:	88 e5       	ldi	r24, 0x58	; 88
    14dc:	96 e0       	ldi	r25, 0x06	; 6
    14de:	93 8b       	std	Z+19, r25	; 0x13
    14e0:	82 8b       	std	Z+18, r24	; 0x12
    14e2:	89 e4       	ldi	r24, 0x49	; 73
    14e4:	96 e0       	ldi	r25, 0x06	; 6
    14e6:	95 8b       	std	Z+21, r25	; 0x15
    14e8:	84 8b       	std	Z+20, r24	; 0x14
    14ea:	8b e4       	ldi	r24, 0x4B	; 75
    14ec:	96 e0       	ldi	r25, 0x06	; 6
    14ee:	97 8b       	std	Z+23, r25	; 0x17
    14f0:	86 8b       	std	Z+22, r24	; 0x16
    14f2:	8a e5       	ldi	r24, 0x5A	; 90
    14f4:	96 e0       	ldi	r25, 0x06	; 6
    14f6:	91 8f       	std	Z+25, r25	; 0x19
    14f8:	80 8f       	std	Z+24, r24	; 0x18
    14fa:	8b e7       	ldi	r24, 0x7B	; 123
    14fc:	96 e0       	ldi	r25, 0x06	; 6
    14fe:	93 8f       	std	Z+27, r25	; 0x1b
    1500:	82 8f       	std	Z+26, r24	; 0x1a
    1502:	89 e8       	ldi	r24, 0x89	; 137
    1504:	96 e0       	ldi	r25, 0x06	; 6
    1506:	95 8f       	std	Z+29, r25	; 0x1d
    1508:	84 8f       	std	Z+28, r24	; 0x1c
    150a:	8b ea       	ldi	r24, 0xAB	; 171
    150c:	96 e0       	ldi	r25, 0x06	; 6
    150e:	97 8f       	std	Z+31, r25	; 0x1f
    1510:	86 8f       	std	Z+30, r24	; 0x1e
    1512:	8f e0       	ldi	r24, 0x0F	; 15
    1514:	99 e0       	ldi	r25, 0x09	; 9
    1516:	91 a3       	std	Z+33, r25	; 0x21
    1518:	80 a3       	std	Z+32, r24	; 0x20
    151a:	88 e4       	ldi	r24, 0x48	; 72
    151c:	99 e0       	ldi	r25, 0x09	; 9
    151e:	93 a3       	std	Z+35, r25	; 0x23
    1520:	82 a3       	std	Z+34, r24	; 0x22
    1522:	84 eb       	ldi	r24, 0xB4	; 180
    1524:	98 e0       	ldi	r25, 0x08	; 8
    1526:	95 a3       	std	Z+37, r25	; 0x25
    1528:	84 a3       	std	Z+36, r24	; 0x24
    152a:	8c e7       	ldi	r24, 0x7C	; 124
    152c:	98 e0       	ldi	r25, 0x08	; 8
    152e:	97 a3       	std	Z+39, r25	; 0x27
    1530:	86 a3       	std	Z+38, r24	; 0x26
    1532:	81 e5       	ldi	r24, 0x51	; 81
    1534:	97 e0       	ldi	r25, 0x07	; 7
    1536:	91 a7       	std	Z+41, r25	; 0x29
    1538:	80 a7       	std	Z+40, r24	; 0x28
    153a:	86 e5       	ldi	r24, 0x56	; 86
    153c:	97 e0       	ldi	r25, 0x07	; 7
    153e:	93 a7       	std	Z+43, r25	; 0x2b
    1540:	82 a7       	std	Z+42, r24	; 0x2a
    1542:	85 e6       	ldi	r24, 0x65	; 101
    1544:	97 e0       	ldi	r25, 0x07	; 7
    1546:	95 a7       	std	Z+45, r25	; 0x2d
    1548:	84 a7       	std	Z+44, r24	; 0x2c
    154a:	89 e8       	ldi	r24, 0x89	; 137
    154c:	97 e0       	ldi	r25, 0x07	; 7
    154e:	97 a7       	std	Z+47, r25	; 0x2f
    1550:	86 a7       	std	Z+46, r24	; 0x2e
    1552:	8b e8       	ldi	r24, 0x8B	; 139
    1554:	97 e0       	ldi	r25, 0x07	; 7
    1556:	91 ab       	std	Z+49, r25	; 0x31
    1558:	80 ab       	std	Z+48, r24	; 0x30
    155a:	85 e9       	ldi	r24, 0x95	; 149
    155c:	97 e0       	ldi	r25, 0x07	; 7
    155e:	93 ab       	std	Z+51, r25	; 0x33
    1560:	82 ab       	std	Z+50, r24	; 0x32
    1562:	82 ea       	ldi	r24, 0xA2	; 162
    1564:	97 e0       	ldi	r25, 0x07	; 7
    1566:	95 ab       	std	Z+53, r25	; 0x35
    1568:	84 ab       	std	Z+52, r24	; 0x34
    156a:	8e ea       	ldi	r24, 0xAE	; 174
    156c:	97 e0       	ldi	r25, 0x07	; 7
    156e:	97 ab       	std	Z+55, r25	; 0x37
    1570:	86 ab       	std	Z+54, r24	; 0x36
    1572:	86 ec       	ldi	r24, 0xC6	; 198
    1574:	97 e0       	ldi	r25, 0x07	; 7
    1576:	91 af       	std	Z+57, r25	; 0x39
    1578:	80 af       	std	Z+56, r24	; 0x38
    157a:	89 ed       	ldi	r24, 0xD9	; 217
    157c:	97 e0       	ldi	r25, 0x07	; 7
    157e:	93 af       	std	Z+59, r25	; 0x3b
    1580:	82 af       	std	Z+58, r24	; 0x3a
    1582:	84 ee       	ldi	r24, 0xE4	; 228
    1584:	97 e0       	ldi	r25, 0x07	; 7
    1586:	95 af       	std	Z+61, r25	; 0x3d
    1588:	84 af       	std	Z+60, r24	; 0x3c
    158a:	81 e1       	ldi	r24, 0x11	; 17
    158c:	98 e0       	ldi	r25, 0x08	; 8
    158e:	97 af       	std	Z+63, r25	; 0x3f
    1590:	86 af       	std	Z+62, r24	; 0x3e
    1592:	df 01       	movw	r26, r30
    1594:	a0 5c       	subi	r26, 0xC0	; 192
    1596:	bf 4f       	sbci	r27, 0xFF	; 255
    1598:	86 e8       	ldi	r24, 0x86	; 134
    159a:	99 e0       	ldi	r25, 0x09	; 9
    159c:	11 96       	adiw	r26, 0x01	; 1
    159e:	9c 93       	st	X, r25
    15a0:	8e 93       	st	-X, r24
    15a2:	12 96       	adiw	r26, 0x02	; 2
    15a4:	81 e9       	ldi	r24, 0x91	; 145
    15a6:	99 e0       	ldi	r25, 0x09	; 9
    15a8:	11 96       	adiw	r26, 0x01	; 1
    15aa:	9c 93       	st	X, r25
    15ac:	8e 93       	st	-X, r24
    15ae:	12 96       	adiw	r26, 0x02	; 2
    15b0:	82 eb       	ldi	r24, 0xB2	; 178
    15b2:	99 e0       	ldi	r25, 0x09	; 9
    15b4:	11 96       	adiw	r26, 0x01	; 1
    15b6:	9c 93       	st	X, r25
    15b8:	8e 93       	st	-X, r24
    15ba:	12 96       	adiw	r26, 0x02	; 2
    15bc:	82 e0       	ldi	r24, 0x02	; 2
    15be:	9a e0       	ldi	r25, 0x0A	; 10
    15c0:	11 96       	adiw	r26, 0x01	; 1
    15c2:	9c 93       	st	X, r25
    15c4:	8e 93       	st	-X, r24
    15c6:	12 96       	adiw	r26, 0x02	; 2
    15c8:	8a e0       	ldi	r24, 0x0A	; 10
    15ca:	9a e0       	ldi	r25, 0x0A	; 10
    15cc:	11 96       	adiw	r26, 0x01	; 1
    15ce:	9c 93       	st	X, r25
    15d0:	8e 93       	st	-X, r24
    15d2:	12 96       	adiw	r26, 0x02	; 2
    15d4:	88 e4       	ldi	r24, 0x48	; 72
    15d6:	9b e0       	ldi	r25, 0x0B	; 11
    15d8:	8d 93       	st	X+, r24
    15da:	9c 93       	st	X, r25
    15dc:	cf 01       	movw	r24, r30
    15de:	08 95       	ret

000015e0 <FUNCreverse>:
Thanks to:
https://www.geeksforgeeks.org/convert-floating-point-number-string/
******/
void FUNCreverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
    15e0:	9b 01       	movw	r18, r22
    15e2:	21 50       	subi	r18, 0x01	; 1
    15e4:	31 09       	sbc	r19, r1
	while (i < j) {
    15e6:	12 16       	cp	r1, r18
    15e8:	13 06       	cpc	r1, r19
    15ea:	84 f4       	brge	.+32     	; 0x160c <FUNCreverse+0x2c>
    15ec:	fc 01       	movw	r30, r24
    15ee:	e6 0f       	add	r30, r22
    15f0:	f7 1f       	adc	r31, r23
    15f2:	dc 01       	movw	r26, r24
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	90 e0       	ldi	r25, 0x00	; 0
		temp = str[i];
    15f8:	4c 91       	ld	r20, X
		str[i] = str[j];
    15fa:	52 91       	ld	r21, -Z
    15fc:	5d 93       	st	X+, r21
		str[j] = temp;
    15fe:	40 83       	st	Z, r20
		i++;
    1600:	01 96       	adiw	r24, 0x01	; 1
		j--;
    1602:	21 50       	subi	r18, 0x01	; 1
    1604:	31 09       	sbc	r19, r1
https://www.geeksforgeeks.org/convert-floating-point-number-string/
******/
void FUNCreverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
	while (i < j) {
    1606:	82 17       	cp	r24, r18
    1608:	93 07       	cpc	r25, r19
    160a:	b4 f3       	brlt	.-20     	; 0x15f8 <FUNCreverse+0x18>
    160c:	08 95       	ret

0000160e <FUNCintToStr>:
		i++;
		j--;
	}
}
int FUNCintToStr(int x, char str[], int d)
{
    160e:	cf 92       	push	r12
    1610:	df 92       	push	r13
    1612:	ef 92       	push	r14
    1614:	ff 92       	push	r15
    1616:	0f 93       	push	r16
    1618:	1f 93       	push	r17
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	6b 01       	movw	r12, r22
    1620:	8a 01       	movw	r16, r20
	int i = 0; 
    while (x) { 
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	99 f0       	breq	.+38     	; 0x164c <FUNCintToStr+0x3e>
    1626:	eb 01       	movw	r28, r22
    1628:	e0 e0       	ldi	r30, 0x00	; 0
    162a:	f0 e0       	ldi	r31, 0x00	; 0
        str[i++] = (x % 10) + '0'; 
    162c:	0f 2e       	mov	r0, r31
    162e:	fa e0       	ldi	r31, 0x0A	; 10
    1630:	ef 2e       	mov	r14, r31
    1632:	f1 2c       	mov	r15, r1
    1634:	f0 2d       	mov	r31, r0
    1636:	31 96       	adiw	r30, 0x01	; 1
    1638:	b7 01       	movw	r22, r14
    163a:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__divmodhi4>
    163e:	80 5d       	subi	r24, 0xD0	; 208
    1640:	89 93       	st	Y+, r24
        x = x / 10; 
    1642:	86 2f       	mov	r24, r22
    1644:	97 2f       	mov	r25, r23
	}
}
int FUNCintToStr(int x, char str[], int d)
{
	int i = 0; 
    while (x) { 
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	b1 f7       	brne	.-20     	; 0x1636 <FUNCintToStr+0x28>
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <FUNCintToStr+0x42>
		j--;
	}
}
int FUNCintToStr(int x, char str[], int d)
{
	int i = 0; 
    164c:	e0 e0       	ldi	r30, 0x00	; 0
    164e:	f0 e0       	ldi	r31, 0x00	; 0
        str[i++] = (x % 10) + '0'; 
        x = x / 10; 
    } 
    // If number of digits required is more, then 
    // add 0s at the beginning 
    while (i < d) 
    1650:	e0 17       	cp	r30, r16
    1652:	f1 07       	cpc	r31, r17
    1654:	5c f4       	brge	.+22     	; 0x166c <FUNCintToStr+0x5e>
    1656:	ec 0d       	add	r30, r12
    1658:	fd 1d       	adc	r31, r13
    165a:	96 01       	movw	r18, r12
    165c:	20 0f       	add	r18, r16
    165e:	31 1f       	adc	r19, r17
        str[i++] = '0';
    1660:	80 e3       	ldi	r24, 0x30	; 48
    1662:	81 93       	st	Z+, r24
        str[i++] = (x % 10) + '0'; 
        x = x / 10; 
    } 
    // If number of digits required is more, then 
    // add 0s at the beginning 
    while (i < d) 
    1664:	e2 17       	cp	r30, r18
    1666:	f3 07       	cpc	r31, r19
    1668:	e1 f7       	brne	.-8      	; 0x1662 <FUNCintToStr+0x54>
    166a:	01 c0       	rjmp	.+2      	; 0x166e <FUNCintToStr+0x60>
    166c:	8f 01       	movw	r16, r30
        str[i++] = '0';
	
    FUNCreverse(str, i); 
    166e:	b8 01       	movw	r22, r16
    1670:	c6 01       	movw	r24, r12
    1672:	b6 df       	rcall	.-148    	; 0x15e0 <FUNCreverse>
    str[i] = '\0'; 
    1674:	e6 01       	movw	r28, r12
    1676:	c0 0f       	add	r28, r16
    1678:	d1 1f       	adc	r29, r17
    167a:	18 82       	st	Y, r1
    return i; 
}
    167c:	c8 01       	movw	r24, r16
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	ff 90       	pop	r15
    1688:	ef 90       	pop	r14
    168a:	df 90       	pop	r13
    168c:	cf 90       	pop	r12
    168e:	08 95       	ret

00001690 <FUNCftoa>:
void FUNCftoa(float n, char* res, int afterpoint)
{
    1690:	2f 92       	push	r2
    1692:	3f 92       	push	r3
    1694:	4f 92       	push	r4
    1696:	5f 92       	push	r5
    1698:	6f 92       	push	r6
    169a:	7f 92       	push	r7
    169c:	8f 92       	push	r8
    169e:	9f 92       	push	r9
    16a0:	af 92       	push	r10
    16a2:	bf 92       	push	r11
    16a4:	cf 92       	push	r12
    16a6:	df 92       	push	r13
    16a8:	ef 92       	push	r14
    16aa:	ff 92       	push	r15
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	4b 01       	movw	r8, r22
    16b6:	5c 01       	movw	r10, r24
    16b8:	8a 01       	movw	r16, r20
    16ba:	e9 01       	movw	r28, r18
	// Extract integer part
	int ipart = (int)n;
    16bc:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__fixsfsi>
    16c0:	6b 01       	movw	r12, r22
    16c2:	7c 01       	movw	r14, r24
	
	// Extract floating part
	float fpart = n - (float)ipart;
	
	// convert integer part to string
	int i =	FUNCintToStr(ipart, res, 1);
    16c4:	41 e0       	ldi	r20, 0x01	; 1
    16c6:	50 e0       	ldi	r21, 0x00	; 0
    16c8:	b8 01       	movw	r22, r16
    16ca:	c6 01       	movw	r24, r12
    16cc:	a0 df       	rcall	.-192    	; 0x160e <FUNCintToStr>
    16ce:	1c 01       	movw	r2, r24
	
	// check for display option after point
	if (afterpoint != 0) {
    16d0:	20 97       	sbiw	r28, 0x00	; 0
    16d2:	91 f1       	breq	.+100    	; 0x1738 <FUNCftoa+0xa8>
		res[i] = '.'; // add dot
    16d4:	f8 01       	movw	r30, r16
    16d6:	e8 0f       	add	r30, r24
    16d8:	f9 1f       	adc	r31, r25
    16da:	8e e2       	ldi	r24, 0x2E	; 46
    16dc:	80 83       	st	Z, r24
	
		// Get the value of fraction part up to given no.
		// of points after dot. The third parameter
		// is needed to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
    16de:	be 01       	movw	r22, r28
    16e0:	0d 2e       	mov	r0, r29
    16e2:	00 0c       	add	r0, r0
    16e4:	88 0b       	sbc	r24, r24
    16e6:	99 0b       	sbc	r25, r25
    16e8:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__floatsisf>
    16ec:	9b 01       	movw	r18, r22
    16ee:	ac 01       	movw	r20, r24
    16f0:	60 e0       	ldi	r22, 0x00	; 0
    16f2:	70 e0       	ldi	r23, 0x00	; 0
    16f4:	80 e2       	ldi	r24, 0x20	; 32
    16f6:	91 e4       	ldi	r25, 0x41	; 65
    16f8:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <pow>
    16fc:	2b 01       	movw	r4, r22
    16fe:	3c 01       	movw	r6, r24
{
	// Extract integer part
	int ipart = (int)n;
	
	// Extract floating part
	float fpart = n - (float)ipart;
    1700:	b6 01       	movw	r22, r12
    1702:	dd 0c       	add	r13, r13
    1704:	88 0b       	sbc	r24, r24
    1706:	99 0b       	sbc	r25, r25
    1708:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__floatsisf>
    170c:	9b 01       	movw	r18, r22
    170e:	ac 01       	movw	r20, r24
    1710:	c5 01       	movw	r24, r10
    1712:	b4 01       	movw	r22, r8
    1714:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <__subsf3>
		// Get the value of fraction part up to given no.
		// of points after dot. The third parameter
		// is needed to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
	
		FUNCintToStr((int)fpart, res + i + 1, afterpoint);
    1718:	2f ef       	ldi	r18, 0xFF	; 255
    171a:	22 1a       	sub	r2, r18
    171c:	32 0a       	sbc	r3, r18
    171e:	02 0d       	add	r16, r2
    1720:	13 1d       	adc	r17, r3
    1722:	a3 01       	movw	r20, r6
    1724:	92 01       	movw	r18, r4
    1726:	0e 94 70 18 	call	0x30e0	; 0x30e0 <__mulsf3>
    172a:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__fixsfsi>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	ae 01       	movw	r20, r28
    1734:	b8 01       	movw	r22, r16
    1736:	6b df       	rcall	.-298    	; 0x160e <FUNCintToStr>
	}
}
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	1f 91       	pop	r17
    173e:	0f 91       	pop	r16
    1740:	ff 90       	pop	r15
    1742:	ef 90       	pop	r14
    1744:	df 90       	pop	r13
    1746:	cf 90       	pop	r12
    1748:	bf 90       	pop	r11
    174a:	af 90       	pop	r10
    174c:	9f 90       	pop	r9
    174e:	8f 90       	pop	r8
    1750:	7f 90       	pop	r7
    1752:	6f 90       	pop	r6
    1754:	5f 90       	pop	r5
    1756:	4f 90       	pop	r4
    1758:	3f 90       	pop	r3
    175a:	2f 90       	pop	r2
    175c:	08 95       	ret

0000175e <KEYPAD_get>:
	}
	return data;
}
/***read***/
struct keypadata KEYPAD_get(void)
{
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
    1762:	00 d0       	rcall	.+0      	; 0x1764 <KEYPAD_get+0x6>
    1764:	00 d0       	rcall	.+0      	; 0x1766 <KEYPAD_get+0x8>
    1766:	1f 92       	push	r1
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
	return data;
    176c:	85 e0       	ldi	r24, 0x05	; 5
    176e:	ec e6       	ldi	r30, 0x6C	; 108
    1770:	f3 e0       	ldi	r31, 0x03	; 3
    1772:	de 01       	movw	r26, r28
    1774:	11 96       	adiw	r26, 0x01	; 1
    1776:	01 90       	ld	r0, Z+
    1778:	0d 92       	st	X+, r0
    177a:	8a 95       	dec	r24
    177c:	e1 f7       	brne	.-8      	; 0x1776 <KEYPAD_get+0x18>
    177e:	29 81       	ldd	r18, Y+1	; 0x01
    1780:	3a 81       	ldd	r19, Y+2	; 0x02
    1782:	4b 81       	ldd	r20, Y+3	; 0x03
    1784:	5c 81       	ldd	r21, Y+4	; 0x04
    1786:	6d 81       	ldd	r22, Y+5	; 0x05
}
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	08 95       	ret

0000179e <KEYPAD_flush>:
/***flush***/
void KEYPAD_flush(void)
{
	KEYPADSTRINGINDEX=0;
    179e:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <KEYPADSTRINGINDEX>
	data.character=' ';
    17a2:	ec e6       	ldi	r30, 0x6C	; 108
    17a4:	f3 e0       	ldi	r31, 0x03	; 3
    17a6:	80 e2       	ldi	r24, 0x20	; 32
    17a8:	80 83       	st	Z, r24
	data.printstring="\0";
    17aa:	80 e1       	ldi	r24, 0x10	; 16
    17ac:	91 e0       	ldi	r25, 0x01	; 1
    17ae:	92 83       	std	Z+2, r25	; 0x02
    17b0:	81 83       	std	Z+1, r24	; 0x01
	data.string="\0";
    17b2:	94 83       	std	Z+4, r25	; 0x04
    17b4:	83 83       	std	Z+3, r24	; 0x03
    17b6:	08 95       	ret

000017b8 <KEYPAD_getkey>:
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
	//Going to use pull down method.
	return keypad;
}
char KEYPAD_getkey(void)
{
    17b8:	cf 93       	push	r28
    17ba:	df 93       	push	r29
    17bc:	21 e0       	ldi	r18, 0x01	; 1
	uint8_t HL;
	char c='\0';
    17be:	80 e0       	ldi	r24, 0x00	; 0
				*keypad_PORT|=(1<<KEYPADLINE_1);
				break;
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    17c0:	a1 e3       	ldi	r26, 0x31	; 49
    17c2:	b3 e0       	ldi	r27, 0x03	; 3
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    17c4:	e5 e3       	ldi	r30, 0x35	; 53
    17c6:	f3 e0       	ldi	r31, 0x03	; 3
					if(HL == (1<<KEYPADDATA_2))
						c=keypadvalue[1][1];
					if(HL == (1<<KEYPADDATA_3))
						c=keypadvalue[1][2];
					if(HL == (1<<KEYPADDATA_4))
						c=keypadvalue[1][3];
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	71 e0       	ldi	r23, 0x01	; 1
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <KEYPAD_getkey+0x18>
    17ce:	2f 5f       	subi	r18, 0xFF	; 255
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
		switch (keypad_option)
    17d0:	9f ef       	ldi	r25, 0xFF	; 255
    17d2:	92 0f       	add	r25, r18
    17d4:	91 30       	cpi	r25, 0x01	; 1
    17d6:	09 f4       	brne	.+2      	; 0x17da <KEYPAD_getkey+0x22>
    17d8:	4b c0       	rjmp	.+150    	; 0x1870 <KEYPAD_getkey+0xb8>
    17da:	38 f0       	brcs	.+14     	; 0x17ea <KEYPAD_getkey+0x32>
    17dc:	92 30       	cpi	r25, 0x02	; 2
    17de:	09 f4       	brne	.+2      	; 0x17e2 <KEYPAD_getkey+0x2a>
    17e0:	8c c0       	rjmp	.+280    	; 0x18fa <KEYPAD_getkey+0x142>
    17e2:	93 30       	cpi	r25, 0x03	; 3
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <KEYPAD_getkey+0x30>
    17e6:	ce c0       	rjmp	.+412    	; 0x1984 <KEYPAD_getkey+0x1cc>
    17e8:	0e c1       	rjmp	.+540    	; 0x1a06 <KEYPAD_getkey+0x24e>
		{
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
    17ea:	40 91 3c 03 	lds	r20, 0x033C	; 0x80033c <keypad_DDR>
    17ee:	50 91 3d 03 	lds	r21, 0x033D	; 0x80033d <keypad_DDR+0x1>
    17f2:	ea 01       	movw	r28, r20
    17f4:	98 81       	ld	r25, Y
    17f6:	90 68       	ori	r25, 0x80	; 128
    17f8:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_1);
    17fa:	40 91 2e 03 	lds	r20, 0x032E	; 0x80032e <keypad_PORT>
    17fe:	50 91 2f 03 	lds	r21, 0x032F	; 0x80032f <keypad_PORT+0x1>
    1802:	ea 01       	movw	r28, r20
    1804:	98 81       	ld	r25, Y
    1806:	9f 77       	andi	r25, 0x7F	; 127
    1808:	98 83       	st	Y, r25
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    180a:	40 91 3a 03 	lds	r20, 0x033A	; 0x80033a <keypad_PIN>
    180e:	50 91 3b 03 	lds	r21, 0x033B	; 0x80033b <keypad_PIN+0x1>
    1812:	ea 01       	movw	r28, r20
    1814:	38 81       	ld	r19, Y
    1816:	34 77       	andi	r19, 0x74	; 116
    1818:	3c 93       	st	X, r19
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
    181a:	90 81       	ld	r25, Z
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    181c:	43 2f       	mov	r20, r19
    181e:	49 27       	eor	r20, r25
    1820:	94 23       	and	r25, r20
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
				*keypad_PORT&=~(1<<KEYPADLINE_1);
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
				keypad_datai.line_1=keypad_dataf.line_1;
    1822:	30 83       	st	Z, r19
				if(HL){
    1824:	99 23       	and	r25, r25
    1826:	99 f0       	breq	.+38     	; 0x184e <KEYPAD_getkey+0x96>
					//decode index line one column what ?
					if(HL == (1<<KEYPADDATA_1))
    1828:	94 30       	cpi	r25, 0x04	; 4
    182a:	19 f4       	brne	.+6      	; 0x1832 <KEYPAD_getkey+0x7a>
						c=keypadvalue[0][0];
    182c:	eb 01       	movw	r28, r22
    182e:	88 81       	ld	r24, Y
    1830:	0a c0       	rjmp	.+20     	; 0x1846 <KEYPAD_getkey+0x8e>
					if(HL == (1<<KEYPADDATA_2))
    1832:	90 31       	cpi	r25, 0x10	; 16
    1834:	19 f4       	brne	.+6      	; 0x183c <KEYPAD_getkey+0x84>
						c=keypadvalue[0][1];
    1836:	eb 01       	movw	r28, r22
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	09 c0       	rjmp	.+18     	; 0x184e <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_3))
    183c:	90 32       	cpi	r25, 0x20	; 32
    183e:	19 f4       	brne	.+6      	; 0x1846 <KEYPAD_getkey+0x8e>
						c=keypadvalue[0][2];
    1840:	eb 01       	movw	r28, r22
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	04 c0       	rjmp	.+8      	; 0x184e <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_4))
    1846:	90 34       	cpi	r25, 0x40	; 64
    1848:	11 f4       	brne	.+4      	; 0x184e <KEYPAD_getkey+0x96>
						c=keypadvalue[0][3];
    184a:	eb 01       	movw	r28, r22
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
				}
				*keypad_DDR&=~(1<<KEYPADLINE_1);
    184e:	40 91 3c 03 	lds	r20, 0x033C	; 0x80033c <keypad_DDR>
    1852:	50 91 3d 03 	lds	r21, 0x033D	; 0x80033d <keypad_DDR+0x1>
    1856:	ea 01       	movw	r28, r20
    1858:	98 81       	ld	r25, Y
    185a:	9f 77       	andi	r25, 0x7F	; 127
    185c:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_1);
    185e:	40 91 2e 03 	lds	r20, 0x032E	; 0x80032e <keypad_PORT>
    1862:	50 91 2f 03 	lds	r21, 0x032F	; 0x80032f <keypad_PORT+0x1>
    1866:	ea 01       	movw	r28, r20
    1868:	98 81       	ld	r25, Y
    186a:	90 68       	ori	r25, 0x80	; 128
    186c:	98 83       	st	Y, r25
				break;
    186e:	af cf       	rjmp	.-162    	; 0x17ce <KEYPAD_getkey+0x16>
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
    1870:	40 91 3c 03 	lds	r20, 0x033C	; 0x80033c <keypad_DDR>
    1874:	50 91 3d 03 	lds	r21, 0x033D	; 0x80033d <keypad_DDR+0x1>
    1878:	ea 01       	movw	r28, r20
    187a:	98 81       	ld	r25, Y
    187c:	91 60       	ori	r25, 0x01	; 1
    187e:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_2);
    1880:	40 91 2e 03 	lds	r20, 0x032E	; 0x80032e <keypad_PORT>
    1884:	50 91 2f 03 	lds	r21, 0x032F	; 0x80032f <keypad_PORT+0x1>
    1888:	ea 01       	movw	r28, r20
    188a:	98 81       	ld	r25, Y
    188c:	9e 7f       	andi	r25, 0xFE	; 254
    188e:	98 83       	st	Y, r25
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1890:	40 91 3a 03 	lds	r20, 0x033A	; 0x80033a <keypad_PIN>
    1894:	50 91 3b 03 	lds	r21, 0x033B	; 0x80033b <keypad_PIN+0x1>
    1898:	ea 01       	movw	r28, r20
    189a:	38 81       	ld	r19, Y
    189c:	34 77       	andi	r19, 0x74	; 116
    189e:	11 96       	adiw	r26, 0x01	; 1
    18a0:	3c 93       	st	X, r19
    18a2:	11 97       	sbiw	r26, 0x01	; 1
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    18a4:	91 81       	ldd	r25, Z+1	; 0x01
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    18a6:	43 2f       	mov	r20, r19
    18a8:	49 27       	eor	r20, r25
    18aa:	94 23       	and	r25, r20
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
				keypad_datai.line_2=keypad_dataf.line_2;
    18ac:	31 83       	std	Z+1, r19	; 0x01
				if(HL){
    18ae:	99 23       	and	r25, r25
    18b0:	99 f0       	breq	.+38     	; 0x18d8 <KEYPAD_getkey+0x120>
					//decode index line two column what ?
					if(HL == (1<<KEYPADDATA_1))
    18b2:	94 30       	cpi	r25, 0x04	; 4
    18b4:	19 f4       	brne	.+6      	; 0x18bc <KEYPAD_getkey+0x104>
						c=keypadvalue[1][0];
    18b6:	eb 01       	movw	r28, r22
    18b8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ba:	0a c0       	rjmp	.+20     	; 0x18d0 <KEYPAD_getkey+0x118>
					if(HL == (1<<KEYPADDATA_2))
    18bc:	90 31       	cpi	r25, 0x10	; 16
    18be:	19 f4       	brne	.+6      	; 0x18c6 <KEYPAD_getkey+0x10e>
						c=keypadvalue[1][1];
    18c0:	eb 01       	movw	r28, r22
    18c2:	8d 81       	ldd	r24, Y+5	; 0x05
    18c4:	09 c0       	rjmp	.+18     	; 0x18d8 <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_3))
    18c6:	90 32       	cpi	r25, 0x20	; 32
    18c8:	19 f4       	brne	.+6      	; 0x18d0 <KEYPAD_getkey+0x118>
						c=keypadvalue[1][2];
    18ca:	eb 01       	movw	r28, r22
    18cc:	8e 81       	ldd	r24, Y+6	; 0x06
    18ce:	04 c0       	rjmp	.+8      	; 0x18d8 <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_4))
    18d0:	90 34       	cpi	r25, 0x40	; 64
    18d2:	11 f4       	brne	.+4      	; 0x18d8 <KEYPAD_getkey+0x120>
						c=keypadvalue[1][3];
    18d4:	eb 01       	movw	r28, r22
    18d6:	8f 81       	ldd	r24, Y+7	; 0x07
				}
				*keypad_DDR&=~(1<<KEYPADLINE_2);
    18d8:	40 91 3c 03 	lds	r20, 0x033C	; 0x80033c <keypad_DDR>
    18dc:	50 91 3d 03 	lds	r21, 0x033D	; 0x80033d <keypad_DDR+0x1>
    18e0:	ea 01       	movw	r28, r20
    18e2:	98 81       	ld	r25, Y
    18e4:	9e 7f       	andi	r25, 0xFE	; 254
    18e6:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_2);
    18e8:	40 91 2e 03 	lds	r20, 0x032E	; 0x80032e <keypad_PORT>
    18ec:	50 91 2f 03 	lds	r21, 0x032F	; 0x80032f <keypad_PORT+0x1>
    18f0:	ea 01       	movw	r28, r20
    18f2:	98 81       	ld	r25, Y
    18f4:	91 60       	ori	r25, 0x01	; 1
    18f6:	98 83       	st	Y, r25
				break;
    18f8:	6a cf       	rjmp	.-300    	; 0x17ce <KEYPAD_getkey+0x16>
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
    18fa:	40 91 3c 03 	lds	r20, 0x033C	; 0x80033c <keypad_DDR>
    18fe:	50 91 3d 03 	lds	r21, 0x033D	; 0x80033d <keypad_DDR+0x1>
    1902:	ea 01       	movw	r28, r20
    1904:	98 81       	ld	r25, Y
    1906:	92 60       	ori	r25, 0x02	; 2
    1908:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_3);
    190a:	40 91 2e 03 	lds	r20, 0x032E	; 0x80032e <keypad_PORT>
    190e:	50 91 2f 03 	lds	r21, 0x032F	; 0x80032f <keypad_PORT+0x1>
    1912:	ea 01       	movw	r28, r20
    1914:	98 81       	ld	r25, Y
    1916:	9d 7f       	andi	r25, 0xFD	; 253
    1918:	98 83       	st	Y, r25
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    191a:	40 91 3a 03 	lds	r20, 0x033A	; 0x80033a <keypad_PIN>
    191e:	50 91 3b 03 	lds	r21, 0x033B	; 0x80033b <keypad_PIN+0x1>
    1922:	ea 01       	movw	r28, r20
    1924:	38 81       	ld	r19, Y
    1926:	34 77       	andi	r19, 0x74	; 116
    1928:	12 96       	adiw	r26, 0x02	; 2
    192a:	3c 93       	st	X, r19
    192c:	12 97       	sbiw	r26, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
    192e:	92 81       	ldd	r25, Z+2	; 0x02
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1930:	43 2f       	mov	r20, r19
    1932:	49 27       	eor	r20, r25
    1934:	94 23       	and	r25, r20
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
				*keypad_PORT&=~(1<<KEYPADLINE_3);
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
				keypad_datai.line_3=keypad_dataf.line_3;
    1936:	32 83       	std	Z+2, r19	; 0x02
				if(HL){
    1938:	99 23       	and	r25, r25
    193a:	99 f0       	breq	.+38     	; 0x1962 <KEYPAD_getkey+0x1aa>
					//decode index line three column what ?
					if(HL == (1<<KEYPADDATA_1))
    193c:	94 30       	cpi	r25, 0x04	; 4
    193e:	19 f4       	brne	.+6      	; 0x1946 <KEYPAD_getkey+0x18e>
						c=keypadvalue[2][0];
    1940:	eb 01       	movw	r28, r22
    1942:	88 85       	ldd	r24, Y+8	; 0x08
    1944:	0a c0       	rjmp	.+20     	; 0x195a <KEYPAD_getkey+0x1a2>
					if(HL == (1<<KEYPADDATA_2))
    1946:	90 31       	cpi	r25, 0x10	; 16
    1948:	19 f4       	brne	.+6      	; 0x1950 <KEYPAD_getkey+0x198>
						c=keypadvalue[2][1];
    194a:	eb 01       	movw	r28, r22
    194c:	89 85       	ldd	r24, Y+9	; 0x09
    194e:	09 c0       	rjmp	.+18     	; 0x1962 <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_3))
    1950:	90 32       	cpi	r25, 0x20	; 32
    1952:	19 f4       	brne	.+6      	; 0x195a <KEYPAD_getkey+0x1a2>
						c=keypadvalue[2][2];
    1954:	eb 01       	movw	r28, r22
    1956:	8a 85       	ldd	r24, Y+10	; 0x0a
    1958:	04 c0       	rjmp	.+8      	; 0x1962 <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_4))
    195a:	90 34       	cpi	r25, 0x40	; 64
    195c:	11 f4       	brne	.+4      	; 0x1962 <KEYPAD_getkey+0x1aa>
						c=keypadvalue[2][3];
    195e:	eb 01       	movw	r28, r22
    1960:	8b 85       	ldd	r24, Y+11	; 0x0b
				}
				*keypad_DDR&=~(1<<KEYPADLINE_3);
    1962:	40 91 3c 03 	lds	r20, 0x033C	; 0x80033c <keypad_DDR>
    1966:	50 91 3d 03 	lds	r21, 0x033D	; 0x80033d <keypad_DDR+0x1>
    196a:	ea 01       	movw	r28, r20
    196c:	98 81       	ld	r25, Y
    196e:	9d 7f       	andi	r25, 0xFD	; 253
    1970:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_3);
    1972:	40 91 2e 03 	lds	r20, 0x032E	; 0x80032e <keypad_PORT>
    1976:	50 91 2f 03 	lds	r21, 0x032F	; 0x80032f <keypad_PORT+0x1>
    197a:	ea 01       	movw	r28, r20
    197c:	98 81       	ld	r25, Y
    197e:	92 60       	ori	r25, 0x02	; 2
    1980:	98 83       	st	Y, r25
				break;
    1982:	25 cf       	rjmp	.-438    	; 0x17ce <KEYPAD_getkey+0x16>
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
    1984:	e0 91 3c 03 	lds	r30, 0x033C	; 0x80033c <keypad_DDR>
    1988:	f0 91 3d 03 	lds	r31, 0x033D	; 0x80033d <keypad_DDR+0x1>
    198c:	90 81       	ld	r25, Z
    198e:	98 60       	ori	r25, 0x08	; 8
    1990:	90 83       	st	Z, r25
				*keypad_PORT&=~(1<<KEYPADLINE_4);
    1992:	e0 91 2e 03 	lds	r30, 0x032E	; 0x80032e <keypad_PORT>
    1996:	f0 91 2f 03 	lds	r31, 0x032F	; 0x80032f <keypad_PORT+0x1>
    199a:	90 81       	ld	r25, Z
    199c:	97 7f       	andi	r25, 0xF7	; 247
    199e:	90 83       	st	Z, r25
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    19a0:	e0 91 3a 03 	lds	r30, 0x033A	; 0x80033a <keypad_PIN>
    19a4:	f0 91 3b 03 	lds	r31, 0x033B	; 0x80033b <keypad_PIN+0x1>
    19a8:	20 81       	ld	r18, Z
    19aa:	24 77       	andi	r18, 0x74	; 116
    19ac:	20 93 34 03 	sts	0x0334, r18	; 0x800334 <keypad_dataf+0x3>
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
    19b0:	e5 e3       	ldi	r30, 0x35	; 53
    19b2:	f3 e0       	ldi	r31, 0x03	; 3
    19b4:	93 81       	ldd	r25, Z+3	; 0x03
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    19b6:	32 2f       	mov	r19, r18
    19b8:	39 27       	eor	r19, r25
    19ba:	93 23       	and	r25, r19
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
				*keypad_PORT&=~(1<<KEYPADLINE_4);
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
				keypad_datai.line_4=keypad_dataf.line_4;
    19bc:	23 83       	std	Z+3, r18	; 0x03
				if(HL){
    19be:	99 23       	and	r25, r25
    19c0:	99 f0       	breq	.+38     	; 0x19e8 <KEYPAD_getkey+0x230>
					//decode index line four column what ?
					if(HL == (1<<KEYPADDATA_1))
    19c2:	94 30       	cpi	r25, 0x04	; 4
    19c4:	19 f4       	brne	.+6      	; 0x19cc <KEYPAD_getkey+0x214>
						c=keypadvalue[3][0];
    19c6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
    19ca:	0a c0       	rjmp	.+20     	; 0x19e0 <KEYPAD_getkey+0x228>
					if(HL == (1<<KEYPADDATA_2))
    19cc:	90 31       	cpi	r25, 0x10	; 16
    19ce:	19 f4       	brne	.+6      	; 0x19d6 <KEYPAD_getkey+0x21e>
						c=keypadvalue[3][1];
    19d0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
    19d4:	09 c0       	rjmp	.+18     	; 0x19e8 <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_3))
    19d6:	90 32       	cpi	r25, 0x20	; 32
    19d8:	19 f4       	brne	.+6      	; 0x19e0 <KEYPAD_getkey+0x228>
						c=keypadvalue[3][2];
    19da:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    19de:	04 c0       	rjmp	.+8      	; 0x19e8 <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_4))
    19e0:	90 34       	cpi	r25, 0x40	; 64
    19e2:	11 f4       	brne	.+4      	; 0x19e8 <KEYPAD_getkey+0x230>
						c=keypadvalue[3][3];
    19e4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
				}
				*keypad_DDR&=~(1<<KEYPADLINE_4);
    19e8:	e0 91 3c 03 	lds	r30, 0x033C	; 0x80033c <keypad_DDR>
    19ec:	f0 91 3d 03 	lds	r31, 0x033D	; 0x80033d <keypad_DDR+0x1>
    19f0:	90 81       	ld	r25, Z
    19f2:	97 7f       	andi	r25, 0xF7	; 247
    19f4:	90 83       	st	Z, r25
				*keypad_PORT|=(1<<KEYPADLINE_4);
    19f6:	e0 91 2e 03 	lds	r30, 0x032E	; 0x80032e <keypad_PORT>
    19fa:	f0 91 2f 03 	lds	r31, 0x032F	; 0x80032f <keypad_PORT+0x1>
    19fe:	90 81       	ld	r25, Z
    1a00:	98 60       	ori	r25, 0x08	; 8
    1a02:	90 83       	st	Z, r25
    1a04:	03 c0       	rjmp	.+6      	; 0x1a0c <KEYPAD_getkey+0x254>
char KEYPAD_getkey(void)
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
    1a06:	24 30       	cpi	r18, 0x04	; 4
    1a08:	08 f4       	brcc	.+2      	; 0x1a0c <KEYPAD_getkey+0x254>
    1a0a:	e1 ce       	rjmp	.-574    	; 0x17ce <KEYPAD_getkey+0x16>
			default:
				break;
		}
	}
	return c;
}
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	08 95       	ret

00001a12 <KEYPAD_read>:
/***read***/
struct keypadata KEYPAD_read(void)
{
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <KEYPAD_read+0x6>
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <KEYPAD_read+0x8>
    1a1a:	1f 92       	push	r1
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
	char c;
	c=KEYPAD_getkey(); //returns null all the time when no entry
    1a20:	cb de       	rcall	.-618    	; 0x17b8 <KEYPAD_getkey>
	if(c){
    1a22:	88 23       	and	r24, r24
    1a24:	b1 f1       	breq	.+108    	; 0x1a92 <KEYPAD_read+0x80>
		data.character=c;
    1a26:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <data>
		if(KEYPADSTRINGINDEX<(KEYPADSTRINGSIZE)){
    1a2a:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <KEYPADSTRINGINDEX>
    1a2e:	94 31       	cpi	r25, 0x14	; 20
    1a30:	88 f4       	brcc	.+34     	; 0x1a54 <KEYPAD_read+0x42>
			KEYPAD_string[KEYPADSTRINGINDEX]=c;
    1a32:	e0 91 39 03 	lds	r30, 0x0339	; 0x800339 <KEYPADSTRINGINDEX>
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	e2 5c       	subi	r30, 0xC2	; 194
    1a3a:	fc 4f       	sbci	r31, 0xFC	; 252
    1a3c:	80 83       	st	Z, r24
			KEYPADSTRINGINDEX++;
    1a3e:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <KEYPADSTRINGINDEX>
    1a42:	9f 5f       	subi	r25, 0xFF	; 255
    1a44:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <KEYPADSTRINGINDEX>
			KEYPAD_string[KEYPADSTRINGINDEX]='\0';
    1a48:	e0 91 39 03 	lds	r30, 0x0339	; 0x800339 <KEYPADSTRINGINDEX>
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	e2 5c       	subi	r30, 0xC2	; 194
    1a50:	fc 4f       	sbci	r31, 0xFC	; 252
    1a52:	10 82       	st	Z, r1
		}
		if(c==KEYPADENTERKEY){
    1a54:	84 34       	cpi	r24, 0x44	; 68
    1a56:	99 f4       	brne	.+38     	; 0x1a7e <KEYPAD_read+0x6c>
			KEYPAD_string[KEYPADSTRINGINDEX-1]='\0';
    1a58:	e0 91 39 03 	lds	r30, 0x0339	; 0x800339 <KEYPADSTRINGINDEX>
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	e3 5c       	subi	r30, 0xC3	; 195
    1a60:	fc 4f       	sbci	r31, 0xFC	; 252
    1a62:	10 82       	st	Z, r1
			KEYPADSTRINGINDEX=0;
    1a64:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <KEYPADSTRINGINDEX>
			data.printstring="\0";
    1a68:	ec e6       	ldi	r30, 0x6C	; 108
    1a6a:	f3 e0       	ldi	r31, 0x03	; 3
    1a6c:	80 e1       	ldi	r24, 0x10	; 16
    1a6e:	91 e0       	ldi	r25, 0x01	; 1
    1a70:	92 83       	std	Z+2, r25	; 0x02
    1a72:	81 83       	std	Z+1, r24	; 0x01
			data.string=KEYPAD_string; // shift output
    1a74:	8e e3       	ldi	r24, 0x3E	; 62
    1a76:	93 e0       	ldi	r25, 0x03	; 3
    1a78:	94 83       	std	Z+4, r25	; 0x04
    1a7a:	83 83       	std	Z+3, r24	; 0x03
    1a7c:	0a c0       	rjmp	.+20     	; 0x1a92 <KEYPAD_read+0x80>
		}else{
			data.printstring=KEYPAD_string;
    1a7e:	ec e6       	ldi	r30, 0x6C	; 108
    1a80:	f3 e0       	ldi	r31, 0x03	; 3
    1a82:	8e e3       	ldi	r24, 0x3E	; 62
    1a84:	93 e0       	ldi	r25, 0x03	; 3
    1a86:	92 83       	std	Z+2, r25	; 0x02
    1a88:	81 83       	std	Z+1, r24	; 0x01
			data.string="\0"; // clear output
    1a8a:	80 e1       	ldi	r24, 0x10	; 16
    1a8c:	91 e0       	ldi	r25, 0x01	; 1
    1a8e:	94 83       	std	Z+4, r25	; 0x04
    1a90:	83 83       	std	Z+3, r24	; 0x03
		}
	}
	return data;
    1a92:	85 e0       	ldi	r24, 0x05	; 5
    1a94:	ec e6       	ldi	r30, 0x6C	; 108
    1a96:	f3 e0       	ldi	r31, 0x03	; 3
    1a98:	de 01       	movw	r26, r28
    1a9a:	11 96       	adiw	r26, 0x01	; 1
    1a9c:	01 90       	ld	r0, Z+
    1a9e:	0d 92       	st	X+, r0
    1aa0:	8a 95       	dec	r24
    1aa2:	e1 f7       	brne	.-8      	; 0x1a9c <KEYPAD_read+0x8a>
    1aa4:	29 81       	ldd	r18, Y+1	; 0x01
    1aa6:	3a 81       	ldd	r19, Y+2	; 0x02
    1aa8:	4b 81       	ldd	r20, Y+3	; 0x03
    1aaa:	5c 81       	ldd	r21, Y+4	; 0x04
    1aac:	6d 81       	ldd	r22, Y+5	; 0x05
}
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	df 91       	pop	r29
    1ac0:	cf 91       	pop	r28
    1ac2:	08 95       	ret

00001ac4 <KEYPADenable>:
uint8_t KEYPADlh(uint8_t xi, uint8_t xf);
/***hl***/
uint8_t KEYPADhl(uint8_t xi, uint8_t xf);
/***Procedure & Function***/
KEYPAD KEYPADenable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1ac4:	cf 93       	push	r28
    1ac6:	df 93       	push	r29
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	28 97       	sbiw	r28, 0x08	; 8
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
	//LOCAL VARIABLE
	uint8_t tSREG;
	tSREG=SREG;
    1ad8:	2f b7       	in	r18, 0x3f	; 63
	data.character=' ';
    1ada:	30 e2       	ldi	r19, 0x20	; 32
    1adc:	30 93 6c 03 	sts	0x036C, r19	; 0x80036c <data>
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	KEYPAD keypad;
	//import parametros
	keypad_DDR=ddr;
    1ae0:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <keypad_DDR+0x1>
    1ae4:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <keypad_DDR>
	keypad_PIN=pin;
    1ae8:	70 93 3b 03 	sts	0x033B, r23	; 0x80033b <keypad_PIN+0x1>
    1aec:	60 93 3a 03 	sts	0x033A, r22	; 0x80033a <keypad_PIN>
	keypad_PORT=port;
    1af0:	50 93 2f 03 	sts	0x032F, r21	; 0x80032f <keypad_PORT+0x1>
    1af4:	40 93 2e 03 	sts	0x032E, r20	; 0x80032e <keypad_PORT>
	//inic variables
	*keypad_DDR=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    1af8:	3b e8       	ldi	r19, 0x8B	; 139
    1afa:	fc 01       	movw	r30, r24
    1afc:	30 83       	st	Z, r19
	*keypad_PORT=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1afe:	e0 91 2e 03 	lds	r30, 0x032E	; 0x80032e <keypad_PORT>
    1b02:	f0 91 2f 03 	lds	r31, 0x032F	; 0x80032f <keypad_PORT+0x1>
    1b06:	84 e7       	ldi	r24, 0x74	; 116
    1b08:	80 83       	st	Z, r24
	keypad_datai.line_1=keypad_dataf.line_1=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1b0a:	a1 e3       	ldi	r26, 0x31	; 49
    1b0c:	b3 e0       	ldi	r27, 0x03	; 3
    1b0e:	8c 93       	st	X, r24
    1b10:	e5 e3       	ldi	r30, 0x35	; 53
    1b12:	f3 e0       	ldi	r31, 0x03	; 3
    1b14:	80 83       	st	Z, r24
	keypad_datai.line_2=keypad_dataf.line_2=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1b16:	11 96       	adiw	r26, 0x01	; 1
    1b18:	8c 93       	st	X, r24
    1b1a:	11 97       	sbiw	r26, 0x01	; 1
    1b1c:	81 83       	std	Z+1, r24	; 0x01
	keypad_datai.line_3=keypad_dataf.line_3=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1b1e:	12 96       	adiw	r26, 0x02	; 2
    1b20:	8c 93       	st	X, r24
    1b22:	12 97       	sbiw	r26, 0x02	; 2
    1b24:	82 83       	std	Z+2, r24	; 0x02
	keypad_datai.line_4=keypad_dataf.line_4=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1b26:	13 96       	adiw	r26, 0x03	; 3
    1b28:	8c 93       	st	X, r24
    1b2a:	83 83       	std	Z+3, r24	; 0x03
	KEYPADSTRINGINDEX=0;
    1b2c:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <KEYPADSTRINGINDEX>
	//Vtable
	keypad.getkey=KEYPAD_getkey;
	keypad.read=KEYPAD_read;
	keypad.get=KEYPAD_get;
	keypad.flush=KEYPAD_flush;
	SREG=tSREG;
    1b30:	2f bf       	out	0x3f, r18	; 63
	//
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    1b32:	e0 91 2e 03 	lds	r30, 0x032E	; 0x80032e <keypad_PORT>
    1b36:	f0 91 2f 03 	lds	r31, 0x032F	; 0x80032f <keypad_PORT+0x1>
    1b3a:	80 81       	ld	r24, Z
    1b3c:	8b 68       	ori	r24, 0x8B	; 139
    1b3e:	80 83       	st	Z, r24
	//Going to use pull down method.
	return keypad;
    1b40:	2c ed       	ldi	r18, 0xDC	; 220
    1b42:	3b e0       	ldi	r19, 0x0B	; 11
    1b44:	3a 83       	std	Y+2, r19	; 0x02
    1b46:	29 83       	std	Y+1, r18	; 0x01
    1b48:	49 e0       	ldi	r20, 0x09	; 9
    1b4a:	5d e0       	ldi	r21, 0x0D	; 13
    1b4c:	5c 83       	std	Y+4, r21	; 0x04
    1b4e:	4b 83       	std	Y+3, r20	; 0x03
    1b50:	6f ea       	ldi	r22, 0xAF	; 175
    1b52:	7b e0       	ldi	r23, 0x0B	; 11
    1b54:	7e 83       	std	Y+6, r23	; 0x06
    1b56:	6d 83       	std	Y+5, r22	; 0x05
    1b58:	8f ec       	ldi	r24, 0xCF	; 207
    1b5a:	9b e0       	ldi	r25, 0x0B	; 11
    1b5c:	98 87       	std	Y+8, r25	; 0x08
    1b5e:	8f 83       	std	Y+7, r24	; 0x07
    1b60:	3a 81       	ldd	r19, Y+2	; 0x02
    1b62:	5c 81       	ldd	r21, Y+4	; 0x04
    1b64:	7e 81       	ldd	r23, Y+6	; 0x06
}
    1b66:	98 85       	ldd	r25, Y+8	; 0x08
    1b68:	28 96       	adiw	r28, 0x08	; 8
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	df 91       	pop	r29
    1b76:	cf 91       	pop	r28
    1b78:	08 95       	ret

00001b7a <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b7a:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1b7e:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1b82:	90 81       	ld	r25, Z
    1b84:	9d 7f       	andi	r25, 0xFD	; 253
    1b86:	90 83       	st	Z, r25
    1b88:	67 2b       	or	r22, r23
    1b8a:	41 f0       	breq	.+16     	; 0x1b9c <LCD0_write+0x22>
    1b8c:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1b90:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1b94:	90 81       	ld	r25, Z
    1b96:	91 60       	ori	r25, 0x01	; 1
    1b98:	90 83       	st	Z, r25
    1b9a:	07 c0       	rjmp	.+14     	; 0x1baa <LCD0_write+0x30>
    1b9c:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1ba0:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1ba4:	90 81       	ld	r25, Z
    1ba6:	9e 7f       	andi	r25, 0xFE	; 254
    1ba8:	90 83       	st	Z, r25
    1baa:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <lcd0_DDR>
    1bae:	f0 91 5b 03 	lds	r31, 0x035B	; 0x80035b <lcd0_DDR+0x1>
    1bb2:	90 81       	ld	r25, Z
    1bb4:	90 6f       	ori	r25, 0xF0	; 240
    1bb6:	90 83       	st	Z, r25
    1bb8:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1bbc:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1bc0:	90 81       	ld	r25, Z
    1bc2:	94 60       	ori	r25, 0x04	; 4
    1bc4:	90 83       	st	Z, r25
    1bc6:	88 23       	and	r24, r24
    1bc8:	44 f4       	brge	.+16     	; 0x1bda <LCD0_write+0x60>
    1bca:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1bce:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1bd2:	90 81       	ld	r25, Z
    1bd4:	90 68       	ori	r25, 0x80	; 128
    1bd6:	90 83       	st	Z, r25
    1bd8:	07 c0       	rjmp	.+14     	; 0x1be8 <LCD0_write+0x6e>
    1bda:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1bde:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1be2:	90 81       	ld	r25, Z
    1be4:	9f 77       	andi	r25, 0x7F	; 127
    1be6:	90 83       	st	Z, r25
    1be8:	86 ff       	sbrs	r24, 6
    1bea:	08 c0       	rjmp	.+16     	; 0x1bfc <LCD0_write+0x82>
    1bec:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1bf0:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1bf4:	90 81       	ld	r25, Z
    1bf6:	90 64       	ori	r25, 0x40	; 64
    1bf8:	90 83       	st	Z, r25
    1bfa:	07 c0       	rjmp	.+14     	; 0x1c0a <LCD0_write+0x90>
    1bfc:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1c00:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1c04:	90 81       	ld	r25, Z
    1c06:	9f 7b       	andi	r25, 0xBF	; 191
    1c08:	90 83       	st	Z, r25
    1c0a:	85 ff       	sbrs	r24, 5
    1c0c:	08 c0       	rjmp	.+16     	; 0x1c1e <LCD0_write+0xa4>
    1c0e:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1c12:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1c16:	90 81       	ld	r25, Z
    1c18:	90 62       	ori	r25, 0x20	; 32
    1c1a:	90 83       	st	Z, r25
    1c1c:	07 c0       	rjmp	.+14     	; 0x1c2c <LCD0_write+0xb2>
    1c1e:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1c22:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1c26:	90 81       	ld	r25, Z
    1c28:	9f 7d       	andi	r25, 0xDF	; 223
    1c2a:	90 83       	st	Z, r25
    1c2c:	84 ff       	sbrs	r24, 4
    1c2e:	08 c0       	rjmp	.+16     	; 0x1c40 <LCD0_write+0xc6>
    1c30:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1c34:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1c38:	90 81       	ld	r25, Z
    1c3a:	90 61       	ori	r25, 0x10	; 16
    1c3c:	90 83       	st	Z, r25
    1c3e:	07 c0       	rjmp	.+14     	; 0x1c4e <LCD0_write+0xd4>
    1c40:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1c44:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1c48:	90 81       	ld	r25, Z
    1c4a:	9f 7e       	andi	r25, 0xEF	; 239
    1c4c:	90 83       	st	Z, r25
    1c4e:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1c52:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1c56:	90 81       	ld	r25, Z
    1c58:	9b 7f       	andi	r25, 0xFB	; 251
    1c5a:	90 83       	st	Z, r25
    1c5c:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1c60:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1c64:	90 81       	ld	r25, Z
    1c66:	94 60       	ori	r25, 0x04	; 4
    1c68:	90 83       	st	Z, r25
    1c6a:	83 ff       	sbrs	r24, 3
    1c6c:	08 c0       	rjmp	.+16     	; 0x1c7e <LCD0_write+0x104>
    1c6e:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1c72:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1c76:	90 81       	ld	r25, Z
    1c78:	90 68       	ori	r25, 0x80	; 128
    1c7a:	90 83       	st	Z, r25
    1c7c:	07 c0       	rjmp	.+14     	; 0x1c8c <LCD0_write+0x112>
    1c7e:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1c82:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1c86:	90 81       	ld	r25, Z
    1c88:	9f 77       	andi	r25, 0x7F	; 127
    1c8a:	90 83       	st	Z, r25
    1c8c:	82 ff       	sbrs	r24, 2
    1c8e:	08 c0       	rjmp	.+16     	; 0x1ca0 <LCD0_write+0x126>
    1c90:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1c94:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1c98:	90 81       	ld	r25, Z
    1c9a:	90 64       	ori	r25, 0x40	; 64
    1c9c:	90 83       	st	Z, r25
    1c9e:	07 c0       	rjmp	.+14     	; 0x1cae <LCD0_write+0x134>
    1ca0:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1ca4:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1ca8:	90 81       	ld	r25, Z
    1caa:	9f 7b       	andi	r25, 0xBF	; 191
    1cac:	90 83       	st	Z, r25
    1cae:	81 ff       	sbrs	r24, 1
    1cb0:	08 c0       	rjmp	.+16     	; 0x1cc2 <LCD0_write+0x148>
    1cb2:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1cb6:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1cba:	90 81       	ld	r25, Z
    1cbc:	90 62       	ori	r25, 0x20	; 32
    1cbe:	90 83       	st	Z, r25
    1cc0:	07 c0       	rjmp	.+14     	; 0x1cd0 <LCD0_write+0x156>
    1cc2:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1cc6:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1cca:	90 81       	ld	r25, Z
    1ccc:	9f 7d       	andi	r25, 0xDF	; 223
    1cce:	90 83       	st	Z, r25
    1cd0:	80 ff       	sbrs	r24, 0
    1cd2:	08 c0       	rjmp	.+16     	; 0x1ce4 <LCD0_write+0x16a>
    1cd4:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1cd8:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1cdc:	80 81       	ld	r24, Z
    1cde:	80 61       	ori	r24, 0x10	; 16
    1ce0:	80 83       	st	Z, r24
    1ce2:	07 c0       	rjmp	.+14     	; 0x1cf2 <LCD0_write+0x178>
    1ce4:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1ce8:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1cec:	80 81       	ld	r24, Z
    1cee:	8f 7e       	andi	r24, 0xEF	; 239
    1cf0:	80 83       	st	Z, r24
    1cf2:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1cf6:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1cfa:	80 81       	ld	r24, Z
    1cfc:	8b 7f       	andi	r24, 0xFB	; 251
    1cfe:	80 83       	st	Z, r24
    1d00:	08 95       	ret

00001d02 <LCD0_read>:
    1d02:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <lcd0_DDR>
    1d06:	f0 91 5b 03 	lds	r31, 0x035B	; 0x80035b <lcd0_DDR+0x1>
    1d0a:	20 81       	ld	r18, Z
    1d0c:	2f 70       	andi	r18, 0x0F	; 15
    1d0e:	20 83       	st	Z, r18
    1d10:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1d14:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1d18:	20 81       	ld	r18, Z
    1d1a:	20 6f       	ori	r18, 0xF0	; 240
    1d1c:	20 83       	st	Z, r18
    1d1e:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1d22:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1d26:	20 81       	ld	r18, Z
    1d28:	22 60       	ori	r18, 0x02	; 2
    1d2a:	20 83       	st	Z, r18
    1d2c:	89 2b       	or	r24, r25
    1d2e:	41 f0       	breq	.+16     	; 0x1d40 <LCD0_read+0x3e>
    1d30:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1d34:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1d38:	80 81       	ld	r24, Z
    1d3a:	81 60       	ori	r24, 0x01	; 1
    1d3c:	80 83       	st	Z, r24
    1d3e:	07 c0       	rjmp	.+14     	; 0x1d4e <LCD0_read+0x4c>
    1d40:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1d44:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1d48:	80 81       	ld	r24, Z
    1d4a:	8e 7f       	andi	r24, 0xFE	; 254
    1d4c:	80 83       	st	Z, r24
    1d4e:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1d52:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1d56:	80 81       	ld	r24, Z
    1d58:	84 60       	ori	r24, 0x04	; 4
    1d5a:	80 83       	st	Z, r24
    1d5c:	e0 91 53 03 	lds	r30, 0x0353	; 0x800353 <lcd0_PIN>
    1d60:	f0 91 54 03 	lds	r31, 0x0354	; 0x800354 <lcd0_PIN+0x1>
    1d64:	80 81       	ld	r24, Z
    1d66:	88 23       	and	r24, r24
    1d68:	14 f0       	brlt	.+4      	; 0x1d6e <LCD0_read+0x6c>
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	01 c0       	rjmp	.+2      	; 0x1d70 <LCD0_read+0x6e>
    1d6e:	80 e8       	ldi	r24, 0x80	; 128
    1d70:	90 81       	ld	r25, Z
    1d72:	96 ff       	sbrs	r25, 6
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <LCD0_read+0x78>
    1d76:	80 64       	ori	r24, 0x40	; 64
    1d78:	01 c0       	rjmp	.+2      	; 0x1d7c <LCD0_read+0x7a>
    1d7a:	8f 7b       	andi	r24, 0xBF	; 191
    1d7c:	90 81       	ld	r25, Z
    1d7e:	95 ff       	sbrs	r25, 5
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <LCD0_read+0x84>
    1d82:	80 62       	ori	r24, 0x20	; 32
    1d84:	01 c0       	rjmp	.+2      	; 0x1d88 <LCD0_read+0x86>
    1d86:	8f 7d       	andi	r24, 0xDF	; 223
    1d88:	90 81       	ld	r25, Z
    1d8a:	94 ff       	sbrs	r25, 4
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <LCD0_read+0x90>
    1d8e:	80 61       	ori	r24, 0x10	; 16
    1d90:	01 c0       	rjmp	.+2      	; 0x1d94 <LCD0_read+0x92>
    1d92:	8f 7e       	andi	r24, 0xEF	; 239
    1d94:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1d98:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1d9c:	90 81       	ld	r25, Z
    1d9e:	9b 7f       	andi	r25, 0xFB	; 251
    1da0:	90 83       	st	Z, r25
    1da2:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1da6:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1daa:	90 81       	ld	r25, Z
    1dac:	94 60       	ori	r25, 0x04	; 4
    1dae:	90 83       	st	Z, r25
    1db0:	e0 91 53 03 	lds	r30, 0x0353	; 0x800353 <lcd0_PIN>
    1db4:	f0 91 54 03 	lds	r31, 0x0354	; 0x800354 <lcd0_PIN+0x1>
    1db8:	90 81       	ld	r25, Z
    1dba:	99 23       	and	r25, r25
    1dbc:	14 f4       	brge	.+4      	; 0x1dc2 <LCD0_read+0xc0>
    1dbe:	88 60       	ori	r24, 0x08	; 8
    1dc0:	01 c0       	rjmp	.+2      	; 0x1dc4 <LCD0_read+0xc2>
    1dc2:	87 7f       	andi	r24, 0xF7	; 247
    1dc4:	90 81       	ld	r25, Z
    1dc6:	96 ff       	sbrs	r25, 6
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <LCD0_read+0xcc>
    1dca:	84 60       	ori	r24, 0x04	; 4
    1dcc:	01 c0       	rjmp	.+2      	; 0x1dd0 <LCD0_read+0xce>
    1dce:	8b 7f       	andi	r24, 0xFB	; 251
    1dd0:	90 81       	ld	r25, Z
    1dd2:	95 ff       	sbrs	r25, 5
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <LCD0_read+0xd8>
    1dd6:	82 60       	ori	r24, 0x02	; 2
    1dd8:	01 c0       	rjmp	.+2      	; 0x1ddc <LCD0_read+0xda>
    1dda:	8d 7f       	andi	r24, 0xFD	; 253
    1ddc:	90 81       	ld	r25, Z
    1dde:	94 ff       	sbrs	r25, 4
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <LCD0_read+0xe4>
    1de2:	81 60       	ori	r24, 0x01	; 1
    1de4:	01 c0       	rjmp	.+2      	; 0x1de8 <LCD0_read+0xe6>
    1de6:	8e 7f       	andi	r24, 0xFE	; 254
    1de8:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1dec:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1df0:	90 81       	ld	r25, Z
    1df2:	9b 7f       	andi	r25, 0xFB	; 251
    1df4:	90 83       	st	Z, r25
    1df6:	08 95       	ret

00001df8 <LCD0_BF>:
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	80 df       	rcall	.-256    	; 0x1d02 <LCD0_read>
    1e02:	cb e0       	ldi	r28, 0x0B	; 11
    1e04:	d0 e0       	ldi	r29, 0x00	; 0
    1e06:	05 c0       	rjmp	.+10     	; 0x1e12 <LCD0_BF+0x1a>
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	7a df       	rcall	.-268    	; 0x1d02 <LCD0_read>
    1e0e:	21 97       	sbiw	r28, 0x01	; 1
    1e10:	11 f0       	breq	.+4      	; 0x1e16 <LCD0_BF+0x1e>
    1e12:	88 23       	and	r24, r24
    1e14:	cc f3       	brlt	.-14     	; 0x1e08 <LCD0_BF+0x10>
    1e16:	df 91       	pop	r29
    1e18:	cf 91       	pop	r28
    1e1a:	08 95       	ret

00001e1c <LCD0_putch>:
    1e1c:	61 e0       	ldi	r22, 0x01	; 1
    1e1e:	70 e0       	ldi	r23, 0x00	; 0
    1e20:	ac de       	rcall	.-680    	; 0x1b7a <LCD0_write>
    1e22:	ea cf       	rjmp	.-44     	; 0x1df8 <LCD0_BF>
    1e24:	08 95       	ret

00001e26 <LCD0_getch>:
    1e26:	cf 93       	push	r28
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	6a df       	rcall	.-300    	; 0x1d02 <LCD0_read>
    1e2e:	c8 2f       	mov	r28, r24
    1e30:	e3 df       	rcall	.-58     	; 0x1df8 <LCD0_BF>
    1e32:	8c 2f       	mov	r24, r28
    1e34:	cf 91       	pop	r28
    1e36:	08 95       	ret

00001e38 <LCD0_string>:
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
    1e3c:	ec 01       	movw	r28, r24
    1e3e:	88 81       	ld	r24, Y
    1e40:	88 23       	and	r24, r24
    1e42:	41 f0       	breq	.+16     	; 0x1e54 <LCD0_string+0x1c>
    1e44:	21 96       	adiw	r28, 0x01	; 1
    1e46:	61 e0       	ldi	r22, 0x01	; 1
    1e48:	70 e0       	ldi	r23, 0x00	; 0
    1e4a:	97 de       	rcall	.-722    	; 0x1b7a <LCD0_write>
    1e4c:	d5 df       	rcall	.-86     	; 0x1df8 <LCD0_BF>
    1e4e:	89 91       	ld	r24, Y+
    1e50:	81 11       	cpse	r24, r1
    1e52:	f9 cf       	rjmp	.-14     	; 0x1e46 <LCD0_string+0xe>
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	08 95       	ret

00001e5a <LCD0_string_size>:
    1e5a:	0f 93       	push	r16
    1e5c:	1f 93       	push	r17
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
    1e62:	fc 01       	movw	r30, r24
    1e64:	d6 2f       	mov	r29, r22
    1e66:	80 81       	ld	r24, Z
    1e68:	88 23       	and	r24, r24
    1e6a:	51 f0       	breq	.+20     	; 0x1e80 <LCD0_string_size+0x26>
    1e6c:	8f 01       	movw	r16, r30
    1e6e:	0f 5f       	subi	r16, 0xFF	; 255
    1e70:	1f 4f       	sbci	r17, 0xFF	; 255
    1e72:	61 11       	cpse	r22, r1
    1e74:	09 c0       	rjmp	.+18     	; 0x1e88 <LCD0_string_size+0x2e>
    1e76:	1b c0       	rjmp	.+54     	; 0x1eae <LCD0_string_size+0x54>
    1e78:	cf 5f       	subi	r28, 0xFF	; 255
    1e7a:	dc 17       	cp	r29, r28
    1e7c:	30 f4       	brcc	.+12     	; 0x1e8a <LCD0_string_size+0x30>
    1e7e:	01 c0       	rjmp	.+2      	; 0x1e82 <LCD0_string_size+0x28>
    1e80:	c0 e0       	ldi	r28, 0x00	; 0
    1e82:	cd 17       	cp	r28, r29
    1e84:	60 f0       	brcs	.+24     	; 0x1e9e <LCD0_string_size+0x44>
    1e86:	13 c0       	rjmp	.+38     	; 0x1eae <LCD0_string_size+0x54>
    1e88:	c1 e0       	ldi	r28, 0x01	; 1
    1e8a:	61 e0       	ldi	r22, 0x01	; 1
    1e8c:	70 e0       	ldi	r23, 0x00	; 0
    1e8e:	75 de       	rcall	.-790    	; 0x1b7a <LCD0_write>
    1e90:	b3 df       	rcall	.-154    	; 0x1df8 <LCD0_BF>
    1e92:	f8 01       	movw	r30, r16
    1e94:	81 91       	ld	r24, Z+
    1e96:	8f 01       	movw	r16, r30
    1e98:	81 11       	cpse	r24, r1
    1e9a:	ee cf       	rjmp	.-36     	; 0x1e78 <LCD0_string_size+0x1e>
    1e9c:	f2 cf       	rjmp	.-28     	; 0x1e82 <LCD0_string_size+0x28>
    1e9e:	cf 5f       	subi	r28, 0xFF	; 255
    1ea0:	61 e0       	ldi	r22, 0x01	; 1
    1ea2:	70 e0       	ldi	r23, 0x00	; 0
    1ea4:	80 e2       	ldi	r24, 0x20	; 32
    1ea6:	69 de       	rcall	.-814    	; 0x1b7a <LCD0_write>
    1ea8:	a7 df       	rcall	.-178    	; 0x1df8 <LCD0_BF>
    1eaa:	cd 17       	cp	r28, r29
    1eac:	c0 f3       	brcs	.-16     	; 0x1e9e <LCD0_string_size+0x44>
    1eae:	df 91       	pop	r29
    1eb0:	cf 91       	pop	r28
    1eb2:	1f 91       	pop	r17
    1eb4:	0f 91       	pop	r16
    1eb6:	08 95       	ret

00001eb8 <LCD0_hspace>:
    1eb8:	cf 93       	push	r28
    1eba:	c8 2f       	mov	r28, r24
    1ebc:	88 23       	and	r24, r24
    1ebe:	39 f0       	breq	.+14     	; 0x1ece <LCD0_hspace+0x16>
    1ec0:	61 e0       	ldi	r22, 0x01	; 1
    1ec2:	70 e0       	ldi	r23, 0x00	; 0
    1ec4:	80 e2       	ldi	r24, 0x20	; 32
    1ec6:	59 de       	rcall	.-846    	; 0x1b7a <LCD0_write>
    1ec8:	97 df       	rcall	.-210    	; 0x1df8 <LCD0_BF>
    1eca:	c1 50       	subi	r28, 0x01	; 1
    1ecc:	c9 f7       	brne	.-14     	; 0x1ec0 <LCD0_hspace+0x8>
    1ece:	cf 91       	pop	r28
    1ed0:	08 95       	ret

00001ed2 <LCD0_gotoxy>:
    1ed2:	26 2f       	mov	r18, r22
    1ed4:	81 30       	cpi	r24, 0x01	; 1
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	71 f0       	breq	.+28     	; 0x1ef6 <LCD0_gotoxy+0x24>
    1eda:	30 f0       	brcs	.+12     	; 0x1ee8 <LCD0_gotoxy+0x16>
    1edc:	82 30       	cpi	r24, 0x02	; 2
    1ede:	91 05       	cpc	r25, r1
    1ee0:	89 f0       	breq	.+34     	; 0x1f04 <LCD0_gotoxy+0x32>
    1ee2:	03 97       	sbiw	r24, 0x03	; 3
    1ee4:	b1 f0       	breq	.+44     	; 0x1f12 <LCD0_gotoxy+0x40>
    1ee6:	08 95       	ret
    1ee8:	60 e0       	ldi	r22, 0x00	; 0
    1eea:	70 e0       	ldi	r23, 0x00	; 0
    1eec:	80 e8       	ldi	r24, 0x80	; 128
    1eee:	82 0f       	add	r24, r18
    1ef0:	44 de       	rcall	.-888    	; 0x1b7a <LCD0_write>
    1ef2:	82 cf       	rjmp	.-252    	; 0x1df8 <LCD0_BF>
    1ef4:	08 95       	ret
    1ef6:	60 e0       	ldi	r22, 0x00	; 0
    1ef8:	70 e0       	ldi	r23, 0x00	; 0
    1efa:	80 ec       	ldi	r24, 0xC0	; 192
    1efc:	82 0f       	add	r24, r18
    1efe:	3d de       	rcall	.-902    	; 0x1b7a <LCD0_write>
    1f00:	7b cf       	rjmp	.-266    	; 0x1df8 <LCD0_BF>
    1f02:	08 95       	ret
    1f04:	60 e0       	ldi	r22, 0x00	; 0
    1f06:	70 e0       	ldi	r23, 0x00	; 0
    1f08:	84 e9       	ldi	r24, 0x94	; 148
    1f0a:	82 0f       	add	r24, r18
    1f0c:	36 de       	rcall	.-916    	; 0x1b7a <LCD0_write>
    1f0e:	74 cf       	rjmp	.-280    	; 0x1df8 <LCD0_BF>
    1f10:	08 95       	ret
    1f12:	60 e0       	ldi	r22, 0x00	; 0
    1f14:	70 e0       	ldi	r23, 0x00	; 0
    1f16:	84 ed       	ldi	r24, 0xD4	; 212
    1f18:	82 0f       	add	r24, r18
    1f1a:	2f de       	rcall	.-930    	; 0x1b7a <LCD0_write>
    1f1c:	6d cf       	rjmp	.-294    	; 0x1df8 <LCD0_BF>
    1f1e:	08 95       	ret

00001f20 <LCD0_clear>:
    1f20:	60 e0       	ldi	r22, 0x00	; 0
    1f22:	70 e0       	ldi	r23, 0x00	; 0
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	29 de       	rcall	.-942    	; 0x1b7a <LCD0_write>
    1f28:	87 ee       	ldi	r24, 0xE7	; 231
    1f2a:	97 e1       	ldi	r25, 0x17	; 23
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <LCD0_clear+0xc>
    1f30:	00 c0       	rjmp	.+0      	; 0x1f32 <LCD0_clear+0x12>
    1f32:	00 00       	nop
    1f34:	08 95       	ret

00001f36 <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    1f36:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <lcd0_DDR>
    1f3a:	f0 91 5b 03 	lds	r31, 0x035B	; 0x80035b <lcd0_DDR+0x1>
    1f3e:	87 e0       	ldi	r24, 0x07	; 7
    1f40:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    1f42:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1f46:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1f4a:	88 e0       	ldi	r24, 0x08	; 8
    1f4c:	80 83       	st	Z, r24
    1f4e:	2f ef       	ldi	r18, 0xFF	; 255
    1f50:	83 ef       	ldi	r24, 0xF3	; 243
    1f52:	91 e0       	ldi	r25, 0x01	; 1
    1f54:	21 50       	subi	r18, 0x01	; 1
    1f56:	80 40       	sbci	r24, 0x00	; 0
    1f58:	90 40       	sbci	r25, 0x00	; 0
    1f5a:	e1 f7       	brne	.-8      	; 0x1f54 <LCD0_inic+0x1e>
    1f5c:	00 c0       	rjmp	.+0      	; 0x1f5e <LCD0_inic+0x28>
    1f5e:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    1f60:	60 e0       	ldi	r22, 0x00	; 0
    1f62:	70 e0       	ldi	r23, 0x00	; 0
    1f64:	83 e3       	ldi	r24, 0x33	; 51
    1f66:	09 de       	rcall	.-1006   	; 0x1b7a <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f68:	20 ed       	ldi	r18, 0xD0	; 208
    1f6a:	2a 95       	dec	r18
    1f6c:	f1 f7       	brne	.-4      	; 0x1f6a <LCD0_inic+0x34>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    1f6e:	60 e0       	ldi	r22, 0x00	; 0
    1f70:	70 e0       	ldi	r23, 0x00	; 0
    1f72:	83 e3       	ldi	r24, 0x33	; 51
    1f74:	02 de       	rcall	.-1020   	; 0x1b7a <LCD0_write>
    1f76:	80 ed       	ldi	r24, 0xD0	; 208
    1f78:	8a 95       	dec	r24
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    1f7c:	60 e0       	ldi	r22, 0x00	; 0
    1f7e:	70 e0       	ldi	r23, 0x00	; 0
    1f80:	8b e2       	ldi	r24, 0x2B	; 43
    1f82:	fb dd       	rcall	.-1034   	; 0x1b7a <LCD0_write>
    1f84:	95 ec       	ldi	r25, 0xC5	; 197
    1f86:	9a 95       	dec	r25
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <LCD0_inic+0x50>
    1f8a:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    1f8c:	60 e0       	ldi	r22, 0x00	; 0
    1f8e:	70 e0       	ldi	r23, 0x00	; 0
    1f90:	8c e0       	ldi	r24, 0x0C	; 12
    1f92:	f3 dd       	rcall	.-1050   	; 0x1b7a <LCD0_write>
    1f94:	25 ec       	ldi	r18, 0xC5	; 197
    1f96:	2a 95       	dec	r18
    1f98:	f1 f7       	brne	.-4      	; 0x1f96 <LCD0_inic+0x60>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    1f9a:	00 00       	nop
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	70 e0       	ldi	r23, 0x00	; 0
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	eb dd       	rcall	.-1066   	; 0x1b7a <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1fa4:	87 ee       	ldi	r24, 0xE7	; 231
    1fa6:	97 e1       	ldi	r25, 0x17	; 23
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <LCD0_inic+0x72>
    1fac:	00 c0       	rjmp	.+0      	; 0x1fae <LCD0_inic+0x78>
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    1fae:	00 00       	nop
    1fb0:	60 e0       	ldi	r22, 0x00	; 0
    1fb2:	70 e0       	ldi	r23, 0x00	; 0
    1fb4:	86 e0       	ldi	r24, 0x06	; 6
    1fb6:	e1 dd       	rcall	.-1086   	; 0x1b7a <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1fb8:	95 ec       	ldi	r25, 0xC5	; 197
    1fba:	9a 95       	dec	r25
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <LCD0_inic+0x84>
    1fbe:	00 00       	nop
    1fc0:	08 95       	ret

00001fc2 <LCD0enable>:
void LCD1_strobe(unsigned int num);
void LCD1_reboot(void);
unsigned int LCD_ticks(unsigned int num);
/***Procedure & Function***/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1fc2:	1f 93       	push	r17
    1fc4:	cf 93       	push	r28
    1fc6:	df 93       	push	r29
    1fc8:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    1fca:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1fcc:	8f b7       	in	r24, 0x3f	; 63
    1fce:	8f 77       	andi	r24, 0x7F	; 127
    1fd0:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    1fd2:	70 93 5b 03 	sts	0x035B, r23	; 0x80035b <lcd0_DDR+0x1>
    1fd6:	60 93 5a 03 	sts	0x035A, r22	; 0x80035a <lcd0_DDR>
	lcd0_PIN=pin;
    1fda:	50 93 54 03 	sts	0x0354, r21	; 0x800354 <lcd0_PIN+0x1>
    1fde:	40 93 53 03 	sts	0x0353, r20	; 0x800353 <lcd0_PIN>
	lcd0_PORT=port;
    1fe2:	30 93 5e 03 	sts	0x035E, r19	; 0x80035e <lcd0_PORT+0x1>
    1fe6:	20 93 5d 03 	sts	0x035D, r18	; 0x80035d <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    1fea:	fb 01       	movw	r30, r22
    1fec:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    1fee:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1ff2:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1ff6:	8f ef       	ldi	r24, 0xFF	; 255
    1ff8:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    1ffa:	e0 91 53 03 	lds	r30, 0x0353	; 0x800353 <lcd0_PIN>
    1ffe:	f0 91 54 03 	lds	r31, 0x0354	; 0x800354 <lcd0_PIN+0x1>
    2002:	80 81       	ld	r24, Z
    2004:	88 70       	andi	r24, 0x08	; 8
    2006:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    200a:	95 df       	rcall	.-214    	; 0x1f36 <LCD0_inic>
	SREG=tSREG;
    200c:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    200e:	8d eb       	ldi	r24, 0xBD	; 189
    2010:	9d e0       	ldi	r25, 0x0D	; 13
    2012:	99 83       	std	Y+1, r25	; 0x01
    2014:	88 83       	st	Y, r24
    2016:	81 e8       	ldi	r24, 0x81	; 129
    2018:	9e e0       	ldi	r25, 0x0E	; 14
    201a:	9b 83       	std	Y+3, r25	; 0x03
    201c:	8a 83       	std	Y+2, r24	; 0x02
    201e:	8c ef       	ldi	r24, 0xFC	; 252
    2020:	9e e0       	ldi	r25, 0x0E	; 14
    2022:	9d 83       	std	Y+5, r25	; 0x05
    2024:	8c 83       	std	Y+4, r24	; 0x04
    2026:	8e e0       	ldi	r24, 0x0E	; 14
    2028:	9f e0       	ldi	r25, 0x0F	; 15
    202a:	9f 83       	std	Y+7, r25	; 0x07
    202c:	8e 83       	std	Y+6, r24	; 0x06
    202e:	83 e1       	ldi	r24, 0x13	; 19
    2030:	9f e0       	ldi	r25, 0x0F	; 15
    2032:	99 87       	std	Y+9, r25	; 0x09
    2034:	88 87       	std	Y+8, r24	; 0x08
    2036:	8c e1       	ldi	r24, 0x1C	; 28
    2038:	9f e0       	ldi	r25, 0x0F	; 15
    203a:	9b 87       	std	Y+11, r25	; 0x0b
    203c:	8a 87       	std	Y+10, r24	; 0x0a
    203e:	8d e2       	ldi	r24, 0x2D	; 45
    2040:	9f e0       	ldi	r25, 0x0F	; 15
    2042:	9d 87       	std	Y+13, r25	; 0x0d
    2044:	8c 87       	std	Y+12, r24	; 0x0c
    2046:	8c e5       	ldi	r24, 0x5C	; 92
    2048:	9f e0       	ldi	r25, 0x0F	; 15
    204a:	9f 87       	std	Y+15, r25	; 0x0f
    204c:	8e 87       	std	Y+14, r24	; 0x0e
    204e:	80 e9       	ldi	r24, 0x90	; 144
    2050:	9f e0       	ldi	r25, 0x0F	; 15
    2052:	99 8b       	std	Y+17, r25	; 0x11
    2054:	88 8b       	std	Y+16, r24	; 0x10
    2056:	89 e6       	ldi	r24, 0x69	; 105
    2058:	9f e0       	ldi	r25, 0x0F	; 15
    205a:	9b 8b       	std	Y+19, r25	; 0x13
    205c:	8a 8b       	std	Y+18, r24	; 0x12
    205e:	88 e3       	ldi	r24, 0x38	; 56
    2060:	90 e1       	ldi	r25, 0x10	; 16
    2062:	9d 8b       	std	Y+21, r25	; 0x15
    2064:	8c 8b       	std	Y+20, r24	; 0x14
}
    2066:	ce 01       	movw	r24, r28
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	1f 91       	pop	r17
    206e:	08 95       	ret

00002070 <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    2070:	cf 93       	push	r28
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    2072:	e0 91 53 03 	lds	r30, 0x0353	; 0x800353 <lcd0_PIN>
    2076:	f0 91 54 03 	lds	r31, 0x0354	; 0x800354 <lcd0_PIN+0x1>
    207a:	c0 81       	ld	r28, Z
    207c:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    207e:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <lcd0_detect>
    2082:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    2084:	8c 23       	and	r24, r28
    2086:	09 f0       	breq	.+2      	; 0x208a <LCD0_reboot+0x1a>
		LCD0_inic();
    2088:	56 df       	rcall	.-340    	; 0x1f36 <LCD0_inic>
	lcd0_detect=tmp;
    208a:	c0 93 5c 03 	sts	0x035C, r28	; 0x80035c <lcd0_detect>
}
    208e:	cf 91       	pop	r28
    2090:	08 95       	ret

00002092 <ZNPID_set_kc>:
	return (value_1 + value_2);
}
float product(float value_1, float value_2)
{
	return (value_1 * value_2);
}
    2092:	fc 01       	movw	r30, r24
    2094:	40 83       	st	Z, r20
    2096:	51 83       	std	Z+1, r21	; 0x01
    2098:	62 83       	std	Z+2, r22	; 0x02
    209a:	73 83       	std	Z+3, r23	; 0x03
    209c:	08 95       	ret

0000209e <ZNPID_set_ki>:
    209e:	fc 01       	movw	r30, r24
    20a0:	44 83       	std	Z+4, r20	; 0x04
    20a2:	55 83       	std	Z+5, r21	; 0x05
    20a4:	66 83       	std	Z+6, r22	; 0x06
    20a6:	77 83       	std	Z+7, r23	; 0x07
    20a8:	08 95       	ret

000020aa <ZNPID_set_kd>:
    20aa:	fc 01       	movw	r30, r24
    20ac:	40 87       	std	Z+8, r20	; 0x08
    20ae:	51 87       	std	Z+9, r21	; 0x09
    20b0:	62 87       	std	Z+10, r22	; 0x0a
    20b2:	73 87       	std	Z+11, r23	; 0x0b
    20b4:	08 95       	ret

000020b6 <ZNPID_set_SP>:
    20b6:	fc 01       	movw	r30, r24
    20b8:	40 a3       	std	Z+32, r20	; 0x20
    20ba:	51 a3       	std	Z+33, r21	; 0x21
    20bc:	62 a3       	std	Z+34, r22	; 0x22
    20be:	73 a3       	std	Z+35, r23	; 0x23
    20c0:	08 95       	ret

000020c2 <ZNPIDenable>:
    20c2:	fc 01       	movw	r30, r24
    20c4:	9f b7       	in	r25, 0x3f	; 63
    20c6:	8f b7       	in	r24, 0x3f	; 63
    20c8:	8f 77       	andi	r24, 0x7F	; 127
    20ca:	8f bf       	out	0x3f, r24	; 63
    20cc:	9f bf       	out	0x3f, r25	; 63
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	a0 e8       	ldi	r26, 0x80	; 128
    20d4:	bf e3       	ldi	r27, 0x3F	; 63
    20d6:	80 83       	st	Z, r24
    20d8:	91 83       	std	Z+1, r25	; 0x01
    20da:	a2 83       	std	Z+2, r26	; 0x02
    20dc:	b3 83       	std	Z+3, r27	; 0x03
    20de:	14 82       	std	Z+4, r1	; 0x04
    20e0:	15 82       	std	Z+5, r1	; 0x05
    20e2:	16 82       	std	Z+6, r1	; 0x06
    20e4:	17 82       	std	Z+7, r1	; 0x07
    20e6:	10 86       	std	Z+8, r1	; 0x08
    20e8:	11 86       	std	Z+9, r1	; 0x09
    20ea:	12 86       	std	Z+10, r1	; 0x0a
    20ec:	13 86       	std	Z+11, r1	; 0x0b
    20ee:	14 86       	std	Z+12, r1	; 0x0c
    20f0:	15 86       	std	Z+13, r1	; 0x0d
    20f2:	16 86       	std	Z+14, r1	; 0x0e
    20f4:	17 86       	std	Z+15, r1	; 0x0f
    20f6:	10 8a       	std	Z+16, r1	; 0x10
    20f8:	11 8a       	std	Z+17, r1	; 0x11
    20fa:	12 8a       	std	Z+18, r1	; 0x12
    20fc:	13 8a       	std	Z+19, r1	; 0x13
    20fe:	14 8a       	std	Z+20, r1	; 0x14
    2100:	15 8a       	std	Z+21, r1	; 0x15
    2102:	16 8a       	std	Z+22, r1	; 0x16
    2104:	17 8a       	std	Z+23, r1	; 0x17
    2106:	10 8e       	std	Z+24, r1	; 0x18
    2108:	11 8e       	std	Z+25, r1	; 0x19
    210a:	12 8e       	std	Z+26, r1	; 0x1a
    210c:	13 8e       	std	Z+27, r1	; 0x1b
    210e:	14 8e       	std	Z+28, r1	; 0x1c
    2110:	15 8e       	std	Z+29, r1	; 0x1d
    2112:	16 8e       	std	Z+30, r1	; 0x1e
    2114:	17 8e       	std	Z+31, r1	; 0x1f
    2116:	10 a2       	std	Z+32, r1	; 0x20
    2118:	11 a2       	std	Z+33, r1	; 0x21
    211a:	12 a2       	std	Z+34, r1	; 0x22
    211c:	13 a2       	std	Z+35, r1	; 0x23
    211e:	14 a2       	std	Z+36, r1	; 0x24
    2120:	15 a2       	std	Z+37, r1	; 0x25
    2122:	16 a2       	std	Z+38, r1	; 0x26
    2124:	17 a2       	std	Z+39, r1	; 0x27
    2126:	10 a6       	std	Z+40, r1	; 0x28
    2128:	11 a6       	std	Z+41, r1	; 0x29
    212a:	12 a6       	std	Z+42, r1	; 0x2a
    212c:	13 a6       	std	Z+43, r1	; 0x2b
    212e:	89 e4       	ldi	r24, 0x49	; 73
    2130:	90 e1       	ldi	r25, 0x10	; 16
    2132:	95 a7       	std	Z+45, r25	; 0x2d
    2134:	84 a7       	std	Z+44, r24	; 0x2c
    2136:	8f e4       	ldi	r24, 0x4F	; 79
    2138:	90 e1       	ldi	r25, 0x10	; 16
    213a:	97 a7       	std	Z+47, r25	; 0x2f
    213c:	86 a7       	std	Z+46, r24	; 0x2e
    213e:	85 e5       	ldi	r24, 0x55	; 85
    2140:	90 e1       	ldi	r25, 0x10	; 16
    2142:	91 ab       	std	Z+49, r25	; 0x31
    2144:	80 ab       	std	Z+48, r24	; 0x30
    2146:	8b e5       	ldi	r24, 0x5B	; 91
    2148:	90 e1       	ldi	r25, 0x10	; 16
    214a:	93 ab       	std	Z+51, r25	; 0x33
    214c:	82 ab       	std	Z+50, r24	; 0x32
    214e:	86 ee       	ldi	r24, 0xE6	; 230
    2150:	90 e1       	ldi	r25, 0x10	; 16
    2152:	95 ab       	std	Z+53, r25	; 0x35
    2154:	84 ab       	std	Z+52, r24	; 0x34
    2156:	cf 01       	movw	r24, r30
    2158:	08 95       	ret

0000215a <integral>:
float integral(ZNPID* self, float PV, float timelapse)
{
    215a:	cf 92       	push	r12
    215c:	df 92       	push	r13
    215e:	ef 92       	push	r14
    2160:	ff 92       	push	r15
    2162:	0f 93       	push	r16
    2164:	1f 93       	push	r17
    2166:	cf 93       	push	r28
    2168:	df 93       	push	r29
    216a:	ec 01       	movw	r28, r24
    216c:	68 01       	movw	r12, r16
    216e:	79 01       	movw	r14, r18
	tmp=product(sum(delta(self->SetPoint, PV), self->Err_past), timelapse);
	tmp/=2;
    2170:	9a 01       	movw	r18, r20
    2172:	ab 01       	movw	r20, r22
    2174:	68 a1       	ldd	r22, Y+32	; 0x20
    2176:	79 a1       	ldd	r23, Y+33	; 0x21
    2178:	8a a1       	ldd	r24, Y+34	; 0x22
    217a:	9b a1       	ldd	r25, Y+35	; 0x23
    217c:	f9 d5       	rcall	.+3058   	; 0x2d70 <__subsf3>
    217e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2180:	3d 85       	ldd	r19, Y+13	; 0x0d
    2182:	4e 85       	ldd	r20, Y+14	; 0x0e
    2184:	5f 85       	ldd	r21, Y+15	; 0x0f
    2186:	f5 d5       	rcall	.+3050   	; 0x2d72 <__addsf3>
    2188:	a7 01       	movw	r20, r14
    218a:	96 01       	movw	r18, r12
    218c:	a9 d7       	rcall	.+3922   	; 0x30e0 <__mulsf3>
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e0       	ldi	r20, 0x00	; 0
    2194:	5f e3       	ldi	r21, 0x3F	; 63
    2196:	a4 d7       	rcall	.+3912   	; 0x30e0 <__mulsf3>
    2198:	60 93 82 03 	sts	0x0382, r22	; 0x800382 <tmp>
    219c:	70 93 83 03 	sts	0x0383, r23	; 0x800383 <tmp+0x1>
    21a0:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <tmp+0x2>
    21a4:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <tmp+0x3>
	return (self->integral += tmp);
    21a8:	28 8d       	ldd	r18, Y+24	; 0x18
    21aa:	39 8d       	ldd	r19, Y+25	; 0x19
    21ac:	4a 8d       	ldd	r20, Y+26	; 0x1a
    21ae:	5b 8d       	ldd	r21, Y+27	; 0x1b
    21b0:	e0 d5       	rcall	.+3008   	; 0x2d72 <__addsf3>
    21b2:	68 8f       	std	Y+24, r22	; 0x18
    21b4:	79 8f       	std	Y+25, r23	; 0x19
    21b6:	8a 8f       	std	Y+26, r24	; 0x1a
    21b8:	9b 8f       	std	Y+27, r25	; 0x1b
}
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	1f 91       	pop	r17
    21c0:	0f 91       	pop	r16
    21c2:	ff 90       	pop	r15
    21c4:	ef 90       	pop	r14
    21c6:	df 90       	pop	r13
    21c8:	cf 90       	pop	r12
    21ca:	08 95       	ret

000021cc <ZNPID_output>:
{
	tmp=delta(delta(self->SetPoint, PV), self->Err_past);
	return (self->derivative = (tmp / timelapse));
}
float ZNPID_output(ZNPID* self, float PV, float timelapse)
{
    21cc:	4f 92       	push	r4
    21ce:	5f 92       	push	r5
    21d0:	6f 92       	push	r6
    21d2:	7f 92       	push	r7
    21d4:	8f 92       	push	r8
    21d6:	9f 92       	push	r9
    21d8:	af 92       	push	r10
    21da:	bf 92       	push	r11
    21dc:	cf 92       	push	r12
    21de:	df 92       	push	r13
    21e0:	ef 92       	push	r14
    21e2:	ff 92       	push	r15
    21e4:	0f 93       	push	r16
    21e6:	1f 93       	push	r17
    21e8:	cf 93       	push	r28
    21ea:	df 93       	push	r29
    21ec:	00 d0       	rcall	.+0      	; 0x21ee <ZNPID_output+0x22>
    21ee:	00 d0       	rcall	.+0      	; 0x21f0 <ZNPID_output+0x24>
    21f0:	00 d0       	rcall	.+0      	; 0x21f2 <ZNPID_output+0x26>
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
    21fa:	6a 01       	movw	r12, r20
    21fc:	7b 01       	movw	r14, r22
    21fe:	48 01       	movw	r8, r16
    2200:	59 01       	movw	r10, r18
	float result;
	self->PV=PV;
    2202:	dc 01       	movw	r26, r24
    2204:	94 96       	adiw	r26, 0x24	; 36
    2206:	4d 93       	st	X+, r20
    2208:	5d 93       	st	X+, r21
    220a:	6d 93       	st	X+, r22
    220c:	7c 93       	st	X, r23
    220e:	97 97       	sbiw	r26, 0x27	; 39
{
	self->SetPoint=setpoint;
}
float delta(float present_value, float past_value)
{
	return (present_value - past_value);
    2210:	9a 01       	movw	r18, r20
    2212:	ab 01       	movw	r20, r22
    2214:	90 96       	adiw	r26, 0x20	; 32
    2216:	6d 91       	ld	r22, X+
    2218:	7d 91       	ld	r23, X+
    221a:	8d 91       	ld	r24, X+
    221c:	9c 91       	ld	r25, X
    221e:	93 97       	sbiw	r26, 0x23	; 35
    2220:	a7 d5       	rcall	.+2894   	; 0x2d70 <__subsf3>
}
float ZNPID_output(ZNPID* self, float PV, float timelapse)
{
	float result;
	self->PV=PV;
	self->dy=delta(self->SetPoint, PV);
    2222:	ed 81       	ldd	r30, Y+5	; 0x05
    2224:	fe 81       	ldd	r31, Y+6	; 0x06
    2226:	60 8b       	std	Z+16, r22	; 0x10
    2228:	71 8b       	std	Z+17, r23	; 0x11
    222a:	82 8b       	std	Z+18, r24	; 0x12
    222c:	93 8b       	std	Z+19, r25	; 0x13
	self->dx=timelapse;
    222e:	84 8a       	std	Z+20, r8	; 0x14
    2230:	95 8a       	std	Z+21, r9	; 0x15
    2232:	a6 8a       	std	Z+22, r10	; 0x16
    2234:	b7 8a       	std	Z+23, r11	; 0x17
{
	return (value_1 + value_2);
}
float product(float value_1, float value_2)
{
	return (value_1 * value_2);
    2236:	20 81       	ld	r18, Z
    2238:	31 81       	ldd	r19, Z+1	; 0x01
    223a:	42 81       	ldd	r20, Z+2	; 0x02
    223c:	53 81       	ldd	r21, Z+3	; 0x03
    223e:	50 d7       	rcall	.+3744   	; 0x30e0 <__mulsf3>
    2240:	2b 01       	movw	r4, r22
    2242:	3c 01       	movw	r6, r24
	float result;
	self->PV=PV;
	self->dy=delta(self->SetPoint, PV);
	self->dx=timelapse;
	result=product(self->kc, self->dy);
	tmp=product(self->ki, integral(self, PV, timelapse));
    2244:	95 01       	movw	r18, r10
    2246:	84 01       	movw	r16, r8
    2248:	b7 01       	movw	r22, r14
    224a:	a6 01       	movw	r20, r12
    224c:	8d 81       	ldd	r24, Y+5	; 0x05
    224e:	9e 81       	ldd	r25, Y+6	; 0x06
    2250:	84 df       	rcall	.-248    	; 0x215a <integral>
{
	return (present_value - past_value);
}
float sum(float value_1, float value_2)
{
	return (value_1 + value_2);
    2252:	ed 81       	ldd	r30, Y+5	; 0x05
    2254:	fe 81       	ldd	r31, Y+6	; 0x06
    2256:	24 81       	ldd	r18, Z+4	; 0x04
    2258:	35 81       	ldd	r19, Z+5	; 0x05
    225a:	46 81       	ldd	r20, Z+6	; 0x06
    225c:	57 81       	ldd	r21, Z+7	; 0x07
    225e:	40 d7       	rcall	.+3712   	; 0x30e0 <__mulsf3>
    2260:	a3 01       	movw	r20, r6
    2262:	92 01       	movw	r18, r4
    2264:	86 d5       	rcall	.+2828   	; 0x2d72 <__addsf3>
    2266:	2b 01       	movw	r4, r22
    2268:	3c 01       	movw	r6, r24
	return (self->integral += tmp);
}
float derivative(ZNPID* self, float PV, float timelapse)
{
	tmp=delta(delta(self->SetPoint, PV), self->Err_past);
	return (self->derivative = (tmp / timelapse));
    226a:	a7 01       	movw	r20, r14
    226c:	96 01       	movw	r18, r12
    226e:	ad 81       	ldd	r26, Y+5	; 0x05
    2270:	be 81       	ldd	r27, Y+6	; 0x06
    2272:	90 96       	adiw	r26, 0x20	; 32
    2274:	6d 91       	ld	r22, X+
    2276:	7d 91       	ld	r23, X+
    2278:	8d 91       	ld	r24, X+
    227a:	9c 91       	ld	r25, X
    227c:	93 97       	sbiw	r26, 0x23	; 35
    227e:	78 d5       	rcall	.+2800   	; 0x2d70 <__subsf3>
    2280:	ed 81       	ldd	r30, Y+5	; 0x05
    2282:	fe 81       	ldd	r31, Y+6	; 0x06
    2284:	24 85       	ldd	r18, Z+12	; 0x0c
    2286:	35 85       	ldd	r19, Z+13	; 0x0d
    2288:	46 85       	ldd	r20, Z+14	; 0x0e
    228a:	57 85       	ldd	r21, Z+15	; 0x0f
    228c:	71 d5       	rcall	.+2786   	; 0x2d70 <__subsf3>
    228e:	a5 01       	movw	r20, r10
    2290:	94 01       	movw	r18, r8
    2292:	d7 d5       	rcall	.+2990   	; 0x2e42 <__divsf3>
    2294:	4b 01       	movw	r8, r22
    2296:	5c 01       	movw	r10, r24
    2298:	ad 81       	ldd	r26, Y+5	; 0x05
    229a:	be 81       	ldd	r27, Y+6	; 0x06
    229c:	5c 96       	adiw	r26, 0x1c	; 28
    229e:	6d 93       	st	X+, r22
    22a0:	7d 93       	st	X+, r23
    22a2:	8d 93       	st	X+, r24
    22a4:	9c 93       	st	X, r25
    22a6:	5f 97       	sbiw	r26, 0x1f	; 31
{
	return (value_1 + value_2);
}
float product(float value_1, float value_2)
{
	return (value_1 * value_2);
    22a8:	18 96       	adiw	r26, 0x08	; 8
    22aa:	2d 91       	ld	r18, X+
    22ac:	3d 91       	ld	r19, X+
    22ae:	4d 91       	ld	r20, X+
    22b0:	5c 91       	ld	r21, X
    22b2:	1b 97       	sbiw	r26, 0x0b	; 11
    22b4:	15 d7       	rcall	.+3626   	; 0x30e0 <__mulsf3>
    22b6:	9b 01       	movw	r18, r22
    22b8:	ac 01       	movw	r20, r24
    22ba:	60 93 82 03 	sts	0x0382, r22	; 0x800382 <tmp>
	self->dy=delta(self->SetPoint, PV);
	self->dx=timelapse;
	result=product(self->kc, self->dy);
	tmp=product(self->ki, integral(self, PV, timelapse));
	result=sum(result, tmp);
	tmp=product(self->kd, derivative(self, PV, timelapse));
    22be:	70 93 83 03 	sts	0x0383, r23	; 0x800383 <tmp+0x1>
    22c2:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <tmp+0x2>
    22c6:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <tmp+0x3>
{
	return (present_value - past_value);
}
float sum(float value_1, float value_2)
{
	return (value_1 + value_2);
    22ca:	c3 01       	movw	r24, r6
    22cc:	b2 01       	movw	r22, r4
    22ce:	51 d5       	rcall	.+2722   	; 0x2d72 <__addsf3>
    22d0:	6b 01       	movw	r12, r22
    22d2:	7c 01       	movw	r14, r24
    22d4:	ed 81       	ldd	r30, Y+5	; 0x05
	result=product(self->kc, self->dy);
	tmp=product(self->ki, integral(self, PV, timelapse));
	result=sum(result, tmp);
	tmp=product(self->kd, derivative(self, PV, timelapse));
	result=sum(result, tmp);
	self->Err_past = self->dy;
    22d6:	fe 81       	ldd	r31, Y+6	; 0x06
    22d8:	40 88       	ldd	r4, Z+16	; 0x10
    22da:	51 88       	ldd	r5, Z+17	; 0x11
    22dc:	62 88       	ldd	r6, Z+18	; 0x12
    22de:	73 88       	ldd	r7, Z+19	; 0x13
    22e0:	44 86       	std	Z+12, r4	; 0x0c
    22e2:	55 86       	std	Z+13, r5	; 0x0d
    22e4:	66 86       	std	Z+14, r6	; 0x0e
    22e6:	77 86       	std	Z+15, r7	; 0x0f
	self->OP=result;
    22e8:	60 a7       	std	Z+40, r22	; 0x28
    22ea:	71 a7       	std	Z+41, r23	; 0x29
    22ec:	82 a7       	std	Z+42, r24	; 0x2a
    22ee:	93 a7       	std	Z+43, r25	; 0x2b
	if(result > ZNPID_outMAX)
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 ec       	ldi	r19, 0xC0	; 192
    22f4:	4f e7       	ldi	r20, 0x7F	; 127
    22f6:	54 e4       	ldi	r21, 0x44	; 68
    22f8:	ef d6       	rcall	.+3550   	; 0x30d8 <__gesf2>
    22fa:	18 16       	cp	r1, r24
    22fc:	94 f5       	brge	.+100    	; 0x2362 <ZNPID_output+0x196>
    22fe:	ad 81       	ldd	r26, Y+5	; 0x05
		self->integral=ZNPID_outMAX - (self->dy * self->dx) - (self->derivative * self->dx * self->dx);
    2300:	be 81       	ldd	r27, Y+6	; 0x06
    2302:	54 96       	adiw	r26, 0x14	; 20
    2304:	8d 91       	ld	r24, X+
    2306:	9d 91       	ld	r25, X+
    2308:	0d 90       	ld	r0, X+
    230a:	bc 91       	ld	r27, X
    230c:	a0 2d       	mov	r26, r0
    230e:	89 83       	std	Y+1, r24	; 0x01
    2310:	9a 83       	std	Y+2, r25	; 0x02
    2312:	ab 83       	std	Y+3, r26	; 0x03
    2314:	bc 83       	std	Y+4, r27	; 0x04
    2316:	9c 01       	movw	r18, r24
    2318:	ad 01       	movw	r20, r26
    231a:	c3 01       	movw	r24, r6
    231c:	b2 01       	movw	r22, r4
    231e:	e0 d6       	rcall	.+3520   	; 0x30e0 <__mulsf3>
    2320:	9b 01       	movw	r18, r22
    2322:	ac 01       	movw	r20, r24
    2324:	60 e0       	ldi	r22, 0x00	; 0
    2326:	70 ec       	ldi	r23, 0xC0	; 192
    2328:	8f e7       	ldi	r24, 0x7F	; 127
    232a:	94 e4       	ldi	r25, 0x44	; 68
    232c:	21 d5       	rcall	.+2626   	; 0x2d70 <__subsf3>
    232e:	2b 01       	movw	r4, r22
    2330:	3c 01       	movw	r6, r24
    2332:	a5 01       	movw	r20, r10
    2334:	94 01       	movw	r18, r8
    2336:	69 81       	ldd	r22, Y+1	; 0x01
    2338:	7a 81       	ldd	r23, Y+2	; 0x02
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	9c 81       	ldd	r25, Y+4	; 0x04
    233e:	d0 d6       	rcall	.+3488   	; 0x30e0 <__mulsf3>
    2340:	29 81       	ldd	r18, Y+1	; 0x01
    2342:	3a 81       	ldd	r19, Y+2	; 0x02
    2344:	4b 81       	ldd	r20, Y+3	; 0x03
    2346:	5c 81       	ldd	r21, Y+4	; 0x04
    2348:	cb d6       	rcall	.+3478   	; 0x30e0 <__mulsf3>
    234a:	9b 01       	movw	r18, r22
    234c:	ac 01       	movw	r20, r24
    234e:	c3 01       	movw	r24, r6
    2350:	b2 01       	movw	r22, r4
    2352:	0e d5       	rcall	.+2588   	; 0x2d70 <__subsf3>
    2354:	ed 81       	ldd	r30, Y+5	; 0x05
    2356:	fe 81       	ldd	r31, Y+6	; 0x06
    2358:	60 8f       	std	Z+24, r22	; 0x18
    235a:	71 8f       	std	Z+25, r23	; 0x19
    235c:	82 8f       	std	Z+26, r24	; 0x1a
    235e:	93 8f       	std	Z+27, r25	; 0x1b
    2360:	38 c0       	rjmp	.+112    	; 0x23d2 <ZNPID_output+0x206>
	else if(result < ZNPID_outMIN)
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 ec       	ldi	r19, 0xC0	; 192
    2366:	4f e7       	ldi	r20, 0x7F	; 127
    2368:	54 ec       	ldi	r21, 0xC4	; 196
    236a:	c7 01       	movw	r24, r14
    236c:	b6 01       	movw	r22, r12
    236e:	65 d5       	rcall	.+2762   	; 0x2e3a <__cmpsf2>
    2370:	88 23       	and	r24, r24
    2372:	7c f5       	brge	.+94     	; 0x23d2 <ZNPID_output+0x206>
		self->integral=ZNPID_outMIN + (self->dy * self->dx) + (self->derivative * self->dx * self->dx);
    2374:	ad 81       	ldd	r26, Y+5	; 0x05
    2376:	be 81       	ldd	r27, Y+6	; 0x06
    2378:	54 96       	adiw	r26, 0x14	; 20
    237a:	8d 91       	ld	r24, X+
    237c:	9d 91       	ld	r25, X+
    237e:	0d 90       	ld	r0, X+
    2380:	bc 91       	ld	r27, X
    2382:	a0 2d       	mov	r26, r0
    2384:	89 83       	std	Y+1, r24	; 0x01
    2386:	9a 83       	std	Y+2, r25	; 0x02
    2388:	ab 83       	std	Y+3, r26	; 0x03
    238a:	bc 83       	std	Y+4, r27	; 0x04
    238c:	9c 01       	movw	r18, r24
    238e:	ad 01       	movw	r20, r26
    2390:	c3 01       	movw	r24, r6
    2392:	b2 01       	movw	r22, r4
    2394:	a5 d6       	rcall	.+3402   	; 0x30e0 <__mulsf3>
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 ec       	ldi	r19, 0xC0	; 192
    239a:	4f e7       	ldi	r20, 0x7F	; 127
    239c:	54 e4       	ldi	r21, 0x44	; 68
    239e:	e8 d4       	rcall	.+2512   	; 0x2d70 <__subsf3>
    23a0:	2b 01       	movw	r4, r22
    23a2:	3c 01       	movw	r6, r24
    23a4:	a5 01       	movw	r20, r10
    23a6:	94 01       	movw	r18, r8
    23a8:	69 81       	ldd	r22, Y+1	; 0x01
    23aa:	7a 81       	ldd	r23, Y+2	; 0x02
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	9c 81       	ldd	r25, Y+4	; 0x04
    23b0:	97 d6       	rcall	.+3374   	; 0x30e0 <__mulsf3>
    23b2:	29 81       	ldd	r18, Y+1	; 0x01
    23b4:	3a 81       	ldd	r19, Y+2	; 0x02
    23b6:	4b 81       	ldd	r20, Y+3	; 0x03
    23b8:	5c 81       	ldd	r21, Y+4	; 0x04
    23ba:	92 d6       	rcall	.+3364   	; 0x30e0 <__mulsf3>
    23bc:	9b 01       	movw	r18, r22
    23be:	ac 01       	movw	r20, r24
    23c0:	c3 01       	movw	r24, r6
    23c2:	b2 01       	movw	r22, r4
    23c4:	d6 d4       	rcall	.+2476   	; 0x2d72 <__addsf3>
    23c6:	ed 81       	ldd	r30, Y+5	; 0x05
    23c8:	fe 81       	ldd	r31, Y+6	; 0x06
    23ca:	60 8f       	std	Z+24, r22	; 0x18
    23cc:	71 8f       	std	Z+25, r23	; 0x19
    23ce:	82 8f       	std	Z+26, r24	; 0x1a
    23d0:	93 8f       	std	Z+27, r25	; 0x1b
    23d2:	c7 01       	movw	r24, r14
	return result;
}
    23d4:	b6 01       	movw	r22, r12
    23d6:	26 96       	adiw	r28, 0x06	; 6
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	df 91       	pop	r29
    23e4:	cf 91       	pop	r28
    23e6:	1f 91       	pop	r17
    23e8:	0f 91       	pop	r16
    23ea:	ff 90       	pop	r15
    23ec:	ef 90       	pop	r14
    23ee:	df 90       	pop	r13
    23f0:	cf 90       	pop	r12
    23f2:	bf 90       	pop	r11
    23f4:	af 90       	pop	r10
    23f6:	9f 90       	pop	r9
    23f8:	8f 90       	pop	r8
    23fa:	7f 90       	pop	r7
    23fc:	6f 90       	pop	r6
    23fe:	5f 90       	pop	r5
    2400:	4f 90       	pop	r4
    2402:	08 95       	ret

00002404 <PORTINIT>:
** procedure and function
*/
void PORTINIT(void)
{
	//INPUT
	DDRF=0x00;
    2404:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTF=0x0F;
    2408:	8f e0       	ldi	r24, 0x0F	; 15
    240a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	//OUTPUT
	DDRB|=(1<<5) | (1<<6) | (1<<7);
    240e:	87 b3       	in	r24, 0x17	; 23
    2410:	80 6e       	ori	r24, 0xE0	; 224
    2412:	87 bb       	out	0x17, r24	; 23
    2414:	08 95       	ret

00002416 <main>:
** Header
*/
void PORTINIT();
/****MAIN****/
int main(void)
{
    2416:	cf 93       	push	r28
    2418:	df 93       	push	r29
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
    241e:	c5 5d       	subi	r28, 0xD5	; 213
    2420:	d1 09       	sbc	r29, r1
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	de bf       	out	0x3e, r29	; 62
    2428:	0f be       	out	0x3f, r0	; 63
    242a:	cd bf       	out	0x3d, r28	; 61
	PORTINIT(); // Inic Ports
    242c:	eb df       	rcall	.-42     	; 0x2404 <PORTINIT>
	/***INICIALIZE OBJECTS***/
	function= FUNCenable(); // Function Library
    242e:	ce 01       	movw	r24, r28
    2430:	8e 57       	subi	r24, 0x7E	; 126
    2432:	9f 4f       	sbci	r25, 0xFF	; 255
    2434:	28 d8       	rcall	.-4016   	; 0x1486 <FUNCenable>
    2436:	8c e4       	ldi	r24, 0x4C	; 76
    2438:	fe 01       	movw	r30, r28
    243a:	ee 57       	subi	r30, 0x7E	; 126
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	ac e8       	ldi	r26, 0x8C	; 140
    2440:	b3 e0       	ldi	r27, 0x03	; 3
    2442:	01 90       	ld	r0, Z+
    2444:	0d 92       	st	X+, r0
    2446:	8a 95       	dec	r24
    2448:	e1 f7       	brne	.-8      	; 0x2442 <main+0x2c>
	LCD0 lcd0 = LCD0enable(&DDRA,&PINA,&PORTA); // LCD Display 4X20
    244a:	2b e3       	ldi	r18, 0x3B	; 59
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	49 e3       	ldi	r20, 0x39	; 57
    2450:	50 e0       	ldi	r21, 0x00	; 0
    2452:	6a e3       	ldi	r22, 0x3A	; 58
    2454:	70 e0       	ldi	r23, 0x00	; 0
    2456:	ce 01       	movw	r24, r28
    2458:	c8 96       	adiw	r24, 0x38	; 56
    245a:	b3 dd       	rcall	.-1178   	; 0x1fc2 <LCD0enable>
    245c:	26 96       	adiw	r28, 0x06	; 6
    245e:	6e ac       	ldd	r6, Y+62	; 0x3e
    2460:	7f ac       	ldd	r7, Y+63	; 0x3f
    2462:	26 97       	sbiw	r28, 0x06	; 6
    2464:	2a 96       	adiw	r28, 0x0a	; 10
    2466:	8e ad       	ldd	r24, Y+62	; 0x3e
    2468:	9f ad       	ldd	r25, Y+63	; 0x3f
    246a:	2a 97       	sbiw	r28, 0x0a	; 10
    246c:	c2 53       	subi	r28, 0x32	; 50
    246e:	df 4f       	sbci	r29, 0xFF	; 255
    2470:	99 83       	std	Y+1, r25	; 0x01
    2472:	88 83       	st	Y, r24
    2474:	ce 5c       	subi	r28, 0xCE	; 206
    2476:	d0 40       	sbci	r29, 0x00	; 0
    2478:	2c 96       	adiw	r28, 0x0c	; 12
    247a:	4e ac       	ldd	r4, Y+62	; 0x3e
    247c:	5f ac       	ldd	r5, Y+63	; 0x3f
    247e:	2c 97       	sbiw	r28, 0x0c	; 12
	KEYPAD keypad = KEYPADenable(&DDRE,&PINE,&PORTE); // Keyboard
    2480:	43 e2       	ldi	r20, 0x23	; 35
    2482:	50 e0       	ldi	r21, 0x00	; 0
    2484:	61 e2       	ldi	r22, 0x21	; 33
    2486:	70 e0       	ldi	r23, 0x00	; 0
    2488:	82 e2       	ldi	r24, 0x22	; 34
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	1b db       	rcall	.-2506   	; 0x1ac4 <KEYPADenable>
    248e:	2f 96       	adiw	r28, 0x0f	; 15
    2490:	2f af       	std	Y+63, r18	; 0x3f
    2492:	2f 97       	sbiw	r28, 0x0f	; 15
    2494:	60 96       	adiw	r28, 0x10	; 16
    2496:	3f af       	std	Y+63, r19	; 0x3f
    2498:	60 97       	sbiw	r28, 0x10	; 16
    249a:	61 96       	adiw	r28, 0x11	; 17
    249c:	4f af       	std	Y+63, r20	; 0x3f
    249e:	61 97       	sbiw	r28, 0x11	; 17
    24a0:	62 96       	adiw	r28, 0x12	; 18
    24a2:	5f af       	std	Y+63, r21	; 0x3f
    24a4:	62 97       	sbiw	r28, 0x12	; 18
    24a6:	63 96       	adiw	r28, 0x13	; 19
    24a8:	6f af       	std	Y+63, r22	; 0x3f
    24aa:	63 97       	sbiw	r28, 0x13	; 19
    24ac:	64 96       	adiw	r28, 0x14	; 20
    24ae:	7f af       	std	Y+63, r23	; 0x3f
    24b0:	64 97       	sbiw	r28, 0x14	; 20
    24b2:	65 96       	adiw	r28, 0x15	; 21
    24b4:	8f af       	std	Y+63, r24	; 0x3f
    24b6:	65 97       	sbiw	r28, 0x15	; 21
    24b8:	66 96       	adiw	r28, 0x16	; 22
    24ba:	9f af       	std	Y+63, r25	; 0x3f
    24bc:	66 97       	sbiw	r28, 0x16	; 22
    24be:	64 96       	adiw	r28, 0x14	; 20
    24c0:	8e ac       	ldd	r8, Y+62	; 0x3e
    24c2:	9f ac       	ldd	r9, Y+63	; 0x3f
    24c4:	64 97       	sbiw	r28, 0x14	; 20
    24c6:	66 96       	adiw	r28, 0x16	; 22
    24c8:	2e ac       	ldd	r2, Y+62	; 0x3e
    24ca:	3f ac       	ldd	r3, Y+63	; 0x3f
    24cc:	66 97       	sbiw	r28, 0x16	; 22
	ANALOG analog = ANALOGenable(1, 128, 1, 0); // Channel 0 for Position
    24ce:	1f 92       	push	r1
    24d0:	1f 92       	push	r1
    24d2:	1f 92       	push	r1
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	8f 93       	push	r24
    24d8:	90 e8       	ldi	r25, 0x80	; 128
    24da:	9f 93       	push	r25
    24dc:	8f 93       	push	r24
    24de:	0e 94 a9 01 	call	0x352	; 0x352 <ANALOGenable>
    24e2:	c0 53       	subi	r28, 0x30	; 48
    24e4:	df 4f       	sbci	r29, 0xFF	; 255
    24e6:	68 83       	st	Y, r22
    24e8:	79 83       	std	Y+1, r23	; 0x01
    24ea:	8a 83       	std	Y+2, r24	; 0x02
    24ec:	9b 83       	std	Y+3, r25	; 0x03
    24ee:	c0 5d       	subi	r28, 0xD0	; 208
    24f0:	d0 40       	sbci	r29, 0x00	; 0
	TIMER_COUNTER0 timer0 = TIMER_COUNTER0enable(2,2); // 1Hz to HC595
    24f2:	42 e0       	ldi	r20, 0x02	; 2
    24f4:	62 e0       	ldi	r22, 0x02	; 2
    24f6:	ce 01       	movw	r24, r28
    24f8:	8a 5a       	subi	r24, 0xAA	; 170
    24fa:	9f 4f       	sbci	r25, 0xFF	; 255
    24fc:	0e 94 c9 03 	call	0x792	; 0x792 <TIMER_COUNTER0enable>
	TIMER_COUNTER1 timer1 = TIMER_COUNTER1enable(9,0); // PWM Positioning
    2500:	40 e0       	ldi	r20, 0x00	; 0
    2502:	69 e0       	ldi	r22, 0x09	; 9
    2504:	ce 01       	movw	r24, r28
    2506:	8a 59       	subi	r24, 0x9A	; 154
    2508:	9f 4f       	sbci	r25, 0xFF	; 255
    250a:	0e 94 0b 04 	call	0x816	; 0x816 <TIMER_COUNTER1enable>
    250e:	e0 96       	adiw	r28, 0x30	; 48
    2510:	ae ad       	ldd	r26, Y+62	; 0x3e
    2512:	bf ad       	ldd	r27, Y+63	; 0x3f
    2514:	e0 97       	sbiw	r28, 0x30	; 48
    2516:	cc 52       	subi	r28, 0x2C	; 44
    2518:	df 4f       	sbci	r29, 0xFF	; 255
    251a:	b9 83       	std	Y+1, r27	; 0x01
    251c:	a8 83       	st	Y, r26
    251e:	c4 5d       	subi	r28, 0xD4	; 212
    2520:	d0 40       	sbci	r29, 0x00	; 0
	shift = HC595enable(&DDRG,&PORTG,2,0,1);
    2522:	01 e0       	ldi	r16, 0x01	; 1
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	42 e0       	ldi	r20, 0x02	; 2
    2528:	65 e6       	ldi	r22, 0x65	; 101
    252a:	70 e0       	ldi	r23, 0x00	; 0
    252c:	84 e6       	ldi	r24, 0x64	; 100
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	0e 94 46 01 	call	0x28c	; 0x28c <HC595enable>
    2534:	20 93 86 03 	sts	0x0386, r18	; 0x800386 <shift>
    2538:	30 93 87 03 	sts	0x0387, r19	; 0x800387 <shift+0x1>
    253c:	40 93 88 03 	sts	0x0388, r20	; 0x800388 <shift+0x2>
    2540:	50 93 89 03 	sts	0x0389, r21	; 0x800389 <shift+0x3>
    2544:	60 93 8a 03 	sts	0x038A, r22	; 0x80038a <shift+0x4>
    2548:	70 93 8b 03 	sts	0x038B, r23	; 0x80038b <shift+0x5>
	pid_1 = ZNPIDenable();
    254c:	ce 01       	movw	r24, r28
    254e:	8e 57       	subi	r24, 0x7E	; 126
    2550:	9f 4f       	sbci	r25, 0xFF	; 255
    2552:	b7 dd       	rcall	.-1170   	; 0x20c2 <ZNPIDenable>
    2554:	86 e3       	ldi	r24, 0x36	; 54
    2556:	fe 01       	movw	r30, r28
    2558:	ee 57       	subi	r30, 0x7E	; 126
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	ae ed       	ldi	r26, 0xDE	; 222
    255e:	b3 e0       	ldi	r27, 0x03	; 3
    2560:	01 90       	ld	r0, Z+
    2562:	0d 92       	st	X+, r0
    2564:	8a 95       	dec	r24
    2566:	e1 f7       	brne	.-8      	; 0x2560 <main+0x14a>
	pid_2 = ZNPIDenable();
    2568:	ce 01       	movw	r24, r28
    256a:	8e 57       	subi	r24, 0x7E	; 126
    256c:	9f 4f       	sbci	r25, 0xFF	; 255
    256e:	a9 dd       	rcall	.-1198   	; 0x20c2 <ZNPIDenable>
    2570:	86 e3       	ldi	r24, 0x36	; 54
    2572:	fe 01       	movw	r30, r28
    2574:	ee 57       	subi	r30, 0x7E	; 126
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	a4 e1       	ldi	r26, 0x14	; 20
    257a:	b4 e0       	ldi	r27, 0x04	; 4
    257c:	01 90       	ld	r0, Z+
    257e:	0d 92       	st	X+, r0
    2580:	8a 95       	dec	r24
    2582:	e1 f7       	brne	.-8      	; 0x257c <main+0x166>
    2584:	ce 01       	movw	r24, r28
	/******/
	char Menu='1'; // Main menu selector
	char str[6]="0"; // analog vector
    2586:	8a 58       	subi	r24, 0x8A	; 138
    2588:	9f 4f       	sbci	r25, 0xFF	; 255
    258a:	fc 01       	movw	r30, r24
    258c:	20 e3       	ldi	r18, 0x30	; 48
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	21 93       	st	Z+, r18
    2592:	31 93       	st	Z+, r19
    2594:	24 e0       	ldi	r18, 0x04	; 4
    2596:	df 01       	movw	r26, r30
    2598:	1d 92       	st	X+, r1
    259a:	2a 95       	dec	r18
    259c:	e9 f7       	brne	.-6      	; 0x2598 <main+0x182>
    259e:	29 e3       	ldi	r18, 0x39	; 57
	int16_t mvalue=90; // manual position reading
	int16_t m_value; // manual positioning
	char mstr[6]="90"; // manual position vector
    25a0:	30 e3       	ldi	r19, 0x30	; 48
    25a2:	ee 96       	adiw	r28, 0x3e	; 62
    25a4:	3f af       	std	Y+63, r19	; 0x3f
    25a6:	2e af       	std	Y+62, r18	; 0x3e
    25a8:	ee 97       	sbiw	r28, 0x3e	; 62
    25aa:	c2 58       	subi	r28, 0x82	; 130
    25ac:	df 4f       	sbci	r29, 0xFF	; 255
    25ae:	19 82       	std	Y+1, r1	; 0x01
    25b0:	18 82       	st	Y, r1
    25b2:	ce 57       	subi	r28, 0x7E	; 126
    25b4:	d0 40       	sbci	r29, 0x00	; 0
    25b6:	c0 58       	subi	r28, 0x80	; 128
    25b8:	df 4f       	sbci	r29, 0xFF	; 255
    25ba:	19 82       	std	Y+1, r1	; 0x01
    25bc:	18 82       	st	Y, r1
    25be:	c0 58       	subi	r28, 0x80	; 128
    25c0:	d0 40       	sbci	r29, 0x00	; 0
    25c2:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <ptr+0x1>
	ptr=str;
    25c6:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <ptr>
    25ca:	6e 96       	adiw	r28, 0x1e	; 30
	/***Parameters timers***/
	timer0.compare(249);
    25cc:	ee ad       	ldd	r30, Y+62	; 0x3e
    25ce:	ff ad       	ldd	r31, Y+63	; 0x3f
    25d0:	6e 97       	sbiw	r28, 0x1e	; 30
    25d2:	89 ef       	ldi	r24, 0xF9	; 249
    25d4:	09 95       	icall
    25d6:	a4 96       	adiw	r28, 0x24	; 36
	timer0.start(64);
    25d8:	ee ad       	ldd	r30, Y+62	; 0x3e
    25da:	ff ad       	ldd	r31, Y+63	; 0x3f
    25dc:	a4 97       	sbiw	r28, 0x24	; 36
    25de:	80 e4       	ldi	r24, 0x40	; 64
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	09 95       	icall
    25e4:	aa 96       	adiw	r28, 0x2a	; 42
	timer1.compoutmodeB(2);
    25e6:	ee ad       	ldd	r30, Y+62	; 0x3e
    25e8:	ff ad       	ldd	r31, Y+63	; 0x3f
    25ea:	aa 97       	sbiw	r28, 0x2a	; 42
    25ec:	82 e0       	ldi	r24, 0x02	; 2
    25ee:	09 95       	icall
    25f0:	ae 96       	adiw	r28, 0x2e	; 46
	timer1.compareA(20000);
    25f2:	ee ad       	ldd	r30, Y+62	; 0x3e
    25f4:	ff ad       	ldd	r31, Y+63	; 0x3f
    25f6:	ae 97       	sbiw	r28, 0x2e	; 46
    25f8:	80 e2       	ldi	r24, 0x20	; 32
    25fa:	9e e4       	ldi	r25, 0x4E	; 78
    25fc:	09 95       	icall
    25fe:	e4 96       	adiw	r28, 0x34	; 52
	timer1.start(8);
    2600:	ee ad       	ldd	r30, Y+62	; 0x3e
    2602:	ff ad       	ldd	r31, Y+63	; 0x3f
    2604:	e4 97       	sbiw	r28, 0x34	; 52
    2606:	88 e0       	ldi	r24, 0x08	; 8
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	09 95       	icall
    260c:	0e ed       	ldi	r16, 0xDE	; 222
	pid_1.set_kc(&pid_1, 1);
    260e:	13 e0       	ldi	r17, 0x03	; 3
    2610:	d8 01       	movw	r26, r16
    2612:	9c 96       	adiw	r26, 0x2c	; 44
    2614:	ed 91       	ld	r30, X+
    2616:	fc 91       	ld	r31, X
    2618:	9d 97       	sbiw	r26, 0x2d	; 45
    261a:	40 e0       	ldi	r20, 0x00	; 0
    261c:	50 e0       	ldi	r21, 0x00	; 0
    261e:	60 e8       	ldi	r22, 0x80	; 128
    2620:	7f e3       	ldi	r23, 0x3F	; 63
    2622:	c8 01       	movw	r24, r16
    2624:	09 95       	icall
    2626:	d8 01       	movw	r26, r16
	pid_1.set_kd(&pid_1, 0.2); //
    2628:	d0 96       	adiw	r26, 0x30	; 48
    262a:	ed 91       	ld	r30, X+
    262c:	fc 91       	ld	r31, X
    262e:	d1 97       	sbiw	r26, 0x31	; 49
    2630:	4d ec       	ldi	r20, 0xCD	; 205
    2632:	5c ec       	ldi	r21, 0xCC	; 204
    2634:	6c e4       	ldi	r22, 0x4C	; 76
    2636:	7e e3       	ldi	r23, 0x3E	; 62
    2638:	c8 01       	movw	r24, r16
    263a:	09 95       	icall
    263c:	d8 01       	movw	r26, r16
	pid_1.set_ki(&pid_1, 0.5); // will provoke overshoot, to much acceleration limit max value and minimum value.
    263e:	9e 96       	adiw	r26, 0x2e	; 46
    2640:	ed 91       	ld	r30, X+
    2642:	fc 91       	ld	r31, X
    2644:	9f 97       	sbiw	r26, 0x2f	; 47
    2646:	40 e0       	ldi	r20, 0x00	; 0
    2648:	50 e0       	ldi	r21, 0x00	; 0
    264a:	60 e0       	ldi	r22, 0x00	; 0
    264c:	7f e3       	ldi	r23, 0x3F	; 63
    264e:	c8 01       	movw	r24, r16
    2650:	09 95       	icall
    2652:	d8 01       	movw	r26, r16
	pid_1.set_SP(&pid_1, 650);
    2654:	d2 96       	adiw	r26, 0x32	; 50
    2656:	ed 91       	ld	r30, X+
    2658:	fc 91       	ld	r31, X
    265a:	d3 97       	sbiw	r26, 0x33	; 51
    265c:	40 e0       	ldi	r20, 0x00	; 0
    265e:	50 e8       	ldi	r21, 0x80	; 128
    2660:	62 e2       	ldi	r22, 0x22	; 34
    2662:	74 e4       	ldi	r23, 0x44	; 68
    2664:	c8 01       	movw	r24, r16
    2666:	09 95       	icall
    2668:	04 e1       	ldi	r16, 0x14	; 20
	/***Another one woopy ti dooo***/
	pid_2.set_kc(&pid_2, 0.5);
    266a:	14 e0       	ldi	r17, 0x04	; 4
    266c:	d8 01       	movw	r26, r16
    266e:	9c 96       	adiw	r26, 0x2c	; 44
    2670:	ed 91       	ld	r30, X+
    2672:	fc 91       	ld	r31, X
    2674:	9d 97       	sbiw	r26, 0x2d	; 45
    2676:	40 e0       	ldi	r20, 0x00	; 0
    2678:	50 e0       	ldi	r21, 0x00	; 0
    267a:	60 e0       	ldi	r22, 0x00	; 0
    267c:	7f e3       	ldi	r23, 0x3F	; 63
    267e:	c8 01       	movw	r24, r16
    2680:	09 95       	icall
    2682:	d8 01       	movw	r26, r16
	pid_2.set_kd(&pid_2, 1);
    2684:	d0 96       	adiw	r26, 0x30	; 48
    2686:	ed 91       	ld	r30, X+
    2688:	fc 91       	ld	r31, X
    268a:	d1 97       	sbiw	r26, 0x31	; 49
    268c:	40 e0       	ldi	r20, 0x00	; 0
    268e:	50 e0       	ldi	r21, 0x00	; 0
    2690:	60 e8       	ldi	r22, 0x80	; 128
    2692:	7f e3       	ldi	r23, 0x3F	; 63
    2694:	c8 01       	movw	r24, r16
    2696:	09 95       	icall
    2698:	d8 01       	movw	r26, r16
	pid_2.set_ki(&pid_2, 0.01);
    269a:	9e 96       	adiw	r26, 0x2e	; 46
    269c:	ed 91       	ld	r30, X+
    269e:	fc 91       	ld	r31, X
    26a0:	9f 97       	sbiw	r26, 0x2f	; 47
    26a2:	4a e0       	ldi	r20, 0x0A	; 10
    26a4:	57 ed       	ldi	r21, 0xD7	; 215
    26a6:	63 e2       	ldi	r22, 0x23	; 35
    26a8:	7c e3       	ldi	r23, 0x3C	; 60
    26aa:	c8 01       	movw	r24, r16
    26ac:	09 95       	icall
    26ae:	d8 01       	movw	r26, r16
	pid_2.set_SP(&pid_2, 125);
    26b0:	d2 96       	adiw	r26, 0x32	; 50
    26b2:	ed 91       	ld	r30, X+
    26b4:	fc 91       	ld	r31, X
    26b6:	d3 97       	sbiw	r26, 0x33	; 51
    26b8:	40 e0       	ldi	r20, 0x00	; 0
    26ba:	50 e0       	ldi	r21, 0x00	; 0
    26bc:	6a ef       	ldi	r22, 0xFA	; 250
    26be:	72 e4       	ldi	r23, 0x42	; 66
    26c0:	c8 01       	movw	r24, r16
    26c2:	09 95       	icall
    26c4:	2e 96       	adiw	r28, 0x0e	; 14
	/**********/
	//TODO:: Please write your application code
	while(TRUE){
		/***PREAMBLE***/
		lcd0.reboot();
    26c6:	ee ad       	ldd	r30, Y+62	; 0x3e
    26c8:	ff ad       	ldd	r31, Y+63	; 0x3f
    26ca:	2e 97       	sbiw	r28, 0x0e	; 14
    26cc:	09 95       	icall
    26ce:	62 96       	adiw	r28, 0x12	; 18
		keypad.read();
    26d0:	2e ad       	ldd	r18, Y+62	; 0x3e
    26d2:	3f ad       	ldd	r19, Y+63	; 0x3f
    26d4:	62 97       	sbiw	r28, 0x12	; 18
    26d6:	f9 01       	movw	r30, r18
    26d8:	09 95       	icall
    26da:	6d e0       	ldi	r22, 0x0D	; 13
		//uartreceive=uart.read();
		/***Reading input***/
		lcd0.gotoxy(3,13);
    26dc:	70 e0       	ldi	r23, 0x00	; 0
    26de:	83 e0       	ldi	r24, 0x03	; 3
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	f2 01       	movw	r30, r4
    26e4:	09 95       	icall
    26e6:	ee ad       	ldd	r30, Y+62	; 0x3e
		lcd0.putch(':');
    26e8:	ff ad       	ldd	r31, Y+63	; 0x3f
    26ea:	8a e3       	ldi	r24, 0x3A	; 58
    26ec:	09 95       	icall
    26ee:	f4 01       	movw	r30, r8
		lcd0.string_size(keypad.get().printstring,6);
    26f0:	09 95       	icall
    26f2:	3c ab       	std	Y+52, r19	; 0x34
    26f4:	4d ab       	std	Y+53, r20	; 0x35
    26f6:	66 e0       	ldi	r22, 0x06	; 6
    26f8:	8c a9       	ldd	r24, Y+52	; 0x34
    26fa:	9d a9       	ldd	r25, Y+53	; 0x35
    26fc:	f3 01       	movw	r30, r6
    26fe:	09 95       	icall
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	f4 01       	movw	r30, r8
		/***ENTRY END***/
		switch(Menu){
			/***MENU 1***/
			case '1': // Main Program Menu
				if(!strcmp(keypad.get().string,"A")){Menu='2';keypad.flush();lcd0.clear();break;}
    270e:	09 95       	icall
    2710:	59 ab       	std	Y+49, r21	; 0x31
    2712:	6a ab       	std	Y+50, r22	; 0x32
    2714:	62 e1       	ldi	r22, 0x12	; 18
    2716:	71 e0       	ldi	r23, 0x01	; 1
    2718:	89 a9       	ldd	r24, Y+49	; 0x31
    271a:	9a a9       	ldd	r25, Y+50	; 0x32
    271c:	3f d7       	rcall	.+3710   	; 0x359c <strcmp>
    271e:	89 2b       	or	r24, r25
    2720:	51 f4       	brne	.+20     	; 0x2736 <main+0x320>
    2722:	f1 01       	movw	r30, r2
    2724:	09 95       	icall
    2726:	c2 53       	subi	r28, 0x32	; 50
    2728:	df 4f       	sbci	r29, 0xFF	; 255
    272a:	e8 81       	ld	r30, Y
    272c:	f9 81       	ldd	r31, Y+1	; 0x01
    272e:	ce 5c       	subi	r28, 0xCE	; 206
    2730:	d0 40       	sbci	r29, 0x00	; 0
    2732:	09 95       	icall
    2734:	5b c2       	rjmp	.+1206   	; 0x2bec <main+0x7d6>
    2736:	f4 01       	movw	r30, r8
				if(!strcmp(keypad.get().string,"B")){Menu='3';keypad.flush();lcd0.clear();break;}
    2738:	09 95       	icall
    273a:	5c a7       	std	Y+44, r21	; 0x2c
    273c:	6d a7       	std	Y+45, r22	; 0x2d
    273e:	64 e1       	ldi	r22, 0x14	; 20
    2740:	71 e0       	ldi	r23, 0x01	; 1
    2742:	8c a5       	ldd	r24, Y+44	; 0x2c
    2744:	9d a5       	ldd	r25, Y+45	; 0x2d
    2746:	2a d7       	rcall	.+3668   	; 0x359c <strcmp>
    2748:	89 2b       	or	r24, r25
    274a:	51 f4       	brne	.+20     	; 0x2760 <main+0x34a>
    274c:	f1 01       	movw	r30, r2
    274e:	09 95       	icall
    2750:	c2 53       	subi	r28, 0x32	; 50
    2752:	df 4f       	sbci	r29, 0xFF	; 255
    2754:	e8 81       	ld	r30, Y
    2756:	f9 81       	ldd	r31, Y+1	; 0x01
    2758:	ce 5c       	subi	r28, 0xCE	; 206
    275a:	d0 40       	sbci	r29, 0x00	; 0
    275c:	09 95       	icall
    275e:	fe c1       	rjmp	.+1020   	; 0x2b5c <main+0x746>
    2760:	80 e0       	ldi	r24, 0x00	; 0
					/***Reading analog***/
					adcvalue=analog.read(0);
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	ce 52       	subi	r28, 0x2E	; 46
    2766:	df 4f       	sbci	r29, 0xFF	; 255
    2768:	e8 81       	ld	r30, Y
    276a:	f9 81       	ldd	r31, Y+1	; 0x01
    276c:	c2 5d       	subi	r28, 0xD2	; 210
    276e:	d0 40       	sbci	r29, 0x00	; 0
    2770:	09 95       	icall
    2772:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <adcvalue+0x1>
    2776:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <adcvalue>
    277a:	60 e0       	ldi	r22, 0x00	; 0
					lcd0.gotoxy(0,0);
    277c:	70 e0       	ldi	r23, 0x00	; 0
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	f2 01       	movw	r30, r4
    2784:	09 95       	icall
    2786:	67 e0       	ldi	r22, 0x07	; 7
					lcd0.string_size("Output: ",7);
    2788:	86 e1       	ldi	r24, 0x16	; 22
    278a:	91 e0       	ldi	r25, 0x01	; 1
    278c:	f3 01       	movw	r30, r6
    278e:	09 95       	icall
    2790:	e0 91 ac 03 	lds	r30, 0x03AC	; 0x8003ac <function+0x20>
					strcpy(str,function.i16toa(adcvalue));
    2794:	f0 91 ad 03 	lds	r31, 0x03AD	; 0x8003ad <function+0x21>
    2798:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <adcvalue>
    279c:	90 91 dd 03 	lds	r25, 0x03DD	; 0x8003dd <adcvalue+0x1>
    27a0:	09 95       	icall
    27a2:	bc 01       	movw	r22, r24
    27a4:	ce 01       	movw	r24, r28
    27a6:	8a 58       	subi	r24, 0x8A	; 138
    27a8:	9f 4f       	sbci	r25, 0xFF	; 255
    27aa:	01 d7       	rcall	.+3586   	; 0x35ae <strcpy>
    27ac:	64 e0       	ldi	r22, 0x04	; 4
					lcd0.string_size(str,4);
    27ae:	ce 01       	movw	r24, r28
    27b0:	8a 58       	subi	r24, 0x8A	; 138
    27b2:	9f 4f       	sbci	r25, 0xFF	; 255
    27b4:	f3 01       	movw	r30, r6
    27b6:	09 95       	icall
    27b8:	c0 90 4a 04 	lds	r12, 0x044A	; 0x80044a <pid_out_1>
					
					if(pid_out_1 >-1024 && pid_out_1 <1024){
    27bc:	d0 90 4b 04 	lds	r13, 0x044B	; 0x80044b <pid_out_1+0x1>
    27c0:	e0 90 4c 04 	lds	r14, 0x044C	; 0x80044c <pid_out_1+0x2>
    27c4:	f0 90 4d 04 	lds	r15, 0x044D	; 0x80044d <pid_out_1+0x3>
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	40 e8       	ldi	r20, 0x80	; 128
    27ce:	54 ec       	ldi	r21, 0xC4	; 196
    27d0:	c7 01       	movw	r24, r14
    27d2:	b6 01       	movw	r22, r12
    27d4:	81 d4       	rcall	.+2306   	; 0x30d8 <__gesf2>
    27d6:	18 16       	cp	r1, r24
    27d8:	0c f0       	brlt	.+2      	; 0x27dc <main+0x3c6>
    27da:	58 c0       	rjmp	.+176    	; 0x288c <main+0x476>
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e8       	ldi	r20, 0x80	; 128
    27e2:	54 e4       	ldi	r21, 0x44	; 68
    27e4:	c7 01       	movw	r24, r14
    27e6:	b6 01       	movw	r22, r12
    27e8:	28 d3       	rcall	.+1616   	; 0x2e3a <__cmpsf2>
    27ea:	88 23       	and	r24, r24
    27ec:	0c f0       	brlt	.+2      	; 0x27f0 <main+0x3da>
    27ee:	4e c0       	rjmp	.+156    	; 0x288c <main+0x476>
						tmp=function.trimmer(pid_out_1,-1023,1023,Min,Max);
    27f0:	c7 01       	movw	r24, r14
    27f2:	b6 01       	movw	r22, r12
    27f4:	8e d3       	rcall	.+1820   	; 0x2f12 <__fixsfsi>
    27f6:	1f 92       	push	r1
    27f8:	1f 92       	push	r1
    27fa:	f9 e0       	ldi	r31, 0x09	; 9
    27fc:	ff 93       	push	r31
    27fe:	2e e2       	ldi	r18, 0x2E	; 46
    2800:	2f 93       	push	r18
    2802:	e0 91 ca 03 	lds	r30, 0x03CA	; 0x8003ca <function+0x3e>
    2806:	f0 91 cb 03 	lds	r31, 0x03CB	; 0x8003cb <function+0x3f>
    280a:	0f 2e       	mov	r0, r31
    280c:	f4 ef       	ldi	r31, 0xF4	; 244
    280e:	af 2e       	mov	r10, r31
    2810:	bb 24       	eor	r11, r11
    2812:	b3 94       	inc	r11
    2814:	c1 2c       	mov	r12, r1
    2816:	d1 2c       	mov	r13, r1
    2818:	f0 2d       	mov	r31, r0
    281a:	ee 24       	eor	r14, r14
    281c:	ea 94       	dec	r14
    281e:	13 e0       	ldi	r17, 0x03	; 3
    2820:	f1 2e       	mov	r15, r17
    2822:	00 e0       	ldi	r16, 0x00	; 0
    2824:	10 e0       	ldi	r17, 0x00	; 0
    2826:	21 e0       	ldi	r18, 0x01	; 1
    2828:	3c ef       	ldi	r19, 0xFC	; 252
    282a:	4f ef       	ldi	r20, 0xFF	; 255
    282c:	5f ef       	ldi	r21, 0xFF	; 255
    282e:	09 95       	icall
    2830:	60 93 82 03 	sts	0x0382, r22	; 0x800382 <tmp>
    2834:	70 93 83 03 	sts	0x0383, r23	; 0x800383 <tmp+0x1>
    2838:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <tmp+0x2>
    283c:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <tmp+0x3>
    2840:	cb 01       	movw	r24, r22
						timer1.compareB(tmp);
    2842:	cc 52       	subi	r28, 0x2C	; 44
    2844:	df 4f       	sbci	r29, 0xFF	; 255
    2846:	e8 81       	ld	r30, Y
    2848:	f9 81       	ldd	r31, Y+1	; 0x01
    284a:	c4 5d       	subi	r28, 0xD4	; 212
    284c:	d0 40       	sbci	r29, 0x00	; 0
    284e:	09 95       	icall
    2850:	60 e0       	ldi	r22, 0x00	; 0
						lcd0.gotoxy(1,0);
    2852:	70 e0       	ldi	r23, 0x00	; 0
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	f2 01       	movw	r30, r4
    285a:	09 95       	icall
    285c:	e0 91 ac 03 	lds	r30, 0x03AC	; 0x8003ac <function+0x20>
						strcpy(str,function.i16toa(tmp));
    2860:	f0 91 ad 03 	lds	r31, 0x03AD	; 0x8003ad <function+0x21>
    2864:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <tmp>
    2868:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <tmp+0x1>
    286c:	09 95       	icall
    286e:	bc 01       	movw	r22, r24
    2870:	ce 01       	movw	r24, r28
    2872:	8a 58       	subi	r24, 0x8A	; 138
    2874:	9f 4f       	sbci	r25, 0xFF	; 255
    2876:	9b d6       	rcall	.+3382   	; 0x35ae <strcpy>
    2878:	64 e0       	ldi	r22, 0x04	; 4
						lcd0.string_size(str,4);
    287a:	ce 01       	movw	r24, r28
    287c:	8a 58       	subi	r24, 0x8A	; 138
    287e:	9f 4f       	sbci	r25, 0xFF	; 255
    2880:	f3 01       	movw	r30, r6
    2882:	09 95       	icall
    2884:	0f 90       	pop	r0
    2886:	0f 90       	pop	r0
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	e0 91 d6 03 	lds	r30, 0x03D6	; 0x8003d6 <function+0x4a>
					}
					
					function.ftoa(35.00567,str,6);
    2890:	f0 91 d7 03 	lds	r31, 0x03D7	; 0x8003d7 <function+0x4b>
    2894:	26 e0       	ldi	r18, 0x06	; 6
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	ae 01       	movw	r20, r28
    289a:	4a 58       	subi	r20, 0x8A	; 138
    289c:	5f 4f       	sbci	r21, 0xFF	; 255
    289e:	6e ec       	ldi	r22, 0xCE	; 206
    28a0:	75 e0       	ldi	r23, 0x05	; 5
    28a2:	8c e0       	ldi	r24, 0x0C	; 12
    28a4:	92 e4       	ldi	r25, 0x42	; 66
    28a6:	09 95       	icall
    28a8:	60 e0       	ldi	r22, 0x00	; 0
					lcd0.gotoxy(2,0);
    28aa:	70 e0       	ldi	r23, 0x00	; 0
    28ac:	82 e0       	ldi	r24, 0x02	; 2
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	f2 01       	movw	r30, r4
    28b2:	09 95       	icall
    28b4:	6c e0       	ldi	r22, 0x0C	; 12
					lcd0.string_size(str,12);
    28b6:	ce 01       	movw	r24, r28
    28b8:	8a 58       	subi	r24, 0x8A	; 138
    28ba:	9f 4f       	sbci	r25, 0xFF	; 255
    28bc:	f3 01       	movw	r30, r6
    28be:	09 95       	icall
    28c0:	60 e0       	ldi	r22, 0x00	; 0
					//lcd0.gotoxy(2,0);
					//strcpy(str,function.i32toa(pid_1.PV));
					//lcd0.string_size(str,6);
					//if(pid_1.derivative>0){
						lcd0.gotoxy(3,0);
    28c2:	70 e0       	ldi	r23, 0x00	; 0
    28c4:	83 e0       	ldi	r24, 0x03	; 3
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	f2 01       	movw	r30, r4
    28ca:	09 95       	icall
						strcpy(str,function.i32toa(pid_1.derivative));
    28cc:	60 91 fa 03 	lds	r22, 0x03FA	; 0x8003fa <pid_1+0x1c>
    28d0:	70 91 fb 03 	lds	r23, 0x03FB	; 0x8003fb <pid_1+0x1d>
    28d4:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <pid_1+0x1e>
    28d8:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <pid_1+0x1f>
    28dc:	1a d3       	rcall	.+1588   	; 0x2f12 <__fixsfsi>
    28de:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <function+0x24>
    28e2:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <function+0x25>
    28e6:	09 95       	icall
    28e8:	bc 01       	movw	r22, r24
    28ea:	ce 01       	movw	r24, r28
    28ec:	8a 58       	subi	r24, 0x8A	; 138
    28ee:	9f 4f       	sbci	r25, 0xFF	; 255
    28f0:	5e d6       	rcall	.+3260   	; 0x35ae <strcpy>
    28f2:	66 e0       	ldi	r22, 0x06	; 6
						lcd0.string_size(str,6);
    28f4:	ce 01       	movw	r24, r28
    28f6:	8a 58       	subi	r24, 0x8A	; 138
    28f8:	9f 4f       	sbci	r25, 0xFF	; 255
    28fa:	f3 01       	movw	r30, r6
    28fc:	09 95       	icall
    28fe:	6d e0       	ldi	r22, 0x0D	; 13
					//}
					
					
					// PID_1 output
					lcd0.gotoxy(0,13);
    2900:	70 e0       	ldi	r23, 0x00	; 0
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	f2 01       	movw	r30, r4
    2908:	09 95       	icall
					strcpy(str,function.i32toa(pid_out_1));
    290a:	60 91 4a 04 	lds	r22, 0x044A	; 0x80044a <pid_out_1>
    290e:	70 91 4b 04 	lds	r23, 0x044B	; 0x80044b <pid_out_1+0x1>
    2912:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <pid_out_1+0x2>
    2916:	90 91 4d 04 	lds	r25, 0x044D	; 0x80044d <pid_out_1+0x3>
    291a:	fb d2       	rcall	.+1526   	; 0x2f12 <__fixsfsi>
    291c:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <function+0x24>
    2920:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <function+0x25>
    2924:	09 95       	icall
    2926:	bc 01       	movw	r22, r24
    2928:	ce 01       	movw	r24, r28
    292a:	8a 58       	subi	r24, 0x8A	; 138
    292c:	9f 4f       	sbci	r25, 0xFF	; 255
    292e:	3f d6       	rcall	.+3198   	; 0x35ae <strcpy>
    2930:	66 e0       	ldi	r22, 0x06	; 6
					lcd0.string_size(str,6);
    2932:	ce 01       	movw	r24, r28
    2934:	8a 58       	subi	r24, 0x8A	; 138
    2936:	9f 4f       	sbci	r25, 0xFF	; 255
    2938:	f3 01       	movw	r30, r6
    293a:	09 95       	icall
					
					// PID_2 output
					lcd0.gotoxy(1,13);
    293c:	6d e0       	ldi	r22, 0x0D	; 13
    293e:	70 e0       	ldi	r23, 0x00	; 0
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	f2 01       	movw	r30, r4
    2946:	09 95       	icall
					strcpy(str,function.i32toa(pid_out_2));
    2948:	60 91 d8 03 	lds	r22, 0x03D8	; 0x8003d8 <pid_out_2>
    294c:	70 91 d9 03 	lds	r23, 0x03D9	; 0x8003d9 <pid_out_2+0x1>
    2950:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <pid_out_2+0x2>
    2954:	90 91 db 03 	lds	r25, 0x03DB	; 0x8003db <pid_out_2+0x3>
    2958:	dc d2       	rcall	.+1464   	; 0x2f12 <__fixsfsi>
    295a:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <function+0x24>
    295e:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <function+0x25>
    2962:	09 95       	icall
    2964:	bc 01       	movw	r22, r24
    2966:	ce 01       	movw	r24, r28
    2968:	8a 58       	subi	r24, 0x8A	; 138
    296a:	9f 4f       	sbci	r25, 0xFF	; 255
    296c:	20 d6       	rcall	.+3136   	; 0x35ae <strcpy>
    296e:	66 e0       	ldi	r22, 0x06	; 6
					lcd0.string_size(str,6);
    2970:	ce 01       	movw	r24, r28
    2972:	8a 58       	subi	r24, 0x8A	; 138
    2974:	9f 4f       	sbci	r25, 0xFF	; 255
    2976:	f3 01       	movw	r30, r6
    2978:	09 95       	icall
    297a:	1a c1       	rjmp	.+564    	; 0x2bb0 <main+0x79a>
					
					
					
				break;
    297c:	f1 01       	movw	r30, r2
			/***MENU 2***/
			case '2': // Manual position override 
				if(!strcmp(keypad.get().string,"A")){Menu='3';keypad.flush();lcd0.clear();break;}
    297e:	09 95       	icall
    2980:	c2 53       	subi	r28, 0x32	; 50
    2982:	df 4f       	sbci	r29, 0xFF	; 255
    2984:	e8 81       	ld	r30, Y
    2986:	f9 81       	ldd	r31, Y+1	; 0x01
    2988:	ce 5c       	subi	r28, 0xCE	; 206
    298a:	d0 40       	sbci	r29, 0x00	; 0
    298c:	09 95       	icall
    298e:	e6 c0       	rjmp	.+460    	; 0x2b5c <main+0x746>
				if(!strcmp(keypad.get().string,"B")){Menu='1';keypad.flush();lcd0.clear();break;}
    2990:	f4 01       	movw	r30, r8
    2992:	09 95       	icall
    2994:	5a a3       	std	Y+34, r21	; 0x22
    2996:	6b a3       	std	Y+35, r22	; 0x23
    2998:	64 e1       	ldi	r22, 0x14	; 20
    299a:	71 e0       	ldi	r23, 0x01	; 1
    299c:	8a a1       	ldd	r24, Y+34	; 0x22
    299e:	9b a1       	ldd	r25, Y+35	; 0x23
    29a0:	fd d5       	rcall	.+3066   	; 0x359c <strcmp>
    29a2:	89 2b       	or	r24, r25
    29a4:	51 f4       	brne	.+20     	; 0x29ba <main+0x5a4>
    29a6:	f1 01       	movw	r30, r2
    29a8:	09 95       	icall
    29aa:	c2 53       	subi	r28, 0x32	; 50
    29ac:	df 4f       	sbci	r29, 0xFF	; 255
    29ae:	e8 81       	ld	r30, Y
    29b0:	f9 81       	ldd	r31, Y+1	; 0x01
    29b2:	ce 5c       	subi	r28, 0xCE	; 206
    29b4:	d0 40       	sbci	r29, 0x00	; 0
    29b6:	09 95       	icall
    29b8:	fb c0       	rjmp	.+502    	; 0x2bb0 <main+0x79a>
				if(!strcmp(keypad.get().string,"C")){Menu='1';keypad.flush();lcd0.clear();break;}
    29ba:	f4 01       	movw	r30, r8
    29bc:	09 95       	icall
    29be:	5d 8f       	std	Y+29, r21	; 0x1d
    29c0:	6e 8f       	std	Y+30, r22	; 0x1e
    29c2:	6f e1       	ldi	r22, 0x1F	; 31
    29c4:	71 e0       	ldi	r23, 0x01	; 1
    29c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29ca:	e8 d5       	rcall	.+3024   	; 0x359c <strcmp>
    29cc:	89 2b       	or	r24, r25
    29ce:	51 f4       	brne	.+20     	; 0x29e4 <main+0x5ce>
    29d0:	f1 01       	movw	r30, r2
    29d2:	09 95       	icall
    29d4:	c2 53       	subi	r28, 0x32	; 50
    29d6:	df 4f       	sbci	r29, 0xFF	; 255
    29d8:	e8 81       	ld	r30, Y
    29da:	f9 81       	ldd	r31, Y+1	; 0x01
    29dc:	ce 5c       	subi	r28, 0xCE	; 206
    29de:	d0 40       	sbci	r29, 0x00	; 0
    29e0:	09 95       	icall
    29e2:	e6 c0       	rjmp	.+460    	; 0x2bb0 <main+0x79a>
    29e4:	60 e0       	ldi	r22, 0x00	; 0
					lcd0.gotoxy(0,0);
    29e6:	70 e0       	ldi	r23, 0x00	; 0
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	f2 01       	movw	r30, r4
    29ee:	09 95       	icall
    29f0:	68 e0       	ldi	r22, 0x08	; 8
					lcd0.string_size("Manual: ",8);
    29f2:	81 e2       	ldi	r24, 0x21	; 33
    29f4:	91 e0       	ldi	r25, 0x01	; 1
    29f6:	f3 01       	movw	r30, r6
    29f8:	09 95       	icall
    29fa:	63 e0       	ldi	r22, 0x03	; 3
					lcd0.string_size(mstr,3);
    29fc:	ce 01       	movw	r24, r28
    29fe:	84 58       	subi	r24, 0x84	; 132
    2a00:	9f 4f       	sbci	r25, 0xFF	; 255
    2a02:	f3 01       	movw	r30, r6
    2a04:	09 95       	icall
    2a06:	60 e0       	ldi	r22, 0x00	; 0
					lcd0.gotoxy(1,0);
    2a08:	70 e0       	ldi	r23, 0x00	; 0
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	f2 01       	movw	r30, r4
    2a10:	09 95       	icall
    2a12:	6b e0       	ldi	r22, 0x0B	; 11
					lcd0.string_size("Enter Angle",11);
    2a14:	8a e2       	ldi	r24, 0x2A	; 42
    2a16:	91 e0       	ldi	r25, 0x01	; 1
    2a18:	f3 01       	movw	r30, r6
    2a1a:	09 95       	icall
					if(keypad.get().character==KEYPADENTERKEY){
    2a1c:	f4 01       	movw	r30, r8
    2a1e:	09 95       	icall
    2a20:	24 34       	cpi	r18, 0x44	; 68
    2a22:	09 f0       	breq	.+2      	; 0x2a26 <main+0x610>
    2a24:	50 c0       	rjmp	.+160    	; 0x2ac6 <main+0x6b0>
						strncpy(mstr,keypad.get().string,6);
    2a26:	f4 01       	movw	r30, r8
    2a28:	09 95       	icall
    2a2a:	5b 8b       	std	Y+19, r21	; 0x13
    2a2c:	6c 8b       	std	Y+20, r22	; 0x14
    2a2e:	6b 89       	ldd	r22, Y+19	; 0x13
    2a30:	7c 89       	ldd	r23, Y+20	; 0x14
    2a32:	46 e0       	ldi	r20, 0x06	; 6
    2a34:	50 e0       	ldi	r21, 0x00	; 0
    2a36:	ce 01       	movw	r24, r28
    2a38:	84 58       	subi	r24, 0x84	; 132
    2a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a3c:	bf d5       	rcall	.+2942   	; 0x35bc <strncpy>
    2a3e:	e0 91 b8 03 	lds	r30, 0x03B8	; 0x8003b8 <function+0x2c>
						mvalue=function.strToInt(mstr);
    2a42:	f0 91 b9 03 	lds	r31, 0x03B9	; 0x8003b9 <function+0x2d>
    2a46:	ce 01       	movw	r24, r28
    2a48:	84 58       	subi	r24, 0x84	; 132
    2a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a4c:	09 95       	icall
    2a4e:	85 3b       	cpi	r24, 0xB5	; 181
						if(mvalue >=0 && mvalue <181){
    2a50:	91 05       	cpc	r25, r1
    2a52:	90 f5       	brcc	.+100    	; 0x2ab8 <main+0x6a2>
    2a54:	bc 01       	movw	r22, r24
							m_value=mvalue;
							timer1.compareB(function.trimmer(m_value,0,180,Min,Max));
    2a56:	99 0f       	add	r25, r25
    2a58:	88 0b       	sbc	r24, r24
    2a5a:	99 0b       	sbc	r25, r25
    2a5c:	1f 92       	push	r1
    2a5e:	1f 92       	push	r1
    2a60:	f9 e0       	ldi	r31, 0x09	; 9
    2a62:	ff 93       	push	r31
    2a64:	2e e2       	ldi	r18, 0x2E	; 46
    2a66:	2f 93       	push	r18
    2a68:	e0 91 ca 03 	lds	r30, 0x03CA	; 0x8003ca <function+0x3e>
    2a6c:	f0 91 cb 03 	lds	r31, 0x03CB	; 0x8003cb <function+0x3f>
    2a70:	0f 2e       	mov	r0, r31
    2a72:	f4 ef       	ldi	r31, 0xF4	; 244
    2a74:	af 2e       	mov	r10, r31
    2a76:	bb 24       	eor	r11, r11
    2a78:	b3 94       	inc	r11
    2a7a:	c1 2c       	mov	r12, r1
    2a7c:	d1 2c       	mov	r13, r1
    2a7e:	f0 2d       	mov	r31, r0
    2a80:	14 eb       	ldi	r17, 0xB4	; 180
    2a82:	e1 2e       	mov	r14, r17
    2a84:	f1 2c       	mov	r15, r1
    2a86:	00 e0       	ldi	r16, 0x00	; 0
    2a88:	10 e0       	ldi	r17, 0x00	; 0
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	a9 01       	movw	r20, r18
    2a90:	09 95       	icall
    2a92:	cb 01       	movw	r24, r22
    2a94:	cc 52       	subi	r28, 0x2C	; 44
    2a96:	df 4f       	sbci	r29, 0xFF	; 255
    2a98:	e8 81       	ld	r30, Y
    2a9a:	f9 81       	ldd	r31, Y+1	; 0x01
    2a9c:	c4 5d       	subi	r28, 0xD4	; 212
    2a9e:	d0 40       	sbci	r29, 0x00	; 0
    2aa0:	09 95       	icall
    2aa2:	28 96       	adiw	r28, 0x08	; 8
							lcd0.hspace(5);
    2aa4:	ee ad       	ldd	r30, Y+62	; 0x3e
    2aa6:	ff ad       	ldd	r31, Y+63	; 0x3f
    2aa8:	28 97       	sbiw	r28, 0x08	; 8
    2aaa:	85 e0       	ldi	r24, 0x05	; 5
    2aac:	09 95       	icall
    2aae:	0f 90       	pop	r0
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	0f 90       	pop	r0
    2ab6:	05 c0       	rjmp	.+10     	; 0x2ac2 <main+0x6ac>
    2ab8:	65 e0       	ldi	r22, 0x05	; 5
						}else{
							lcd0.string_size("  err",5);
    2aba:	86 e3       	ldi	r24, 0x36	; 54
    2abc:	91 e0       	ldi	r25, 0x01	; 1
    2abe:	f3 01       	movw	r30, r6
    2ac0:	09 95       	icall
    2ac2:	f1 01       	movw	r30, r2
						}
						keypad.flush();
    2ac4:	09 95       	icall
    2ac6:	60 e0       	ldi	r22, 0x00	; 0
					}
					//else
					//	timer1.compareB(function.trimmer(m_value,0,180,Min,Max));
					lcd0.gotoxy(3,0);
    2ac8:	70 e0       	ldi	r23, 0x00	; 0
    2aca:	83 e0       	ldi	r24, 0x03	; 3
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	f2 01       	movw	r30, r4
    2ad0:	09 95       	icall
    2ad2:	68 e0       	ldi	r22, 0x08	; 8
					lcd0.string_size("C - exit",8);
    2ad4:	8c e3       	ldi	r24, 0x3C	; 60
    2ad6:	91 e0       	ldi	r25, 0x01	; 1
    2ad8:	f3 01       	movw	r30, r6
    2ada:	09 95       	icall
				break;
    2adc:	87 c0       	rjmp	.+270    	; 0x2bec <main+0x7d6>
			/***MENU 3***/
			case '3': //Set Time and Date
				if(!strcmp(keypad.get().string,"A")){Menu='1';keypad.flush();lcd0.clear();break;}
    2ade:	f1 01       	movw	r30, r2
    2ae0:	09 95       	icall
    2ae2:	c2 53       	subi	r28, 0x32	; 50
    2ae4:	df 4f       	sbci	r29, 0xFF	; 255
    2ae6:	e8 81       	ld	r30, Y
    2ae8:	f9 81       	ldd	r31, Y+1	; 0x01
    2aea:	ce 5c       	subi	r28, 0xCE	; 206
    2aec:	d0 40       	sbci	r29, 0x00	; 0
    2aee:	09 95       	icall
    2af0:	5f c0       	rjmp	.+190    	; 0x2bb0 <main+0x79a>
				if(!strcmp(keypad.get().string,"B")){Menu='2';keypad.flush();lcd0.clear();break;}
    2af2:	f4 01       	movw	r30, r8
    2af4:	09 95       	icall
    2af6:	59 87       	std	Y+9, r21	; 0x09
    2af8:	6a 87       	std	Y+10, r22	; 0x0a
    2afa:	64 e1       	ldi	r22, 0x14	; 20
    2afc:	71 e0       	ldi	r23, 0x01	; 1
    2afe:	89 85       	ldd	r24, Y+9	; 0x09
    2b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b02:	4c d5       	rcall	.+2712   	; 0x359c <strcmp>
    2b04:	89 2b       	or	r24, r25
    2b06:	51 f4       	brne	.+20     	; 0x2b1c <main+0x706>
    2b08:	f1 01       	movw	r30, r2
    2b0a:	09 95       	icall
    2b0c:	c2 53       	subi	r28, 0x32	; 50
    2b0e:	df 4f       	sbci	r29, 0xFF	; 255
    2b10:	e8 81       	ld	r30, Y
    2b12:	f9 81       	ldd	r31, Y+1	; 0x01
    2b14:	ce 5c       	subi	r28, 0xCE	; 206
    2b16:	d0 40       	sbci	r29, 0x00	; 0
    2b18:	09 95       	icall
    2b1a:	68 c0       	rjmp	.+208    	; 0x2bec <main+0x7d6>
				if(!strcmp(keypad.get().string,"C")){Menu='1';keypad.flush();lcd0.clear();break;}
    2b1c:	f4 01       	movw	r30, r8
    2b1e:	09 95       	icall
    2b20:	5c 83       	std	Y+4, r21	; 0x04
    2b22:	6d 83       	std	Y+5, r22	; 0x05
    2b24:	6f e1       	ldi	r22, 0x1F	; 31
    2b26:	71 e0       	ldi	r23, 0x01	; 1
    2b28:	8c 81       	ldd	r24, Y+4	; 0x04
    2b2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b2c:	37 d5       	rcall	.+2670   	; 0x359c <strcmp>
    2b2e:	89 2b       	or	r24, r25
    2b30:	51 f4       	brne	.+20     	; 0x2b46 <main+0x730>
    2b32:	f1 01       	movw	r30, r2
    2b34:	09 95       	icall
    2b36:	c2 53       	subi	r28, 0x32	; 50
    2b38:	df 4f       	sbci	r29, 0xFF	; 255
    2b3a:	e8 81       	ld	r30, Y
    2b3c:	f9 81       	ldd	r31, Y+1	; 0x01
    2b3e:	ce 5c       	subi	r28, 0xCE	; 206
    2b40:	d0 40       	sbci	r29, 0x00	; 0
    2b42:	09 95       	icall
    2b44:	35 c0       	rjmp	.+106    	; 0x2bb0 <main+0x79a>
    2b46:	60 e0       	ldi	r22, 0x00	; 0
					lcd0.gotoxy(0,0);
    2b48:	70 e0       	ldi	r23, 0x00	; 0
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	f2 01       	movw	r30, r4
    2b50:	09 95       	icall
    2b52:	63 e1       	ldi	r22, 0x13	; 19
					lcd0.string_size("Not being used",19);
    2b54:	85 e4       	ldi	r24, 0x45	; 69
    2b56:	91 e0       	ldi	r25, 0x01	; 1
    2b58:	f3 01       	movw	r30, r6
    2b5a:	09 95       	icall
    2b5c:	2e 96       	adiw	r28, 0x0e	; 14
	pid_2.set_SP(&pid_2, 125);
	/**********/
	//TODO:: Please write your application code
	while(TRUE){
		/***PREAMBLE***/
		lcd0.reboot();
    2b5e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b60:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b62:	2e 97       	sbiw	r28, 0x0e	; 14
    2b64:	09 95       	icall
    2b66:	62 96       	adiw	r28, 0x12	; 18
		keypad.read();
    2b68:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b6a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b6c:	62 97       	sbiw	r28, 0x12	; 18
    2b6e:	09 95       	icall
    2b70:	6d e0       	ldi	r22, 0x0D	; 13
		//uartreceive=uart.read();
		/***Reading input***/
		lcd0.gotoxy(3,13);
    2b72:	70 e0       	ldi	r23, 0x00	; 0
    2b74:	83 e0       	ldi	r24, 0x03	; 3
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	f2 01       	movw	r30, r4
    2b7a:	09 95       	icall
		lcd0.putch(':');
    2b7c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b7e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b80:	8a e3       	ldi	r24, 0x3A	; 58
    2b82:	09 95       	icall
		lcd0.string_size(keypad.get().printstring,6);
    2b84:	f4 01       	movw	r30, r8
    2b86:	09 95       	icall
    2b88:	3c ab       	std	Y+52, r19	; 0x34
    2b8a:	4d ab       	std	Y+53, r20	; 0x35
    2b8c:	66 e0       	ldi	r22, 0x06	; 6
    2b8e:	8c a9       	ldd	r24, Y+52	; 0x34
    2b90:	9d a9       	ldd	r25, Y+53	; 0x35
    2b92:	f3 01       	movw	r30, r6
    2b94:	09 95       	icall
					lcd0.gotoxy(3,0);
					lcd0.string_size("C - exit",8);
				break;
			/***MENU 3***/
			case '3': //Set Time and Date
				if(!strcmp(keypad.get().string,"A")){Menu='1';keypad.flush();lcd0.clear();break;}
    2b96:	f4 01       	movw	r30, r8
    2b98:	09 95       	icall
    2b9a:	5e 87       	std	Y+14, r21	; 0x0e
    2b9c:	6f 87       	std	Y+15, r22	; 0x0f
    2b9e:	62 e1       	ldi	r22, 0x12	; 18
    2ba0:	71 e0       	ldi	r23, 0x01	; 1
    2ba2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ba4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ba6:	fa d4       	rcall	.+2548   	; 0x359c <strcmp>
    2ba8:	89 2b       	or	r24, r25
    2baa:	09 f4       	brne	.+2      	; 0x2bae <main+0x798>
    2bac:	98 cf       	rjmp	.-208    	; 0x2ade <main+0x6c8>
    2bae:	a1 cf       	rjmp	.-190    	; 0x2af2 <main+0x6dc>
    2bb0:	2e 96       	adiw	r28, 0x0e	; 14
	pid_2.set_SP(&pid_2, 125);
	/**********/
	//TODO:: Please write your application code
	while(TRUE){
		/***PREAMBLE***/
		lcd0.reboot();
    2bb2:	ee ad       	ldd	r30, Y+62	; 0x3e
    2bb4:	ff ad       	ldd	r31, Y+63	; 0x3f
    2bb6:	2e 97       	sbiw	r28, 0x0e	; 14
    2bb8:	09 95       	icall
    2bba:	62 96       	adiw	r28, 0x12	; 18
		keypad.read();
    2bbc:	ee ad       	ldd	r30, Y+62	; 0x3e
    2bbe:	ff ad       	ldd	r31, Y+63	; 0x3f
    2bc0:	62 97       	sbiw	r28, 0x12	; 18
    2bc2:	09 95       	icall
    2bc4:	6d e0       	ldi	r22, 0x0D	; 13
		//uartreceive=uart.read();
		/***Reading input***/
		lcd0.gotoxy(3,13);
    2bc6:	70 e0       	ldi	r23, 0x00	; 0
    2bc8:	83 e0       	ldi	r24, 0x03	; 3
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	f2 01       	movw	r30, r4
    2bce:	09 95       	icall
    2bd0:	ee ad       	ldd	r30, Y+62	; 0x3e
		lcd0.putch(':');
    2bd2:	ff ad       	ldd	r31, Y+63	; 0x3f
    2bd4:	8a e3       	ldi	r24, 0x3A	; 58
    2bd6:	09 95       	icall
    2bd8:	f4 01       	movw	r30, r8
		lcd0.string_size(keypad.get().printstring,6);
    2bda:	09 95       	icall
    2bdc:	3c ab       	std	Y+52, r19	; 0x34
    2bde:	4d ab       	std	Y+53, r20	; 0x35
    2be0:	66 e0       	ldi	r22, 0x06	; 6
    2be2:	8c a9       	ldd	r24, Y+52	; 0x34
    2be4:	9d a9       	ldd	r25, Y+53	; 0x35
    2be6:	f3 01       	movw	r30, r6
    2be8:	09 95       	icall
    2bea:	90 cd       	rjmp	.-1248   	; 0x270c <main+0x2f6>
    2bec:	2e 96       	adiw	r28, 0x0e	; 14
	pid_2.set_SP(&pid_2, 125);
	/**********/
	//TODO:: Please write your application code
	while(TRUE){
		/***PREAMBLE***/
		lcd0.reboot();
    2bee:	ee ad       	ldd	r30, Y+62	; 0x3e
    2bf0:	ff ad       	ldd	r31, Y+63	; 0x3f
    2bf2:	2e 97       	sbiw	r28, 0x0e	; 14
    2bf4:	09 95       	icall
    2bf6:	62 96       	adiw	r28, 0x12	; 18
		keypad.read();
    2bf8:	ee ad       	ldd	r30, Y+62	; 0x3e
    2bfa:	ff ad       	ldd	r31, Y+63	; 0x3f
    2bfc:	62 97       	sbiw	r28, 0x12	; 18
    2bfe:	09 95       	icall
    2c00:	6d e0       	ldi	r22, 0x0D	; 13
		//uartreceive=uart.read();
		/***Reading input***/
		lcd0.gotoxy(3,13);
    2c02:	70 e0       	ldi	r23, 0x00	; 0
    2c04:	83 e0       	ldi	r24, 0x03	; 3
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	f2 01       	movw	r30, r4
    2c0a:	09 95       	icall
		lcd0.putch(':');
    2c0c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2c0e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2c10:	8a e3       	ldi	r24, 0x3A	; 58
    2c12:	09 95       	icall
		lcd0.string_size(keypad.get().printstring,6);
    2c14:	f4 01       	movw	r30, r8
    2c16:	09 95       	icall
    2c18:	3c ab       	std	Y+52, r19	; 0x34
    2c1a:	4d ab       	std	Y+53, r20	; 0x35
    2c1c:	66 e0       	ldi	r22, 0x06	; 6
    2c1e:	8c a9       	ldd	r24, Y+52	; 0x34
    2c20:	9d a9       	ldd	r25, Y+53	; 0x35
    2c22:	f3 01       	movw	r30, r6
    2c24:	09 95       	icall
					
					
				break;
			/***MENU 2***/
			case '2': // Manual position override 
				if(!strcmp(keypad.get().string,"A")){Menu='3';keypad.flush();lcd0.clear();break;}
    2c26:	f4 01       	movw	r30, r8
    2c28:	09 95       	icall
    2c2a:	5f a3       	std	Y+39, r21	; 0x27
    2c2c:	68 a7       	std	Y+40, r22	; 0x28
    2c2e:	62 e1       	ldi	r22, 0x12	; 18
    2c30:	71 e0       	ldi	r23, 0x01	; 1
    2c32:	8f a1       	ldd	r24, Y+39	; 0x27
    2c34:	98 a5       	ldd	r25, Y+40	; 0x28
    2c36:	b2 d4       	rcall	.+2404   	; 0x359c <strcmp>
    2c38:	89 2b       	or	r24, r25
    2c3a:	09 f4       	brne	.+2      	; 0x2c3e <main+0x828>
    2c3c:	9f ce       	rjmp	.-706    	; 0x297c <main+0x566>
    2c3e:	a8 ce       	rjmp	.-688    	; 0x2990 <main+0x57a>

00002c40 <__vector_15>:
    2c40:	1f 92       	push	r1
}
/*
** interrupt
*/
ISR(TIMER0_COMP_vect) // 1Hz and usart Tx
{
    2c42:	0f 92       	push	r0
    2c44:	0f b6       	in	r0, 0x3f	; 63
    2c46:	0f 92       	push	r0
    2c48:	11 24       	eor	r1, r1
    2c4a:	0b b6       	in	r0, 0x3b	; 59
    2c4c:	0f 92       	push	r0
    2c4e:	0f 93       	push	r16
    2c50:	1f 93       	push	r17
    2c52:	2f 93       	push	r18
    2c54:	3f 93       	push	r19
    2c56:	4f 93       	push	r20
    2c58:	5f 93       	push	r21
    2c5a:	6f 93       	push	r22
    2c5c:	7f 93       	push	r23
    2c5e:	8f 93       	push	r24
    2c60:	9f 93       	push	r25
    2c62:	af 93       	push	r26
    2c64:	bf 93       	push	r27
    2c66:	cf 93       	push	r28
    2c68:	ef 93       	push	r30
    2c6a:	ff 93       	push	r31
	uint8_t Sreg;
	Sreg=SREG;
    2c6c:	cf b7       	in	r28, 0x3f	; 63
	SREG&=~(1<<7);
    2c6e:	8f b7       	in	r24, 0x3f	; 63
    2c70:	8f 77       	andi	r24, 0x7F	; 127
    2c72:	8f bf       	out	0x3f, r24	; 63
	if(count>repeat){ //59 -> 1Hz
    2c74:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <count>
    2c78:	8c 33       	cpi	r24, 0x3C	; 60
    2c7a:	08 f4       	brcc	.+2      	; 0x2c7e <__vector_15+0x3e>
    2c7c:	5f c0       	rjmp	.+190    	; 0x2d3c <__vector_15+0xfc>
		pid_out_1=pid_1.output(&pid_1,adcvalue,0.5);
    2c7e:	60 91 dc 03 	lds	r22, 0x03DC	; 0x8003dc <adcvalue>
    2c82:	70 91 dd 03 	lds	r23, 0x03DD	; 0x8003dd <adcvalue+0x1>
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	74 d1       	rcall	.+744    	; 0x2f74 <__floatunsisf>
    2c8c:	ab 01       	movw	r20, r22
    2c8e:	bc 01       	movw	r22, r24
    2c90:	e0 91 12 04 	lds	r30, 0x0412	; 0x800412 <pid_1+0x34>
    2c94:	f0 91 13 04 	lds	r31, 0x0413	; 0x800413 <pid_1+0x35>
    2c98:	00 e0       	ldi	r16, 0x00	; 0
    2c9a:	10 e0       	ldi	r17, 0x00	; 0
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	3f e3       	ldi	r19, 0x3F	; 63
    2ca0:	8e ed       	ldi	r24, 0xDE	; 222
    2ca2:	93 e0       	ldi	r25, 0x03	; 3
    2ca4:	09 95       	icall
    2ca6:	60 93 4a 04 	sts	0x044A, r22	; 0x80044a <pid_out_1>
    2caa:	70 93 4b 04 	sts	0x044B, r23	; 0x80044b <pid_out_1+0x1>
    2cae:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <pid_out_1+0x2>
    2cb2:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <pid_out_1+0x3>
		pid_out_2=pid_2.output(&pid_2,adcvalue,0.5);
    2cb6:	60 91 dc 03 	lds	r22, 0x03DC	; 0x8003dc <adcvalue>
    2cba:	70 91 dd 03 	lds	r23, 0x03DD	; 0x8003dd <adcvalue+0x1>
    2cbe:	80 e0       	ldi	r24, 0x00	; 0
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	58 d1       	rcall	.+688    	; 0x2f74 <__floatunsisf>
    2cc4:	ab 01       	movw	r20, r22
    2cc6:	bc 01       	movw	r22, r24
    2cc8:	e0 91 48 04 	lds	r30, 0x0448	; 0x800448 <pid_2+0x34>
    2ccc:	f0 91 49 04 	lds	r31, 0x0449	; 0x800449 <pid_2+0x35>
    2cd0:	00 e0       	ldi	r16, 0x00	; 0
    2cd2:	10 e0       	ldi	r17, 0x00	; 0
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	3f e3       	ldi	r19, 0x3F	; 63
    2cd8:	84 e1       	ldi	r24, 0x14	; 20
    2cda:	94 e0       	ldi	r25, 0x04	; 4
    2cdc:	09 95       	icall
    2cde:	60 93 d8 03 	sts	0x03D8, r22	; 0x8003d8 <pid_out_2>
    2ce2:	70 93 d9 03 	sts	0x03D9, r23	; 0x8003d9 <pid_out_2+0x1>
    2ce6:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <pid_out_2+0x2>
    2cea:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <pid_out_2+0x3>
		increment++;
    2cee:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <increment>
    2cf2:	8f 5f       	subi	r24, 0xFF	; 255
    2cf4:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <increment>
		if((increment & 0x0F) < 8){
    2cf8:	8f 70       	andi	r24, 0x0F	; 15
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	08 97       	sbiw	r24, 0x08	; 8
    2cfe:	74 f4       	brge	.+28     	; 0x2d1c <__vector_15+0xdc>
			shift.bit(0);
    2d00:	06 e8       	ldi	r16, 0x86	; 134
    2d02:	13 e0       	ldi	r17, 0x03	; 3
    2d04:	d8 01       	movw	r26, r16
    2d06:	ed 91       	ld	r30, X+
    2d08:	fc 91       	ld	r31, X
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	09 95       	icall
			shift.out();
    2d0e:	d8 01       	movw	r26, r16
    2d10:	14 96       	adiw	r26, 0x04	; 4
    2d12:	ed 91       	ld	r30, X+
    2d14:	fc 91       	ld	r31, X
    2d16:	15 97       	sbiw	r26, 0x05	; 5
    2d18:	09 95       	icall
    2d1a:	0d c0       	rjmp	.+26     	; 0x2d36 <__vector_15+0xf6>
		}else{
			shift.bit(1);
    2d1c:	06 e8       	ldi	r16, 0x86	; 134
    2d1e:	13 e0       	ldi	r17, 0x03	; 3
    2d20:	d8 01       	movw	r26, r16
    2d22:	ed 91       	ld	r30, X+
    2d24:	fc 91       	ld	r31, X
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	09 95       	icall
			shift.out();
    2d2a:	d8 01       	movw	r26, r16
    2d2c:	14 96       	adiw	r26, 0x04	; 4
    2d2e:	ed 91       	ld	r30, X+
    2d30:	fc 91       	ld	r31, X
    2d32:	15 97       	sbiw	r26, 0x05	; 5
    2d34:	09 95       	icall
		}
		
		count=0;
    2d36:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <count>
    2d3a:	03 c0       	rjmp	.+6      	; 0x2d42 <__vector_15+0x102>
	}else
		count++;
    2d3c:	8f 5f       	subi	r24, 0xFF	; 255
    2d3e:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <count>
	SREG=Sreg;
    2d42:	cf bf       	out	0x3f, r28	; 63
}
    2d44:	ff 91       	pop	r31
    2d46:	ef 91       	pop	r30
    2d48:	cf 91       	pop	r28
    2d4a:	bf 91       	pop	r27
    2d4c:	af 91       	pop	r26
    2d4e:	9f 91       	pop	r25
    2d50:	8f 91       	pop	r24
    2d52:	7f 91       	pop	r23
    2d54:	6f 91       	pop	r22
    2d56:	5f 91       	pop	r21
    2d58:	4f 91       	pop	r20
    2d5a:	3f 91       	pop	r19
    2d5c:	2f 91       	pop	r18
    2d5e:	1f 91       	pop	r17
    2d60:	0f 91       	pop	r16
    2d62:	0f 90       	pop	r0
    2d64:	0b be       	out	0x3b, r0	; 59
    2d66:	0f 90       	pop	r0
    2d68:	0f be       	out	0x3f, r0	; 63
    2d6a:	0f 90       	pop	r0
    2d6c:	1f 90       	pop	r1
    2d6e:	18 95       	reti

00002d70 <__subsf3>:
    2d70:	50 58       	subi	r21, 0x80	; 128

00002d72 <__addsf3>:
    2d72:	bb 27       	eor	r27, r27
    2d74:	aa 27       	eor	r26, r26
    2d76:	0e d0       	rcall	.+28     	; 0x2d94 <__addsf3x>
    2d78:	75 c1       	rjmp	.+746    	; 0x3064 <__fp_round>
    2d7a:	66 d1       	rcall	.+716    	; 0x3048 <__fp_pscA>
    2d7c:	30 f0       	brcs	.+12     	; 0x2d8a <__addsf3+0x18>
    2d7e:	6b d1       	rcall	.+726    	; 0x3056 <__fp_pscB>
    2d80:	20 f0       	brcs	.+8      	; 0x2d8a <__addsf3+0x18>
    2d82:	31 f4       	brne	.+12     	; 0x2d90 <__addsf3+0x1e>
    2d84:	9f 3f       	cpi	r25, 0xFF	; 255
    2d86:	11 f4       	brne	.+4      	; 0x2d8c <__addsf3+0x1a>
    2d88:	1e f4       	brtc	.+6      	; 0x2d90 <__addsf3+0x1e>
    2d8a:	5b c1       	rjmp	.+694    	; 0x3042 <__fp_nan>
    2d8c:	0e f4       	brtc	.+2      	; 0x2d90 <__addsf3+0x1e>
    2d8e:	e0 95       	com	r30
    2d90:	e7 fb       	bst	r30, 7
    2d92:	51 c1       	rjmp	.+674    	; 0x3036 <__fp_inf>

00002d94 <__addsf3x>:
    2d94:	e9 2f       	mov	r30, r25
    2d96:	77 d1       	rcall	.+750    	; 0x3086 <__fp_split3>
    2d98:	80 f3       	brcs	.-32     	; 0x2d7a <__addsf3+0x8>
    2d9a:	ba 17       	cp	r27, r26
    2d9c:	62 07       	cpc	r22, r18
    2d9e:	73 07       	cpc	r23, r19
    2da0:	84 07       	cpc	r24, r20
    2da2:	95 07       	cpc	r25, r21
    2da4:	18 f0       	brcs	.+6      	; 0x2dac <__addsf3x+0x18>
    2da6:	71 f4       	brne	.+28     	; 0x2dc4 <__addsf3x+0x30>
    2da8:	9e f5       	brtc	.+102    	; 0x2e10 <__addsf3x+0x7c>
    2daa:	8f c1       	rjmp	.+798    	; 0x30ca <__fp_zero>
    2dac:	0e f4       	brtc	.+2      	; 0x2db0 <__addsf3x+0x1c>
    2dae:	e0 95       	com	r30
    2db0:	0b 2e       	mov	r0, r27
    2db2:	ba 2f       	mov	r27, r26
    2db4:	a0 2d       	mov	r26, r0
    2db6:	0b 01       	movw	r0, r22
    2db8:	b9 01       	movw	r22, r18
    2dba:	90 01       	movw	r18, r0
    2dbc:	0c 01       	movw	r0, r24
    2dbe:	ca 01       	movw	r24, r20
    2dc0:	a0 01       	movw	r20, r0
    2dc2:	11 24       	eor	r1, r1
    2dc4:	ff 27       	eor	r31, r31
    2dc6:	59 1b       	sub	r21, r25
    2dc8:	99 f0       	breq	.+38     	; 0x2df0 <__addsf3x+0x5c>
    2dca:	59 3f       	cpi	r21, 0xF9	; 249
    2dcc:	50 f4       	brcc	.+20     	; 0x2de2 <__addsf3x+0x4e>
    2dce:	50 3e       	cpi	r21, 0xE0	; 224
    2dd0:	68 f1       	brcs	.+90     	; 0x2e2c <__addsf3x+0x98>
    2dd2:	1a 16       	cp	r1, r26
    2dd4:	f0 40       	sbci	r31, 0x00	; 0
    2dd6:	a2 2f       	mov	r26, r18
    2dd8:	23 2f       	mov	r18, r19
    2dda:	34 2f       	mov	r19, r20
    2ddc:	44 27       	eor	r20, r20
    2dde:	58 5f       	subi	r21, 0xF8	; 248
    2de0:	f3 cf       	rjmp	.-26     	; 0x2dc8 <__addsf3x+0x34>
    2de2:	46 95       	lsr	r20
    2de4:	37 95       	ror	r19
    2de6:	27 95       	ror	r18
    2de8:	a7 95       	ror	r26
    2dea:	f0 40       	sbci	r31, 0x00	; 0
    2dec:	53 95       	inc	r21
    2dee:	c9 f7       	brne	.-14     	; 0x2de2 <__addsf3x+0x4e>
    2df0:	7e f4       	brtc	.+30     	; 0x2e10 <__addsf3x+0x7c>
    2df2:	1f 16       	cp	r1, r31
    2df4:	ba 0b       	sbc	r27, r26
    2df6:	62 0b       	sbc	r22, r18
    2df8:	73 0b       	sbc	r23, r19
    2dfa:	84 0b       	sbc	r24, r20
    2dfc:	ba f0       	brmi	.+46     	; 0x2e2c <__addsf3x+0x98>
    2dfe:	91 50       	subi	r25, 0x01	; 1
    2e00:	a1 f0       	breq	.+40     	; 0x2e2a <__addsf3x+0x96>
    2e02:	ff 0f       	add	r31, r31
    2e04:	bb 1f       	adc	r27, r27
    2e06:	66 1f       	adc	r22, r22
    2e08:	77 1f       	adc	r23, r23
    2e0a:	88 1f       	adc	r24, r24
    2e0c:	c2 f7       	brpl	.-16     	; 0x2dfe <__addsf3x+0x6a>
    2e0e:	0e c0       	rjmp	.+28     	; 0x2e2c <__addsf3x+0x98>
    2e10:	ba 0f       	add	r27, r26
    2e12:	62 1f       	adc	r22, r18
    2e14:	73 1f       	adc	r23, r19
    2e16:	84 1f       	adc	r24, r20
    2e18:	48 f4       	brcc	.+18     	; 0x2e2c <__addsf3x+0x98>
    2e1a:	87 95       	ror	r24
    2e1c:	77 95       	ror	r23
    2e1e:	67 95       	ror	r22
    2e20:	b7 95       	ror	r27
    2e22:	f7 95       	ror	r31
    2e24:	9e 3f       	cpi	r25, 0xFE	; 254
    2e26:	08 f0       	brcs	.+2      	; 0x2e2a <__addsf3x+0x96>
    2e28:	b3 cf       	rjmp	.-154    	; 0x2d90 <__addsf3+0x1e>
    2e2a:	93 95       	inc	r25
    2e2c:	88 0f       	add	r24, r24
    2e2e:	08 f0       	brcs	.+2      	; 0x2e32 <__addsf3x+0x9e>
    2e30:	99 27       	eor	r25, r25
    2e32:	ee 0f       	add	r30, r30
    2e34:	97 95       	ror	r25
    2e36:	87 95       	ror	r24
    2e38:	08 95       	ret

00002e3a <__cmpsf2>:
    2e3a:	d9 d0       	rcall	.+434    	; 0x2fee <__fp_cmp>
    2e3c:	08 f4       	brcc	.+2      	; 0x2e40 <__cmpsf2+0x6>
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	08 95       	ret

00002e42 <__divsf3>:
    2e42:	0c d0       	rcall	.+24     	; 0x2e5c <__divsf3x>
    2e44:	0f c1       	rjmp	.+542    	; 0x3064 <__fp_round>
    2e46:	07 d1       	rcall	.+526    	; 0x3056 <__fp_pscB>
    2e48:	40 f0       	brcs	.+16     	; 0x2e5a <__divsf3+0x18>
    2e4a:	fe d0       	rcall	.+508    	; 0x3048 <__fp_pscA>
    2e4c:	30 f0       	brcs	.+12     	; 0x2e5a <__divsf3+0x18>
    2e4e:	21 f4       	brne	.+8      	; 0x2e58 <__divsf3+0x16>
    2e50:	5f 3f       	cpi	r21, 0xFF	; 255
    2e52:	19 f0       	breq	.+6      	; 0x2e5a <__divsf3+0x18>
    2e54:	f0 c0       	rjmp	.+480    	; 0x3036 <__fp_inf>
    2e56:	51 11       	cpse	r21, r1
    2e58:	39 c1       	rjmp	.+626    	; 0x30cc <__fp_szero>
    2e5a:	f3 c0       	rjmp	.+486    	; 0x3042 <__fp_nan>

00002e5c <__divsf3x>:
    2e5c:	14 d1       	rcall	.+552    	; 0x3086 <__fp_split3>
    2e5e:	98 f3       	brcs	.-26     	; 0x2e46 <__divsf3+0x4>

00002e60 <__divsf3_pse>:
    2e60:	99 23       	and	r25, r25
    2e62:	c9 f3       	breq	.-14     	; 0x2e56 <__divsf3+0x14>
    2e64:	55 23       	and	r21, r21
    2e66:	b1 f3       	breq	.-20     	; 0x2e54 <__divsf3+0x12>
    2e68:	95 1b       	sub	r25, r21
    2e6a:	55 0b       	sbc	r21, r21
    2e6c:	bb 27       	eor	r27, r27
    2e6e:	aa 27       	eor	r26, r26
    2e70:	62 17       	cp	r22, r18
    2e72:	73 07       	cpc	r23, r19
    2e74:	84 07       	cpc	r24, r20
    2e76:	38 f0       	brcs	.+14     	; 0x2e86 <__divsf3_pse+0x26>
    2e78:	9f 5f       	subi	r25, 0xFF	; 255
    2e7a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e7c:	22 0f       	add	r18, r18
    2e7e:	33 1f       	adc	r19, r19
    2e80:	44 1f       	adc	r20, r20
    2e82:	aa 1f       	adc	r26, r26
    2e84:	a9 f3       	breq	.-22     	; 0x2e70 <__divsf3_pse+0x10>
    2e86:	33 d0       	rcall	.+102    	; 0x2eee <__divsf3_pse+0x8e>
    2e88:	0e 2e       	mov	r0, r30
    2e8a:	3a f0       	brmi	.+14     	; 0x2e9a <__divsf3_pse+0x3a>
    2e8c:	e0 e8       	ldi	r30, 0x80	; 128
    2e8e:	30 d0       	rcall	.+96     	; 0x2ef0 <__divsf3_pse+0x90>
    2e90:	91 50       	subi	r25, 0x01	; 1
    2e92:	50 40       	sbci	r21, 0x00	; 0
    2e94:	e6 95       	lsr	r30
    2e96:	00 1c       	adc	r0, r0
    2e98:	ca f7       	brpl	.-14     	; 0x2e8c <__divsf3_pse+0x2c>
    2e9a:	29 d0       	rcall	.+82     	; 0x2eee <__divsf3_pse+0x8e>
    2e9c:	fe 2f       	mov	r31, r30
    2e9e:	27 d0       	rcall	.+78     	; 0x2eee <__divsf3_pse+0x8e>
    2ea0:	66 0f       	add	r22, r22
    2ea2:	77 1f       	adc	r23, r23
    2ea4:	88 1f       	adc	r24, r24
    2ea6:	bb 1f       	adc	r27, r27
    2ea8:	26 17       	cp	r18, r22
    2eaa:	37 07       	cpc	r19, r23
    2eac:	48 07       	cpc	r20, r24
    2eae:	ab 07       	cpc	r26, r27
    2eb0:	b0 e8       	ldi	r27, 0x80	; 128
    2eb2:	09 f0       	breq	.+2      	; 0x2eb6 <__divsf3_pse+0x56>
    2eb4:	bb 0b       	sbc	r27, r27
    2eb6:	80 2d       	mov	r24, r0
    2eb8:	bf 01       	movw	r22, r30
    2eba:	ff 27       	eor	r31, r31
    2ebc:	93 58       	subi	r25, 0x83	; 131
    2ebe:	5f 4f       	sbci	r21, 0xFF	; 255
    2ec0:	2a f0       	brmi	.+10     	; 0x2ecc <__divsf3_pse+0x6c>
    2ec2:	9e 3f       	cpi	r25, 0xFE	; 254
    2ec4:	51 05       	cpc	r21, r1
    2ec6:	68 f0       	brcs	.+26     	; 0x2ee2 <__divsf3_pse+0x82>
    2ec8:	b6 c0       	rjmp	.+364    	; 0x3036 <__fp_inf>
    2eca:	00 c1       	rjmp	.+512    	; 0x30cc <__fp_szero>
    2ecc:	5f 3f       	cpi	r21, 0xFF	; 255
    2ece:	ec f3       	brlt	.-6      	; 0x2eca <__divsf3_pse+0x6a>
    2ed0:	98 3e       	cpi	r25, 0xE8	; 232
    2ed2:	dc f3       	brlt	.-10     	; 0x2eca <__divsf3_pse+0x6a>
    2ed4:	86 95       	lsr	r24
    2ed6:	77 95       	ror	r23
    2ed8:	67 95       	ror	r22
    2eda:	b7 95       	ror	r27
    2edc:	f7 95       	ror	r31
    2ede:	9f 5f       	subi	r25, 0xFF	; 255
    2ee0:	c9 f7       	brne	.-14     	; 0x2ed4 <__divsf3_pse+0x74>
    2ee2:	88 0f       	add	r24, r24
    2ee4:	91 1d       	adc	r25, r1
    2ee6:	96 95       	lsr	r25
    2ee8:	87 95       	ror	r24
    2eea:	97 f9       	bld	r25, 7
    2eec:	08 95       	ret
    2eee:	e1 e0       	ldi	r30, 0x01	; 1
    2ef0:	66 0f       	add	r22, r22
    2ef2:	77 1f       	adc	r23, r23
    2ef4:	88 1f       	adc	r24, r24
    2ef6:	bb 1f       	adc	r27, r27
    2ef8:	62 17       	cp	r22, r18
    2efa:	73 07       	cpc	r23, r19
    2efc:	84 07       	cpc	r24, r20
    2efe:	ba 07       	cpc	r27, r26
    2f00:	20 f0       	brcs	.+8      	; 0x2f0a <__divsf3_pse+0xaa>
    2f02:	62 1b       	sub	r22, r18
    2f04:	73 0b       	sbc	r23, r19
    2f06:	84 0b       	sbc	r24, r20
    2f08:	ba 0b       	sbc	r27, r26
    2f0a:	ee 1f       	adc	r30, r30
    2f0c:	88 f7       	brcc	.-30     	; 0x2ef0 <__divsf3_pse+0x90>
    2f0e:	e0 95       	com	r30
    2f10:	08 95       	ret

00002f12 <__fixsfsi>:
    2f12:	04 d0       	rcall	.+8      	; 0x2f1c <__fixunssfsi>
    2f14:	68 94       	set
    2f16:	b1 11       	cpse	r27, r1
    2f18:	d9 c0       	rjmp	.+434    	; 0x30cc <__fp_szero>
    2f1a:	08 95       	ret

00002f1c <__fixunssfsi>:
    2f1c:	bc d0       	rcall	.+376    	; 0x3096 <__fp_splitA>
    2f1e:	88 f0       	brcs	.+34     	; 0x2f42 <__fixunssfsi+0x26>
    2f20:	9f 57       	subi	r25, 0x7F	; 127
    2f22:	90 f0       	brcs	.+36     	; 0x2f48 <__fixunssfsi+0x2c>
    2f24:	b9 2f       	mov	r27, r25
    2f26:	99 27       	eor	r25, r25
    2f28:	b7 51       	subi	r27, 0x17	; 23
    2f2a:	a0 f0       	brcs	.+40     	; 0x2f54 <__fixunssfsi+0x38>
    2f2c:	d1 f0       	breq	.+52     	; 0x2f62 <__fixunssfsi+0x46>
    2f2e:	66 0f       	add	r22, r22
    2f30:	77 1f       	adc	r23, r23
    2f32:	88 1f       	adc	r24, r24
    2f34:	99 1f       	adc	r25, r25
    2f36:	1a f0       	brmi	.+6      	; 0x2f3e <__fixunssfsi+0x22>
    2f38:	ba 95       	dec	r27
    2f3a:	c9 f7       	brne	.-14     	; 0x2f2e <__fixunssfsi+0x12>
    2f3c:	12 c0       	rjmp	.+36     	; 0x2f62 <__fixunssfsi+0x46>
    2f3e:	b1 30       	cpi	r27, 0x01	; 1
    2f40:	81 f0       	breq	.+32     	; 0x2f62 <__fixunssfsi+0x46>
    2f42:	c3 d0       	rcall	.+390    	; 0x30ca <__fp_zero>
    2f44:	b1 e0       	ldi	r27, 0x01	; 1
    2f46:	08 95       	ret
    2f48:	c0 c0       	rjmp	.+384    	; 0x30ca <__fp_zero>
    2f4a:	67 2f       	mov	r22, r23
    2f4c:	78 2f       	mov	r23, r24
    2f4e:	88 27       	eor	r24, r24
    2f50:	b8 5f       	subi	r27, 0xF8	; 248
    2f52:	39 f0       	breq	.+14     	; 0x2f62 <__fixunssfsi+0x46>
    2f54:	b9 3f       	cpi	r27, 0xF9	; 249
    2f56:	cc f3       	brlt	.-14     	; 0x2f4a <__fixunssfsi+0x2e>
    2f58:	86 95       	lsr	r24
    2f5a:	77 95       	ror	r23
    2f5c:	67 95       	ror	r22
    2f5e:	b3 95       	inc	r27
    2f60:	d9 f7       	brne	.-10     	; 0x2f58 <__fixunssfsi+0x3c>
    2f62:	3e f4       	brtc	.+14     	; 0x2f72 <__fixunssfsi+0x56>
    2f64:	90 95       	com	r25
    2f66:	80 95       	com	r24
    2f68:	70 95       	com	r23
    2f6a:	61 95       	neg	r22
    2f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f6e:	8f 4f       	sbci	r24, 0xFF	; 255
    2f70:	9f 4f       	sbci	r25, 0xFF	; 255
    2f72:	08 95       	ret

00002f74 <__floatunsisf>:
    2f74:	e8 94       	clt
    2f76:	09 c0       	rjmp	.+18     	; 0x2f8a <__floatsisf+0x12>

00002f78 <__floatsisf>:
    2f78:	97 fb       	bst	r25, 7
    2f7a:	3e f4       	brtc	.+14     	; 0x2f8a <__floatsisf+0x12>
    2f7c:	90 95       	com	r25
    2f7e:	80 95       	com	r24
    2f80:	70 95       	com	r23
    2f82:	61 95       	neg	r22
    2f84:	7f 4f       	sbci	r23, 0xFF	; 255
    2f86:	8f 4f       	sbci	r24, 0xFF	; 255
    2f88:	9f 4f       	sbci	r25, 0xFF	; 255
    2f8a:	99 23       	and	r25, r25
    2f8c:	a9 f0       	breq	.+42     	; 0x2fb8 <__floatsisf+0x40>
    2f8e:	f9 2f       	mov	r31, r25
    2f90:	96 e9       	ldi	r25, 0x96	; 150
    2f92:	bb 27       	eor	r27, r27
    2f94:	93 95       	inc	r25
    2f96:	f6 95       	lsr	r31
    2f98:	87 95       	ror	r24
    2f9a:	77 95       	ror	r23
    2f9c:	67 95       	ror	r22
    2f9e:	b7 95       	ror	r27
    2fa0:	f1 11       	cpse	r31, r1
    2fa2:	f8 cf       	rjmp	.-16     	; 0x2f94 <__floatsisf+0x1c>
    2fa4:	fa f4       	brpl	.+62     	; 0x2fe4 <__floatsisf+0x6c>
    2fa6:	bb 0f       	add	r27, r27
    2fa8:	11 f4       	brne	.+4      	; 0x2fae <__floatsisf+0x36>
    2faa:	60 ff       	sbrs	r22, 0
    2fac:	1b c0       	rjmp	.+54     	; 0x2fe4 <__floatsisf+0x6c>
    2fae:	6f 5f       	subi	r22, 0xFF	; 255
    2fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    2fb2:	8f 4f       	sbci	r24, 0xFF	; 255
    2fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fb6:	16 c0       	rjmp	.+44     	; 0x2fe4 <__floatsisf+0x6c>
    2fb8:	88 23       	and	r24, r24
    2fba:	11 f0       	breq	.+4      	; 0x2fc0 <__floatsisf+0x48>
    2fbc:	96 e9       	ldi	r25, 0x96	; 150
    2fbe:	11 c0       	rjmp	.+34     	; 0x2fe2 <__floatsisf+0x6a>
    2fc0:	77 23       	and	r23, r23
    2fc2:	21 f0       	breq	.+8      	; 0x2fcc <__floatsisf+0x54>
    2fc4:	9e e8       	ldi	r25, 0x8E	; 142
    2fc6:	87 2f       	mov	r24, r23
    2fc8:	76 2f       	mov	r23, r22
    2fca:	05 c0       	rjmp	.+10     	; 0x2fd6 <__floatsisf+0x5e>
    2fcc:	66 23       	and	r22, r22
    2fce:	71 f0       	breq	.+28     	; 0x2fec <__floatsisf+0x74>
    2fd0:	96 e8       	ldi	r25, 0x86	; 134
    2fd2:	86 2f       	mov	r24, r22
    2fd4:	70 e0       	ldi	r23, 0x00	; 0
    2fd6:	60 e0       	ldi	r22, 0x00	; 0
    2fd8:	2a f0       	brmi	.+10     	; 0x2fe4 <__floatsisf+0x6c>
    2fda:	9a 95       	dec	r25
    2fdc:	66 0f       	add	r22, r22
    2fde:	77 1f       	adc	r23, r23
    2fe0:	88 1f       	adc	r24, r24
    2fe2:	da f7       	brpl	.-10     	; 0x2fda <__floatsisf+0x62>
    2fe4:	88 0f       	add	r24, r24
    2fe6:	96 95       	lsr	r25
    2fe8:	87 95       	ror	r24
    2fea:	97 f9       	bld	r25, 7
    2fec:	08 95       	ret

00002fee <__fp_cmp>:
    2fee:	99 0f       	add	r25, r25
    2ff0:	00 08       	sbc	r0, r0
    2ff2:	55 0f       	add	r21, r21
    2ff4:	aa 0b       	sbc	r26, r26
    2ff6:	e0 e8       	ldi	r30, 0x80	; 128
    2ff8:	fe ef       	ldi	r31, 0xFE	; 254
    2ffa:	16 16       	cp	r1, r22
    2ffc:	17 06       	cpc	r1, r23
    2ffe:	e8 07       	cpc	r30, r24
    3000:	f9 07       	cpc	r31, r25
    3002:	c0 f0       	brcs	.+48     	; 0x3034 <__fp_cmp+0x46>
    3004:	12 16       	cp	r1, r18
    3006:	13 06       	cpc	r1, r19
    3008:	e4 07       	cpc	r30, r20
    300a:	f5 07       	cpc	r31, r21
    300c:	98 f0       	brcs	.+38     	; 0x3034 <__fp_cmp+0x46>
    300e:	62 1b       	sub	r22, r18
    3010:	73 0b       	sbc	r23, r19
    3012:	84 0b       	sbc	r24, r20
    3014:	95 0b       	sbc	r25, r21
    3016:	39 f4       	brne	.+14     	; 0x3026 <__fp_cmp+0x38>
    3018:	0a 26       	eor	r0, r26
    301a:	61 f0       	breq	.+24     	; 0x3034 <__fp_cmp+0x46>
    301c:	23 2b       	or	r18, r19
    301e:	24 2b       	or	r18, r20
    3020:	25 2b       	or	r18, r21
    3022:	21 f4       	brne	.+8      	; 0x302c <__fp_cmp+0x3e>
    3024:	08 95       	ret
    3026:	0a 26       	eor	r0, r26
    3028:	09 f4       	brne	.+2      	; 0x302c <__fp_cmp+0x3e>
    302a:	a1 40       	sbci	r26, 0x01	; 1
    302c:	a6 95       	lsr	r26
    302e:	8f ef       	ldi	r24, 0xFF	; 255
    3030:	81 1d       	adc	r24, r1
    3032:	81 1d       	adc	r24, r1
    3034:	08 95       	ret

00003036 <__fp_inf>:
    3036:	97 f9       	bld	r25, 7
    3038:	9f 67       	ori	r25, 0x7F	; 127
    303a:	80 e8       	ldi	r24, 0x80	; 128
    303c:	70 e0       	ldi	r23, 0x00	; 0
    303e:	60 e0       	ldi	r22, 0x00	; 0
    3040:	08 95       	ret

00003042 <__fp_nan>:
    3042:	9f ef       	ldi	r25, 0xFF	; 255
    3044:	80 ec       	ldi	r24, 0xC0	; 192
    3046:	08 95       	ret

00003048 <__fp_pscA>:
    3048:	00 24       	eor	r0, r0
    304a:	0a 94       	dec	r0
    304c:	16 16       	cp	r1, r22
    304e:	17 06       	cpc	r1, r23
    3050:	18 06       	cpc	r1, r24
    3052:	09 06       	cpc	r0, r25
    3054:	08 95       	ret

00003056 <__fp_pscB>:
    3056:	00 24       	eor	r0, r0
    3058:	0a 94       	dec	r0
    305a:	12 16       	cp	r1, r18
    305c:	13 06       	cpc	r1, r19
    305e:	14 06       	cpc	r1, r20
    3060:	05 06       	cpc	r0, r21
    3062:	08 95       	ret

00003064 <__fp_round>:
    3064:	09 2e       	mov	r0, r25
    3066:	03 94       	inc	r0
    3068:	00 0c       	add	r0, r0
    306a:	11 f4       	brne	.+4      	; 0x3070 <__fp_round+0xc>
    306c:	88 23       	and	r24, r24
    306e:	52 f0       	brmi	.+20     	; 0x3084 <__fp_round+0x20>
    3070:	bb 0f       	add	r27, r27
    3072:	40 f4       	brcc	.+16     	; 0x3084 <__fp_round+0x20>
    3074:	bf 2b       	or	r27, r31
    3076:	11 f4       	brne	.+4      	; 0x307c <__fp_round+0x18>
    3078:	60 ff       	sbrs	r22, 0
    307a:	04 c0       	rjmp	.+8      	; 0x3084 <__fp_round+0x20>
    307c:	6f 5f       	subi	r22, 0xFF	; 255
    307e:	7f 4f       	sbci	r23, 0xFF	; 255
    3080:	8f 4f       	sbci	r24, 0xFF	; 255
    3082:	9f 4f       	sbci	r25, 0xFF	; 255
    3084:	08 95       	ret

00003086 <__fp_split3>:
    3086:	57 fd       	sbrc	r21, 7
    3088:	90 58       	subi	r25, 0x80	; 128
    308a:	44 0f       	add	r20, r20
    308c:	55 1f       	adc	r21, r21
    308e:	59 f0       	breq	.+22     	; 0x30a6 <__fp_splitA+0x10>
    3090:	5f 3f       	cpi	r21, 0xFF	; 255
    3092:	71 f0       	breq	.+28     	; 0x30b0 <__fp_splitA+0x1a>
    3094:	47 95       	ror	r20

00003096 <__fp_splitA>:
    3096:	88 0f       	add	r24, r24
    3098:	97 fb       	bst	r25, 7
    309a:	99 1f       	adc	r25, r25
    309c:	61 f0       	breq	.+24     	; 0x30b6 <__fp_splitA+0x20>
    309e:	9f 3f       	cpi	r25, 0xFF	; 255
    30a0:	79 f0       	breq	.+30     	; 0x30c0 <__fp_splitA+0x2a>
    30a2:	87 95       	ror	r24
    30a4:	08 95       	ret
    30a6:	12 16       	cp	r1, r18
    30a8:	13 06       	cpc	r1, r19
    30aa:	14 06       	cpc	r1, r20
    30ac:	55 1f       	adc	r21, r21
    30ae:	f2 cf       	rjmp	.-28     	; 0x3094 <__fp_split3+0xe>
    30b0:	46 95       	lsr	r20
    30b2:	f1 df       	rcall	.-30     	; 0x3096 <__fp_splitA>
    30b4:	08 c0       	rjmp	.+16     	; 0x30c6 <__fp_splitA+0x30>
    30b6:	16 16       	cp	r1, r22
    30b8:	17 06       	cpc	r1, r23
    30ba:	18 06       	cpc	r1, r24
    30bc:	99 1f       	adc	r25, r25
    30be:	f1 cf       	rjmp	.-30     	; 0x30a2 <__fp_splitA+0xc>
    30c0:	86 95       	lsr	r24
    30c2:	71 05       	cpc	r23, r1
    30c4:	61 05       	cpc	r22, r1
    30c6:	08 94       	sec
    30c8:	08 95       	ret

000030ca <__fp_zero>:
    30ca:	e8 94       	clt

000030cc <__fp_szero>:
    30cc:	bb 27       	eor	r27, r27
    30ce:	66 27       	eor	r22, r22
    30d0:	77 27       	eor	r23, r23
    30d2:	cb 01       	movw	r24, r22
    30d4:	97 f9       	bld	r25, 7
    30d6:	08 95       	ret

000030d8 <__gesf2>:
    30d8:	8a df       	rcall	.-236    	; 0x2fee <__fp_cmp>
    30da:	08 f4       	brcc	.+2      	; 0x30de <__gesf2+0x6>
    30dc:	8f ef       	ldi	r24, 0xFF	; 255
    30de:	08 95       	ret

000030e0 <__mulsf3>:
    30e0:	0b d0       	rcall	.+22     	; 0x30f8 <__mulsf3x>
    30e2:	c0 cf       	rjmp	.-128    	; 0x3064 <__fp_round>
    30e4:	b1 df       	rcall	.-158    	; 0x3048 <__fp_pscA>
    30e6:	28 f0       	brcs	.+10     	; 0x30f2 <__mulsf3+0x12>
    30e8:	b6 df       	rcall	.-148    	; 0x3056 <__fp_pscB>
    30ea:	18 f0       	brcs	.+6      	; 0x30f2 <__mulsf3+0x12>
    30ec:	95 23       	and	r25, r21
    30ee:	09 f0       	breq	.+2      	; 0x30f2 <__mulsf3+0x12>
    30f0:	a2 cf       	rjmp	.-188    	; 0x3036 <__fp_inf>
    30f2:	a7 cf       	rjmp	.-178    	; 0x3042 <__fp_nan>
    30f4:	11 24       	eor	r1, r1
    30f6:	ea cf       	rjmp	.-44     	; 0x30cc <__fp_szero>

000030f8 <__mulsf3x>:
    30f8:	c6 df       	rcall	.-116    	; 0x3086 <__fp_split3>
    30fa:	a0 f3       	brcs	.-24     	; 0x30e4 <__mulsf3+0x4>

000030fc <__mulsf3_pse>:
    30fc:	95 9f       	mul	r25, r21
    30fe:	d1 f3       	breq	.-12     	; 0x30f4 <__mulsf3+0x14>
    3100:	95 0f       	add	r25, r21
    3102:	50 e0       	ldi	r21, 0x00	; 0
    3104:	55 1f       	adc	r21, r21
    3106:	62 9f       	mul	r22, r18
    3108:	f0 01       	movw	r30, r0
    310a:	72 9f       	mul	r23, r18
    310c:	bb 27       	eor	r27, r27
    310e:	f0 0d       	add	r31, r0
    3110:	b1 1d       	adc	r27, r1
    3112:	63 9f       	mul	r22, r19
    3114:	aa 27       	eor	r26, r26
    3116:	f0 0d       	add	r31, r0
    3118:	b1 1d       	adc	r27, r1
    311a:	aa 1f       	adc	r26, r26
    311c:	64 9f       	mul	r22, r20
    311e:	66 27       	eor	r22, r22
    3120:	b0 0d       	add	r27, r0
    3122:	a1 1d       	adc	r26, r1
    3124:	66 1f       	adc	r22, r22
    3126:	82 9f       	mul	r24, r18
    3128:	22 27       	eor	r18, r18
    312a:	b0 0d       	add	r27, r0
    312c:	a1 1d       	adc	r26, r1
    312e:	62 1f       	adc	r22, r18
    3130:	73 9f       	mul	r23, r19
    3132:	b0 0d       	add	r27, r0
    3134:	a1 1d       	adc	r26, r1
    3136:	62 1f       	adc	r22, r18
    3138:	83 9f       	mul	r24, r19
    313a:	a0 0d       	add	r26, r0
    313c:	61 1d       	adc	r22, r1
    313e:	22 1f       	adc	r18, r18
    3140:	74 9f       	mul	r23, r20
    3142:	33 27       	eor	r19, r19
    3144:	a0 0d       	add	r26, r0
    3146:	61 1d       	adc	r22, r1
    3148:	23 1f       	adc	r18, r19
    314a:	84 9f       	mul	r24, r20
    314c:	60 0d       	add	r22, r0
    314e:	21 1d       	adc	r18, r1
    3150:	82 2f       	mov	r24, r18
    3152:	76 2f       	mov	r23, r22
    3154:	6a 2f       	mov	r22, r26
    3156:	11 24       	eor	r1, r1
    3158:	9f 57       	subi	r25, 0x7F	; 127
    315a:	50 40       	sbci	r21, 0x00	; 0
    315c:	8a f0       	brmi	.+34     	; 0x3180 <__mulsf3_pse+0x84>
    315e:	e1 f0       	breq	.+56     	; 0x3198 <__mulsf3_pse+0x9c>
    3160:	88 23       	and	r24, r24
    3162:	4a f0       	brmi	.+18     	; 0x3176 <__mulsf3_pse+0x7a>
    3164:	ee 0f       	add	r30, r30
    3166:	ff 1f       	adc	r31, r31
    3168:	bb 1f       	adc	r27, r27
    316a:	66 1f       	adc	r22, r22
    316c:	77 1f       	adc	r23, r23
    316e:	88 1f       	adc	r24, r24
    3170:	91 50       	subi	r25, 0x01	; 1
    3172:	50 40       	sbci	r21, 0x00	; 0
    3174:	a9 f7       	brne	.-22     	; 0x3160 <__mulsf3_pse+0x64>
    3176:	9e 3f       	cpi	r25, 0xFE	; 254
    3178:	51 05       	cpc	r21, r1
    317a:	70 f0       	brcs	.+28     	; 0x3198 <__mulsf3_pse+0x9c>
    317c:	5c cf       	rjmp	.-328    	; 0x3036 <__fp_inf>
    317e:	a6 cf       	rjmp	.-180    	; 0x30cc <__fp_szero>
    3180:	5f 3f       	cpi	r21, 0xFF	; 255
    3182:	ec f3       	brlt	.-6      	; 0x317e <__mulsf3_pse+0x82>
    3184:	98 3e       	cpi	r25, 0xE8	; 232
    3186:	dc f3       	brlt	.-10     	; 0x317e <__mulsf3_pse+0x82>
    3188:	86 95       	lsr	r24
    318a:	77 95       	ror	r23
    318c:	67 95       	ror	r22
    318e:	b7 95       	ror	r27
    3190:	f7 95       	ror	r31
    3192:	e7 95       	ror	r30
    3194:	9f 5f       	subi	r25, 0xFF	; 255
    3196:	c1 f7       	brne	.-16     	; 0x3188 <__mulsf3_pse+0x8c>
    3198:	fe 2b       	or	r31, r30
    319a:	88 0f       	add	r24, r24
    319c:	91 1d       	adc	r25, r1
    319e:	96 95       	lsr	r25
    31a0:	87 95       	ror	r24
    31a2:	97 f9       	bld	r25, 7
    31a4:	08 95       	ret

000031a6 <pow>:
    31a6:	fa 01       	movw	r30, r20
    31a8:	ee 0f       	add	r30, r30
    31aa:	ff 1f       	adc	r31, r31
    31ac:	30 96       	adiw	r30, 0x00	; 0
    31ae:	21 05       	cpc	r18, r1
    31b0:	31 05       	cpc	r19, r1
    31b2:	99 f1       	breq	.+102    	; 0x321a <pow+0x74>
    31b4:	61 15       	cp	r22, r1
    31b6:	71 05       	cpc	r23, r1
    31b8:	61 f4       	brne	.+24     	; 0x31d2 <pow+0x2c>
    31ba:	80 38       	cpi	r24, 0x80	; 128
    31bc:	bf e3       	ldi	r27, 0x3F	; 63
    31be:	9b 07       	cpc	r25, r27
    31c0:	49 f1       	breq	.+82     	; 0x3214 <pow+0x6e>
    31c2:	68 94       	set
    31c4:	90 38       	cpi	r25, 0x80	; 128
    31c6:	81 05       	cpc	r24, r1
    31c8:	61 f0       	breq	.+24     	; 0x31e2 <pow+0x3c>
    31ca:	80 38       	cpi	r24, 0x80	; 128
    31cc:	bf ef       	ldi	r27, 0xFF	; 255
    31ce:	9b 07       	cpc	r25, r27
    31d0:	41 f0       	breq	.+16     	; 0x31e2 <pow+0x3c>
    31d2:	99 23       	and	r25, r25
    31d4:	42 f5       	brpl	.+80     	; 0x3226 <pow+0x80>
    31d6:	ff 3f       	cpi	r31, 0xFF	; 255
    31d8:	e1 05       	cpc	r30, r1
    31da:	31 05       	cpc	r19, r1
    31dc:	21 05       	cpc	r18, r1
    31de:	11 f1       	breq	.+68     	; 0x3224 <pow+0x7e>
    31e0:	e8 94       	clt
    31e2:	08 94       	sec
    31e4:	e7 95       	ror	r30
    31e6:	d9 01       	movw	r26, r18
    31e8:	aa 23       	and	r26, r26
    31ea:	29 f4       	brne	.+10     	; 0x31f6 <pow+0x50>
    31ec:	ab 2f       	mov	r26, r27
    31ee:	be 2f       	mov	r27, r30
    31f0:	f8 5f       	subi	r31, 0xF8	; 248
    31f2:	d0 f3       	brcs	.-12     	; 0x31e8 <pow+0x42>
    31f4:	10 c0       	rjmp	.+32     	; 0x3216 <pow+0x70>
    31f6:	ff 5f       	subi	r31, 0xFF	; 255
    31f8:	70 f4       	brcc	.+28     	; 0x3216 <pow+0x70>
    31fa:	a6 95       	lsr	r26
    31fc:	e0 f7       	brcc	.-8      	; 0x31f6 <pow+0x50>
    31fe:	f7 39       	cpi	r31, 0x97	; 151
    3200:	50 f0       	brcs	.+20     	; 0x3216 <pow+0x70>
    3202:	19 f0       	breq	.+6      	; 0x320a <pow+0x64>
    3204:	ff 3a       	cpi	r31, 0xAF	; 175
    3206:	38 f4       	brcc	.+14     	; 0x3216 <pow+0x70>
    3208:	9f 77       	andi	r25, 0x7F	; 127
    320a:	9f 93       	push	r25
    320c:	0c d0       	rcall	.+24     	; 0x3226 <pow+0x80>
    320e:	0f 90       	pop	r0
    3210:	07 fc       	sbrc	r0, 7
    3212:	90 58       	subi	r25, 0x80	; 128
    3214:	08 95       	ret
    3216:	3e f0       	brts	.+14     	; 0x3226 <pow+0x80>
    3218:	14 cf       	rjmp	.-472    	; 0x3042 <__fp_nan>
    321a:	60 e0       	ldi	r22, 0x00	; 0
    321c:	70 e0       	ldi	r23, 0x00	; 0
    321e:	80 e8       	ldi	r24, 0x80	; 128
    3220:	9f e3       	ldi	r25, 0x3F	; 63
    3222:	08 95       	ret
    3224:	4f e7       	ldi	r20, 0x7F	; 127
    3226:	9f 77       	andi	r25, 0x7F	; 127
    3228:	5f 93       	push	r21
    322a:	4f 93       	push	r20
    322c:	3f 93       	push	r19
    322e:	2f 93       	push	r18
    3230:	9e d0       	rcall	.+316    	; 0x336e <log>
    3232:	2f 91       	pop	r18
    3234:	3f 91       	pop	r19
    3236:	4f 91       	pop	r20
    3238:	5f 91       	pop	r21
    323a:	52 df       	rcall	.-348    	; 0x30e0 <__mulsf3>
    323c:	05 c0       	rjmp	.+10     	; 0x3248 <exp>
    323e:	19 f4       	brne	.+6      	; 0x3246 <pow+0xa0>
    3240:	0e f0       	brts	.+2      	; 0x3244 <pow+0x9e>
    3242:	f9 ce       	rjmp	.-526    	; 0x3036 <__fp_inf>
    3244:	42 cf       	rjmp	.-380    	; 0x30ca <__fp_zero>
    3246:	fd ce       	rjmp	.-518    	; 0x3042 <__fp_nan>

00003248 <exp>:
    3248:	26 df       	rcall	.-436    	; 0x3096 <__fp_splitA>
    324a:	c8 f3       	brcs	.-14     	; 0x323e <pow+0x98>
    324c:	96 38       	cpi	r25, 0x86	; 134
    324e:	c0 f7       	brcc	.-16     	; 0x3240 <pow+0x9a>
    3250:	07 f8       	bld	r0, 7
    3252:	0f 92       	push	r0
    3254:	e8 94       	clt
    3256:	2b e3       	ldi	r18, 0x3B	; 59
    3258:	3a ea       	ldi	r19, 0xAA	; 170
    325a:	48 eb       	ldi	r20, 0xB8	; 184
    325c:	5f e7       	ldi	r21, 0x7F	; 127
    325e:	4e df       	rcall	.-356    	; 0x30fc <__mulsf3_pse>
    3260:	0f 92       	push	r0
    3262:	0f 92       	push	r0
    3264:	0f 92       	push	r0
    3266:	4d b7       	in	r20, 0x3d	; 61
    3268:	5e b7       	in	r21, 0x3e	; 62
    326a:	0f 92       	push	r0
    326c:	c0 d0       	rcall	.+384    	; 0x33ee <modf>
    326e:	e2 ec       	ldi	r30, 0xC2	; 194
    3270:	f0 e0       	ldi	r31, 0x00	; 0
    3272:	16 d0       	rcall	.+44     	; 0x32a0 <__fp_powser>
    3274:	4f 91       	pop	r20
    3276:	5f 91       	pop	r21
    3278:	ef 91       	pop	r30
    327a:	ff 91       	pop	r31
    327c:	e5 95       	asr	r30
    327e:	ee 1f       	adc	r30, r30
    3280:	ff 1f       	adc	r31, r31
    3282:	49 f0       	breq	.+18     	; 0x3296 <exp+0x4e>
    3284:	fe 57       	subi	r31, 0x7E	; 126
    3286:	e0 68       	ori	r30, 0x80	; 128
    3288:	44 27       	eor	r20, r20
    328a:	ee 0f       	add	r30, r30
    328c:	44 1f       	adc	r20, r20
    328e:	fa 95       	dec	r31
    3290:	e1 f7       	brne	.-8      	; 0x328a <exp+0x42>
    3292:	41 95       	neg	r20
    3294:	55 0b       	sbc	r21, r21
    3296:	32 d0       	rcall	.+100    	; 0x32fc <ldexp>
    3298:	0f 90       	pop	r0
    329a:	07 fe       	sbrs	r0, 7
    329c:	26 c0       	rjmp	.+76     	; 0x32ea <inverse>
    329e:	08 95       	ret

000032a0 <__fp_powser>:
    32a0:	df 93       	push	r29
    32a2:	cf 93       	push	r28
    32a4:	1f 93       	push	r17
    32a6:	0f 93       	push	r16
    32a8:	ff 92       	push	r15
    32aa:	ef 92       	push	r14
    32ac:	df 92       	push	r13
    32ae:	7b 01       	movw	r14, r22
    32b0:	8c 01       	movw	r16, r24
    32b2:	68 94       	set
    32b4:	05 c0       	rjmp	.+10     	; 0x32c0 <__fp_powser+0x20>
    32b6:	da 2e       	mov	r13, r26
    32b8:	ef 01       	movw	r28, r30
    32ba:	1e df       	rcall	.-452    	; 0x30f8 <__mulsf3x>
    32bc:	fe 01       	movw	r30, r28
    32be:	e8 94       	clt
    32c0:	a5 91       	lpm	r26, Z+
    32c2:	25 91       	lpm	r18, Z+
    32c4:	35 91       	lpm	r19, Z+
    32c6:	45 91       	lpm	r20, Z+
    32c8:	55 91       	lpm	r21, Z+
    32ca:	ae f3       	brts	.-22     	; 0x32b6 <__fp_powser+0x16>
    32cc:	ef 01       	movw	r28, r30
    32ce:	62 dd       	rcall	.-1340   	; 0x2d94 <__addsf3x>
    32d0:	fe 01       	movw	r30, r28
    32d2:	97 01       	movw	r18, r14
    32d4:	a8 01       	movw	r20, r16
    32d6:	da 94       	dec	r13
    32d8:	79 f7       	brne	.-34     	; 0x32b8 <__fp_powser+0x18>
    32da:	df 90       	pop	r13
    32dc:	ef 90       	pop	r14
    32de:	ff 90       	pop	r15
    32e0:	0f 91       	pop	r16
    32e2:	1f 91       	pop	r17
    32e4:	cf 91       	pop	r28
    32e6:	df 91       	pop	r29
    32e8:	08 95       	ret

000032ea <inverse>:
    32ea:	9b 01       	movw	r18, r22
    32ec:	ac 01       	movw	r20, r24
    32ee:	60 e0       	ldi	r22, 0x00	; 0
    32f0:	70 e0       	ldi	r23, 0x00	; 0
    32f2:	80 e8       	ldi	r24, 0x80	; 128
    32f4:	9f e3       	ldi	r25, 0x3F	; 63
    32f6:	a5 cd       	rjmp	.-1206   	; 0x2e42 <__divsf3>
    32f8:	9e ce       	rjmp	.-708    	; 0x3036 <__fp_inf>
    32fa:	ac c0       	rjmp	.+344    	; 0x3454 <__fp_mpack>

000032fc <ldexp>:
    32fc:	cc de       	rcall	.-616    	; 0x3096 <__fp_splitA>
    32fe:	e8 f3       	brcs	.-6      	; 0x32fa <inverse+0x10>
    3300:	99 23       	and	r25, r25
    3302:	d9 f3       	breq	.-10     	; 0x32fa <inverse+0x10>
    3304:	94 0f       	add	r25, r20
    3306:	51 1d       	adc	r21, r1
    3308:	bb f3       	brvs	.-18     	; 0x32f8 <inverse+0xe>
    330a:	91 50       	subi	r25, 0x01	; 1
    330c:	50 40       	sbci	r21, 0x00	; 0
    330e:	94 f0       	brlt	.+36     	; 0x3334 <ldexp+0x38>
    3310:	59 f0       	breq	.+22     	; 0x3328 <ldexp+0x2c>
    3312:	88 23       	and	r24, r24
    3314:	32 f0       	brmi	.+12     	; 0x3322 <ldexp+0x26>
    3316:	66 0f       	add	r22, r22
    3318:	77 1f       	adc	r23, r23
    331a:	88 1f       	adc	r24, r24
    331c:	91 50       	subi	r25, 0x01	; 1
    331e:	50 40       	sbci	r21, 0x00	; 0
    3320:	c1 f7       	brne	.-16     	; 0x3312 <ldexp+0x16>
    3322:	9e 3f       	cpi	r25, 0xFE	; 254
    3324:	51 05       	cpc	r21, r1
    3326:	44 f7       	brge	.-48     	; 0x32f8 <inverse+0xe>
    3328:	88 0f       	add	r24, r24
    332a:	91 1d       	adc	r25, r1
    332c:	96 95       	lsr	r25
    332e:	87 95       	ror	r24
    3330:	97 f9       	bld	r25, 7
    3332:	08 95       	ret
    3334:	5f 3f       	cpi	r21, 0xFF	; 255
    3336:	ac f0       	brlt	.+42     	; 0x3362 <ldexp+0x66>
    3338:	98 3e       	cpi	r25, 0xE8	; 232
    333a:	9c f0       	brlt	.+38     	; 0x3362 <ldexp+0x66>
    333c:	bb 27       	eor	r27, r27
    333e:	86 95       	lsr	r24
    3340:	77 95       	ror	r23
    3342:	67 95       	ror	r22
    3344:	b7 95       	ror	r27
    3346:	08 f4       	brcc	.+2      	; 0x334a <ldexp+0x4e>
    3348:	b1 60       	ori	r27, 0x01	; 1
    334a:	93 95       	inc	r25
    334c:	c1 f7       	brne	.-16     	; 0x333e <ldexp+0x42>
    334e:	bb 0f       	add	r27, r27
    3350:	58 f7       	brcc	.-42     	; 0x3328 <ldexp+0x2c>
    3352:	11 f4       	brne	.+4      	; 0x3358 <ldexp+0x5c>
    3354:	60 ff       	sbrs	r22, 0
    3356:	e8 cf       	rjmp	.-48     	; 0x3328 <ldexp+0x2c>
    3358:	6f 5f       	subi	r22, 0xFF	; 255
    335a:	7f 4f       	sbci	r23, 0xFF	; 255
    335c:	8f 4f       	sbci	r24, 0xFF	; 255
    335e:	9f 4f       	sbci	r25, 0xFF	; 255
    3360:	e3 cf       	rjmp	.-58     	; 0x3328 <ldexp+0x2c>
    3362:	b4 ce       	rjmp	.-664    	; 0x30cc <__fp_szero>
    3364:	0e f0       	brts	.+2      	; 0x3368 <ldexp+0x6c>
    3366:	76 c0       	rjmp	.+236    	; 0x3454 <__fp_mpack>
    3368:	6c ce       	rjmp	.-808    	; 0x3042 <__fp_nan>
    336a:	68 94       	set
    336c:	64 ce       	rjmp	.-824    	; 0x3036 <__fp_inf>

0000336e <log>:
    336e:	93 de       	rcall	.-730    	; 0x3096 <__fp_splitA>
    3370:	c8 f3       	brcs	.-14     	; 0x3364 <ldexp+0x68>
    3372:	99 23       	and	r25, r25
    3374:	d1 f3       	breq	.-12     	; 0x336a <ldexp+0x6e>
    3376:	c6 f3       	brts	.-16     	; 0x3368 <ldexp+0x6c>
    3378:	df 93       	push	r29
    337a:	cf 93       	push	r28
    337c:	1f 93       	push	r17
    337e:	0f 93       	push	r16
    3380:	ff 92       	push	r15
    3382:	c9 2f       	mov	r28, r25
    3384:	dd 27       	eor	r29, r29
    3386:	88 23       	and	r24, r24
    3388:	2a f0       	brmi	.+10     	; 0x3394 <log+0x26>
    338a:	21 97       	sbiw	r28, 0x01	; 1
    338c:	66 0f       	add	r22, r22
    338e:	77 1f       	adc	r23, r23
    3390:	88 1f       	adc	r24, r24
    3392:	da f7       	brpl	.-10     	; 0x338a <log+0x1c>
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	40 e8       	ldi	r20, 0x80	; 128
    339a:	5f eb       	ldi	r21, 0xBF	; 191
    339c:	9f e3       	ldi	r25, 0x3F	; 63
    339e:	88 39       	cpi	r24, 0x98	; 152
    33a0:	20 f0       	brcs	.+8      	; 0x33aa <log+0x3c>
    33a2:	80 3e       	cpi	r24, 0xE0	; 224
    33a4:	30 f0       	brcs	.+12     	; 0x33b2 <log+0x44>
    33a6:	21 96       	adiw	r28, 0x01	; 1
    33a8:	8f 77       	andi	r24, 0x7F	; 127
    33aa:	e3 dc       	rcall	.-1594   	; 0x2d72 <__addsf3>
    33ac:	ea ee       	ldi	r30, 0xEA	; 234
    33ae:	f0 e0       	ldi	r31, 0x00	; 0
    33b0:	03 c0       	rjmp	.+6      	; 0x33b8 <log+0x4a>
    33b2:	df dc       	rcall	.-1602   	; 0x2d72 <__addsf3>
    33b4:	e7 e1       	ldi	r30, 0x17	; 23
    33b6:	f1 e0       	ldi	r31, 0x01	; 1
    33b8:	73 df       	rcall	.-282    	; 0x32a0 <__fp_powser>
    33ba:	8b 01       	movw	r16, r22
    33bc:	be 01       	movw	r22, r28
    33be:	ec 01       	movw	r28, r24
    33c0:	fb 2e       	mov	r15, r27
    33c2:	6f 57       	subi	r22, 0x7F	; 127
    33c4:	71 09       	sbc	r23, r1
    33c6:	75 95       	asr	r23
    33c8:	77 1f       	adc	r23, r23
    33ca:	88 0b       	sbc	r24, r24
    33cc:	99 0b       	sbc	r25, r25
    33ce:	d4 dd       	rcall	.-1112   	; 0x2f78 <__floatsisf>
    33d0:	28 e1       	ldi	r18, 0x18	; 24
    33d2:	32 e7       	ldi	r19, 0x72	; 114
    33d4:	41 e3       	ldi	r20, 0x31	; 49
    33d6:	5f e3       	ldi	r21, 0x3F	; 63
    33d8:	8f de       	rcall	.-738    	; 0x30f8 <__mulsf3x>
    33da:	af 2d       	mov	r26, r15
    33dc:	98 01       	movw	r18, r16
    33de:	ae 01       	movw	r20, r28
    33e0:	ff 90       	pop	r15
    33e2:	0f 91       	pop	r16
    33e4:	1f 91       	pop	r17
    33e6:	cf 91       	pop	r28
    33e8:	df 91       	pop	r29
    33ea:	d4 dc       	rcall	.-1624   	; 0x2d94 <__addsf3x>
    33ec:	3b ce       	rjmp	.-906    	; 0x3064 <__fp_round>

000033ee <modf>:
    33ee:	fa 01       	movw	r30, r20
    33f0:	dc 01       	movw	r26, r24
    33f2:	aa 0f       	add	r26, r26
    33f4:	bb 1f       	adc	r27, r27
    33f6:	9b 01       	movw	r18, r22
    33f8:	ac 01       	movw	r20, r24
    33fa:	bf 57       	subi	r27, 0x7F	; 127
    33fc:	28 f4       	brcc	.+10     	; 0x3408 <modf+0x1a>
    33fe:	22 27       	eor	r18, r18
    3400:	33 27       	eor	r19, r19
    3402:	44 27       	eor	r20, r20
    3404:	50 78       	andi	r21, 0x80	; 128
    3406:	1f c0       	rjmp	.+62     	; 0x3446 <modf+0x58>
    3408:	b7 51       	subi	r27, 0x17	; 23
    340a:	88 f4       	brcc	.+34     	; 0x342e <modf+0x40>
    340c:	ab 2f       	mov	r26, r27
    340e:	00 24       	eor	r0, r0
    3410:	46 95       	lsr	r20
    3412:	37 95       	ror	r19
    3414:	27 95       	ror	r18
    3416:	01 1c       	adc	r0, r1
    3418:	a3 95       	inc	r26
    341a:	d2 f3       	brmi	.-12     	; 0x3410 <modf+0x22>
    341c:	00 20       	and	r0, r0
    341e:	69 f0       	breq	.+26     	; 0x343a <modf+0x4c>
    3420:	22 0f       	add	r18, r18
    3422:	33 1f       	adc	r19, r19
    3424:	44 1f       	adc	r20, r20
    3426:	b3 95       	inc	r27
    3428:	da f3       	brmi	.-10     	; 0x3420 <modf+0x32>
    342a:	0d d0       	rcall	.+26     	; 0x3446 <modf+0x58>
    342c:	a1 cc       	rjmp	.-1726   	; 0x2d70 <__subsf3>
    342e:	61 30       	cpi	r22, 0x01	; 1
    3430:	71 05       	cpc	r23, r1
    3432:	a0 e8       	ldi	r26, 0x80	; 128
    3434:	8a 07       	cpc	r24, r26
    3436:	b9 46       	sbci	r27, 0x69	; 105
    3438:	30 f4       	brcc	.+12     	; 0x3446 <modf+0x58>
    343a:	9b 01       	movw	r18, r22
    343c:	ac 01       	movw	r20, r24
    343e:	66 27       	eor	r22, r22
    3440:	77 27       	eor	r23, r23
    3442:	88 27       	eor	r24, r24
    3444:	90 78       	andi	r25, 0x80	; 128
    3446:	30 96       	adiw	r30, 0x00	; 0
    3448:	21 f0       	breq	.+8      	; 0x3452 <modf+0x64>
    344a:	20 83       	st	Z, r18
    344c:	31 83       	std	Z+1, r19	; 0x01
    344e:	42 83       	std	Z+2, r20	; 0x02
    3450:	53 83       	std	Z+3, r21	; 0x03
    3452:	08 95       	ret

00003454 <__fp_mpack>:
    3454:	9f 3f       	cpi	r25, 0xFF	; 255
    3456:	31 f0       	breq	.+12     	; 0x3464 <__fp_mpack_finite+0xc>

00003458 <__fp_mpack_finite>:
    3458:	91 50       	subi	r25, 0x01	; 1
    345a:	20 f4       	brcc	.+8      	; 0x3464 <__fp_mpack_finite+0xc>
    345c:	87 95       	ror	r24
    345e:	77 95       	ror	r23
    3460:	67 95       	ror	r22
    3462:	b7 95       	ror	r27
    3464:	88 0f       	add	r24, r24
    3466:	91 1d       	adc	r25, r1
    3468:	96 95       	lsr	r25
    346a:	87 95       	ror	r24
    346c:	97 f9       	bld	r25, 7
    346e:	08 95       	ret

00003470 <__mulsi3>:
    3470:	db 01       	movw	r26, r22
    3472:	8f 93       	push	r24
    3474:	9f 93       	push	r25
    3476:	88 d0       	rcall	.+272    	; 0x3588 <__muluhisi3>
    3478:	bf 91       	pop	r27
    347a:	af 91       	pop	r26
    347c:	a2 9f       	mul	r26, r18
    347e:	80 0d       	add	r24, r0
    3480:	91 1d       	adc	r25, r1
    3482:	a3 9f       	mul	r26, r19
    3484:	90 0d       	add	r25, r0
    3486:	b2 9f       	mul	r27, r18
    3488:	90 0d       	add	r25, r0
    348a:	11 24       	eor	r1, r1
    348c:	08 95       	ret

0000348e <__udivmodhi4>:
    348e:	aa 1b       	sub	r26, r26
    3490:	bb 1b       	sub	r27, r27
    3492:	51 e1       	ldi	r21, 0x11	; 17
    3494:	07 c0       	rjmp	.+14     	; 0x34a4 <__udivmodhi4_ep>

00003496 <__udivmodhi4_loop>:
    3496:	aa 1f       	adc	r26, r26
    3498:	bb 1f       	adc	r27, r27
    349a:	a6 17       	cp	r26, r22
    349c:	b7 07       	cpc	r27, r23
    349e:	10 f0       	brcs	.+4      	; 0x34a4 <__udivmodhi4_ep>
    34a0:	a6 1b       	sub	r26, r22
    34a2:	b7 0b       	sbc	r27, r23

000034a4 <__udivmodhi4_ep>:
    34a4:	88 1f       	adc	r24, r24
    34a6:	99 1f       	adc	r25, r25
    34a8:	5a 95       	dec	r21
    34aa:	a9 f7       	brne	.-22     	; 0x3496 <__udivmodhi4_loop>
    34ac:	80 95       	com	r24
    34ae:	90 95       	com	r25
    34b0:	bc 01       	movw	r22, r24
    34b2:	cd 01       	movw	r24, r26
    34b4:	08 95       	ret

000034b6 <__divmodhi4>:
    34b6:	97 fb       	bst	r25, 7
    34b8:	07 2e       	mov	r0, r23
    34ba:	16 f4       	brtc	.+4      	; 0x34c0 <__divmodhi4+0xa>
    34bc:	00 94       	com	r0
    34be:	06 d0       	rcall	.+12     	; 0x34cc <__divmodhi4_neg1>
    34c0:	77 fd       	sbrc	r23, 7
    34c2:	08 d0       	rcall	.+16     	; 0x34d4 <__divmodhi4_neg2>
    34c4:	e4 df       	rcall	.-56     	; 0x348e <__udivmodhi4>
    34c6:	07 fc       	sbrc	r0, 7
    34c8:	05 d0       	rcall	.+10     	; 0x34d4 <__divmodhi4_neg2>
    34ca:	3e f4       	brtc	.+14     	; 0x34da <__divmodhi4_exit>

000034cc <__divmodhi4_neg1>:
    34cc:	90 95       	com	r25
    34ce:	81 95       	neg	r24
    34d0:	9f 4f       	sbci	r25, 0xFF	; 255
    34d2:	08 95       	ret

000034d4 <__divmodhi4_neg2>:
    34d4:	70 95       	com	r23
    34d6:	61 95       	neg	r22
    34d8:	7f 4f       	sbci	r23, 0xFF	; 255

000034da <__divmodhi4_exit>:
    34da:	08 95       	ret

000034dc <__udivmodsi4>:
    34dc:	a1 e2       	ldi	r26, 0x21	; 33
    34de:	1a 2e       	mov	r1, r26
    34e0:	aa 1b       	sub	r26, r26
    34e2:	bb 1b       	sub	r27, r27
    34e4:	fd 01       	movw	r30, r26
    34e6:	0d c0       	rjmp	.+26     	; 0x3502 <__udivmodsi4_ep>

000034e8 <__udivmodsi4_loop>:
    34e8:	aa 1f       	adc	r26, r26
    34ea:	bb 1f       	adc	r27, r27
    34ec:	ee 1f       	adc	r30, r30
    34ee:	ff 1f       	adc	r31, r31
    34f0:	a2 17       	cp	r26, r18
    34f2:	b3 07       	cpc	r27, r19
    34f4:	e4 07       	cpc	r30, r20
    34f6:	f5 07       	cpc	r31, r21
    34f8:	20 f0       	brcs	.+8      	; 0x3502 <__udivmodsi4_ep>
    34fa:	a2 1b       	sub	r26, r18
    34fc:	b3 0b       	sbc	r27, r19
    34fe:	e4 0b       	sbc	r30, r20
    3500:	f5 0b       	sbc	r31, r21

00003502 <__udivmodsi4_ep>:
    3502:	66 1f       	adc	r22, r22
    3504:	77 1f       	adc	r23, r23
    3506:	88 1f       	adc	r24, r24
    3508:	99 1f       	adc	r25, r25
    350a:	1a 94       	dec	r1
    350c:	69 f7       	brne	.-38     	; 0x34e8 <__udivmodsi4_loop>
    350e:	60 95       	com	r22
    3510:	70 95       	com	r23
    3512:	80 95       	com	r24
    3514:	90 95       	com	r25
    3516:	9b 01       	movw	r18, r22
    3518:	ac 01       	movw	r20, r24
    351a:	bd 01       	movw	r22, r26
    351c:	cf 01       	movw	r24, r30
    351e:	08 95       	ret

00003520 <__divmodsi4>:
    3520:	05 2e       	mov	r0, r21
    3522:	97 fb       	bst	r25, 7
    3524:	16 f4       	brtc	.+4      	; 0x352a <__divmodsi4+0xa>
    3526:	00 94       	com	r0
    3528:	0f d0       	rcall	.+30     	; 0x3548 <__negsi2>
    352a:	57 fd       	sbrc	r21, 7
    352c:	05 d0       	rcall	.+10     	; 0x3538 <__divmodsi4_neg2>
    352e:	d6 df       	rcall	.-84     	; 0x34dc <__udivmodsi4>
    3530:	07 fc       	sbrc	r0, 7
    3532:	02 d0       	rcall	.+4      	; 0x3538 <__divmodsi4_neg2>
    3534:	46 f4       	brtc	.+16     	; 0x3546 <__divmodsi4_exit>
    3536:	08 c0       	rjmp	.+16     	; 0x3548 <__negsi2>

00003538 <__divmodsi4_neg2>:
    3538:	50 95       	com	r21
    353a:	40 95       	com	r20
    353c:	30 95       	com	r19
    353e:	21 95       	neg	r18
    3540:	3f 4f       	sbci	r19, 0xFF	; 255
    3542:	4f 4f       	sbci	r20, 0xFF	; 255
    3544:	5f 4f       	sbci	r21, 0xFF	; 255

00003546 <__divmodsi4_exit>:
    3546:	08 95       	ret

00003548 <__negsi2>:
    3548:	90 95       	com	r25
    354a:	80 95       	com	r24
    354c:	70 95       	com	r23
    354e:	61 95       	neg	r22
    3550:	7f 4f       	sbci	r23, 0xFF	; 255
    3552:	8f 4f       	sbci	r24, 0xFF	; 255
    3554:	9f 4f       	sbci	r25, 0xFF	; 255
    3556:	08 95       	ret

00003558 <__tablejump2__>:
    3558:	ee 0f       	add	r30, r30
    355a:	ff 1f       	adc	r31, r31
    355c:	00 24       	eor	r0, r0
    355e:	00 1c       	adc	r0, r0
    3560:	0b be       	out	0x3b, r0	; 59
    3562:	07 90       	elpm	r0, Z+
    3564:	f6 91       	elpm	r31, Z
    3566:	e0 2d       	mov	r30, r0
    3568:	09 94       	ijmp

0000356a <__umulhisi3>:
    356a:	a2 9f       	mul	r26, r18
    356c:	b0 01       	movw	r22, r0
    356e:	b3 9f       	mul	r27, r19
    3570:	c0 01       	movw	r24, r0
    3572:	a3 9f       	mul	r26, r19
    3574:	70 0d       	add	r23, r0
    3576:	81 1d       	adc	r24, r1
    3578:	11 24       	eor	r1, r1
    357a:	91 1d       	adc	r25, r1
    357c:	b2 9f       	mul	r27, r18
    357e:	70 0d       	add	r23, r0
    3580:	81 1d       	adc	r24, r1
    3582:	11 24       	eor	r1, r1
    3584:	91 1d       	adc	r25, r1
    3586:	08 95       	ret

00003588 <__muluhisi3>:
    3588:	f0 df       	rcall	.-32     	; 0x356a <__umulhisi3>
    358a:	a5 9f       	mul	r26, r21
    358c:	90 0d       	add	r25, r0
    358e:	b4 9f       	mul	r27, r20
    3590:	90 0d       	add	r25, r0
    3592:	a4 9f       	mul	r26, r20
    3594:	80 0d       	add	r24, r0
    3596:	91 1d       	adc	r25, r1
    3598:	11 24       	eor	r1, r1
    359a:	08 95       	ret

0000359c <strcmp>:
    359c:	fb 01       	movw	r30, r22
    359e:	dc 01       	movw	r26, r24
    35a0:	8d 91       	ld	r24, X+
    35a2:	01 90       	ld	r0, Z+
    35a4:	80 19       	sub	r24, r0
    35a6:	01 10       	cpse	r0, r1
    35a8:	d9 f3       	breq	.-10     	; 0x35a0 <strcmp+0x4>
    35aa:	99 0b       	sbc	r25, r25
    35ac:	08 95       	ret

000035ae <strcpy>:
    35ae:	fb 01       	movw	r30, r22
    35b0:	dc 01       	movw	r26, r24
    35b2:	01 90       	ld	r0, Z+
    35b4:	0d 92       	st	X+, r0
    35b6:	00 20       	and	r0, r0
    35b8:	e1 f7       	brne	.-8      	; 0x35b2 <strcpy+0x4>
    35ba:	08 95       	ret

000035bc <strncpy>:
    35bc:	fb 01       	movw	r30, r22
    35be:	dc 01       	movw	r26, r24
    35c0:	41 50       	subi	r20, 0x01	; 1
    35c2:	50 40       	sbci	r21, 0x00	; 0
    35c4:	48 f0       	brcs	.+18     	; 0x35d8 <strncpy+0x1c>
    35c6:	01 90       	ld	r0, Z+
    35c8:	0d 92       	st	X+, r0
    35ca:	00 20       	and	r0, r0
    35cc:	c9 f7       	brne	.-14     	; 0x35c0 <strncpy+0x4>
    35ce:	01 c0       	rjmp	.+2      	; 0x35d2 <strncpy+0x16>
    35d0:	1d 92       	st	X+, r1
    35d2:	41 50       	subi	r20, 0x01	; 1
    35d4:	50 40       	sbci	r21, 0x00	; 0
    35d6:	e0 f7       	brcc	.-8      	; 0x35d0 <strncpy+0x14>
    35d8:	08 95       	ret

000035da <_exit>:
    35da:	f8 94       	cli

000035dc <__stop_program>:
    35dc:	ff cf       	rjmp	.-2      	; 0x35dc <__stop_program>
