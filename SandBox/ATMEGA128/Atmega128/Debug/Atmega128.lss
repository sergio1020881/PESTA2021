
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00002e7c  00002f10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000103  00800136  00800136  00002f46  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002f78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006b0  00000000  00000000  00002fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000625f  00000000  00000000  00003668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016bc  00000000  00000000  000098c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000037a3  00000000  00000000  0000af83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e4c  00000000  00000000  0000e728  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001166  00000000  00000000  0000f574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000435d  00000000  00000000  000106da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d0  00000000  00000000  00014a37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a1 c0       	rjmp	.+322    	; 0x144 <__ctors_end>
       2:	00 00       	nop
       4:	bf c0       	rjmp	.+382    	; 0x184 <__vector_1>
       6:	00 00       	nop
       8:	c7 c0       	rjmp	.+398    	; 0x198 <__vector_2>
       a:	00 00       	nop
       c:	cf c0       	rjmp	.+414    	; 0x1ac <__vector_3>
       e:	00 00       	nop
      10:	d7 c0       	rjmp	.+430    	; 0x1c0 <__vector_4>
      12:	00 00       	nop
      14:	df c0       	rjmp	.+446    	; 0x1d4 <__vector_5>
      16:	00 00       	nop
      18:	e7 c0       	rjmp	.+462    	; 0x1e8 <__vector_6>
      1a:	00 00       	nop
      1c:	ef c0       	rjmp	.+478    	; 0x1fc <__vector_7>
      1e:	00 00       	nop
      20:	f7 c0       	rjmp	.+494    	; 0x210 <__vector_8>
      22:	00 00       	nop
      24:	ae c0       	rjmp	.+348    	; 0x182 <__bad_interrupt>
      26:	00 00       	nop
      28:	78 c3       	rjmp	.+1776   	; 0x71a <__vector_10>
      2a:	00 00       	nop
      2c:	4e c3       	rjmp	.+1692   	; 0x6ca <__vector_11>
      2e:	00 00       	nop
      30:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__vector_12>
      34:	54 c3       	rjmp	.+1704   	; 0x6de <__vector_13>
      36:	00 00       	nop
      38:	66 c3       	rjmp	.+1740   	; 0x706 <__vector_14>
      3a:	00 00       	nop
      3c:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <__vector_15>
      40:	3a c3       	rjmp	.+1652   	; 0x6b6 <__vector_16>
      42:	00 00       	nop
      44:	9e c0       	rjmp	.+316    	; 0x182 <__bad_interrupt>
      46:	00 00       	nop
      48:	9c c0       	rjmp	.+312    	; 0x182 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9a c0       	rjmp	.+308    	; 0x182 <__bad_interrupt>
      4e:	00 00       	nop
      50:	98 c0       	rjmp	.+304    	; 0x182 <__bad_interrupt>
      52:	00 00       	nop
      54:	96 c0       	rjmp	.+300    	; 0x182 <__bad_interrupt>
      56:	00 00       	nop
      58:	94 c0       	rjmp	.+296    	; 0x182 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	92 c0       	rjmp	.+292    	; 0x182 <__bad_interrupt>
      5e:	00 00       	nop
      60:	48 c3       	rjmp	.+1680   	; 0x6f2 <__vector_24>
      62:	00 00       	nop
      64:	64 c3       	rjmp	.+1736   	; 0x72e <__vector_25>
      66:	00 00       	nop
      68:	6c c3       	rjmp	.+1752   	; 0x742 <__vector_26>
      6a:	00 00       	nop
      6c:	74 c3       	rjmp	.+1768   	; 0x756 <__vector_27>
      6e:	00 00       	nop
      70:	7c c3       	rjmp	.+1784   	; 0x76a <__vector_28>
      72:	00 00       	nop
      74:	84 c3       	rjmp	.+1800   	; 0x77e <__vector_29>
      76:	00 00       	nop
      78:	84 c0       	rjmp	.+264    	; 0x182 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	82 c0       	rjmp	.+260    	; 0x182 <__bad_interrupt>
      7e:	00 00       	nop
      80:	80 c0       	rjmp	.+256    	; 0x182 <__bad_interrupt>
      82:	00 00       	nop
      84:	7e c0       	rjmp	.+252    	; 0x182 <__bad_interrupt>
      86:	00 00       	nop
      88:	7c c0       	rjmp	.+248    	; 0x182 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7c 02       	muls	r23, r28
      8e:	80 02       	muls	r24, r16
      90:	84 02       	muls	r24, r20
      92:	88 02       	muls	r24, r24
      94:	8c 02       	muls	r24, r28
      96:	93 02       	muls	r25, r19
      98:	9a 02       	muls	r25, r26
      9a:	a1 02       	muls	r26, r17
      9c:	a5 02       	muls	r26, r21
      9e:	ac 02       	muls	r26, r28
      a0:	b3 02       	muls	r27, r19
      a2:	ba 02       	muls	r27, r26
      a4:	be 02       	muls	r27, r30
      a6:	c5 02       	muls	r28, r21
      a8:	cc 02       	muls	r28, r28
      aa:	e8 02       	muls	r30, r24
      ac:	ec 02       	muls	r30, r28
      ae:	f0 02       	muls	r31, r16
      b0:	f4 02       	muls	r31, r20
      b2:	fa 02       	muls	r31, r26
      b4:	fe 02       	muls	r31, r30
      b6:	02 03       	mulsu	r16, r18
      b8:	06 03       	mulsu	r16, r22
      ba:	0f 03       	fmul	r16, r23
      bc:	13 03       	mulsu	r17, r19
      be:	17 03       	mulsu	r17, r23
      c0:	20 03       	mulsu	r18, r16
      c2:	07 63       	ori	r16, 0x37	; 55
      c4:	42 36       	cpi	r20, 0x62	; 98
      c6:	b7 9b       	sbis	0x16, 7	; 22
      c8:	d8 a7       	std	Y+40, r29	; 0x28
      ca:	1a 39       	cpi	r17, 0x9A	; 154
      cc:	68 56       	subi	r22, 0x68	; 104
      ce:	18 ae       	std	Y+56, r1	; 0x38
      d0:	ba ab       	std	Y+50, r27	; 0x32
      d2:	55 8c       	ldd	r5, Z+29	; 0x1d
      d4:	1d 3c       	cpi	r17, 0xCD	; 205
      d6:	b7 cc       	rjmp	.-1682   	; 0xfffffa46 <__eeprom_end+0xff7efa46>
      d8:	57 63       	ori	r21, 0x37	; 55
      da:	bd 6d       	ori	r27, 0xDD	; 221
      dc:	ed fd       	.word	0xfded	; ????
      de:	75 3e       	cpi	r23, 0xE5	; 229
      e0:	f6 17       	cp	r31, r22
      e2:	72 31       	cpi	r23, 0x12	; 18
      e4:	bf 00       	.word	0x00bf	; ????
      e6:	00 00       	nop
      e8:	80 3f       	cpi	r24, 0xF0	; 240
      ea:	08 00       	.word	0x0008	; ????
      ec:	00 00       	nop
      ee:	be 92       	st	-X, r11
      f0:	24 49       	sbci	r18, 0x94	; 148
      f2:	12 3e       	cpi	r17, 0xE2	; 226
      f4:	ab aa       	std	Y+51, r10	; 0x33
      f6:	aa 2a       	or	r10, r26
      f8:	be cd       	rjmp	.-1156   	; 0xfffffc76 <__eeprom_end+0xff7efc76>
      fa:	cc cc       	rjmp	.-1640   	; 0xfffffa94 <__eeprom_end+0xff7efa94>
      fc:	4c 3e       	cpi	r20, 0xEC	; 236
      fe:	00 00       	nop
     100:	00 80       	ld	r0, Z
     102:	be ab       	std	Y+54, r27	; 0x36
     104:	aa aa       	std	Y+50, r10	; 0x32
     106:	aa 3e       	cpi	r26, 0xEA	; 234
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	bf 00       	.word	0x00bf	; ????
     10e:	00 00       	nop
     110:	80 3f       	cpi	r24, 0xF0	; 240
     112:	00 00       	nop
     114:	00 00       	nop
     116:	00 08       	sbc	r0, r0
     118:	41 78       	andi	r20, 0x81	; 129
     11a:	d3 bb       	out	0x13, r29	; 19
     11c:	43 87       	std	Z+11, r20	; 0x0b
     11e:	d1 13       	cpse	r29, r17
     120:	3d 19       	sub	r19, r13
     122:	0e 3c       	cpi	r16, 0xCE	; 206
     124:	c3 bd       	out	0x23, r28	; 35
     126:	42 82       	std	Z+2, r4	; 0x02
     128:	ad 2b       	or	r26, r29
     12a:	3e 68       	ori	r19, 0x8E	; 142
     12c:	ec 82       	std	Y+4, r14	; 0x04
     12e:	76 be       	out	0x36, r7	; 54
     130:	d9 8f       	std	Y+25, r29	; 0x19
     132:	e1 a9       	ldd	r30, Z+49	; 0x31
     134:	3e 4c       	sbci	r19, 0xCE	; 206
     136:	80 ef       	ldi	r24, 0xF0	; 240
     138:	ff be       	out	0x3f, r15	; 63
     13a:	01 c4       	rjmp	.+2050   	; 0x93e <FUNCswap+0x10>
     13c:	ff 7f       	andi	r31, 0xFF	; 255
     13e:	3f 00       	.word	0x003f	; ????
     140:	00 00       	nop
	...

00000144 <__ctors_end>:
     144:	11 24       	eor	r1, r1
     146:	1f be       	out	0x3f, r1	; 63
     148:	cf ef       	ldi	r28, 0xFF	; 255
     14a:	d0 e1       	ldi	r29, 0x10	; 16
     14c:	de bf       	out	0x3e, r29	; 62
     14e:	cd bf       	out	0x3d, r28	; 61

00000150 <__do_copy_data>:
     150:	11 e0       	ldi	r17, 0x01	; 1
     152:	a0 e0       	ldi	r26, 0x00	; 0
     154:	b1 e0       	ldi	r27, 0x01	; 1
     156:	ec e7       	ldi	r30, 0x7C	; 124
     158:	fe e2       	ldi	r31, 0x2E	; 46
     15a:	00 e0       	ldi	r16, 0x00	; 0
     15c:	0b bf       	out	0x3b, r16	; 59
     15e:	02 c0       	rjmp	.+4      	; 0x164 <__do_copy_data+0x14>
     160:	07 90       	elpm	r0, Z+
     162:	0d 92       	st	X+, r0
     164:	a6 33       	cpi	r26, 0x36	; 54
     166:	b1 07       	cpc	r27, r17
     168:	d9 f7       	brne	.-10     	; 0x160 <__do_copy_data+0x10>

0000016a <__do_clear_bss>:
     16a:	22 e0       	ldi	r18, 0x02	; 2
     16c:	a6 e3       	ldi	r26, 0x36	; 54
     16e:	b1 e0       	ldi	r27, 0x01	; 1
     170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
     172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
     174:	a9 33       	cpi	r26, 0x39	; 57
     176:	b2 07       	cpc	r27, r18
     178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>
     17a:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <main>
     17e:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <_exit>

00000182 <__bad_interrupt>:
     182:	3e cf       	rjmp	.-388    	; 0x0 <__vectors>

00000184 <__vector_1>:
			break;
	}
}
/***Interrupt***/
// cross out the ones being used and redefine in main
ISR(INT0_vect){ }
     184:	1f 92       	push	r1
     186:	0f 92       	push	r0
     188:	0f b6       	in	r0, 0x3f	; 63
     18a:	0f 92       	push	r0
     18c:	11 24       	eor	r1, r1
     18e:	0f 90       	pop	r0
     190:	0f be       	out	0x3f, r0	; 63
     192:	0f 90       	pop	r0
     194:	1f 90       	pop	r1
     196:	18 95       	reti

00000198 <__vector_2>:
ISR(INT1_vect){ }
     198:	1f 92       	push	r1
     19a:	0f 92       	push	r0
     19c:	0f b6       	in	r0, 0x3f	; 63
     19e:	0f 92       	push	r0
     1a0:	11 24       	eor	r1, r1
     1a2:	0f 90       	pop	r0
     1a4:	0f be       	out	0x3f, r0	; 63
     1a6:	0f 90       	pop	r0
     1a8:	1f 90       	pop	r1
     1aa:	18 95       	reti

000001ac <__vector_3>:
ISR(INT2_vect){ }
     1ac:	1f 92       	push	r1
     1ae:	0f 92       	push	r0
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	0f 92       	push	r0
     1b4:	11 24       	eor	r1, r1
     1b6:	0f 90       	pop	r0
     1b8:	0f be       	out	0x3f, r0	; 63
     1ba:	0f 90       	pop	r0
     1bc:	1f 90       	pop	r1
     1be:	18 95       	reti

000001c0 <__vector_4>:
ISR(INT3_vect){ }
     1c0:	1f 92       	push	r1
     1c2:	0f 92       	push	r0
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	0f 92       	push	r0
     1c8:	11 24       	eor	r1, r1
     1ca:	0f 90       	pop	r0
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	0f 90       	pop	r0
     1d0:	1f 90       	pop	r1
     1d2:	18 95       	reti

000001d4 <__vector_5>:
ISR(INT4_vect){ }
     1d4:	1f 92       	push	r1
     1d6:	0f 92       	push	r0
     1d8:	0f b6       	in	r0, 0x3f	; 63
     1da:	0f 92       	push	r0
     1dc:	11 24       	eor	r1, r1
     1de:	0f 90       	pop	r0
     1e0:	0f be       	out	0x3f, r0	; 63
     1e2:	0f 90       	pop	r0
     1e4:	1f 90       	pop	r1
     1e6:	18 95       	reti

000001e8 <__vector_6>:
ISR(INT5_vect){ }
     1e8:	1f 92       	push	r1
     1ea:	0f 92       	push	r0
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	0f 92       	push	r0
     1f0:	11 24       	eor	r1, r1
     1f2:	0f 90       	pop	r0
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	0f 90       	pop	r0
     1f8:	1f 90       	pop	r1
     1fa:	18 95       	reti

000001fc <__vector_7>:
ISR(INT6_vect){ }
     1fc:	1f 92       	push	r1
     1fe:	0f 92       	push	r0
     200:	0f b6       	in	r0, 0x3f	; 63
     202:	0f 92       	push	r0
     204:	11 24       	eor	r1, r1
     206:	0f 90       	pop	r0
     208:	0f be       	out	0x3f, r0	; 63
     20a:	0f 90       	pop	r0
     20c:	1f 90       	pop	r1
     20e:	18 95       	reti

00000210 <__vector_8>:
ISR(INT7_vect){ }
     210:	1f 92       	push	r1
     212:	0f 92       	push	r0
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	0f 92       	push	r0
     218:	11 24       	eor	r1, r1
     21a:	0f 90       	pop	r0
     21c:	0f be       	out	0x3f, r0	; 63
     21e:	0f 90       	pop	r0
     220:	1f 90       	pop	r1
     222:	18 95       	reti

00000224 <TIMER_COUNTER0_start>:
	timer3.compareB=TIMER_COUNTER3_compareB;
	timer3.compareC=TIMER_COUNTER3_compareC;
	timer3.start=TIMER_COUNTER3_start;
	timer3.stop=TIMER_COUNTER3_stop;
	return timer3;
}
     224:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <timer0_state>
     228:	21 11       	cpse	r18, r1
     22a:	41 c0       	rjmp	.+130    	; 0x2ae <TIMER_COUNTER0_start+0x8a>
     22c:	23 b7       	in	r18, 0x33	; 51
     22e:	28 7f       	andi	r18, 0xF8	; 248
     230:	23 bf       	out	0x33, r18	; 51
     232:	80 34       	cpi	r24, 0x40	; 64
     234:	91 05       	cpc	r25, r1
     236:	11 f1       	breq	.+68     	; 0x27c <TIMER_COUNTER0_start+0x58>
     238:	48 f4       	brcc	.+18     	; 0x24c <TIMER_COUNTER0_start+0x28>
     23a:	88 30       	cpi	r24, 0x08	; 8
     23c:	91 05       	cpc	r25, r1
     23e:	b1 f0       	breq	.+44     	; 0x26c <TIMER_COUNTER0_start+0x48>
     240:	80 32       	cpi	r24, 0x20	; 32
     242:	91 05       	cpc	r25, r1
     244:	b9 f0       	breq	.+46     	; 0x274 <TIMER_COUNTER0_start+0x50>
     246:	01 97       	sbiw	r24, 0x01	; 1
     248:	49 f5       	brne	.+82     	; 0x29c <TIMER_COUNTER0_start+0x78>
     24a:	0c c0       	rjmp	.+24     	; 0x264 <TIMER_COUNTER0_start+0x40>
     24c:	81 15       	cp	r24, r1
     24e:	21 e0       	ldi	r18, 0x01	; 1
     250:	92 07       	cpc	r25, r18
     252:	e1 f0       	breq	.+56     	; 0x28c <TIMER_COUNTER0_start+0x68>
     254:	81 15       	cp	r24, r1
     256:	24 e0       	ldi	r18, 0x04	; 4
     258:	92 07       	cpc	r25, r18
     25a:	e1 f0       	breq	.+56     	; 0x294 <TIMER_COUNTER0_start+0x70>
     25c:	80 38       	cpi	r24, 0x80	; 128
     25e:	91 05       	cpc	r25, r1
     260:	e9 f4       	brne	.+58     	; 0x29c <TIMER_COUNTER0_start+0x78>
     262:	10 c0       	rjmp	.+32     	; 0x284 <TIMER_COUNTER0_start+0x60>
     264:	83 b7       	in	r24, 0x33	; 51
     266:	81 60       	ori	r24, 0x01	; 1
     268:	83 bf       	out	0x33, r24	; 51
     26a:	1b c0       	rjmp	.+54     	; 0x2a2 <TIMER_COUNTER0_start+0x7e>
     26c:	83 b7       	in	r24, 0x33	; 51
     26e:	82 60       	ori	r24, 0x02	; 2
     270:	83 bf       	out	0x33, r24	; 51
     272:	17 c0       	rjmp	.+46     	; 0x2a2 <TIMER_COUNTER0_start+0x7e>
     274:	83 b7       	in	r24, 0x33	; 51
     276:	83 60       	ori	r24, 0x03	; 3
     278:	83 bf       	out	0x33, r24	; 51
     27a:	13 c0       	rjmp	.+38     	; 0x2a2 <TIMER_COUNTER0_start+0x7e>
     27c:	83 b7       	in	r24, 0x33	; 51
     27e:	84 60       	ori	r24, 0x04	; 4
     280:	83 bf       	out	0x33, r24	; 51
     282:	0f c0       	rjmp	.+30     	; 0x2a2 <TIMER_COUNTER0_start+0x7e>
     284:	83 b7       	in	r24, 0x33	; 51
     286:	85 60       	ori	r24, 0x05	; 5
     288:	83 bf       	out	0x33, r24	; 51
     28a:	0b c0       	rjmp	.+22     	; 0x2a2 <TIMER_COUNTER0_start+0x7e>
     28c:	83 b7       	in	r24, 0x33	; 51
     28e:	86 60       	ori	r24, 0x06	; 6
     290:	83 bf       	out	0x33, r24	; 51
     292:	07 c0       	rjmp	.+14     	; 0x2a2 <TIMER_COUNTER0_start+0x7e>
     294:	83 b7       	in	r24, 0x33	; 51
     296:	87 60       	ori	r24, 0x07	; 7
     298:	83 bf       	out	0x33, r24	; 51
     29a:	03 c0       	rjmp	.+6      	; 0x2a2 <TIMER_COUNTER0_start+0x7e>
     29c:	83 b7       	in	r24, 0x33	; 51
     29e:	87 60       	ori	r24, 0x07	; 7
     2a0:	83 bf       	out	0x33, r24	; 51
     2a2:	8f b7       	in	r24, 0x3f	; 63
     2a4:	80 68       	ori	r24, 0x80	; 128
     2a6:	8f bf       	out	0x3f, r24	; 63
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timer0_state>
     2ae:	08 95       	ret

000002b0 <TIMER_COUNTER0_compoutmode>:
     2b0:	93 b7       	in	r25, 0x33	; 51
     2b2:	9f 7c       	andi	r25, 0xCF	; 207
     2b4:	93 bf       	out	0x33, r25	; 51
     2b6:	82 30       	cpi	r24, 0x02	; 2
     2b8:	51 f0       	breq	.+20     	; 0x2ce <TIMER_COUNTER0_compoutmode+0x1e>
     2ba:	83 30       	cpi	r24, 0x03	; 3
     2bc:	71 f0       	breq	.+28     	; 0x2da <TIMER_COUNTER0_compoutmode+0x2a>
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	89 f4       	brne	.+34     	; 0x2e4 <TIMER_COUNTER0_compoutmode+0x34>
     2c2:	80 e1       	ldi	r24, 0x10	; 16
     2c4:	87 bb       	out	0x17, r24	; 23
     2c6:	83 b7       	in	r24, 0x33	; 51
     2c8:	80 61       	ori	r24, 0x10	; 16
     2ca:	83 bf       	out	0x33, r24	; 51
     2cc:	08 95       	ret
     2ce:	80 e1       	ldi	r24, 0x10	; 16
     2d0:	87 bb       	out	0x17, r24	; 23
     2d2:	83 b7       	in	r24, 0x33	; 51
     2d4:	80 62       	ori	r24, 0x20	; 32
     2d6:	83 bf       	out	0x33, r24	; 51
     2d8:	08 95       	ret
     2da:	80 e1       	ldi	r24, 0x10	; 16
     2dc:	87 bb       	out	0x17, r24	; 23
     2de:	83 b7       	in	r24, 0x33	; 51
     2e0:	80 63       	ori	r24, 0x30	; 48
     2e2:	83 bf       	out	0x33, r24	; 51
     2e4:	08 95       	ret

000002e6 <TIMER_COUNTER0_compare>:
     2e6:	81 bf       	out	0x31, r24	; 49
     2e8:	08 95       	ret

000002ea <TIMER_COUNTER0_stop>:
     2ea:	83 b7       	in	r24, 0x33	; 51
     2ec:	88 7f       	andi	r24, 0xF8	; 248
     2ee:	83 bf       	out	0x33, r24	; 51
     2f0:	12 be       	out	0x32, r1	; 50
     2f2:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <timer0_state>
     2f6:	08 95       	ret

000002f8 <TIMER_COUNTER1_start>:
     2f8:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <timer1_state>
     2fc:	21 11       	cpse	r18, r1
     2fe:	41 c0       	rjmp	.+130    	; 0x382 <TIMER_COUNTER1_start+0x8a>
     300:	2e b5       	in	r18, 0x2e	; 46
     302:	28 7f       	andi	r18, 0xF8	; 248
     304:	2e bd       	out	0x2e, r18	; 46
     306:	88 30       	cpi	r24, 0x08	; 8
     308:	91 05       	cpc	r25, r1
     30a:	d1 f0       	breq	.+52     	; 0x340 <TIMER_COUNTER1_start+0x48>
     30c:	48 f4       	brcc	.+18     	; 0x320 <TIMER_COUNTER1_start+0x28>
     30e:	83 30       	cpi	r24, 0x03	; 3
     310:	91 05       	cpc	r25, r1
     312:	31 f1       	breq	.+76     	; 0x360 <TIMER_COUNTER1_start+0x68>
     314:	85 30       	cpi	r24, 0x05	; 5
     316:	91 05       	cpc	r25, r1
     318:	39 f1       	breq	.+78     	; 0x368 <TIMER_COUNTER1_start+0x70>
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	49 f5       	brne	.+82     	; 0x370 <TIMER_COUNTER1_start+0x78>
     31e:	0c c0       	rjmp	.+24     	; 0x338 <TIMER_COUNTER1_start+0x40>
     320:	81 15       	cp	r24, r1
     322:	21 e0       	ldi	r18, 0x01	; 1
     324:	92 07       	cpc	r25, r18
     326:	a1 f0       	breq	.+40     	; 0x350 <TIMER_COUNTER1_start+0x58>
     328:	81 15       	cp	r24, r1
     32a:	24 e0       	ldi	r18, 0x04	; 4
     32c:	92 07       	cpc	r25, r18
     32e:	a1 f0       	breq	.+40     	; 0x358 <TIMER_COUNTER1_start+0x60>
     330:	80 34       	cpi	r24, 0x40	; 64
     332:	91 05       	cpc	r25, r1
     334:	e9 f4       	brne	.+58     	; 0x370 <TIMER_COUNTER1_start+0x78>
     336:	08 c0       	rjmp	.+16     	; 0x348 <TIMER_COUNTER1_start+0x50>
     338:	8e b5       	in	r24, 0x2e	; 46
     33a:	81 60       	ori	r24, 0x01	; 1
     33c:	8e bd       	out	0x2e, r24	; 46
     33e:	1b c0       	rjmp	.+54     	; 0x376 <TIMER_COUNTER1_start+0x7e>
     340:	8e b5       	in	r24, 0x2e	; 46
     342:	82 60       	ori	r24, 0x02	; 2
     344:	8e bd       	out	0x2e, r24	; 46
     346:	17 c0       	rjmp	.+46     	; 0x376 <TIMER_COUNTER1_start+0x7e>
     348:	8e b5       	in	r24, 0x2e	; 46
     34a:	83 60       	ori	r24, 0x03	; 3
     34c:	8e bd       	out	0x2e, r24	; 46
     34e:	13 c0       	rjmp	.+38     	; 0x376 <TIMER_COUNTER1_start+0x7e>
     350:	8e b5       	in	r24, 0x2e	; 46
     352:	84 60       	ori	r24, 0x04	; 4
     354:	8e bd       	out	0x2e, r24	; 46
     356:	0f c0       	rjmp	.+30     	; 0x376 <TIMER_COUNTER1_start+0x7e>
     358:	8e b5       	in	r24, 0x2e	; 46
     35a:	85 60       	ori	r24, 0x05	; 5
     35c:	8e bd       	out	0x2e, r24	; 46
     35e:	0b c0       	rjmp	.+22     	; 0x376 <TIMER_COUNTER1_start+0x7e>
     360:	8e b5       	in	r24, 0x2e	; 46
     362:	86 60       	ori	r24, 0x06	; 6
     364:	8e bd       	out	0x2e, r24	; 46
     366:	07 c0       	rjmp	.+14     	; 0x376 <TIMER_COUNTER1_start+0x7e>
     368:	8e b5       	in	r24, 0x2e	; 46
     36a:	87 60       	ori	r24, 0x07	; 7
     36c:	8e bd       	out	0x2e, r24	; 46
     36e:	03 c0       	rjmp	.+6      	; 0x376 <TIMER_COUNTER1_start+0x7e>
     370:	8e b5       	in	r24, 0x2e	; 46
     372:	85 60       	ori	r24, 0x05	; 5
     374:	8e bd       	out	0x2e, r24	; 46
     376:	8f b7       	in	r24, 0x3f	; 63
     378:	80 68       	ori	r24, 0x80	; 128
     37a:	8f bf       	out	0x3f, r24	; 63
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <timer1_state>
     382:	08 95       	ret

00000384 <TIMER_COUNTER1_compoutmodeA>:
     384:	9f b5       	in	r25, 0x2f	; 47
     386:	9f 73       	andi	r25, 0x3F	; 63
     388:	9f bd       	out	0x2f, r25	; 47
     38a:	82 30       	cpi	r24, 0x02	; 2
     38c:	49 f0       	breq	.+18     	; 0x3a0 <TIMER_COUNTER1_compoutmodeA+0x1c>
     38e:	83 30       	cpi	r24, 0x03	; 3
     390:	61 f0       	breq	.+24     	; 0x3aa <TIMER_COUNTER1_compoutmodeA+0x26>
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	71 f4       	brne	.+28     	; 0x3b2 <TIMER_COUNTER1_compoutmodeA+0x2e>
     396:	bd 9a       	sbi	0x17, 5	; 23
     398:	8f b5       	in	r24, 0x2f	; 47
     39a:	80 64       	ori	r24, 0x40	; 64
     39c:	8f bd       	out	0x2f, r24	; 47
     39e:	08 95       	ret
     3a0:	bd 9a       	sbi	0x17, 5	; 23
     3a2:	8f b5       	in	r24, 0x2f	; 47
     3a4:	80 68       	ori	r24, 0x80	; 128
     3a6:	8f bd       	out	0x2f, r24	; 47
     3a8:	08 95       	ret
     3aa:	bd 9a       	sbi	0x17, 5	; 23
     3ac:	8f b5       	in	r24, 0x2f	; 47
     3ae:	80 6c       	ori	r24, 0xC0	; 192
     3b0:	8f bd       	out	0x2f, r24	; 47
     3b2:	08 95       	ret

000003b4 <TIMER_COUNTER1_compoutmodeB>:
     3b4:	9f b5       	in	r25, 0x2f	; 47
     3b6:	9f 7c       	andi	r25, 0xCF	; 207
     3b8:	9f bd       	out	0x2f, r25	; 47
     3ba:	82 30       	cpi	r24, 0x02	; 2
     3bc:	49 f0       	breq	.+18     	; 0x3d0 <TIMER_COUNTER1_compoutmodeB+0x1c>
     3be:	83 30       	cpi	r24, 0x03	; 3
     3c0:	61 f0       	breq	.+24     	; 0x3da <TIMER_COUNTER1_compoutmodeB+0x26>
     3c2:	81 30       	cpi	r24, 0x01	; 1
     3c4:	71 f4       	brne	.+28     	; 0x3e2 <TIMER_COUNTER1_compoutmodeB+0x2e>
     3c6:	be 9a       	sbi	0x17, 6	; 23
     3c8:	8f b5       	in	r24, 0x2f	; 47
     3ca:	80 61       	ori	r24, 0x10	; 16
     3cc:	8f bd       	out	0x2f, r24	; 47
     3ce:	08 95       	ret
     3d0:	be 9a       	sbi	0x17, 6	; 23
     3d2:	8f b5       	in	r24, 0x2f	; 47
     3d4:	80 62       	ori	r24, 0x20	; 32
     3d6:	8f bd       	out	0x2f, r24	; 47
     3d8:	08 95       	ret
     3da:	be 9a       	sbi	0x17, 6	; 23
     3dc:	8f b5       	in	r24, 0x2f	; 47
     3de:	80 63       	ori	r24, 0x30	; 48
     3e0:	8f bd       	out	0x2f, r24	; 47
     3e2:	08 95       	ret

000003e4 <TIMER_COUNTER1_compoutmodeC>:
     3e4:	9f b5       	in	r25, 0x2f	; 47
     3e6:	93 7f       	andi	r25, 0xF3	; 243
     3e8:	9f bd       	out	0x2f, r25	; 47
     3ea:	82 30       	cpi	r24, 0x02	; 2
     3ec:	49 f0       	breq	.+18     	; 0x400 <__LOCK_REGION_LENGTH__>
     3ee:	83 30       	cpi	r24, 0x03	; 3
     3f0:	61 f0       	breq	.+24     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3f2:	81 30       	cpi	r24, 0x01	; 1
     3f4:	71 f4       	brne	.+28     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3f6:	bf 9a       	sbi	0x17, 7	; 23
     3f8:	8f b5       	in	r24, 0x2f	; 47
     3fa:	84 60       	ori	r24, 0x04	; 4
     3fc:	8f bd       	out	0x2f, r24	; 47
     3fe:	08 95       	ret
     400:	bf 9a       	sbi	0x17, 7	; 23
     402:	8f b5       	in	r24, 0x2f	; 47
     404:	88 60       	ori	r24, 0x08	; 8
     406:	8f bd       	out	0x2f, r24	; 47
     408:	08 95       	ret
     40a:	bf 9a       	sbi	0x17, 7	; 23
     40c:	8f b5       	in	r24, 0x2f	; 47
     40e:	8c 60       	ori	r24, 0x0C	; 12
     410:	8f bd       	out	0x2f, r24	; 47
     412:	08 95       	ret

00000414 <TIMER_COUNTER1_compareA>:
     414:	9b bd       	out	0x2b, r25	; 43
     416:	8a bd       	out	0x2a, r24	; 42
     418:	08 95       	ret

0000041a <TIMER_COUNTER1_compareB>:
     41a:	99 bd       	out	0x29, r25	; 41
     41c:	88 bd       	out	0x28, r24	; 40
     41e:	08 95       	ret

00000420 <TIMER_COUNTER1_compareC>:
     420:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     424:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     428:	08 95       	ret

0000042a <TIMER_COUNTER1_stop>:
     42a:	8e b5       	in	r24, 0x2e	; 46
     42c:	88 7f       	andi	r24, 0xF8	; 248
     42e:	8e bd       	out	0x2e, r24	; 46
     430:	1d bc       	out	0x2d, r1	; 45
     432:	1c bc       	out	0x2c, r1	; 44
     434:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <timer1_state>
     438:	08 95       	ret

0000043a <TIMER_COUNTER0enable>:
     43a:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <timer0_state>
     43e:	2f ef       	ldi	r18, 0xFF	; 255
     440:	21 bf       	out	0x31, r18	; 49
     442:	23 b7       	in	r18, 0x33	; 51
     444:	27 7b       	andi	r18, 0xB7	; 183
     446:	23 bf       	out	0x33, r18	; 51
     448:	62 30       	cpi	r22, 0x02	; 2
     44a:	41 f0       	breq	.+16     	; 0x45c <TIMER_COUNTER0enable+0x22>
     44c:	63 30       	cpi	r22, 0x03	; 3
     44e:	51 f0       	breq	.+20     	; 0x464 <TIMER_COUNTER0enable+0x2a>
     450:	61 30       	cpi	r22, 0x01	; 1
     452:	59 f4       	brne	.+22     	; 0x46a <TIMER_COUNTER0enable+0x30>
     454:	23 b7       	in	r18, 0x33	; 51
     456:	20 64       	ori	r18, 0x40	; 64
     458:	23 bf       	out	0x33, r18	; 51
     45a:	07 c0       	rjmp	.+14     	; 0x46a <TIMER_COUNTER0enable+0x30>
     45c:	23 b7       	in	r18, 0x33	; 51
     45e:	28 60       	ori	r18, 0x08	; 8
     460:	23 bf       	out	0x33, r18	; 51
     462:	03 c0       	rjmp	.+6      	; 0x46a <TIMER_COUNTER0enable+0x30>
     464:	23 b7       	in	r18, 0x33	; 51
     466:	28 64       	ori	r18, 0x48	; 72
     468:	23 bf       	out	0x33, r18	; 51
     46a:	27 b7       	in	r18, 0x37	; 55
     46c:	2e 7f       	andi	r18, 0xFE	; 254
     46e:	27 bf       	out	0x37, r18	; 55
     470:	27 b7       	in	r18, 0x37	; 55
     472:	2d 7f       	andi	r18, 0xFD	; 253
     474:	27 bf       	out	0x37, r18	; 55
     476:	42 30       	cpi	r20, 0x02	; 2
     478:	41 f0       	breq	.+16     	; 0x48a <TIMER_COUNTER0enable+0x50>
     47a:	43 30       	cpi	r20, 0x03	; 3
     47c:	51 f0       	breq	.+20     	; 0x492 <TIMER_COUNTER0enable+0x58>
     47e:	41 30       	cpi	r20, 0x01	; 1
     480:	71 f4       	brne	.+28     	; 0x49e <TIMER_COUNTER0enable+0x64>
     482:	27 b7       	in	r18, 0x37	; 55
     484:	21 60       	ori	r18, 0x01	; 1
     486:	27 bf       	out	0x37, r18	; 55
     488:	0a c0       	rjmp	.+20     	; 0x49e <TIMER_COUNTER0enable+0x64>
     48a:	27 b7       	in	r18, 0x37	; 55
     48c:	22 60       	ori	r18, 0x02	; 2
     48e:	27 bf       	out	0x37, r18	; 55
     490:	06 c0       	rjmp	.+12     	; 0x49e <TIMER_COUNTER0enable+0x64>
     492:	27 b7       	in	r18, 0x37	; 55
     494:	21 60       	ori	r18, 0x01	; 1
     496:	27 bf       	out	0x37, r18	; 55
     498:	27 b7       	in	r18, 0x37	; 55
     49a:	22 60       	ori	r18, 0x02	; 2
     49c:	27 bf       	out	0x37, r18	; 55
     49e:	28 e5       	ldi	r18, 0x58	; 88
     4a0:	31 e0       	ldi	r19, 0x01	; 1
     4a2:	fc 01       	movw	r30, r24
     4a4:	31 83       	std	Z+1, r19	; 0x01
     4a6:	20 83       	st	Z, r18
     4a8:	23 e7       	ldi	r18, 0x73	; 115
     4aa:	31 e0       	ldi	r19, 0x01	; 1
     4ac:	37 83       	std	Z+7, r19	; 0x07
     4ae:	26 83       	std	Z+6, r18	; 0x06
     4b0:	22 e1       	ldi	r18, 0x12	; 18
     4b2:	31 e0       	ldi	r19, 0x01	; 1
     4b4:	35 87       	std	Z+13, r19	; 0x0d
     4b6:	24 87       	std	Z+12, r18	; 0x0c
     4b8:	25 e7       	ldi	r18, 0x75	; 117
     4ba:	31 e0       	ldi	r19, 0x01	; 1
     4bc:	37 87       	std	Z+15, r19	; 0x0f
     4be:	26 87       	std	Z+14, r18	; 0x0e
     4c0:	08 95       	ret

000004c2 <TIMER_COUNTER1enable>:
     4c2:	0f 93       	push	r16
     4c4:	1f 93       	push	r17
     4c6:	dc 01       	movw	r26, r24
     4c8:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <timer1_state>
     4cc:	8f ef       	ldi	r24, 0xFF	; 255
     4ce:	9f ef       	ldi	r25, 0xFF	; 255
     4d0:	9b bd       	out	0x2b, r25	; 43
     4d2:	8a bd       	out	0x2a, r24	; 42
     4d4:	8f b5       	in	r24, 0x2f	; 47
     4d6:	8c 7f       	andi	r24, 0xFC	; 252
     4d8:	8f bd       	out	0x2f, r24	; 47
     4da:	8e b5       	in	r24, 0x2e	; 46
     4dc:	87 7e       	andi	r24, 0xE7	; 231
     4de:	8e bd       	out	0x2e, r24	; 46
     4e0:	06 2f       	mov	r16, r22
     4e2:	10 e0       	ldi	r17, 0x00	; 0
     4e4:	f8 01       	movw	r30, r16
     4e6:	31 97       	sbiw	r30, 0x01	; 1
     4e8:	ef 30       	cpi	r30, 0x0F	; 15
     4ea:	f1 05       	cpc	r31, r1
     4ec:	08 f0       	brcs	.+2      	; 0x4f0 <TIMER_COUNTER1enable+0x2e>
     4ee:	5a c0       	rjmp	.+180    	; 0x5a4 <TIMER_COUNTER1enable+0xe2>
     4f0:	ea 5b       	subi	r30, 0xBA	; 186
     4f2:	ff 4f       	sbci	r31, 0xFF	; 255
     4f4:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__tablejump2__>
     4f8:	8f b5       	in	r24, 0x2f	; 47
     4fa:	81 60       	ori	r24, 0x01	; 1
     4fc:	8f bd       	out	0x2f, r24	; 47
     4fe:	52 c0       	rjmp	.+164    	; 0x5a4 <TIMER_COUNTER1enable+0xe2>
     500:	8f b5       	in	r24, 0x2f	; 47
     502:	82 60       	ori	r24, 0x02	; 2
     504:	8f bd       	out	0x2f, r24	; 47
     506:	4e c0       	rjmp	.+156    	; 0x5a4 <TIMER_COUNTER1enable+0xe2>
     508:	8f b5       	in	r24, 0x2f	; 47
     50a:	83 60       	ori	r24, 0x03	; 3
     50c:	8f bd       	out	0x2f, r24	; 47
     50e:	4a c0       	rjmp	.+148    	; 0x5a4 <TIMER_COUNTER1enable+0xe2>
     510:	8e b5       	in	r24, 0x2e	; 46
     512:	88 60       	ori	r24, 0x08	; 8
     514:	8e bd       	out	0x2e, r24	; 46
     516:	46 c0       	rjmp	.+140    	; 0x5a4 <TIMER_COUNTER1enable+0xe2>
     518:	8f b5       	in	r24, 0x2f	; 47
     51a:	81 60       	ori	r24, 0x01	; 1
     51c:	8f bd       	out	0x2f, r24	; 47
     51e:	8e b5       	in	r24, 0x2e	; 46
     520:	88 60       	ori	r24, 0x08	; 8
     522:	8e bd       	out	0x2e, r24	; 46
     524:	3f c0       	rjmp	.+126    	; 0x5a4 <TIMER_COUNTER1enable+0xe2>
     526:	8f b5       	in	r24, 0x2f	; 47
     528:	82 60       	ori	r24, 0x02	; 2
     52a:	8f bd       	out	0x2f, r24	; 47
     52c:	8e b5       	in	r24, 0x2e	; 46
     52e:	88 60       	ori	r24, 0x08	; 8
     530:	8e bd       	out	0x2e, r24	; 46
     532:	38 c0       	rjmp	.+112    	; 0x5a4 <TIMER_COUNTER1enable+0xe2>
     534:	8f b5       	in	r24, 0x2f	; 47
     536:	83 60       	ori	r24, 0x03	; 3
     538:	8f bd       	out	0x2f, r24	; 47
     53a:	8e b5       	in	r24, 0x2e	; 46
     53c:	88 60       	ori	r24, 0x08	; 8
     53e:	8e bd       	out	0x2e, r24	; 46
     540:	31 c0       	rjmp	.+98     	; 0x5a4 <TIMER_COUNTER1enable+0xe2>
     542:	8e b5       	in	r24, 0x2e	; 46
     544:	80 61       	ori	r24, 0x10	; 16
     546:	8e bd       	out	0x2e, r24	; 46
     548:	2d c0       	rjmp	.+90     	; 0x5a4 <TIMER_COUNTER1enable+0xe2>
     54a:	8f b5       	in	r24, 0x2f	; 47
     54c:	81 60       	ori	r24, 0x01	; 1
     54e:	8f bd       	out	0x2f, r24	; 47
     550:	8e b5       	in	r24, 0x2e	; 46
     552:	80 61       	ori	r24, 0x10	; 16
     554:	8e bd       	out	0x2e, r24	; 46
     556:	26 c0       	rjmp	.+76     	; 0x5a4 <TIMER_COUNTER1enable+0xe2>
     558:	8f b5       	in	r24, 0x2f	; 47
     55a:	82 60       	ori	r24, 0x02	; 2
     55c:	8f bd       	out	0x2f, r24	; 47
     55e:	8e b5       	in	r24, 0x2e	; 46
     560:	80 61       	ori	r24, 0x10	; 16
     562:	8e bd       	out	0x2e, r24	; 46
     564:	1f c0       	rjmp	.+62     	; 0x5a4 <TIMER_COUNTER1enable+0xe2>
     566:	8f b5       	in	r24, 0x2f	; 47
     568:	83 60       	ori	r24, 0x03	; 3
     56a:	8f bd       	out	0x2f, r24	; 47
     56c:	8e b5       	in	r24, 0x2e	; 46
     56e:	80 61       	ori	r24, 0x10	; 16
     570:	8e bd       	out	0x2e, r24	; 46
     572:	18 c0       	rjmp	.+48     	; 0x5a4 <TIMER_COUNTER1enable+0xe2>
     574:	8e b5       	in	r24, 0x2e	; 46
     576:	88 61       	ori	r24, 0x18	; 24
     578:	8e bd       	out	0x2e, r24	; 46
     57a:	14 c0       	rjmp	.+40     	; 0x5a4 <TIMER_COUNTER1enable+0xe2>
     57c:	8f b5       	in	r24, 0x2f	; 47
     57e:	81 60       	ori	r24, 0x01	; 1
     580:	8f bd       	out	0x2f, r24	; 47
     582:	8e b5       	in	r24, 0x2e	; 46
     584:	88 61       	ori	r24, 0x18	; 24
     586:	8e bd       	out	0x2e, r24	; 46
     588:	0d c0       	rjmp	.+26     	; 0x5a4 <TIMER_COUNTER1enable+0xe2>
     58a:	8f b5       	in	r24, 0x2f	; 47
     58c:	82 60       	ori	r24, 0x02	; 2
     58e:	8f bd       	out	0x2f, r24	; 47
     590:	8e b5       	in	r24, 0x2e	; 46
     592:	88 61       	ori	r24, 0x18	; 24
     594:	8e bd       	out	0x2e, r24	; 46
     596:	06 c0       	rjmp	.+12     	; 0x5a4 <TIMER_COUNTER1enable+0xe2>
     598:	8f b5       	in	r24, 0x2f	; 47
     59a:	83 60       	ori	r24, 0x03	; 3
     59c:	8f bd       	out	0x2f, r24	; 47
     59e:	8e b5       	in	r24, 0x2e	; 46
     5a0:	88 61       	ori	r24, 0x18	; 24
     5a2:	8e bd       	out	0x2e, r24	; 46
     5a4:	8f b5       	in	r24, 0x2f	; 47
     5a6:	83 70       	andi	r24, 0x03	; 3
     5a8:	8f bd       	out	0x2f, r24	; 47
     5aa:	87 b7       	in	r24, 0x37	; 55
     5ac:	83 7c       	andi	r24, 0xC3	; 195
     5ae:	87 bf       	out	0x37, r24	; 55
     5b0:	ed e7       	ldi	r30, 0x7D	; 125
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	80 81       	ld	r24, Z
     5b6:	8e 7f       	andi	r24, 0xFE	; 254
     5b8:	80 83       	st	Z, r24
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	fa 01       	movw	r30, r20
     5be:	31 97       	sbiw	r30, 0x01	; 1
     5c0:	ec 30       	cpi	r30, 0x0C	; 12
     5c2:	f1 05       	cpc	r31, r1
     5c4:	08 f0       	brcs	.+2      	; 0x5c8 <TIMER_COUNTER1enable+0x106>
     5c6:	44 c0       	rjmp	.+136    	; 0x650 <TIMER_COUNTER1enable+0x18e>
     5c8:	eb 5a       	subi	r30, 0xAB	; 171
     5ca:	ff 4f       	sbci	r31, 0xFF	; 255
     5cc:	0c 94 7d 16 	jmp	0x2cfa	; 0x2cfa <__tablejump2__>
     5d0:	87 b7       	in	r24, 0x37	; 55
     5d2:	84 60       	ori	r24, 0x04	; 4
     5d4:	87 bf       	out	0x37, r24	; 55
     5d6:	3c c0       	rjmp	.+120    	; 0x650 <TIMER_COUNTER1enable+0x18e>
     5d8:	87 b7       	in	r24, 0x37	; 55
     5da:	80 61       	ori	r24, 0x10	; 16
     5dc:	87 bf       	out	0x37, r24	; 55
     5de:	38 c0       	rjmp	.+112    	; 0x650 <TIMER_COUNTER1enable+0x18e>
     5e0:	87 b7       	in	r24, 0x37	; 55
     5e2:	88 60       	ori	r24, 0x08	; 8
     5e4:	87 bf       	out	0x37, r24	; 55
     5e6:	34 c0       	rjmp	.+104    	; 0x650 <TIMER_COUNTER1enable+0x18e>
     5e8:	ed e7       	ldi	r30, 0x7D	; 125
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	80 81       	ld	r24, Z
     5ee:	81 60       	ori	r24, 0x01	; 1
     5f0:	80 83       	st	Z, r24
     5f2:	2e c0       	rjmp	.+92     	; 0x650 <TIMER_COUNTER1enable+0x18e>
     5f4:	87 b7       	in	r24, 0x37	; 55
     5f6:	80 62       	ori	r24, 0x20	; 32
     5f8:	87 bf       	out	0x37, r24	; 55
     5fa:	2a c0       	rjmp	.+84     	; 0x650 <TIMER_COUNTER1enable+0x18e>
     5fc:	87 b7       	in	r24, 0x37	; 55
     5fe:	84 61       	ori	r24, 0x14	; 20
     600:	87 bf       	out	0x37, r24	; 55
     602:	26 c0       	rjmp	.+76     	; 0x650 <TIMER_COUNTER1enable+0x18e>
     604:	87 b7       	in	r24, 0x37	; 55
     606:	8c 60       	ori	r24, 0x0C	; 12
     608:	87 bf       	out	0x37, r24	; 55
     60a:	22 c0       	rjmp	.+68     	; 0x650 <TIMER_COUNTER1enable+0x18e>
     60c:	87 b7       	in	r24, 0x37	; 55
     60e:	84 60       	ori	r24, 0x04	; 4
     610:	87 bf       	out	0x37, r24	; 55
     612:	ed e7       	ldi	r30, 0x7D	; 125
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	80 81       	ld	r24, Z
     618:	81 60       	ori	r24, 0x01	; 1
     61a:	80 83       	st	Z, r24
     61c:	19 c0       	rjmp	.+50     	; 0x650 <TIMER_COUNTER1enable+0x18e>
     61e:	87 b7       	in	r24, 0x37	; 55
     620:	84 62       	ori	r24, 0x24	; 36
     622:	87 bf       	out	0x37, r24	; 55
     624:	15 c0       	rjmp	.+42     	; 0x650 <TIMER_COUNTER1enable+0x18e>
     626:	87 b7       	in	r24, 0x37	; 55
     628:	8c 61       	ori	r24, 0x1C	; 28
     62a:	87 bf       	out	0x37, r24	; 55
     62c:	11 c0       	rjmp	.+34     	; 0x650 <TIMER_COUNTER1enable+0x18e>
     62e:	87 b7       	in	r24, 0x37	; 55
     630:	8c 61       	ori	r24, 0x1C	; 28
     632:	87 bf       	out	0x37, r24	; 55
     634:	ed e7       	ldi	r30, 0x7D	; 125
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	80 81       	ld	r24, Z
     63a:	81 60       	ori	r24, 0x01	; 1
     63c:	80 83       	st	Z, r24
     63e:	08 c0       	rjmp	.+16     	; 0x650 <TIMER_COUNTER1enable+0x18e>
     640:	87 b7       	in	r24, 0x37	; 55
     642:	88 61       	ori	r24, 0x18	; 24
     644:	87 bf       	out	0x37, r24	; 55
     646:	ed e7       	ldi	r30, 0x7D	; 125
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	80 81       	ld	r24, Z
     64c:	81 60       	ori	r24, 0x01	; 1
     64e:	80 83       	st	Z, r24
     650:	82 ec       	ldi	r24, 0xC2	; 194
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	11 96       	adiw	r26, 0x01	; 1
     656:	9c 93       	st	X, r25
     658:	8e 93       	st	-X, r24
     65a:	8a ed       	ldi	r24, 0xDA	; 218
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	13 96       	adiw	r26, 0x03	; 3
     660:	9c 93       	st	X, r25
     662:	8e 93       	st	-X, r24
     664:	12 97       	sbiw	r26, 0x02	; 2
     666:	82 ef       	ldi	r24, 0xF2	; 242
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	15 96       	adiw	r26, 0x05	; 5
     66c:	9c 93       	st	X, r25
     66e:	8e 93       	st	-X, r24
     670:	14 97       	sbiw	r26, 0x04	; 4
     672:	8a e0       	ldi	r24, 0x0A	; 10
     674:	92 e0       	ldi	r25, 0x02	; 2
     676:	17 96       	adiw	r26, 0x07	; 7
     678:	9c 93       	st	X, r25
     67a:	8e 93       	st	-X, r24
     67c:	16 97       	sbiw	r26, 0x06	; 6
     67e:	8d e0       	ldi	r24, 0x0D	; 13
     680:	92 e0       	ldi	r25, 0x02	; 2
     682:	19 96       	adiw	r26, 0x09	; 9
     684:	9c 93       	st	X, r25
     686:	8e 93       	st	-X, r24
     688:	18 97       	sbiw	r26, 0x08	; 8
     68a:	80 e1       	ldi	r24, 0x10	; 16
     68c:	92 e0       	ldi	r25, 0x02	; 2
     68e:	1b 96       	adiw	r26, 0x0b	; 11
     690:	9c 93       	st	X, r25
     692:	8e 93       	st	-X, r24
     694:	1a 97       	sbiw	r26, 0x0a	; 10
     696:	8c e7       	ldi	r24, 0x7C	; 124
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	1d 96       	adiw	r26, 0x0d	; 13
     69c:	9c 93       	st	X, r25
     69e:	8e 93       	st	-X, r24
     6a0:	1c 97       	sbiw	r26, 0x0c	; 12
     6a2:	85 e1       	ldi	r24, 0x15	; 21
     6a4:	92 e0       	ldi	r25, 0x02	; 2
     6a6:	1f 96       	adiw	r26, 0x0f	; 15
     6a8:	9c 93       	st	X, r25
     6aa:	8e 93       	st	-X, r24
     6ac:	1e 97       	sbiw	r26, 0x0e	; 14
     6ae:	cd 01       	movw	r24, r26
     6b0:	1f 91       	pop	r17
     6b2:	0f 91       	pop	r16
     6b4:	08 95       	ret

000006b6 <__vector_16>:
	timer3_state=0;
}
/***Interrupt***/
// So that main will not freeze when not defined, therefore exclude here! before use.
//ISR(TIMER0_COMP_vect){ }
ISR(TIMER0_OVF_vect){ }
     6b6:	1f 92       	push	r1
     6b8:	0f 92       	push	r0
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	0f 92       	push	r0
     6be:	11 24       	eor	r1, r1
     6c0:	0f 90       	pop	r0
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	0f 90       	pop	r0
     6c6:	1f 90       	pop	r1
     6c8:	18 95       	reti

000006ca <__vector_11>:
ISR(TIMER1_CAPT_vect){ }
     6ca:	1f 92       	push	r1
     6cc:	0f 92       	push	r0
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	0f 92       	push	r0
     6d2:	11 24       	eor	r1, r1
     6d4:	0f 90       	pop	r0
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	0f 90       	pop	r0
     6da:	1f 90       	pop	r1
     6dc:	18 95       	reti

000006de <__vector_13>:
//ISR(TIMER1_COMPA_vect){ }
ISR(TIMER1_COMPB_vect){ }
     6de:	1f 92       	push	r1
     6e0:	0f 92       	push	r0
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	0f 92       	push	r0
     6e6:	11 24       	eor	r1, r1
     6e8:	0f 90       	pop	r0
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	0f 90       	pop	r0
     6ee:	1f 90       	pop	r1
     6f0:	18 95       	reti

000006f2 <__vector_24>:
ISR(TIMER1_COMPC_vect){ }
     6f2:	1f 92       	push	r1
     6f4:	0f 92       	push	r0
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	0f 92       	push	r0
     6fa:	11 24       	eor	r1, r1
     6fc:	0f 90       	pop	r0
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	0f 90       	pop	r0
     702:	1f 90       	pop	r1
     704:	18 95       	reti

00000706 <__vector_14>:
ISR(TIMER1_OVF_vect){ }
     706:	1f 92       	push	r1
     708:	0f 92       	push	r0
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	0f 92       	push	r0
     70e:	11 24       	eor	r1, r1
     710:	0f 90       	pop	r0
     712:	0f be       	out	0x3f, r0	; 63
     714:	0f 90       	pop	r0
     716:	1f 90       	pop	r1
     718:	18 95       	reti

0000071a <__vector_10>:
ISR(TIMER2_OVF_vect){ }
     71a:	1f 92       	push	r1
     71c:	0f 92       	push	r0
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	0f 92       	push	r0
     722:	11 24       	eor	r1, r1
     724:	0f 90       	pop	r0
     726:	0f be       	out	0x3f, r0	; 63
     728:	0f 90       	pop	r0
     72a:	1f 90       	pop	r1
     72c:	18 95       	reti

0000072e <__vector_25>:
ISR(TIMER3_CAPT_vect){ }
     72e:	1f 92       	push	r1
     730:	0f 92       	push	r0
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	0f 92       	push	r0
     736:	11 24       	eor	r1, r1
     738:	0f 90       	pop	r0
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	0f 90       	pop	r0
     73e:	1f 90       	pop	r1
     740:	18 95       	reti

00000742 <__vector_26>:
ISR(TIMER3_COMPA_vect){ }
     742:	1f 92       	push	r1
     744:	0f 92       	push	r0
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	0f 92       	push	r0
     74a:	11 24       	eor	r1, r1
     74c:	0f 90       	pop	r0
     74e:	0f be       	out	0x3f, r0	; 63
     750:	0f 90       	pop	r0
     752:	1f 90       	pop	r1
     754:	18 95       	reti

00000756 <__vector_27>:
ISR(TIMER3_COMPB_vect){ }
     756:	1f 92       	push	r1
     758:	0f 92       	push	r0
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	0f 92       	push	r0
     75e:	11 24       	eor	r1, r1
     760:	0f 90       	pop	r0
     762:	0f be       	out	0x3f, r0	; 63
     764:	0f 90       	pop	r0
     766:	1f 90       	pop	r1
     768:	18 95       	reti

0000076a <__vector_28>:
ISR(TIMER3_COMPC_vect){ }
     76a:	1f 92       	push	r1
     76c:	0f 92       	push	r0
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	0f 92       	push	r0
     772:	11 24       	eor	r1, r1
     774:	0f 90       	pop	r0
     776:	0f be       	out	0x3f, r0	; 63
     778:	0f 90       	pop	r0
     77a:	1f 90       	pop	r1
     77c:	18 95       	reti

0000077e <__vector_29>:
ISR(TIMER3_OVF_vect){ }
     77e:	1f 92       	push	r1
     780:	0f 92       	push	r0
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	0f 92       	push	r0
     786:	11 24       	eor	r1, r1
     788:	0f 90       	pop	r0
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	0f 90       	pop	r0
     78e:	1f 90       	pop	r1
     790:	18 95       	reti

00000792 <EEPROMenable>:
#include "eeprom.h"
/***Constant & Macro***/
/***Global File Variable***/
/***Header***/
/***Procedure & Function***/
EEPROM EEPROMenable(void){
     792:	fc 01       	movw	r30, r24
	eprom.write_float=eeprom_write_float;
	eprom.update_float=eeprom_update_float;
	eprom.read_block=eeprom_read_block;
	eprom.write_block=eeprom_write_block;
	eprom.update_block=eeprom_update_block;
	return eprom;
     794:	85 ee       	ldi	r24, 0xE5	; 229
     796:	96 e1       	ldi	r25, 0x16	; 22
     798:	91 83       	std	Z+1, r25	; 0x01
     79a:	80 83       	st	Z, r24
     79c:	87 e2       	ldi	r24, 0x27	; 39
     79e:	97 e1       	ldi	r25, 0x17	; 23
     7a0:	93 83       	std	Z+3, r25	; 0x03
     7a2:	82 83       	std	Z+2, r24	; 0x02
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	97 e1       	ldi	r25, 0x17	; 23
     7a8:	95 83       	std	Z+5, r25	; 0x05
     7aa:	84 83       	std	Z+4, r24	; 0x04
     7ac:	8d ee       	ldi	r24, 0xED	; 237
     7ae:	96 e1       	ldi	r25, 0x16	; 22
     7b0:	97 83       	std	Z+7, r25	; 0x07
     7b2:	86 83       	std	Z+6, r24	; 0x06
     7b4:	89 e3       	ldi	r24, 0x39	; 57
     7b6:	97 e1       	ldi	r25, 0x17	; 23
     7b8:	91 87       	std	Z+9, r25	; 0x09
     7ba:	80 87       	std	Z+8, r24	; 0x08
     7bc:	8a e1       	ldi	r24, 0x1A	; 26
     7be:	97 e1       	ldi	r25, 0x17	; 23
     7c0:	93 87       	std	Z+11, r25	; 0x0b
     7c2:	82 87       	std	Z+10, r24	; 0x0a
     7c4:	84 e3       	ldi	r24, 0x34	; 52
     7c6:	97 e1       	ldi	r25, 0x17	; 23
     7c8:	97 87       	std	Z+15, r25	; 0x0f
     7ca:	86 87       	std	Z+14, r24	; 0x0e
     7cc:	84 e3       	ldi	r24, 0x34	; 52
     7ce:	97 e1       	ldi	r25, 0x17	; 23
     7d0:	95 8b       	std	Z+21, r25	; 0x15
     7d2:	84 8b       	std	Z+20, r24	; 0x14
     7d4:	82 e1       	ldi	r24, 0x12	; 18
     7d6:	97 e1       	ldi	r25, 0x17	; 23
     7d8:	97 8b       	std	Z+23, r25	; 0x17
     7da:	86 8b       	std	Z+22, r24	; 0x16
     7dc:	85 ed       	ldi	r24, 0xD5	; 213
     7de:	96 e1       	ldi	r25, 0x16	; 22
     7e0:	91 8f       	std	Z+25, r25	; 0x19
     7e2:	80 8f       	std	Z+24, r24	; 0x18
     7e4:	8e e1       	ldi	r24, 0x1E	; 30
     7e6:	97 e1       	ldi	r25, 0x17	; 23
     7e8:	93 8f       	std	Z+27, r25	; 0x1b
     7ea:	82 8f       	std	Z+26, r24	; 0x1a
     7ec:	82 ef       	ldi	r24, 0xF2	; 242
     7ee:	96 e1       	ldi	r25, 0x16	; 22
     7f0:	95 8f       	std	Z+29, r25	; 0x1d
     7f2:	84 8f       	std	Z+28, r24	; 0x1c
}
     7f4:	cf 01       	movw	r24, r30
     7f6:	08 95       	ret

000007f8 <EXPLODEboot>:
	/******/
	return explode;
}
// boot
void EXPLODEboot(EXPLODE* self, uint8_t x)
{
     7f8:	fc 01       	movw	r30, r24
	self->XI = self->XF;
     7fa:	82 81       	ldd	r24, Z+2	; 0x02
     7fc:	93 81       	ldd	r25, Z+3	; 0x03
     7fe:	91 83       	std	Z+1, r25	; 0x01
     800:	80 83       	st	Z, r24
	self->XF = x;
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	73 83       	std	Z+3, r23	; 0x03
     806:	62 83       	std	Z+2, r22	; 0x02
     808:	08 95       	ret

0000080a <EXPLODEhh>:
	trans = diff & self->XF;
	return (trans << nbits) | diff;
}
// hh
uint8_t EXPLODEhh(EXPLODE* self)
{
     80a:	fc 01       	movw	r30, r24
	uint8_t i;
	i = self->XI & self->XF;
	return i;
     80c:	90 81       	ld	r25, Z
     80e:	82 81       	ldd	r24, Z+2	; 0x02
}
     810:	89 23       	and	r24, r25
     812:	08 95       	ret

00000814 <EXPLODEll>:
// ll
uint8_t EXPLODEll(EXPLODE* self)
{
     814:	fc 01       	movw	r30, r24
	uint8_t i;
	i = self->XI | self->XF;
	return ~i;
     816:	90 81       	ld	r25, Z
     818:	82 81       	ldd	r24, Z+2	; 0x02
     81a:	89 2b       	or	r24, r25
}
     81c:	80 95       	com	r24
     81e:	08 95       	ret

00000820 <EXPLODElh>:
// lh
uint8_t EXPLODElh(EXPLODE* self)
{
     820:	fc 01       	movw	r30, r24
	uint8_t i;
	i = self->XI ^ self->XF;
     822:	92 81       	ldd	r25, Z+2	; 0x02
     824:	80 81       	ld	r24, Z
     826:	89 27       	eor	r24, r25
	i &= self->XF;
	return i;
}
     828:	89 23       	and	r24, r25
     82a:	08 95       	ret

0000082c <EXPLODEhl>:
// hl
uint8_t EXPLODEhl(EXPLODE* self)
{
     82c:	fc 01       	movw	r30, r24
	uint8_t i;
	i = self->XF ^ self->XI;
     82e:	90 81       	ld	r25, Z
     830:	82 81       	ldd	r24, Z+2	; 0x02
     832:	89 27       	eor	r24, r25
	i &= self->XI;
	return i;
}
     834:	89 23       	and	r24, r25
     836:	08 95       	ret

00000838 <EXPLODEdiff>:
// diff
uint8_t EXPLODEdiff(EXPLODE* self)
{
     838:	fc 01       	movw	r30, r24
	return self->XF ^ self->XI;
     83a:	92 81       	ldd	r25, Z+2	; 0x02
     83c:	80 81       	ld	r24, Z
}
     83e:	89 27       	eor	r24, r25
     840:	08 95       	ret

00000842 <EXPLODEdata>:
uint8_t EXPLODEdata(EXPLODE* self)
{
	return self->XF;	
}
     842:	fc 01       	movw	r30, r24
     844:	82 81       	ldd	r24, Z+2	; 0x02
     846:	08 95       	ret

00000848 <EXPLODEmayia>:
	self->XI = self->XF;
	self->XF = x;
}
// mayia
uint8_t EXPLODEmayia(EXPLODE* self, uint8_t nbits)
{//magic formula
     848:	dc 01       	movw	r26, r24
// power: raise base to n-th power; n >= 0
uint8_t EXPLODEPwr(uint8_t bs, uint8_t n)
{
	uint8_t i, p;
	p = ONE;
	for (i = ONE; i <= n; ++i)
     84a:	66 23       	and	r22, r22
     84c:	39 f0       	breq	.+14     	; 0x85c <EXPLODEmayia+0x14>
     84e:	91 e0       	ldi	r25, 0x01	; 1
     850:	21 e0       	ldi	r18, 0x01	; 1
	p = p * bs;
     852:	22 0f       	add	r18, r18
// power: raise base to n-th power; n >= 0
uint8_t EXPLODEPwr(uint8_t bs, uint8_t n)
{
	uint8_t i, p;
	p = ONE;
	for (i = ONE; i <= n; ++i)
     854:	9f 5f       	subi	r25, 0xFF	; 255
     856:	69 17       	cp	r22, r25
     858:	e0 f7       	brcc	.-8      	; 0x852 <EXPLODEmayia+0xa>
     85a:	01 c0       	rjmp	.+2      	; 0x85e <EXPLODEmayia+0x16>
/*******************************************************************/
// power: raise base to n-th power; n >= 0
uint8_t EXPLODEPwr(uint8_t bs, uint8_t n)
{
	uint8_t i, p;
	p = ONE;
     85c:	21 e0       	ldi	r18, 0x01	; 1
uint8_t EXPLODEmayia(EXPLODE* self, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask = EXPLODEPwr(2,nbits)-ONE;
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	21 50       	subi	r18, 0x01	; 1
     862:	31 09       	sbc	r19, r1
	self->XI &= mask;
     864:	ed 91       	ld	r30, X+
     866:	fc 91       	ld	r31, X
     868:	11 97       	sbiw	r26, 0x01	; 1
     86a:	e2 23       	and	r30, r18
     86c:	f3 23       	and	r31, r19
     86e:	11 96       	adiw	r26, 0x01	; 1
     870:	fc 93       	st	X, r31
     872:	ee 93       	st	-X, r30
	self->XF &= mask;
     874:	12 96       	adiw	r26, 0x02	; 2
     876:	4d 91       	ld	r20, X+
     878:	5c 91       	ld	r21, X
     87a:	13 97       	sbiw	r26, 0x03	; 3
     87c:	24 23       	and	r18, r20
     87e:	35 23       	and	r19, r21
     880:	13 96       	adiw	r26, 0x03	; 3
     882:	3c 93       	st	X, r19
     884:	2e 93       	st	-X, r18
     886:	12 97       	sbiw	r26, 0x02	; 2
	diff = self->XF ^ self->XI;
     888:	cf 01       	movw	r24, r30
     88a:	82 27       	eor	r24, r18
     88c:	93 27       	eor	r25, r19
	trans = diff & self->XF;
	return (trans << nbits) | diff;
     88e:	28 23       	and	r18, r24
     890:	39 23       	and	r19, r25
     892:	02 c0       	rjmp	.+4      	; 0x898 <EXPLODEmayia+0x50>
     894:	22 0f       	add	r18, r18
     896:	33 1f       	adc	r19, r19
     898:	6a 95       	dec	r22
     89a:	e2 f7       	brpl	.-8      	; 0x894 <EXPLODEmayia+0x4c>
}
     89c:	82 2b       	or	r24, r18
     89e:	08 95       	ret

000008a0 <EXPLODEenable>:
uint8_t EXPLODEhl(EXPLODE* self);
uint8_t EXPLODEdiff(EXPLODE* self);
uint8_t EXPLODEdata(EXPLODE* self);
/***Procedure & Function***/
EXPLODE EXPLODEenable( void )
{
     8a0:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG = STATUS_REGISTER;
     8a2:	9f b7       	in	r25, 0x3f	; 63
	STATUS_REGISTER &= ~(ONE<<GLOBAL_INTERRUPT_ENABLE);
     8a4:	8f b7       	in	r24, 0x3f	; 63
     8a6:	8f 77       	andi	r24, 0x7F	; 127
     8a8:	8f bf       	out	0x3f, r24	; 63
	explode.ll = EXPLODEll;
	explode.lh = EXPLODElh;
	explode.hl = EXPLODEhl;
	explode.diff = EXPLODEdiff;
	explode.data = EXPLODEdata;
	STATUS_REGISTER = tSREG;
     8aa:	9f bf       	out	0x3f, r25	; 63
	/******/
	return explode;
     8ac:	11 82       	std	Z+1, r1	; 0x01
     8ae:	10 82       	st	Z, r1
     8b0:	13 82       	std	Z+3, r1	; 0x03
     8b2:	12 82       	std	Z+2, r1	; 0x02
     8b4:	8c ef       	ldi	r24, 0xFC	; 252
     8b6:	93 e0       	ldi	r25, 0x03	; 3
     8b8:	95 83       	std	Z+5, r25	; 0x05
     8ba:	84 83       	std	Z+4, r24	; 0x04
     8bc:	84 e2       	ldi	r24, 0x24	; 36
     8be:	94 e0       	ldi	r25, 0x04	; 4
     8c0:	97 83       	std	Z+7, r25	; 0x07
     8c2:	86 83       	std	Z+6, r24	; 0x06
     8c4:	85 e0       	ldi	r24, 0x05	; 5
     8c6:	94 e0       	ldi	r25, 0x04	; 4
     8c8:	91 87       	std	Z+9, r25	; 0x09
     8ca:	80 87       	std	Z+8, r24	; 0x08
     8cc:	8a e0       	ldi	r24, 0x0A	; 10
     8ce:	94 e0       	ldi	r25, 0x04	; 4
     8d0:	93 87       	std	Z+11, r25	; 0x0b
     8d2:	82 87       	std	Z+10, r24	; 0x0a
     8d4:	80 e1       	ldi	r24, 0x10	; 16
     8d6:	94 e0       	ldi	r25, 0x04	; 4
     8d8:	95 87       	std	Z+13, r25	; 0x0d
     8da:	84 87       	std	Z+12, r24	; 0x0c
     8dc:	86 e1       	ldi	r24, 0x16	; 22
     8de:	94 e0       	ldi	r25, 0x04	; 4
     8e0:	97 87       	std	Z+15, r25	; 0x0f
     8e2:	86 87       	std	Z+14, r24	; 0x0e
     8e4:	8c e1       	ldi	r24, 0x1C	; 28
     8e6:	94 e0       	ldi	r25, 0x04	; 4
     8e8:	91 8b       	std	Z+17, r25	; 0x11
     8ea:	80 8b       	std	Z+16, r24	; 0x10
     8ec:	81 e2       	ldi	r24, 0x21	; 33
     8ee:	94 e0       	ldi	r25, 0x04	; 4
     8f0:	93 8b       	std	Z+19, r25	; 0x13
     8f2:	82 8b       	std	Z+18, r24	; 0x12
}
     8f4:	cf 01       	movw	r24, r30
     8f6:	08 95       	ret

000008f8 <FUNCpinmatch>:
	return i;
}
uint8_t  bintobcd(uint8_t bin)
{
	return (((bin) / 10) << 4) + ((bin) % 10);
}
     8f8:	68 23       	and	r22, r24
     8fa:	44 23       	and	r20, r20
     8fc:	21 f0       	breq	.+8      	; 0x906 <FUNCpinmatch+0xe>
     8fe:	86 17       	cp	r24, r22
     900:	21 f0       	breq	.+8      	; 0x90a <FUNCpinmatch+0x12>
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	08 95       	ret
     906:	61 11       	cpse	r22, r1
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	08 95       	ret

0000090c <FUNChmerge>:
     90c:	86 2b       	or	r24, r22
     90e:	08 95       	ret

00000910 <FUNClmerge>:
     910:	86 23       	and	r24, r22
     912:	08 95       	ret

00000914 <FUNChh>:
     914:	86 23       	and	r24, r22
     916:	08 95       	ret

00000918 <FUNCll>:
     918:	86 2b       	or	r24, r22
     91a:	80 95       	com	r24
     91c:	08 95       	ret

0000091e <FUNClh>:
     91e:	86 27       	eor	r24, r22
     920:	86 23       	and	r24, r22
     922:	08 95       	ret

00000924 <FUNChl>:
     924:	60 95       	com	r22
     926:	86 23       	and	r24, r22
     928:	08 95       	ret

0000092a <FUNCdiff>:
     92a:	86 27       	eor	r24, r22
     92c:	08 95       	ret

0000092e <FUNCswap>:
     92e:	cf 92       	push	r12
     930:	df 92       	push	r13
     932:	ef 92       	push	r14
     934:	ff 92       	push	r15
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
     93a:	fc 01       	movw	r30, r24
     93c:	00 81       	ld	r16, Z
     93e:	11 81       	ldd	r17, Z+1	; 0x01
     940:	22 81       	ldd	r18, Z+2	; 0x02
     942:	33 81       	ldd	r19, Z+3	; 0x03
     944:	fb 01       	movw	r30, r22
     946:	c0 80       	ld	r12, Z
     948:	d1 80       	ldd	r13, Z+1	; 0x01
     94a:	e2 80       	ldd	r14, Z+2	; 0x02
     94c:	f3 80       	ldd	r15, Z+3	; 0x03
     94e:	fc 01       	movw	r30, r24
     950:	c0 82       	st	Z, r12
     952:	d1 82       	std	Z+1, r13	; 0x01
     954:	e2 82       	std	Z+2, r14	; 0x02
     956:	f3 82       	std	Z+3, r15	; 0x03
     958:	fb 01       	movw	r30, r22
     95a:	00 83       	st	Z, r16
     95c:	11 83       	std	Z+1, r17	; 0x01
     95e:	22 83       	std	Z+2, r18	; 0x02
     960:	33 83       	std	Z+3, r19	; 0x03
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	ff 90       	pop	r15
     968:	ef 90       	pop	r14
     96a:	df 90       	pop	r13
     96c:	cf 90       	pop	r12
     96e:	08 95       	ret

00000970 <FUNCcopy>:
     970:	fb 01       	movw	r30, r22
     972:	20 81       	ld	r18, Z
     974:	fc 01       	movw	r30, r24
     976:	20 83       	st	Z, r18
     978:	22 23       	and	r18, r18
     97a:	39 f0       	breq	.+14     	; 0x98a <FUNCcopy+0x1a>
     97c:	db 01       	movw	r26, r22
     97e:	11 96       	adiw	r26, 0x01	; 1
     980:	31 96       	adiw	r30, 0x01	; 1
     982:	9d 91       	ld	r25, X+
     984:	91 93       	st	Z+, r25
     986:	91 11       	cpse	r25, r1
     988:	fc cf       	rjmp	.-8      	; 0x982 <FUNCcopy+0x12>
     98a:	08 95       	ret

0000098c <FUNCsqueeze>:
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	ec 01       	movw	r28, r24
     992:	98 81       	ld	r25, Y
     994:	99 23       	and	r25, r25
     996:	99 f0       	breq	.+38     	; 0x9be <FUNCsqueeze+0x32>
     998:	fe 01       	movw	r30, r28
     99a:	31 96       	adiw	r30, 0x01	; 1
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	49 2f       	mov	r20, r25
     9a2:	50 e0       	ldi	r21, 0x00	; 0
     9a4:	46 17       	cp	r20, r22
     9a6:	57 07       	cpc	r21, r23
     9a8:	31 f0       	breq	.+12     	; 0x9b6 <FUNCsqueeze+0x2a>
     9aa:	de 01       	movw	r26, r28
     9ac:	a2 0f       	add	r26, r18
     9ae:	b3 1f       	adc	r27, r19
     9b0:	9c 93       	st	X, r25
     9b2:	2f 5f       	subi	r18, 0xFF	; 255
     9b4:	3f 4f       	sbci	r19, 0xFF	; 255
     9b6:	91 91       	ld	r25, Z+
     9b8:	91 11       	cpse	r25, r1
     9ba:	f2 cf       	rjmp	.-28     	; 0x9a0 <FUNCsqueeze+0x14>
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <FUNCsqueeze+0x36>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	fe 01       	movw	r30, r28
     9c4:	e2 0f       	add	r30, r18
     9c6:	f3 1f       	adc	r31, r19
     9c8:	10 82       	st	Z, r1
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	08 95       	ret

000009d0 <FUNCshellsort>:
     9d0:	2f 92       	push	r2
     9d2:	3f 92       	push	r3
     9d4:	4f 92       	push	r4
     9d6:	5f 92       	push	r5
     9d8:	6f 92       	push	r6
     9da:	7f 92       	push	r7
     9dc:	8f 92       	push	r8
     9de:	9f 92       	push	r9
     9e0:	af 92       	push	r10
     9e2:	bf 92       	push	r11
     9e4:	cf 92       	push	r12
     9e6:	df 92       	push	r13
     9e8:	ef 92       	push	r14
     9ea:	ff 92       	push	r15
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	00 d0       	rcall	.+0      	; 0x9f6 <FUNCshellsort+0x26>
     9f6:	00 d0       	rcall	.+0      	; 0x9f8 <FUNCshellsort+0x28>
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	2c 01       	movw	r4, r24
     9fe:	1b 01       	movw	r2, r22
     a00:	4b 01       	movw	r8, r22
     a02:	77 23       	and	r23, r23
     a04:	1c f4       	brge	.+6      	; 0xa0c <FUNCshellsort+0x3c>
     a06:	2f ef       	ldi	r18, 0xFF	; 255
     a08:	82 1a       	sub	r8, r18
     a0a:	92 0a       	sbc	r9, r18
     a0c:	95 94       	asr	r9
     a0e:	87 94       	ror	r8
     a10:	18 14       	cp	r1, r8
     a12:	19 04       	cpc	r1, r9
     a14:	0c f4       	brge	.+2      	; 0xa18 <FUNCshellsort+0x48>
     a16:	51 c0       	rjmp	.+162    	; 0xaba <FUNCshellsort+0xea>
     a18:	6a c0       	rjmp	.+212    	; 0xaee <FUNCshellsort+0x11e>
     a1a:	96 01       	movw	r18, r12
     a1c:	dd 20       	and	r13, r13
     a1e:	9c f1       	brlt	.+102    	; 0xa86 <FUNCshellsort+0xb6>
     a20:	f5 01       	movw	r30, r10
     a22:	40 81       	ld	r20, Z
     a24:	51 81       	ldd	r21, Z+1	; 0x01
     a26:	f4 01       	movw	r30, r8
     a28:	60 81       	ld	r22, Z
     a2a:	71 81       	ldd	r23, Z+1	; 0x01
     a2c:	64 17       	cp	r22, r20
     a2e:	75 07       	cpc	r23, r21
     a30:	54 f5       	brge	.+84     	; 0xa86 <FUNCshellsort+0xb6>
     a32:	8c 01       	movw	r16, r24
     a34:	0a 0d       	add	r16, r10
     a36:	1b 1d       	adc	r17, r11
     a38:	d4 01       	movw	r26, r8
     a3a:	bc 82       	std	Y+4, r11	; 0x04
     a3c:	ab 82       	std	Y+3, r10	; 0x03
     a3e:	ba 82       	std	Y+2, r11	; 0x02
     a40:	a9 82       	std	Y+1, r10	; 0x01
     a42:	eb 81       	ldd	r30, Y+3	; 0x03
     a44:	fc 81       	ldd	r31, Y+4	; 0x04
     a46:	71 83       	std	Z+1, r23	; 0x01
     a48:	60 83       	st	Z, r22
     a4a:	11 96       	adiw	r26, 0x01	; 1
     a4c:	5c 93       	st	X, r21
     a4e:	4e 93       	st	-X, r20
     a50:	2e 19       	sub	r18, r14
     a52:	3f 09       	sbc	r19, r15
     a54:	c2 f0       	brmi	.+48     	; 0xa86 <FUNCshellsort+0xb6>
     a56:	f8 01       	movw	r30, r16
     a58:	40 81       	ld	r20, Z
     a5a:	51 81       	ldd	r21, Z+1	; 0x01
     a5c:	e9 81       	ldd	r30, Y+1	; 0x01
     a5e:	fa 81       	ldd	r31, Y+2	; 0x02
     a60:	60 81       	ld	r22, Z
     a62:	71 81       	ldd	r23, Z+1	; 0x01
     a64:	08 0f       	add	r16, r24
     a66:	19 1f       	adc	r17, r25
     a68:	e8 0f       	add	r30, r24
     a6a:	f9 1f       	adc	r31, r25
     a6c:	fa 83       	std	Y+2, r31	; 0x02
     a6e:	e9 83       	std	Y+1, r30	; 0x01
     a70:	eb 81       	ldd	r30, Y+3	; 0x03
     a72:	fc 81       	ldd	r31, Y+4	; 0x04
     a74:	e8 0f       	add	r30, r24
     a76:	f9 1f       	adc	r31, r25
     a78:	fc 83       	std	Y+4, r31	; 0x04
     a7a:	eb 83       	std	Y+3, r30	; 0x03
     a7c:	a8 0f       	add	r26, r24
     a7e:	b9 1f       	adc	r27, r25
     a80:	64 17       	cp	r22, r20
     a82:	75 07       	cpc	r23, r21
     a84:	f4 f2       	brlt	.-68     	; 0xa42 <FUNCshellsort+0x72>
     a86:	ff ef       	ldi	r31, 0xFF	; 255
     a88:	cf 1a       	sub	r12, r31
     a8a:	df 0a       	sbc	r13, r31
     a8c:	22 e0       	ldi	r18, 0x02	; 2
     a8e:	a2 0e       	add	r10, r18
     a90:	b1 1c       	adc	r11, r1
     a92:	e2 e0       	ldi	r30, 0x02	; 2
     a94:	8e 0e       	add	r8, r30
     a96:	91 1c       	adc	r9, r1
     a98:	c6 14       	cp	r12, r6
     a9a:	d7 04       	cpc	r13, r7
     a9c:	09 f0       	breq	.+2      	; 0xaa0 <FUNCshellsort+0xd0>
     a9e:	bd cf       	rjmp	.-134    	; 0xa1a <FUNCshellsort+0x4a>
     aa0:	47 01       	movw	r8, r14
     aa2:	ff 20       	and	r15, r15
     aa4:	1c f4       	brge	.+6      	; 0xaac <FUNCshellsort+0xdc>
     aa6:	ff ef       	ldi	r31, 0xFF	; 255
     aa8:	8f 1a       	sub	r8, r31
     aaa:	9f 0a       	sbc	r9, r31
     aac:	95 94       	asr	r9
     aae:	87 94       	ror	r8
     ab0:	18 14       	cp	r1, r8
     ab2:	19 04       	cpc	r1, r9
     ab4:	e4 f4       	brge	.+56     	; 0xaee <FUNCshellsort+0x11e>
     ab6:	74 01       	movw	r14, r8
     ab8:	01 c0       	rjmp	.+2      	; 0xabc <FUNCshellsort+0xec>
     aba:	74 01       	movw	r14, r8
     abc:	82 14       	cp	r8, r2
     abe:	93 04       	cpc	r9, r3
     ac0:	7c f7       	brge	.-34     	; 0xaa0 <FUNCshellsort+0xd0>
     ac2:	64 01       	movw	r12, r8
     ac4:	ce 18       	sub	r12, r14
     ac6:	df 08       	sbc	r13, r15
     ac8:	56 01       	movw	r10, r12
     aca:	aa 0c       	add	r10, r10
     acc:	bb 1c       	adc	r11, r11
     ace:	a4 0c       	add	r10, r4
     ad0:	b5 1c       	adc	r11, r5
     ad2:	88 0c       	add	r8, r8
     ad4:	99 1c       	adc	r9, r9
     ad6:	84 0c       	add	r8, r4
     ad8:	95 1c       	adc	r9, r5
     ada:	31 01       	movw	r6, r2
     adc:	6e 18       	sub	r6, r14
     ade:	7f 08       	sbc	r7, r15
     ae0:	c7 01       	movw	r24, r14
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	91 95       	neg	r25
     ae8:	81 95       	neg	r24
     aea:	91 09       	sbc	r25, r1
     aec:	96 cf       	rjmp	.-212    	; 0xa1a <FUNCshellsort+0x4a>
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
     af2:	0f 90       	pop	r0
     af4:	0f 90       	pop	r0
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	ff 90       	pop	r15
     b00:	ef 90       	pop	r14
     b02:	df 90       	pop	r13
     b04:	cf 90       	pop	r12
     b06:	bf 90       	pop	r11
     b08:	af 90       	pop	r10
     b0a:	9f 90       	pop	r9
     b0c:	8f 90       	pop	r8
     b0e:	7f 90       	pop	r7
     b10:	6f 90       	pop	r6
     b12:	5f 90       	pop	r5
     b14:	4f 90       	pop	r4
     b16:	3f 90       	pop	r3
     b18:	2f 90       	pop	r2
     b1a:	08 95       	ret

00000b1c <FUNCpmax>:
     b1c:	86 17       	cp	r24, r22
     b1e:	97 07       	cpc	r25, r23
     b20:	0c f4       	brge	.+2      	; 0xb24 <FUNCpmax+0x8>
     b22:	cb 01       	movw	r24, r22
     b24:	08 95       	ret

00000b26 <FUNCgcd>:
     b26:	9b 01       	movw	r18, r22
     b28:	67 2b       	or	r22, r23
     b2a:	11 f4       	brne	.+4      	; 0xb30 <FUNCgcd+0xa>
     b2c:	08 95       	ret
     b2e:	9a 01       	movw	r18, r20
     b30:	b9 01       	movw	r22, r18
     b32:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divmodhi4>
     b36:	ac 01       	movw	r20, r24
     b38:	82 2f       	mov	r24, r18
     b3a:	93 2f       	mov	r25, r19
     b3c:	41 15       	cp	r20, r1
     b3e:	51 05       	cpc	r21, r1
     b40:	b1 f7       	brne	.-20     	; 0xb2e <FUNCgcd+0x8>
     b42:	08 95       	ret

00000b44 <FUNCstrToInt>:
     b44:	fc 01       	movw	r30, r24
     b46:	90 81       	ld	r25, Z
     b48:	80 ed       	ldi	r24, 0xD0	; 208
     b4a:	89 0f       	add	r24, r25
     b4c:	8a 30       	cpi	r24, 0x0A	; 10
     b4e:	d0 f4       	brcc	.+52     	; 0xb84 <FUNCstrToInt+0x40>
     b50:	31 96       	adiw	r30, 0x01	; 1
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	a9 01       	movw	r20, r18
     b58:	44 0f       	add	r20, r20
     b5a:	55 1f       	adc	r21, r21
     b5c:	22 0f       	add	r18, r18
     b5e:	33 1f       	adc	r19, r19
     b60:	22 0f       	add	r18, r18
     b62:	33 1f       	adc	r19, r19
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	42 0f       	add	r20, r18
     b6a:	53 1f       	adc	r21, r19
     b6c:	29 2f       	mov	r18, r25
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	20 53       	subi	r18, 0x30	; 48
     b72:	31 09       	sbc	r19, r1
     b74:	24 0f       	add	r18, r20
     b76:	35 1f       	adc	r19, r21
     b78:	91 91       	ld	r25, Z+
     b7a:	80 ed       	ldi	r24, 0xD0	; 208
     b7c:	89 0f       	add	r24, r25
     b7e:	8a 30       	cpi	r24, 0x0A	; 10
     b80:	50 f3       	brcs	.-44     	; 0xb56 <FUNCstrToInt+0x12>
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <FUNCstrToInt+0x44>
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	c9 01       	movw	r24, r18
     b8a:	08 95       	ret

00000b8c <FUNCfilter>:
     b8c:	86 23       	and	r24, r22
     b8e:	08 95       	ret

00000b90 <FUNCticks>:
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	39 f0       	breq	.+14     	; 0xba2 <FUNCticks+0x12>
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	2f 5f       	subi	r18, 0xFF	; 255
     b9a:	3f 4f       	sbci	r19, 0xFF	; 255
     b9c:	82 17       	cp	r24, r18
     b9e:	93 07       	cpc	r25, r19
     ba0:	d9 f7       	brne	.-10     	; 0xb98 <FUNCticks+0x8>
     ba2:	08 95       	ret

00000ba4 <FUNCtwocomptoint8bit>:
     ba4:	87 ff       	sbrs	r24, 7
     ba6:	08 c0       	rjmp	.+16     	; 0xbb8 <FUNCtwocomptoint8bit+0x14>
     ba8:	91 95       	neg	r25
     baa:	81 95       	neg	r24
     bac:	91 09       	sbc	r25, r1
     bae:	99 27       	eor	r25, r25
     bb0:	91 95       	neg	r25
     bb2:	81 95       	neg	r24
     bb4:	91 09       	sbc	r25, r1
     bb6:	08 95       	ret
     bb8:	8f 77       	andi	r24, 0x7F	; 127
     bba:	99 27       	eor	r25, r25
     bbc:	08 95       	ret

00000bbe <FUNCtwocomptoint10bit>:
     bbe:	91 ff       	sbrs	r25, 1
     bc0:	08 c0       	rjmp	.+16     	; 0xbd2 <FUNCtwocomptoint10bit+0x14>
     bc2:	91 95       	neg	r25
     bc4:	81 95       	neg	r24
     bc6:	91 09       	sbc	r25, r1
     bc8:	93 70       	andi	r25, 0x03	; 3
     bca:	91 95       	neg	r25
     bcc:	81 95       	neg	r24
     bce:	91 09       	sbc	r25, r1
     bd0:	08 95       	ret
     bd2:	91 70       	andi	r25, 0x01	; 1
     bd4:	08 95       	ret

00000bd6 <FUNCtwocomptointnbit>:
     bd6:	61 50       	subi	r22, 0x01	; 1
     bd8:	21 e0       	ldi	r18, 0x01	; 1
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <FUNCtwocomptointnbit+0xc>
     bde:	22 0f       	add	r18, r18
     be0:	33 1f       	adc	r19, r19
     be2:	6a 95       	dec	r22
     be4:	e2 f7       	brpl	.-8      	; 0xbde <FUNCtwocomptointnbit+0x8>
     be6:	a9 01       	movw	r20, r18
     be8:	41 50       	subi	r20, 0x01	; 1
     bea:	51 09       	sbc	r21, r1
     bec:	b9 01       	movw	r22, r18
     bee:	68 23       	and	r22, r24
     bf0:	79 23       	and	r23, r25
     bf2:	67 2b       	or	r22, r23
     bf4:	29 f0       	breq	.+10     	; 0xc00 <FUNCtwocomptointnbit+0x2a>
     bf6:	84 23       	and	r24, r20
     bf8:	95 23       	and	r25, r21
     bfa:	82 1b       	sub	r24, r18
     bfc:	93 0b       	sbc	r25, r19
     bfe:	08 95       	ret
     c00:	84 23       	and	r24, r20
     c02:	95 23       	and	r25, r21
     c04:	08 95       	ret

00000c06 <FUNCdec2bcd>:
     c06:	9d ec       	ldi	r25, 0xCD	; 205
     c08:	89 9f       	mul	r24, r25
     c0a:	91 2d       	mov	r25, r1
     c0c:	11 24       	eor	r1, r1
     c0e:	96 95       	lsr	r25
     c10:	96 95       	lsr	r25
     c12:	96 95       	lsr	r25
     c14:	39 2f       	mov	r19, r25
     c16:	33 0f       	add	r19, r19
     c18:	23 2f       	mov	r18, r19
     c1a:	22 0f       	add	r18, r18
     c1c:	22 0f       	add	r18, r18
     c1e:	23 0f       	add	r18, r19
     c20:	82 1b       	sub	r24, r18
     c22:	20 e1       	ldi	r18, 0x10	; 16
     c24:	92 9f       	mul	r25, r18
     c26:	80 0d       	add	r24, r0
     c28:	11 24       	eor	r1, r1
     c2a:	08 95       	ret

00000c2c <FUNCbcd2dec>:
     c2c:	98 2f       	mov	r25, r24
     c2e:	92 95       	swap	r25
     c30:	9f 70       	andi	r25, 0x0F	; 15
     c32:	99 0f       	add	r25, r25
     c34:	29 2f       	mov	r18, r25
     c36:	22 0f       	add	r18, r18
     c38:	22 0f       	add	r18, r18
     c3a:	92 0f       	add	r25, r18
     c3c:	8f 70       	andi	r24, 0x0F	; 15
     c3e:	89 0f       	add	r24, r25
     c40:	08 95       	ret

00000c42 <FUNCresizestr>:
     c42:	fc 01       	movw	r30, r24
     c44:	db 01       	movw	r26, r22
     c46:	a3 5c       	subi	r26, 0xC3	; 195
     c48:	be 4f       	sbci	r27, 0xFE	; 254
     c4a:	1c 92       	st	X, r1
     c4c:	16 16       	cp	r1, r22
     c4e:	17 06       	cpc	r1, r23
     c50:	14 f5       	brge	.+68     	; 0xc96 <FUNCresizestr+0x54>
     c52:	90 81       	ld	r25, Z
     c54:	91 11       	cpse	r25, r1
     c56:	0c c0       	rjmp	.+24     	; 0xc70 <FUNCresizestr+0x2e>
     c58:	17 c0       	rjmp	.+46     	; 0xc88 <FUNCresizestr+0x46>
     c5a:	91 91       	ld	r25, Z+
     c5c:	91 11       	cpse	r25, r1
     c5e:	0d c0       	rjmp	.+26     	; 0xc7a <FUNCresizestr+0x38>
     c60:	15 c0       	rjmp	.+42     	; 0xc8c <FUNCresizestr+0x4a>
     c62:	81 93       	st	Z+, r24
     c64:	2f 5f       	subi	r18, 0xFF	; 255
     c66:	3f 4f       	sbci	r19, 0xFF	; 255
     c68:	26 17       	cp	r18, r22
     c6a:	37 07       	cpc	r19, r23
     c6c:	d4 f3       	brlt	.-12     	; 0xc62 <FUNCresizestr+0x20>
     c6e:	13 c0       	rjmp	.+38     	; 0xc96 <FUNCresizestr+0x54>
     c70:	ad e3       	ldi	r26, 0x3D	; 61
     c72:	b1 e0       	ldi	r27, 0x01	; 1
     c74:	31 96       	adiw	r30, 0x01	; 1
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	9d 93       	st	X+, r25
     c7c:	2f 5f       	subi	r18, 0xFF	; 255
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	62 17       	cp	r22, r18
     c82:	73 07       	cpc	r23, r19
     c84:	51 f7       	brne	.-44     	; 0xc5a <FUNCresizestr+0x18>
     c86:	07 c0       	rjmp	.+14     	; 0xc96 <FUNCresizestr+0x54>
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	f9 01       	movw	r30, r18
     c8e:	e3 5c       	subi	r30, 0xC3	; 195
     c90:	fe 4f       	sbci	r31, 0xFE	; 254
     c92:	80 e2       	ldi	r24, 0x20	; 32
     c94:	e6 cf       	rjmp	.-52     	; 0xc62 <FUNCresizestr+0x20>
     c96:	8d e3       	ldi	r24, 0x3D	; 61
     c98:	91 e0       	ldi	r25, 0x01	; 1
     c9a:	08 95       	ret

00000c9c <FUNCtrimmer>:
     c9c:	4f 92       	push	r4
     c9e:	5f 92       	push	r5
     ca0:	6f 92       	push	r6
     ca2:	7f 92       	push	r7
     ca4:	af 92       	push	r10
     ca6:	bf 92       	push	r11
     ca8:	cf 92       	push	r12
     caa:	df 92       	push	r13
     cac:	ef 92       	push	r14
     cae:	ff 92       	push	r15
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	29 01       	movw	r4, r18
     cbe:	3a 01       	movw	r6, r20
     cc0:	9b 01       	movw	r18, r22
     cc2:	ac 01       	movw	r20, r24
     cc4:	24 19       	sub	r18, r4
     cc6:	35 09       	sbc	r19, r5
     cc8:	46 09       	sbc	r20, r6
     cca:	57 09       	sbc	r21, r7
     ccc:	89 89       	ldd	r24, Y+17	; 0x11
     cce:	9a 89       	ldd	r25, Y+18	; 0x12
     cd0:	ab 89       	ldd	r26, Y+19	; 0x13
     cd2:	bc 89       	ldd	r27, Y+20	; 0x14
     cd4:	bc 01       	movw	r22, r24
     cd6:	cd 01       	movw	r24, r26
     cd8:	6a 19       	sub	r22, r10
     cda:	7b 09       	sbc	r23, r11
     cdc:	8c 09       	sbc	r24, r12
     cde:	9d 09       	sbc	r25, r13
     ce0:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <__mulsi3>
     ce4:	a8 01       	movw	r20, r16
     ce6:	97 01       	movw	r18, r14
     ce8:	24 19       	sub	r18, r4
     cea:	35 09       	sbc	r19, r5
     cec:	46 09       	sbc	r20, r6
     cee:	57 09       	sbc	r21, r7
     cf0:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__divmodsi4>
     cf4:	ca 01       	movw	r24, r20
     cf6:	b9 01       	movw	r22, r18
     cf8:	6a 0d       	add	r22, r10
     cfa:	7b 1d       	adc	r23, r11
     cfc:	8c 1d       	adc	r24, r12
     cfe:	9d 1d       	adc	r25, r13
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	df 90       	pop	r13
     d0e:	cf 90       	pop	r12
     d10:	bf 90       	pop	r11
     d12:	af 90       	pop	r10
     d14:	7f 90       	pop	r7
     d16:	6f 90       	pop	r6
     d18:	5f 90       	pop	r5
     d1a:	4f 90       	pop	r4
     d1c:	08 95       	ret

00000d1e <Pwr>:
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	61 15       	cp	r22, r1
     d22:	71 05       	cpc	r23, r1
     d24:	99 f0       	breq	.+38     	; 0xd4c <Pwr+0x2e>
     d26:	41 e0       	ldi	r20, 0x01	; 1
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	21 e0       	ldi	r18, 0x01	; 1
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	fa 01       	movw	r30, r20
     d32:	e8 9f       	mul	r30, r24
     d34:	a0 01       	movw	r20, r0
     d36:	e9 9f       	mul	r30, r25
     d38:	50 0d       	add	r21, r0
     d3a:	f8 9f       	mul	r31, r24
     d3c:	50 0d       	add	r21, r0
     d3e:	11 24       	eor	r1, r1
     d40:	2f 5f       	subi	r18, 0xFF	; 255
     d42:	3f 4f       	sbci	r19, 0xFF	; 255
     d44:	62 17       	cp	r22, r18
     d46:	73 07       	cpc	r23, r19
     d48:	98 f7       	brcc	.-26     	; 0xd30 <Pwr+0x12>
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <Pwr+0x32>
     d4c:	41 e0       	ldi	r20, 0x01	; 1
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	ca 01       	movw	r24, r20
     d52:	08 95       	ret

00000d54 <StringLength>:
     d54:	fc 01       	movw	r30, r24
     d56:	20 81       	ld	r18, Z
     d58:	22 23       	and	r18, r18
     d5a:	41 f0       	breq	.+16     	; 0xd6c <StringLength+0x18>
     d5c:	31 96       	adiw	r30, 0x01	; 1
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	01 96       	adiw	r24, 0x01	; 1
     d64:	21 91       	ld	r18, Z+
     d66:	21 11       	cpse	r18, r1
     d68:	fc cf       	rjmp	.-8      	; 0xd62 <StringLength+0xe>
     d6a:	08 95       	ret
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	08 95       	ret

00000d72 <FUNCtrim>:
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	ec 01       	movw	r28, r24
     d78:	ed df       	rcall	.-38     	; 0xd54 <StringLength>
     d7a:	9c 01       	movw	r18, r24
     d7c:	21 50       	subi	r18, 0x01	; 1
     d7e:	31 09       	sbc	r19, r1
     d80:	62 f0       	brmi	.+24     	; 0xd9a <FUNCtrim+0x28>
     d82:	fe 01       	movw	r30, r28
     d84:	e8 0f       	add	r30, r24
     d86:	f9 1f       	adc	r31, r25
     d88:	92 91       	ld	r25, -Z
     d8a:	90 32       	cpi	r25, 0x20	; 32
     d8c:	19 f0       	breq	.+6      	; 0xd94 <FUNCtrim+0x22>
     d8e:	99 50       	subi	r25, 0x09	; 9
     d90:	92 30       	cpi	r25, 0x02	; 2
     d92:	18 f4       	brcc	.+6      	; 0xd9a <FUNCtrim+0x28>
     d94:	21 50       	subi	r18, 0x01	; 1
     d96:	31 09       	sbc	r19, r1
     d98:	b8 f7       	brcc	.-18     	; 0xd88 <FUNCtrim+0x16>
     d9a:	c2 0f       	add	r28, r18
     d9c:	d3 1f       	adc	r29, r19
     d9e:	19 82       	std	Y+1, r1	; 0x01
     da0:	c9 01       	movw	r24, r18
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	08 95       	ret

00000da8 <Reverse>:
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	ec 01       	movw	r28, r24
     dae:	d2 df       	rcall	.-92     	; 0xd54 <StringLength>
     db0:	9c 01       	movw	r18, r24
     db2:	21 50       	subi	r18, 0x01	; 1
     db4:	31 09       	sbc	r19, r1
     db6:	12 16       	cp	r1, r18
     db8:	13 06       	cpc	r1, r19
     dba:	84 f4       	brge	.+32     	; 0xddc <Reverse+0x34>
     dbc:	de 01       	movw	r26, r28
     dbe:	a8 0f       	add	r26, r24
     dc0:	b9 1f       	adc	r27, r25
     dc2:	fe 01       	movw	r30, r28
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	40 81       	ld	r20, Z
     dca:	5e 91       	ld	r21, -X
     dcc:	51 93       	st	Z+, r21
     dce:	4c 93       	st	X, r20
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	21 50       	subi	r18, 0x01	; 1
     dd4:	31 09       	sbc	r19, r1
     dd6:	82 17       	cp	r24, r18
     dd8:	93 07       	cpc	r25, r19
     dda:	b4 f3       	brlt	.-20     	; 0xdc8 <Reverse+0x20>
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	08 95       	ret

00000de2 <FUNCi32toa>:
     de2:	8f 92       	push	r8
     de4:	9f 92       	push	r9
     de6:	af 92       	push	r10
     de8:	bf 92       	push	r11
     dea:	cf 92       	push	r12
     dec:	df 92       	push	r13
     dee:	ef 92       	push	r14
     df0:	ff 92       	push	r15
     df2:	0f 93       	push	r16
     df4:	1f 93       	push	r17
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	6b 01       	movw	r12, r22
     dfc:	7c 01       	movw	r14, r24
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	ff 20       	and	r15, r15
     e04:	3c f4       	brge	.+14     	; 0xe14 <FUNCi32toa+0x32>
     e06:	88 27       	eor	r24, r24
     e08:	99 27       	eor	r25, r25
     e0a:	dc 01       	movw	r26, r24
     e0c:	8c 19       	sub	r24, r12
     e0e:	9d 09       	sbc	r25, r13
     e10:	ae 09       	sbc	r26, r14
     e12:	bf 09       	sbc	r27, r15
     e14:	bc 01       	movw	r22, r24
     e16:	cd 01       	movw	r24, r26
     e18:	10 e0       	ldi	r17, 0x00	; 0
     e1a:	0f 2e       	mov	r0, r31
     e1c:	fa e0       	ldi	r31, 0x0A	; 10
     e1e:	8f 2e       	mov	r8, r31
     e20:	91 2c       	mov	r9, r1
     e22:	a1 2c       	mov	r10, r1
     e24:	b1 2c       	mov	r11, r1
     e26:	f0 2d       	mov	r31, r0
     e28:	01 c0       	rjmp	.+2      	; 0xe2c <FUNCi32toa+0x4a>
     e2a:	10 2f       	mov	r17, r16
     e2c:	01 e0       	ldi	r16, 0x01	; 1
     e2e:	01 0f       	add	r16, r17
     e30:	c1 2f       	mov	r28, r17
     e32:	d0 e0       	ldi	r29, 0x00	; 0
     e34:	c3 5c       	subi	r28, 0xC3	; 195
     e36:	de 4f       	sbci	r29, 0xFE	; 254
     e38:	a5 01       	movw	r20, r10
     e3a:	94 01       	movw	r18, r8
     e3c:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__divmodsi4>
     e40:	60 5d       	subi	r22, 0xD0	; 208
     e42:	68 83       	st	Y, r22
     e44:	62 2f       	mov	r22, r18
     e46:	73 2f       	mov	r23, r19
     e48:	84 2f       	mov	r24, r20
     e4a:	95 2f       	mov	r25, r21
     e4c:	16 16       	cp	r1, r22
     e4e:	17 06       	cpc	r1, r23
     e50:	18 06       	cpc	r1, r24
     e52:	19 06       	cpc	r1, r25
     e54:	54 f3       	brlt	.-44     	; 0xe2a <FUNCi32toa+0x48>
     e56:	ff 20       	and	r15, r15
     e58:	44 f4       	brge	.+16     	; 0xe6a <FUNCi32toa+0x88>
     e5a:	e0 2f       	mov	r30, r16
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	e3 5c       	subi	r30, 0xC3	; 195
     e60:	fe 4f       	sbci	r31, 0xFE	; 254
     e62:	8d e2       	ldi	r24, 0x2D	; 45
     e64:	80 83       	st	Z, r24
     e66:	02 e0       	ldi	r16, 0x02	; 2
     e68:	01 0f       	add	r16, r17
     e6a:	e0 2f       	mov	r30, r16
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	e3 5c       	subi	r30, 0xC3	; 195
     e70:	fe 4f       	sbci	r31, 0xFE	; 254
     e72:	10 82       	st	Z, r1
     e74:	8d e3       	ldi	r24, 0x3D	; 61
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	97 df       	rcall	.-210    	; 0xda8 <Reverse>
     e7a:	8d e3       	ldi	r24, 0x3D	; 61
     e7c:	91 e0       	ldi	r25, 0x01	; 1
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	ff 90       	pop	r15
     e88:	ef 90       	pop	r14
     e8a:	df 90       	pop	r13
     e8c:	cf 90       	pop	r12
     e8e:	bf 90       	pop	r11
     e90:	af 90       	pop	r10
     e92:	9f 90       	pop	r9
     e94:	8f 90       	pop	r8
     e96:	08 95       	ret

00000e98 <FUNCi16toa>:
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	ec 01       	movw	r28, r24
     ea2:	99 23       	and	r25, r25
     ea4:	24 f4       	brge	.+8      	; 0xeae <FUNCi16toa+0x16>
     ea6:	88 27       	eor	r24, r24
     ea8:	99 27       	eor	r25, r25
     eaa:	8c 1b       	sub	r24, r28
     eac:	9d 0b       	sbc	r25, r29
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	0a e0       	ldi	r16, 0x0A	; 10
     eb2:	10 e0       	ldi	r17, 0x00	; 0
     eb4:	01 c0       	rjmp	.+2      	; 0xeb8 <FUNCi16toa+0x20>
     eb6:	23 2f       	mov	r18, r19
     eb8:	31 e0       	ldi	r19, 0x01	; 1
     eba:	32 0f       	add	r19, r18
     ebc:	e2 2f       	mov	r30, r18
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	e3 5c       	subi	r30, 0xC3	; 195
     ec2:	fe 4f       	sbci	r31, 0xFE	; 254
     ec4:	b8 01       	movw	r22, r16
     ec6:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divmodhi4>
     eca:	80 5d       	subi	r24, 0xD0	; 208
     ecc:	80 83       	st	Z, r24
     ece:	86 2f       	mov	r24, r22
     ed0:	97 2f       	mov	r25, r23
     ed2:	18 16       	cp	r1, r24
     ed4:	19 06       	cpc	r1, r25
     ed6:	7c f3       	brlt	.-34     	; 0xeb6 <FUNCi16toa+0x1e>
     ed8:	dd 23       	and	r29, r29
     eda:	44 f4       	brge	.+16     	; 0xeec <FUNCi16toa+0x54>
     edc:	e3 2f       	mov	r30, r19
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	e3 5c       	subi	r30, 0xC3	; 195
     ee2:	fe 4f       	sbci	r31, 0xFE	; 254
     ee4:	8d e2       	ldi	r24, 0x2D	; 45
     ee6:	80 83       	st	Z, r24
     ee8:	32 e0       	ldi	r19, 0x02	; 2
     eea:	32 0f       	add	r19, r18
     eec:	e3 2f       	mov	r30, r19
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	e3 5c       	subi	r30, 0xC3	; 195
     ef2:	fe 4f       	sbci	r31, 0xFE	; 254
     ef4:	10 82       	st	Z, r1
     ef6:	8d e3       	ldi	r24, 0x3D	; 61
     ef8:	91 e0       	ldi	r25, 0x01	; 1
     efa:	56 df       	rcall	.-340    	; 0xda8 <Reverse>
     efc:	8d e3       	ldi	r24, 0x3D	; 61
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	08 95       	ret

00000f0a <FUNCui16toa>:
     f0a:	cf 93       	push	r28
     f0c:	ac 01       	movw	r20, r24
     f0e:	e0 e0       	ldi	r30, 0x00	; 0
     f10:	c1 e0       	ldi	r28, 0x01	; 1
     f12:	ce 0f       	add	r28, r30
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	e3 5c       	subi	r30, 0xC3	; 195
     f18:	fe 4f       	sbci	r31, 0xFE	; 254
     f1a:	9a 01       	movw	r18, r20
     f1c:	ad ec       	ldi	r26, 0xCD	; 205
     f1e:	bc ec       	ldi	r27, 0xCC	; 204
     f20:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <__umulhisi3>
     f24:	96 95       	lsr	r25
     f26:	87 95       	ror	r24
     f28:	96 95       	lsr	r25
     f2a:	87 95       	ror	r24
     f2c:	96 95       	lsr	r25
     f2e:	87 95       	ror	r24
     f30:	9c 01       	movw	r18, r24
     f32:	22 0f       	add	r18, r18
     f34:	33 1f       	adc	r19, r19
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	82 0f       	add	r24, r18
     f44:	93 1f       	adc	r25, r19
     f46:	9a 01       	movw	r18, r20
     f48:	28 1b       	sub	r18, r24
     f4a:	39 0b       	sbc	r19, r25
     f4c:	c9 01       	movw	r24, r18
     f4e:	80 5d       	subi	r24, 0xD0	; 208
     f50:	80 83       	st	Z, r24
     f52:	9a 01       	movw	r18, r20
     f54:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <__umulhisi3>
     f58:	ac 01       	movw	r20, r24
     f5a:	56 95       	lsr	r21
     f5c:	47 95       	ror	r20
     f5e:	56 95       	lsr	r21
     f60:	47 95       	ror	r20
     f62:	56 95       	lsr	r21
     f64:	47 95       	ror	r20
     f66:	ec 2f       	mov	r30, r28
     f68:	41 15       	cp	r20, r1
     f6a:	51 05       	cpc	r21, r1
     f6c:	89 f6       	brne	.-94     	; 0xf10 <FUNCui16toa+0x6>
     f6e:	ec 2f       	mov	r30, r28
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	e3 5c       	subi	r30, 0xC3	; 195
     f74:	fe 4f       	sbci	r31, 0xFE	; 254
     f76:	10 82       	st	Z, r1
     f78:	8d e3       	ldi	r24, 0x3D	; 61
     f7a:	91 e0       	ldi	r25, 0x01	; 1
     f7c:	15 df       	rcall	.-470    	; 0xda8 <Reverse>
     f7e:	8d e3       	ldi	r24, 0x3D	; 61
     f80:	91 e0       	ldi	r25, 0x01	; 1
     f82:	cf 91       	pop	r28
     f84:	08 95       	ret

00000f86 <FUNCbcd2bin>:
     f86:	98 2f       	mov	r25, r24
     f88:	92 95       	swap	r25
     f8a:	9f 70       	andi	r25, 0x0F	; 15
     f8c:	99 0f       	add	r25, r25
     f8e:	29 2f       	mov	r18, r25
     f90:	22 0f       	add	r18, r18
     f92:	22 0f       	add	r18, r18
     f94:	92 0f       	add	r25, r18
     f96:	8f 70       	andi	r24, 0x0F	; 15
     f98:	89 0f       	add	r24, r25
     f9a:	08 95       	ret

00000f9c <FUNCbin2bcd>:
     f9c:	ac 01       	movw	r20, r24
     f9e:	9c 01       	movw	r18, r24
     fa0:	ad ec       	ldi	r26, 0xCD	; 205
     fa2:	bc ec       	ldi	r27, 0xCC	; 204
     fa4:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <__umulhisi3>
     fa8:	96 95       	lsr	r25
     faa:	87 95       	ror	r24
     fac:	96 95       	lsr	r25
     fae:	87 95       	ror	r24
     fb0:	96 95       	lsr	r25
     fb2:	87 95       	ror	r24
     fb4:	bc 01       	movw	r22, r24
     fb6:	66 0f       	add	r22, r22
     fb8:	77 1f       	adc	r23, r23
     fba:	9c 01       	movw	r18, r24
     fbc:	22 0f       	add	r18, r18
     fbe:	33 1f       	adc	r19, r19
     fc0:	22 0f       	add	r18, r18
     fc2:	33 1f       	adc	r19, r19
     fc4:	22 0f       	add	r18, r18
     fc6:	33 1f       	adc	r19, r19
     fc8:	26 0f       	add	r18, r22
     fca:	37 1f       	adc	r19, r23
     fcc:	42 1b       	sub	r20, r18
     fce:	53 0b       	sbc	r21, r19
     fd0:	34 2f       	mov	r19, r20
     fd2:	20 e1       	ldi	r18, 0x10	; 16
     fd4:	82 9f       	mul	r24, r18
     fd6:	30 0d       	add	r19, r0
     fd8:	11 24       	eor	r1, r1
     fda:	83 2f       	mov	r24, r19
     fdc:	08 95       	ret

00000fde <FUNCgcd1>:
     fde:	cf 92       	push	r12
     fe0:	df 92       	push	r13
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	28 97       	sbiw	r28, 0x08	; 8
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	6b 01       	movw	r12, r22
     ffc:	7c 01       	movw	r14, r24
     ffe:	69 83       	std	Y+1, r22	; 0x01
    1000:	7a 83       	std	Y+2, r23	; 0x02
    1002:	8b 83       	std	Y+3, r24	; 0x03
    1004:	9c 83       	std	Y+4, r25	; 0x04
    1006:	2d 83       	std	Y+5, r18	; 0x05
    1008:	3e 83       	std	Y+6, r19	; 0x06
    100a:	4f 83       	std	Y+7, r20	; 0x07
    100c:	58 87       	std	Y+8, r21	; 0x08
    100e:	c2 16       	cp	r12, r18
    1010:	d3 06       	cpc	r13, r19
    1012:	e4 06       	cpc	r14, r20
    1014:	f5 06       	cpc	r15, r21
    1016:	34 f4       	brge	.+12     	; 0x1024 <FUNCgcd1+0x46>
    1018:	be 01       	movw	r22, r28
    101a:	6b 5f       	subi	r22, 0xFB	; 251
    101c:	7f 4f       	sbci	r23, 0xFF	; 255
    101e:	ce 01       	movw	r24, r28
    1020:	01 96       	adiw	r24, 0x01	; 1
    1022:	85 dc       	rcall	.-1782   	; 0x92e <FUNCswap>
    1024:	8d 81       	ldd	r24, Y+5	; 0x05
    1026:	9e 81       	ldd	r25, Y+6	; 0x06
    1028:	af 81       	ldd	r26, Y+7	; 0x07
    102a:	b8 85       	ldd	r27, Y+8	; 0x08
    102c:	89 2b       	or	r24, r25
    102e:	8a 2b       	or	r24, r26
    1030:	8b 2b       	or	r24, r27
    1032:	71 f4       	brne	.+28     	; 0x1050 <FUNCgcd1+0x72>
    1034:	69 81       	ldd	r22, Y+1	; 0x01
    1036:	7a 81       	ldd	r23, Y+2	; 0x02
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	a9 01       	movw	r20, r18
    1042:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__divmodsi4>
    1046:	61 15       	cp	r22, r1
    1048:	71 05       	cpc	r23, r1
    104a:	81 05       	cpc	r24, r1
    104c:	91 05       	cpc	r25, r1
    104e:	29 f4       	brne	.+10     	; 0x105a <FUNCgcd1+0x7c>
    1050:	6d 81       	ldd	r22, Y+5	; 0x05
    1052:	7e 81       	ldd	r23, Y+6	; 0x06
    1054:	8f 81       	ldd	r24, Y+7	; 0x07
    1056:	98 85       	ldd	r25, Y+8	; 0x08
    1058:	05 c0       	rjmp	.+10     	; 0x1064 <FUNCgcd1+0x86>
    105a:	6d 83       	std	Y+5, r22	; 0x05
    105c:	7e 83       	std	Y+6, r23	; 0x06
    105e:	8f 83       	std	Y+7, r24	; 0x07
    1060:	98 87       	std	Y+8, r25	; 0x08
    1062:	f6 cf       	rjmp	.-20     	; 0x1050 <FUNCgcd1+0x72>
    1064:	28 96       	adiw	r28, 0x08	; 8
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	ff 90       	pop	r15
    1076:	ef 90       	pop	r14
    1078:	df 90       	pop	r13
    107a:	cf 90       	pop	r12
    107c:	08 95       	ret

0000107e <FUNCpincheck>:
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <FUNCpincheck+0x8>
    1082:	95 95       	asr	r25
    1084:	87 95       	ror	r24
    1086:	6a 95       	dec	r22
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <FUNCpincheck+0x4>
    108a:	81 70       	andi	r24, 0x01	; 1
    108c:	08 95       	ret

0000108e <FUNCprint_binary>:
    108e:	ed e3       	ldi	r30, 0x3D	; 61
    1090:	f1 e0       	ldi	r31, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	20 e8       	ldi	r18, 0x80	; 128
    1096:	50 e3       	ldi	r21, 0x30	; 48
    1098:	41 e3       	ldi	r20, 0x31	; 49
    109a:	38 2f       	mov	r19, r24
    109c:	32 23       	and	r19, r18
    109e:	11 f0       	breq	.+4      	; 0x10a4 <FUNCprint_binary+0x16>
    10a0:	40 83       	st	Z, r20
    10a2:	01 c0       	rjmp	.+2      	; 0x10a6 <FUNCprint_binary+0x18>
    10a4:	50 83       	st	Z, r21
    10a6:	26 95       	lsr	r18
    10a8:	9f 5f       	subi	r25, 0xFF	; 255
    10aa:	31 96       	adiw	r30, 0x01	; 1
    10ac:	98 30       	cpi	r25, 0x08	; 8
    10ae:	a9 f7       	brne	.-22     	; 0x109a <FUNCprint_binary+0xc>
    10b0:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <FUNCstr+0x8>
    10b4:	8d e3       	ldi	r24, 0x3D	; 61
    10b6:	91 e0       	ldi	r25, 0x01	; 1
    10b8:	08 95       	ret

000010ba <FUNCmayia>:
    10ba:	a4 2f       	mov	r26, r20
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	10 97       	sbiw	r26, 0x00	; 0
    10c0:	61 f0       	breq	.+24     	; 0x10da <FUNCmayia+0x20>
    10c2:	21 e0       	ldi	r18, 0x01	; 1
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	e1 e0       	ldi	r30, 0x01	; 1
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	ee 0f       	add	r30, r30
    10cc:	ff 1f       	adc	r31, r31
    10ce:	2f 5f       	subi	r18, 0xFF	; 255
    10d0:	3f 4f       	sbci	r19, 0xFF	; 255
    10d2:	a2 17       	cp	r26, r18
    10d4:	b3 07       	cpc	r27, r19
    10d6:	c8 f7       	brcc	.-14     	; 0x10ca <FUNCmayia+0x10>
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <FUNCmayia+0x24>
    10da:	e1 e0       	ldi	r30, 0x01	; 1
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	31 97       	sbiw	r30, 0x01	; 1
    10e0:	6e 23       	and	r22, r30
    10e2:	7f 23       	and	r23, r31
    10e4:	8e 23       	and	r24, r30
    10e6:	9f 23       	and	r25, r31
    10e8:	86 27       	eor	r24, r22
    10ea:	97 27       	eor	r25, r23
    10ec:	68 23       	and	r22, r24
    10ee:	79 23       	and	r23, r25
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <FUNCmayia+0x3c>
    10f2:	66 0f       	add	r22, r22
    10f4:	77 1f       	adc	r23, r23
    10f6:	4a 95       	dec	r20
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <FUNCmayia+0x38>
    10fa:	86 2b       	or	r24, r22
    10fc:	97 2b       	or	r25, r23
    10fe:	08 95       	ret

00001100 <FUNCenable>:
    1100:	fc 01       	movw	r30, r24
    1102:	9f b7       	in	r25, 0x3f	; 63
    1104:	8f b7       	in	r24, 0x3f	; 63
    1106:	8f 77       	andi	r24, 0x7F	; 127
    1108:	8f bf       	out	0x3f, r24	; 63
    110a:	9f bf       	out	0x3f, r25	; 63
    110c:	8f e8       	ldi	r24, 0x8F	; 143
    110e:	96 e0       	ldi	r25, 0x06	; 6
    1110:	91 83       	std	Z+1, r25	; 0x01
    1112:	80 83       	st	Z, r24
    1114:	8a ea       	ldi	r24, 0xAA	; 170
    1116:	96 e0       	ldi	r25, 0x06	; 6
    1118:	93 83       	std	Z+3, r25	; 0x03
    111a:	82 83       	std	Z+2, r24	; 0x02
    111c:	84 ed       	ldi	r24, 0xD4	; 212
    111e:	96 e0       	ldi	r25, 0x06	; 6
    1120:	95 83       	std	Z+5, r25	; 0x05
    1122:	84 83       	std	Z+4, r24	; 0x04
    1124:	8d e5       	ldi	r24, 0x5D	; 93
    1126:	98 e0       	ldi	r25, 0x08	; 8
    1128:	97 83       	std	Z+7, r25	; 0x07
    112a:	86 83       	std	Z+6, r24	; 0x06
    112c:	8c e7       	ldi	r24, 0x7C	; 124
    112e:	94 e0       	ldi	r25, 0x04	; 4
    1130:	91 87       	std	Z+9, r25	; 0x09
    1132:	80 87       	std	Z+8, r24	; 0x08
    1134:	8a e8       	ldi	r24, 0x8A	; 138
    1136:	94 e0       	ldi	r25, 0x04	; 4
    1138:	93 87       	std	Z+11, r25	; 0x0b
    113a:	82 87       	std	Z+10, r24	; 0x0a
    113c:	8c e8       	ldi	r24, 0x8C	; 140
    113e:	94 e0       	ldi	r25, 0x04	; 4
    1140:	95 87       	std	Z+13, r25	; 0x0d
    1142:	84 87       	std	Z+12, r24	; 0x0c
    1144:	8f e8       	ldi	r24, 0x8F	; 143
    1146:	94 e0       	ldi	r25, 0x04	; 4
    1148:	97 87       	std	Z+15, r25	; 0x0f
    114a:	86 87       	std	Z+14, r24	; 0x0e
    114c:	82 e9       	ldi	r24, 0x92	; 146
    114e:	94 e0       	ldi	r25, 0x04	; 4
    1150:	91 8b       	std	Z+17, r25	; 0x11
    1152:	80 8b       	std	Z+16, r24	; 0x10
    1154:	85 e9       	ldi	r24, 0x95	; 149
    1156:	94 e0       	ldi	r25, 0x04	; 4
    1158:	93 8b       	std	Z+19, r25	; 0x13
    115a:	82 8b       	std	Z+18, r24	; 0x12
    115c:	86 e8       	ldi	r24, 0x86	; 134
    115e:	94 e0       	ldi	r25, 0x04	; 4
    1160:	95 8b       	std	Z+21, r25	; 0x15
    1162:	84 8b       	std	Z+20, r24	; 0x14
    1164:	88 e8       	ldi	r24, 0x88	; 136
    1166:	94 e0       	ldi	r25, 0x04	; 4
    1168:	97 8b       	std	Z+23, r25	; 0x17
    116a:	86 8b       	std	Z+22, r24	; 0x16
    116c:	87 e9       	ldi	r24, 0x97	; 151
    116e:	94 e0       	ldi	r25, 0x04	; 4
    1170:	91 8f       	std	Z+25, r25	; 0x19
    1172:	80 8f       	std	Z+24, r24	; 0x18
    1174:	88 eb       	ldi	r24, 0xB8	; 184
    1176:	94 e0       	ldi	r25, 0x04	; 4
    1178:	93 8f       	std	Z+27, r25	; 0x1b
    117a:	82 8f       	std	Z+26, r24	; 0x1a
    117c:	86 ec       	ldi	r24, 0xC6	; 198
    117e:	94 e0       	ldi	r25, 0x04	; 4
    1180:	95 8f       	std	Z+29, r25	; 0x1d
    1182:	84 8f       	std	Z+28, r24	; 0x1c
    1184:	88 ee       	ldi	r24, 0xE8	; 232
    1186:	94 e0       	ldi	r25, 0x04	; 4
    1188:	97 8f       	std	Z+31, r25	; 0x1f
    118a:	86 8f       	std	Z+30, r24	; 0x1e
    118c:	8c e4       	ldi	r24, 0x4C	; 76
    118e:	97 e0       	ldi	r25, 0x07	; 7
    1190:	91 a3       	std	Z+33, r25	; 0x21
    1192:	80 a3       	std	Z+32, r24	; 0x20
    1194:	85 e8       	ldi	r24, 0x85	; 133
    1196:	97 e0       	ldi	r25, 0x07	; 7
    1198:	93 a3       	std	Z+35, r25	; 0x23
    119a:	82 a3       	std	Z+34, r24	; 0x22
    119c:	81 ef       	ldi	r24, 0xF1	; 241
    119e:	96 e0       	ldi	r25, 0x06	; 6
    11a0:	95 a3       	std	Z+37, r25	; 0x25
    11a2:	84 a3       	std	Z+36, r24	; 0x24
    11a4:	89 eb       	ldi	r24, 0xB9	; 185
    11a6:	96 e0       	ldi	r25, 0x06	; 6
    11a8:	97 a3       	std	Z+39, r25	; 0x27
    11aa:	86 a3       	std	Z+38, r24	; 0x26
    11ac:	8e e8       	ldi	r24, 0x8E	; 142
    11ae:	95 e0       	ldi	r25, 0x05	; 5
    11b0:	91 a7       	std	Z+41, r25	; 0x29
    11b2:	80 a7       	std	Z+40, r24	; 0x28
    11b4:	83 e9       	ldi	r24, 0x93	; 147
    11b6:	95 e0       	ldi	r25, 0x05	; 5
    11b8:	93 a7       	std	Z+43, r25	; 0x2b
    11ba:	82 a7       	std	Z+42, r24	; 0x2a
    11bc:	82 ea       	ldi	r24, 0xA2	; 162
    11be:	95 e0       	ldi	r25, 0x05	; 5
    11c0:	95 a7       	std	Z+45, r25	; 0x2d
    11c2:	84 a7       	std	Z+44, r24	; 0x2c
    11c4:	86 ec       	ldi	r24, 0xC6	; 198
    11c6:	95 e0       	ldi	r25, 0x05	; 5
    11c8:	97 a7       	std	Z+47, r25	; 0x2f
    11ca:	86 a7       	std	Z+46, r24	; 0x2e
    11cc:	88 ec       	ldi	r24, 0xC8	; 200
    11ce:	95 e0       	ldi	r25, 0x05	; 5
    11d0:	91 ab       	std	Z+49, r25	; 0x31
    11d2:	80 ab       	std	Z+48, r24	; 0x30
    11d4:	82 ed       	ldi	r24, 0xD2	; 210
    11d6:	95 e0       	ldi	r25, 0x05	; 5
    11d8:	93 ab       	std	Z+51, r25	; 0x33
    11da:	82 ab       	std	Z+50, r24	; 0x32
    11dc:	8f ed       	ldi	r24, 0xDF	; 223
    11de:	95 e0       	ldi	r25, 0x05	; 5
    11e0:	95 ab       	std	Z+53, r25	; 0x35
    11e2:	84 ab       	std	Z+52, r24	; 0x34
    11e4:	8b ee       	ldi	r24, 0xEB	; 235
    11e6:	95 e0       	ldi	r25, 0x05	; 5
    11e8:	97 ab       	std	Z+55, r25	; 0x37
    11ea:	86 ab       	std	Z+54, r24	; 0x36
    11ec:	83 e0       	ldi	r24, 0x03	; 3
    11ee:	96 e0       	ldi	r25, 0x06	; 6
    11f0:	91 af       	std	Z+57, r25	; 0x39
    11f2:	80 af       	std	Z+56, r24	; 0x38
    11f4:	86 e1       	ldi	r24, 0x16	; 22
    11f6:	96 e0       	ldi	r25, 0x06	; 6
    11f8:	93 af       	std	Z+59, r25	; 0x3b
    11fa:	82 af       	std	Z+58, r24	; 0x3a
    11fc:	81 e2       	ldi	r24, 0x21	; 33
    11fe:	96 e0       	ldi	r25, 0x06	; 6
    1200:	95 af       	std	Z+61, r25	; 0x3d
    1202:	84 af       	std	Z+60, r24	; 0x3c
    1204:	8e e4       	ldi	r24, 0x4E	; 78
    1206:	96 e0       	ldi	r25, 0x06	; 6
    1208:	97 af       	std	Z+63, r25	; 0x3f
    120a:	86 af       	std	Z+62, r24	; 0x3e
    120c:	df 01       	movw	r26, r30
    120e:	a0 5c       	subi	r26, 0xC0	; 192
    1210:	bf 4f       	sbci	r27, 0xFF	; 255
    1212:	83 ec       	ldi	r24, 0xC3	; 195
    1214:	97 e0       	ldi	r25, 0x07	; 7
    1216:	11 96       	adiw	r26, 0x01	; 1
    1218:	9c 93       	st	X, r25
    121a:	8e 93       	st	-X, r24
    121c:	12 96       	adiw	r26, 0x02	; 2
    121e:	8e ec       	ldi	r24, 0xCE	; 206
    1220:	97 e0       	ldi	r25, 0x07	; 7
    1222:	11 96       	adiw	r26, 0x01	; 1
    1224:	9c 93       	st	X, r25
    1226:	8e 93       	st	-X, r24
    1228:	12 96       	adiw	r26, 0x02	; 2
    122a:	8f ee       	ldi	r24, 0xEF	; 239
    122c:	97 e0       	ldi	r25, 0x07	; 7
    122e:	11 96       	adiw	r26, 0x01	; 1
    1230:	9c 93       	st	X, r25
    1232:	8e 93       	st	-X, r24
    1234:	12 96       	adiw	r26, 0x02	; 2
    1236:	8f e3       	ldi	r24, 0x3F	; 63
    1238:	98 e0       	ldi	r25, 0x08	; 8
    123a:	11 96       	adiw	r26, 0x01	; 1
    123c:	9c 93       	st	X, r25
    123e:	8e 93       	st	-X, r24
    1240:	12 96       	adiw	r26, 0x02	; 2
    1242:	87 e4       	ldi	r24, 0x47	; 71
    1244:	98 e0       	ldi	r25, 0x08	; 8
    1246:	11 96       	adiw	r26, 0x01	; 1
    1248:	9c 93       	st	X, r25
    124a:	8e 93       	st	-X, r24
    124c:	12 96       	adiw	r26, 0x02	; 2
    124e:	87 e8       	ldi	r24, 0x87	; 135
    1250:	99 e0       	ldi	r25, 0x09	; 9
    1252:	8d 93       	st	X+, r24
    1254:	9c 93       	st	X, r25
    1256:	cf 01       	movw	r24, r30
    1258:	08 95       	ret

0000125a <FUNCintinvstr>:
/***intinvstr***/
uint8_t FUNCintinvstr(int32_t n, char* res, uint8_t n_digit)
{
    125a:	8f 92       	push	r8
    125c:	9f 92       	push	r9
    125e:	af 92       	push	r10
    1260:	bf 92       	push	r11
    1262:	ef 92       	push	r14
    1264:	ff 92       	push	r15
    1266:	0f 93       	push	r16
    1268:	1f 93       	push	r17
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	8a 01       	movw	r16, r20
    1270:	d2 2f       	mov	r29, r18
	uint8_t k=0;
	for(res[k++] = (n % 10) + '0' ; (n/=10) > ZERO ; res[k++] = (n % 10) + '0');
    1272:	2a e0       	ldi	r18, 0x0A	; 10
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	40 e0       	ldi	r20, 0x00	; 0
    1278:	50 e0       	ldi	r21, 0x00	; 0
    127a:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__divmodsi4>
    127e:	60 5d       	subi	r22, 0xD0	; 208
    1280:	f8 01       	movw	r30, r16
    1282:	60 83       	st	Z, r22
    1284:	62 2f       	mov	r22, r18
    1286:	73 2f       	mov	r23, r19
    1288:	84 2f       	mov	r24, r20
    128a:	95 2f       	mov	r25, r21
    128c:	16 16       	cp	r1, r22
    128e:	17 06       	cpc	r1, r23
    1290:	18 06       	cpc	r1, r24
    1292:	19 06       	cpc	r1, r25
    1294:	fc f4       	brge	.+62     	; 0x12d4 <FUNCintinvstr+0x7a>
    1296:	21 e0       	ldi	r18, 0x01	; 1
    1298:	0f 2e       	mov	r0, r31
    129a:	fa e0       	ldi	r31, 0x0A	; 10
    129c:	8f 2e       	mov	r8, r31
    129e:	91 2c       	mov	r9, r1
    12a0:	a1 2c       	mov	r10, r1
    12a2:	b1 2c       	mov	r11, r1
    12a4:	f0 2d       	mov	r31, r0
    12a6:	c1 e0       	ldi	r28, 0x01	; 1
    12a8:	c2 0f       	add	r28, r18
    12aa:	78 01       	movw	r14, r16
    12ac:	e2 0e       	add	r14, r18
    12ae:	f1 1c       	adc	r15, r1
    12b0:	a5 01       	movw	r20, r10
    12b2:	94 01       	movw	r18, r8
    12b4:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__divmodsi4>
    12b8:	60 5d       	subi	r22, 0xD0	; 208
    12ba:	f7 01       	movw	r30, r14
    12bc:	60 83       	st	Z, r22
    12be:	62 2f       	mov	r22, r18
    12c0:	73 2f       	mov	r23, r19
    12c2:	84 2f       	mov	r24, r20
    12c4:	95 2f       	mov	r25, r21
    12c6:	2c 2f       	mov	r18, r28
    12c8:	16 16       	cp	r1, r22
    12ca:	17 06       	cpc	r1, r23
    12cc:	18 06       	cpc	r1, r24
    12ce:	19 06       	cpc	r1, r25
    12d0:	54 f3       	brlt	.-44     	; 0x12a6 <FUNCintinvstr+0x4c>
    12d2:	01 c0       	rjmp	.+2      	; 0x12d6 <FUNCintinvstr+0x7c>
    12d4:	c1 e0       	ldi	r28, 0x01	; 1
	for( ; k < n_digit ; res[k++] = '0');
    12d6:	cd 17       	cp	r28, r29
    12d8:	48 f4       	brcc	.+18     	; 0x12ec <FUNCintinvstr+0x92>
    12da:	80 e3       	ldi	r24, 0x30	; 48
    12dc:	f8 01       	movw	r30, r16
    12de:	ec 0f       	add	r30, r28
    12e0:	f1 1d       	adc	r31, r1
    12e2:	80 83       	st	Z, r24
    12e4:	cf 5f       	subi	r28, 0xFF	; 255
    12e6:	dc 13       	cpse	r29, r28
    12e8:	f9 cf       	rjmp	.-14     	; 0x12dc <FUNCintinvstr+0x82>
    12ea:	01 c0       	rjmp	.+2      	; 0x12ee <FUNCintinvstr+0x94>
    12ec:	dc 2f       	mov	r29, r28
	res[k]='\0';
    12ee:	f8 01       	movw	r30, r16
    12f0:	ed 0f       	add	r30, r29
    12f2:	f1 1d       	adc	r31, r1
    12f4:	10 82       	st	Z, r1
	return k;
}
    12f6:	8d 2f       	mov	r24, r29
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	1f 91       	pop	r17
    12fe:	0f 91       	pop	r16
    1300:	ff 90       	pop	r15
    1302:	ef 90       	pop	r14
    1304:	bf 90       	pop	r11
    1306:	af 90       	pop	r10
    1308:	9f 90       	pop	r9
    130a:	8f 90       	pop	r8
    130c:	08 95       	ret

0000130e <FUNCftoa>:
/***ftoa***/
char* FUNCftoa(float n, char* res, uint8_t afterpoint)
{
    130e:	4f 92       	push	r4
    1310:	5f 92       	push	r5
    1312:	6f 92       	push	r6
    1314:	7f 92       	push	r7
    1316:	8f 92       	push	r8
    1318:	9f 92       	push	r9
    131a:	af 92       	push	r10
    131c:	bf 92       	push	r11
    131e:	cf 92       	push	r12
    1320:	df 92       	push	r13
    1322:	ef 92       	push	r14
    1324:	ff 92       	push	r15
    1326:	1f 93       	push	r17
    1328:	cf 93       	push	r28
    132a:	df 93       	push	r29
    132c:	6b 01       	movw	r12, r22
    132e:	7c 01       	movw	r14, r24
    1330:	ea 01       	movw	r28, r20
    1332:	12 2f       	mov	r17, r18
	uint8_t k=ZERO;
	int32_t ipart;
	float fpart;
	int8_t sign;
	if (n < ZERO){
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	a9 01       	movw	r20, r18
    133a:	0e 94 24 13 	call	0x2648	; 0x2648 <__cmpsf2>
    133e:	88 23       	and	r24, r24
    1340:	0c f0       	brlt	.+2      	; 0x1344 <FUNCftoa+0x36>
    1342:	4d c0       	rjmp	.+154    	; 0x13de <FUNCftoa+0xd0>
		n = -n;
    1344:	f7 fa       	bst	r15, 7
    1346:	f0 94       	com	r15
    1348:	f7 f8       	bld	r15, 7
    134a:	f0 94       	com	r15
		sign=-ONE;
	}else
		sign=ONE;
	ipart = (int32_t) n;
    134c:	c7 01       	movw	r24, r14
    134e:	b6 01       	movw	r22, r12
    1350:	0e 94 90 13 	call	0x2720	; 0x2720 <__fixsfsi>
    1354:	4b 01       	movw	r8, r22
    1356:	5c 01       	movw	r10, r24
	fpart = n - (float)ipart;
    1358:	0e 94 c3 13 	call	0x2786	; 0x2786 <__floatsisf>
    135c:	9b 01       	movw	r18, r22
    135e:	ac 01       	movw	r20, r24
    1360:	c7 01       	movw	r24, r14
    1362:	b6 01       	movw	r22, r12
    1364:	0e 94 bf 12 	call	0x257e	; 0x257e <__subsf3>
    1368:	2b 01       	movw	r4, r22
    136a:	3c 01       	movw	r6, r24
	k=FUNCintinvstr( ipart, res, ONE );
    136c:	21 e0       	ldi	r18, 0x01	; 1
    136e:	ae 01       	movw	r20, r28
    1370:	c5 01       	movw	r24, r10
    1372:	b4 01       	movw	r22, r8
    1374:	72 df       	rcall	.-284    	; 0x125a <FUNCintinvstr>
	if (sign < ZERO)
		res[k++] = '-';
    1376:	ff 24       	eor	r15, r15
    1378:	f3 94       	inc	r15
    137a:	f8 0e       	add	r15, r24
    137c:	fe 01       	movw	r30, r28
    137e:	e8 0f       	add	r30, r24
    1380:	f1 1d       	adc	r31, r1
    1382:	8d e2       	ldi	r24, 0x2D	; 45
    1384:	80 83       	st	Z, r24
	else
		res[k++] = ' ';
	res[k]='\0';
    1386:	6e 01       	movw	r12, r28
    1388:	cf 0c       	add	r12, r15
    138a:	d1 1c       	adc	r13, r1
    138c:	f6 01       	movw	r30, r12
    138e:	10 82       	st	Z, r1
	Reverse(res);
    1390:	ce 01       	movw	r24, r28
    1392:	0a dd       	rcall	.-1516   	; 0xda8 <Reverse>
	if (afterpoint > ZERO) {
    1394:	11 23       	and	r17, r17
    1396:	09 f4       	brne	.+2      	; 0x139a <FUNCftoa+0x8c>
    1398:	40 c0       	rjmp	.+128    	; 0x141a <FUNCftoa+0x10c>
		res[k++] = '.';
    139a:	8e e2       	ldi	r24, 0x2E	; 46
    139c:	f6 01       	movw	r30, r12
    139e:	80 83       	st	Z, r24
		FUNCintinvstr( fpart * pow(10, afterpoint), res+k, afterpoint );
    13a0:	f3 94       	inc	r15
    13a2:	ce 01       	movw	r24, r28
    13a4:	8f 0d       	add	r24, r15
    13a6:	91 1d       	adc	r25, r1
    13a8:	7c 01       	movw	r14, r24
    13aa:	61 2f       	mov	r22, r17
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	0e 94 c1 13 	call	0x2782	; 0x2782 <__floatunsisf>
    13b6:	9b 01       	movw	r18, r22
    13b8:	ac 01       	movw	r20, r24
    13ba:	60 e0       	ldi	r22, 0x00	; 0
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	80 e2       	ldi	r24, 0x20	; 32
    13c0:	91 e4       	ldi	r25, 0x41	; 65
    13c2:	0e 94 da 14 	call	0x29b4	; 0x29b4 <pow>
    13c6:	a3 01       	movw	r20, r6
    13c8:	92 01       	movw	r18, r4
    13ca:	0e 94 77 14 	call	0x28ee	; 0x28ee <__mulsf3>
    13ce:	0e 94 90 13 	call	0x2720	; 0x2720 <__fixsfsi>
    13d2:	21 2f       	mov	r18, r17
    13d4:	a7 01       	movw	r20, r14
		Reverse(res+k);
    13d6:	41 df       	rcall	.-382    	; 0x125a <FUNCintinvstr>
    13d8:	c7 01       	movw	r24, r14
    13da:	e6 dc       	rcall	.-1588   	; 0xda8 <Reverse>
	}	
	return res;
    13dc:	1e c0       	rjmp	.+60     	; 0x141a <FUNCftoa+0x10c>
	if (n < ZERO){
		n = -n;
		sign=-ONE;
	}else
		sign=ONE;
	ipart = (int32_t) n;
    13de:	c7 01       	movw	r24, r14
    13e0:	b6 01       	movw	r22, r12
    13e2:	0e 94 90 13 	call	0x2720	; 0x2720 <__fixsfsi>
    13e6:	4b 01       	movw	r8, r22
    13e8:	5c 01       	movw	r10, r24
	fpart = n - (float)ipart;
    13ea:	0e 94 c3 13 	call	0x2786	; 0x2786 <__floatsisf>
    13ee:	9b 01       	movw	r18, r22
    13f0:	ac 01       	movw	r20, r24
    13f2:	c7 01       	movw	r24, r14
    13f4:	b6 01       	movw	r22, r12
    13f6:	0e 94 bf 12 	call	0x257e	; 0x257e <__subsf3>
    13fa:	2b 01       	movw	r4, r22
    13fc:	3c 01       	movw	r6, r24
	k=FUNCintinvstr( ipart, res, ONE );
    13fe:	21 e0       	ldi	r18, 0x01	; 1
    1400:	ae 01       	movw	r20, r28
    1402:	c5 01       	movw	r24, r10
    1404:	b4 01       	movw	r22, r8
    1406:	29 df       	rcall	.-430    	; 0x125a <FUNCintinvstr>
	if (sign < ZERO)
		res[k++] = '-';
	else
		res[k++] = ' ';
    1408:	ff 24       	eor	r15, r15
    140a:	f3 94       	inc	r15
    140c:	f8 0e       	add	r15, r24
    140e:	fe 01       	movw	r30, r28
    1410:	e8 0f       	add	r30, r24
    1412:	f1 1d       	adc	r31, r1
    1414:	80 e2       	ldi	r24, 0x20	; 32
    1416:	80 83       	st	Z, r24
    1418:	b6 cf       	rjmp	.-148    	; 0x1386 <FUNCftoa+0x78>
		res[k++] = '.';
		FUNCintinvstr( fpart * pow(10, afterpoint), res+k, afterpoint );
		Reverse(res+k);
	}	
	return res;
}
    141a:	ce 01       	movw	r24, r28
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	1f 91       	pop	r17
    1422:	ff 90       	pop	r15
    1424:	ef 90       	pop	r14
    1426:	df 90       	pop	r13
    1428:	cf 90       	pop	r12
    142a:	bf 90       	pop	r11
    142c:	af 90       	pop	r10
    142e:	9f 90       	pop	r9
    1430:	8f 90       	pop	r8
    1432:	7f 90       	pop	r7
    1434:	6f 90       	pop	r6
    1436:	5f 90       	pop	r5
    1438:	4f 90       	pop	r4
    143a:	08 95       	ret

0000143c <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    143c:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1440:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1444:	90 81       	ld	r25, Z
    1446:	9d 7f       	andi	r25, 0xFD	; 253
    1448:	90 83       	st	Z, r25
    144a:	67 2b       	or	r22, r23
    144c:	41 f0       	breq	.+16     	; 0x145e <LCD0_write+0x22>
    144e:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1452:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1456:	90 81       	ld	r25, Z
    1458:	91 60       	ori	r25, 0x01	; 1
    145a:	90 83       	st	Z, r25
    145c:	07 c0       	rjmp	.+14     	; 0x146c <LCD0_write+0x30>
    145e:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1462:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1466:	90 81       	ld	r25, Z
    1468:	9e 7f       	andi	r25, 0xFE	; 254
    146a:	90 83       	st	Z, r25
    146c:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <lcd0_DDR>
    1470:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <lcd0_DDR+0x1>
    1474:	90 81       	ld	r25, Z
    1476:	90 6f       	ori	r25, 0xF0	; 240
    1478:	90 83       	st	Z, r25
    147a:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    147e:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1482:	90 81       	ld	r25, Z
    1484:	94 60       	ori	r25, 0x04	; 4
    1486:	90 83       	st	Z, r25
    1488:	88 23       	and	r24, r24
    148a:	44 f4       	brge	.+16     	; 0x149c <LCD0_write+0x60>
    148c:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1490:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1494:	90 81       	ld	r25, Z
    1496:	90 68       	ori	r25, 0x80	; 128
    1498:	90 83       	st	Z, r25
    149a:	07 c0       	rjmp	.+14     	; 0x14aa <LCD0_write+0x6e>
    149c:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    14a0:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    14a4:	90 81       	ld	r25, Z
    14a6:	9f 77       	andi	r25, 0x7F	; 127
    14a8:	90 83       	st	Z, r25
    14aa:	86 ff       	sbrs	r24, 6
    14ac:	08 c0       	rjmp	.+16     	; 0x14be <LCD0_write+0x82>
    14ae:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    14b2:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    14b6:	90 81       	ld	r25, Z
    14b8:	90 64       	ori	r25, 0x40	; 64
    14ba:	90 83       	st	Z, r25
    14bc:	07 c0       	rjmp	.+14     	; 0x14cc <LCD0_write+0x90>
    14be:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    14c2:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    14c6:	90 81       	ld	r25, Z
    14c8:	9f 7b       	andi	r25, 0xBF	; 191
    14ca:	90 83       	st	Z, r25
    14cc:	85 ff       	sbrs	r24, 5
    14ce:	08 c0       	rjmp	.+16     	; 0x14e0 <LCD0_write+0xa4>
    14d0:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    14d4:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    14d8:	90 81       	ld	r25, Z
    14da:	90 62       	ori	r25, 0x20	; 32
    14dc:	90 83       	st	Z, r25
    14de:	07 c0       	rjmp	.+14     	; 0x14ee <LCD0_write+0xb2>
    14e0:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    14e4:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    14e8:	90 81       	ld	r25, Z
    14ea:	9f 7d       	andi	r25, 0xDF	; 223
    14ec:	90 83       	st	Z, r25
    14ee:	84 ff       	sbrs	r24, 4
    14f0:	08 c0       	rjmp	.+16     	; 0x1502 <LCD0_write+0xc6>
    14f2:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    14f6:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    14fa:	90 81       	ld	r25, Z
    14fc:	90 61       	ori	r25, 0x10	; 16
    14fe:	90 83       	st	Z, r25
    1500:	07 c0       	rjmp	.+14     	; 0x1510 <LCD0_write+0xd4>
    1502:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1506:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    150a:	90 81       	ld	r25, Z
    150c:	9f 7e       	andi	r25, 0xEF	; 239
    150e:	90 83       	st	Z, r25
    1510:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1514:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1518:	90 81       	ld	r25, Z
    151a:	9b 7f       	andi	r25, 0xFB	; 251
    151c:	90 83       	st	Z, r25
    151e:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1522:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1526:	90 81       	ld	r25, Z
    1528:	94 60       	ori	r25, 0x04	; 4
    152a:	90 83       	st	Z, r25
    152c:	83 ff       	sbrs	r24, 3
    152e:	08 c0       	rjmp	.+16     	; 0x1540 <LCD0_write+0x104>
    1530:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1534:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1538:	90 81       	ld	r25, Z
    153a:	90 68       	ori	r25, 0x80	; 128
    153c:	90 83       	st	Z, r25
    153e:	07 c0       	rjmp	.+14     	; 0x154e <LCD0_write+0x112>
    1540:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1544:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1548:	90 81       	ld	r25, Z
    154a:	9f 77       	andi	r25, 0x7F	; 127
    154c:	90 83       	st	Z, r25
    154e:	82 ff       	sbrs	r24, 2
    1550:	08 c0       	rjmp	.+16     	; 0x1562 <LCD0_write+0x126>
    1552:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1556:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    155a:	90 81       	ld	r25, Z
    155c:	90 64       	ori	r25, 0x40	; 64
    155e:	90 83       	st	Z, r25
    1560:	07 c0       	rjmp	.+14     	; 0x1570 <LCD0_write+0x134>
    1562:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1566:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    156a:	90 81       	ld	r25, Z
    156c:	9f 7b       	andi	r25, 0xBF	; 191
    156e:	90 83       	st	Z, r25
    1570:	81 ff       	sbrs	r24, 1
    1572:	08 c0       	rjmp	.+16     	; 0x1584 <LCD0_write+0x148>
    1574:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1578:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    157c:	90 81       	ld	r25, Z
    157e:	90 62       	ori	r25, 0x20	; 32
    1580:	90 83       	st	Z, r25
    1582:	07 c0       	rjmp	.+14     	; 0x1592 <LCD0_write+0x156>
    1584:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1588:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    158c:	90 81       	ld	r25, Z
    158e:	9f 7d       	andi	r25, 0xDF	; 223
    1590:	90 83       	st	Z, r25
    1592:	80 ff       	sbrs	r24, 0
    1594:	08 c0       	rjmp	.+16     	; 0x15a6 <LCD0_write+0x16a>
    1596:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    159a:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    159e:	80 81       	ld	r24, Z
    15a0:	80 61       	ori	r24, 0x10	; 16
    15a2:	80 83       	st	Z, r24
    15a4:	07 c0       	rjmp	.+14     	; 0x15b4 <LCD0_write+0x178>
    15a6:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    15aa:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    15ae:	80 81       	ld	r24, Z
    15b0:	8f 7e       	andi	r24, 0xEF	; 239
    15b2:	80 83       	st	Z, r24
    15b4:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    15b8:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    15bc:	80 81       	ld	r24, Z
    15be:	8b 7f       	andi	r24, 0xFB	; 251
    15c0:	80 83       	st	Z, r24
    15c2:	08 95       	ret

000015c4 <LCD0_read>:
    15c4:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <lcd0_DDR>
    15c8:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <lcd0_DDR+0x1>
    15cc:	20 81       	ld	r18, Z
    15ce:	2f 70       	andi	r18, 0x0F	; 15
    15d0:	20 83       	st	Z, r18
    15d2:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    15d6:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    15da:	20 81       	ld	r18, Z
    15dc:	20 6f       	ori	r18, 0xF0	; 240
    15de:	20 83       	st	Z, r18
    15e0:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    15e4:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    15e8:	20 81       	ld	r18, Z
    15ea:	22 60       	ori	r18, 0x02	; 2
    15ec:	20 83       	st	Z, r18
    15ee:	89 2b       	or	r24, r25
    15f0:	41 f0       	breq	.+16     	; 0x1602 <LCD0_read+0x3e>
    15f2:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    15f6:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    15fa:	80 81       	ld	r24, Z
    15fc:	81 60       	ori	r24, 0x01	; 1
    15fe:	80 83       	st	Z, r24
    1600:	07 c0       	rjmp	.+14     	; 0x1610 <LCD0_read+0x4c>
    1602:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1606:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    160a:	80 81       	ld	r24, Z
    160c:	8e 7f       	andi	r24, 0xFE	; 254
    160e:	80 83       	st	Z, r24
    1610:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1614:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1618:	80 81       	ld	r24, Z
    161a:	84 60       	ori	r24, 0x04	; 4
    161c:	80 83       	st	Z, r24
    161e:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <lcd0_PIN>
    1622:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <lcd0_PIN+0x1>
    1626:	80 81       	ld	r24, Z
    1628:	88 23       	and	r24, r24
    162a:	14 f0       	brlt	.+4      	; 0x1630 <LCD0_read+0x6c>
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	01 c0       	rjmp	.+2      	; 0x1632 <LCD0_read+0x6e>
    1630:	80 e8       	ldi	r24, 0x80	; 128
    1632:	90 81       	ld	r25, Z
    1634:	96 ff       	sbrs	r25, 6
    1636:	02 c0       	rjmp	.+4      	; 0x163c <LCD0_read+0x78>
    1638:	80 64       	ori	r24, 0x40	; 64
    163a:	01 c0       	rjmp	.+2      	; 0x163e <LCD0_read+0x7a>
    163c:	8f 7b       	andi	r24, 0xBF	; 191
    163e:	90 81       	ld	r25, Z
    1640:	95 ff       	sbrs	r25, 5
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <LCD0_read+0x84>
    1644:	80 62       	ori	r24, 0x20	; 32
    1646:	01 c0       	rjmp	.+2      	; 0x164a <LCD0_read+0x86>
    1648:	8f 7d       	andi	r24, 0xDF	; 223
    164a:	90 81       	ld	r25, Z
    164c:	94 ff       	sbrs	r25, 4
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <LCD0_read+0x90>
    1650:	80 61       	ori	r24, 0x10	; 16
    1652:	01 c0       	rjmp	.+2      	; 0x1656 <LCD0_read+0x92>
    1654:	8f 7e       	andi	r24, 0xEF	; 239
    1656:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    165a:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    165e:	90 81       	ld	r25, Z
    1660:	9b 7f       	andi	r25, 0xFB	; 251
    1662:	90 83       	st	Z, r25
    1664:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1668:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    166c:	90 81       	ld	r25, Z
    166e:	94 60       	ori	r25, 0x04	; 4
    1670:	90 83       	st	Z, r25
    1672:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <lcd0_PIN>
    1676:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <lcd0_PIN+0x1>
    167a:	90 81       	ld	r25, Z
    167c:	99 23       	and	r25, r25
    167e:	14 f4       	brge	.+4      	; 0x1684 <LCD0_read+0xc0>
    1680:	88 60       	ori	r24, 0x08	; 8
    1682:	01 c0       	rjmp	.+2      	; 0x1686 <LCD0_read+0xc2>
    1684:	87 7f       	andi	r24, 0xF7	; 247
    1686:	90 81       	ld	r25, Z
    1688:	96 ff       	sbrs	r25, 6
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <LCD0_read+0xcc>
    168c:	84 60       	ori	r24, 0x04	; 4
    168e:	01 c0       	rjmp	.+2      	; 0x1692 <LCD0_read+0xce>
    1690:	8b 7f       	andi	r24, 0xFB	; 251
    1692:	90 81       	ld	r25, Z
    1694:	95 ff       	sbrs	r25, 5
    1696:	02 c0       	rjmp	.+4      	; 0x169c <LCD0_read+0xd8>
    1698:	82 60       	ori	r24, 0x02	; 2
    169a:	01 c0       	rjmp	.+2      	; 0x169e <LCD0_read+0xda>
    169c:	8d 7f       	andi	r24, 0xFD	; 253
    169e:	90 81       	ld	r25, Z
    16a0:	94 ff       	sbrs	r25, 4
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <LCD0_read+0xe4>
    16a4:	81 60       	ori	r24, 0x01	; 1
    16a6:	01 c0       	rjmp	.+2      	; 0x16aa <LCD0_read+0xe6>
    16a8:	8e 7f       	andi	r24, 0xFE	; 254
    16aa:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    16ae:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    16b2:	90 81       	ld	r25, Z
    16b4:	9b 7f       	andi	r25, 0xFB	; 251
    16b6:	90 83       	st	Z, r25
    16b8:	08 95       	ret

000016ba <LCD0_BF>:
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	80 df       	rcall	.-256    	; 0x15c4 <LCD0_read>
    16c4:	cb e0       	ldi	r28, 0x0B	; 11
    16c6:	d0 e0       	ldi	r29, 0x00	; 0
    16c8:	05 c0       	rjmp	.+10     	; 0x16d4 <LCD0_BF+0x1a>
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	7a df       	rcall	.-268    	; 0x15c4 <LCD0_read>
    16d0:	21 97       	sbiw	r28, 0x01	; 1
    16d2:	11 f0       	breq	.+4      	; 0x16d8 <LCD0_BF+0x1e>
    16d4:	88 23       	and	r24, r24
    16d6:	cc f3       	brlt	.-14     	; 0x16ca <LCD0_BF+0x10>
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	08 95       	ret

000016de <LCD0_putch>:
    16de:	61 e0       	ldi	r22, 0x01	; 1
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	ac de       	rcall	.-680    	; 0x143c <LCD0_write>
    16e4:	ea cf       	rjmp	.-44     	; 0x16ba <LCD0_BF>
    16e6:	08 95       	ret

000016e8 <LCD0_getch>:
    16e8:	cf 93       	push	r28
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	6a df       	rcall	.-300    	; 0x15c4 <LCD0_read>
    16f0:	c8 2f       	mov	r28, r24
    16f2:	e3 df       	rcall	.-58     	; 0x16ba <LCD0_BF>
    16f4:	8c 2f       	mov	r24, r28
    16f6:	cf 91       	pop	r28
    16f8:	08 95       	ret

000016fa <LCD0_string>:
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	ec 01       	movw	r28, r24
    1700:	88 81       	ld	r24, Y
    1702:	88 23       	and	r24, r24
    1704:	41 f0       	breq	.+16     	; 0x1716 <LCD0_string+0x1c>
    1706:	21 96       	adiw	r28, 0x01	; 1
    1708:	61 e0       	ldi	r22, 0x01	; 1
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	97 de       	rcall	.-722    	; 0x143c <LCD0_write>
    170e:	d5 df       	rcall	.-86     	; 0x16ba <LCD0_BF>
    1710:	89 91       	ld	r24, Y+
    1712:	81 11       	cpse	r24, r1
    1714:	f9 cf       	rjmp	.-14     	; 0x1708 <LCD0_string+0xe>
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	08 95       	ret

0000171c <LCD0_string_size>:
    171c:	0f 93       	push	r16
    171e:	1f 93       	push	r17
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	fc 01       	movw	r30, r24
    1726:	d6 2f       	mov	r29, r22
    1728:	80 81       	ld	r24, Z
    172a:	88 23       	and	r24, r24
    172c:	51 f0       	breq	.+20     	; 0x1742 <LCD0_string_size+0x26>
    172e:	8f 01       	movw	r16, r30
    1730:	0f 5f       	subi	r16, 0xFF	; 255
    1732:	1f 4f       	sbci	r17, 0xFF	; 255
    1734:	61 11       	cpse	r22, r1
    1736:	09 c0       	rjmp	.+18     	; 0x174a <LCD0_string_size+0x2e>
    1738:	1b c0       	rjmp	.+54     	; 0x1770 <LCD0_string_size+0x54>
    173a:	cf 5f       	subi	r28, 0xFF	; 255
    173c:	dc 17       	cp	r29, r28
    173e:	30 f4       	brcc	.+12     	; 0x174c <LCD0_string_size+0x30>
    1740:	01 c0       	rjmp	.+2      	; 0x1744 <LCD0_string_size+0x28>
    1742:	c0 e0       	ldi	r28, 0x00	; 0
    1744:	cd 17       	cp	r28, r29
    1746:	60 f0       	brcs	.+24     	; 0x1760 <LCD0_string_size+0x44>
    1748:	13 c0       	rjmp	.+38     	; 0x1770 <LCD0_string_size+0x54>
    174a:	c1 e0       	ldi	r28, 0x01	; 1
    174c:	61 e0       	ldi	r22, 0x01	; 1
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	75 de       	rcall	.-790    	; 0x143c <LCD0_write>
    1752:	b3 df       	rcall	.-154    	; 0x16ba <LCD0_BF>
    1754:	f8 01       	movw	r30, r16
    1756:	81 91       	ld	r24, Z+
    1758:	8f 01       	movw	r16, r30
    175a:	81 11       	cpse	r24, r1
    175c:	ee cf       	rjmp	.-36     	; 0x173a <LCD0_string_size+0x1e>
    175e:	f2 cf       	rjmp	.-28     	; 0x1744 <LCD0_string_size+0x28>
    1760:	cf 5f       	subi	r28, 0xFF	; 255
    1762:	61 e0       	ldi	r22, 0x01	; 1
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	80 e2       	ldi	r24, 0x20	; 32
    1768:	69 de       	rcall	.-814    	; 0x143c <LCD0_write>
    176a:	a7 df       	rcall	.-178    	; 0x16ba <LCD0_BF>
    176c:	cd 17       	cp	r28, r29
    176e:	c0 f3       	brcs	.-16     	; 0x1760 <LCD0_string_size+0x44>
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	1f 91       	pop	r17
    1776:	0f 91       	pop	r16
    1778:	08 95       	ret

0000177a <LCD0_hspace>:
    177a:	cf 93       	push	r28
    177c:	c8 2f       	mov	r28, r24
    177e:	88 23       	and	r24, r24
    1780:	39 f0       	breq	.+14     	; 0x1790 <LCD0_hspace+0x16>
    1782:	61 e0       	ldi	r22, 0x01	; 1
    1784:	70 e0       	ldi	r23, 0x00	; 0
    1786:	80 e2       	ldi	r24, 0x20	; 32
    1788:	59 de       	rcall	.-846    	; 0x143c <LCD0_write>
    178a:	97 df       	rcall	.-210    	; 0x16ba <LCD0_BF>
    178c:	c1 50       	subi	r28, 0x01	; 1
    178e:	c9 f7       	brne	.-14     	; 0x1782 <LCD0_hspace+0x8>
    1790:	cf 91       	pop	r28
    1792:	08 95       	ret

00001794 <LCD0_gotoxy>:
    1794:	26 2f       	mov	r18, r22
    1796:	81 30       	cpi	r24, 0x01	; 1
    1798:	91 05       	cpc	r25, r1
    179a:	71 f0       	breq	.+28     	; 0x17b8 <LCD0_gotoxy+0x24>
    179c:	30 f0       	brcs	.+12     	; 0x17aa <LCD0_gotoxy+0x16>
    179e:	82 30       	cpi	r24, 0x02	; 2
    17a0:	91 05       	cpc	r25, r1
    17a2:	89 f0       	breq	.+34     	; 0x17c6 <LCD0_gotoxy+0x32>
    17a4:	03 97       	sbiw	r24, 0x03	; 3
    17a6:	b1 f0       	breq	.+44     	; 0x17d4 <LCD0_gotoxy+0x40>
    17a8:	08 95       	ret
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	80 e8       	ldi	r24, 0x80	; 128
    17b0:	82 0f       	add	r24, r18
    17b2:	44 de       	rcall	.-888    	; 0x143c <LCD0_write>
    17b4:	82 cf       	rjmp	.-252    	; 0x16ba <LCD0_BF>
    17b6:	08 95       	ret
    17b8:	60 e0       	ldi	r22, 0x00	; 0
    17ba:	70 e0       	ldi	r23, 0x00	; 0
    17bc:	80 ec       	ldi	r24, 0xC0	; 192
    17be:	82 0f       	add	r24, r18
    17c0:	3d de       	rcall	.-902    	; 0x143c <LCD0_write>
    17c2:	7b cf       	rjmp	.-266    	; 0x16ba <LCD0_BF>
    17c4:	08 95       	ret
    17c6:	60 e0       	ldi	r22, 0x00	; 0
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	84 e9       	ldi	r24, 0x94	; 148
    17cc:	82 0f       	add	r24, r18
    17ce:	36 de       	rcall	.-916    	; 0x143c <LCD0_write>
    17d0:	74 cf       	rjmp	.-280    	; 0x16ba <LCD0_BF>
    17d2:	08 95       	ret
    17d4:	60 e0       	ldi	r22, 0x00	; 0
    17d6:	70 e0       	ldi	r23, 0x00	; 0
    17d8:	84 ed       	ldi	r24, 0xD4	; 212
    17da:	82 0f       	add	r24, r18
    17dc:	2f de       	rcall	.-930    	; 0x143c <LCD0_write>
    17de:	6d cf       	rjmp	.-294    	; 0x16ba <LCD0_BF>
    17e0:	08 95       	ret

000017e2 <LCD0_clear>:
    17e2:	60 e0       	ldi	r22, 0x00	; 0
    17e4:	70 e0       	ldi	r23, 0x00	; 0
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	29 de       	rcall	.-942    	; 0x143c <LCD0_write>
    17ea:	87 ee       	ldi	r24, 0xE7	; 231
    17ec:	97 e1       	ldi	r25, 0x17	; 23
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <LCD0_clear+0xc>
    17f2:	00 c0       	rjmp	.+0      	; 0x17f4 <LCD0_clear+0x12>
    17f4:	00 00       	nop
    17f6:	08 95       	ret

000017f8 <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    17f8:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <lcd0_DDR>
    17fc:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <lcd0_DDR+0x1>
    1800:	87 e0       	ldi	r24, 0x07	; 7
    1802:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    1804:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1808:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    180c:	88 e0       	ldi	r24, 0x08	; 8
    180e:	80 83       	st	Z, r24
    1810:	2f ef       	ldi	r18, 0xFF	; 255
    1812:	83 ef       	ldi	r24, 0xF3	; 243
    1814:	91 e0       	ldi	r25, 0x01	; 1
    1816:	21 50       	subi	r18, 0x01	; 1
    1818:	80 40       	sbci	r24, 0x00	; 0
    181a:	90 40       	sbci	r25, 0x00	; 0
    181c:	e1 f7       	brne	.-8      	; 0x1816 <LCD0_inic+0x1e>
    181e:	00 c0       	rjmp	.+0      	; 0x1820 <LCD0_inic+0x28>
    1820:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    1822:	60 e0       	ldi	r22, 0x00	; 0
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	83 e3       	ldi	r24, 0x33	; 51
    1828:	09 de       	rcall	.-1006   	; 0x143c <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    182a:	20 ed       	ldi	r18, 0xD0	; 208
    182c:	2a 95       	dec	r18
    182e:	f1 f7       	brne	.-4      	; 0x182c <LCD0_inic+0x34>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	70 e0       	ldi	r23, 0x00	; 0
    1834:	83 e3       	ldi	r24, 0x33	; 51
    1836:	02 de       	rcall	.-1020   	; 0x143c <LCD0_write>
    1838:	80 ed       	ldi	r24, 0xD0	; 208
    183a:	8a 95       	dec	r24
    183c:	f1 f7       	brne	.-4      	; 0x183a <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	8b e2       	ldi	r24, 0x2B	; 43
    1844:	fb dd       	rcall	.-1034   	; 0x143c <LCD0_write>
    1846:	95 ec       	ldi	r25, 0xC5	; 197
    1848:	9a 95       	dec	r25
    184a:	f1 f7       	brne	.-4      	; 0x1848 <LCD0_inic+0x50>
    184c:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    184e:	60 e0       	ldi	r22, 0x00	; 0
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	8c e0       	ldi	r24, 0x0C	; 12
    1854:	f3 dd       	rcall	.-1050   	; 0x143c <LCD0_write>
    1856:	25 ec       	ldi	r18, 0xC5	; 197
    1858:	2a 95       	dec	r18
    185a:	f1 f7       	brne	.-4      	; 0x1858 <LCD0_inic+0x60>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    185c:	00 00       	nop
    185e:	60 e0       	ldi	r22, 0x00	; 0
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	eb dd       	rcall	.-1066   	; 0x143c <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1866:	87 ee       	ldi	r24, 0xE7	; 231
    1868:	97 e1       	ldi	r25, 0x17	; 23
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	f1 f7       	brne	.-4      	; 0x186a <LCD0_inic+0x72>
    186e:	00 c0       	rjmp	.+0      	; 0x1870 <LCD0_inic+0x78>
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    1870:	00 00       	nop
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	86 e0       	ldi	r24, 0x06	; 6
    1878:	e1 dd       	rcall	.-1086   	; 0x143c <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    187a:	95 ec       	ldi	r25, 0xC5	; 197
    187c:	9a 95       	dec	r25
    187e:	f1 f7       	brne	.-4      	; 0x187c <LCD0_inic+0x84>
    1880:	00 00       	nop
    1882:	08 95       	ret

00001884 <LCD0enable>:
void LCD1_strobe(unsigned int num);
void LCD1_reboot(void);
unsigned int LCD_ticks(unsigned int num);
/***Procedure & Function***/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1884:	1f 93       	push	r17
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    188c:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    188e:	8f b7       	in	r24, 0x3f	; 63
    1890:	8f 77       	andi	r24, 0x7F	; 127
    1892:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    1894:	70 93 66 01 	sts	0x0166, r23	; 0x800166 <lcd0_DDR+0x1>
    1898:	60 93 65 01 	sts	0x0165, r22	; 0x800165 <lcd0_DDR>
	lcd0_PIN=pin;
    189c:	50 93 5f 01 	sts	0x015F, r21	; 0x80015f <lcd0_PIN+0x1>
    18a0:	40 93 5e 01 	sts	0x015E, r20	; 0x80015e <lcd0_PIN>
	lcd0_PORT=port;
    18a4:	30 93 69 01 	sts	0x0169, r19	; 0x800169 <lcd0_PORT+0x1>
    18a8:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    18ac:	fb 01       	movw	r30, r22
    18ae:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    18b0:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    18b4:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    18b8:	8f ef       	ldi	r24, 0xFF	; 255
    18ba:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    18bc:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <lcd0_PIN>
    18c0:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <lcd0_PIN+0x1>
    18c4:	80 81       	ld	r24, Z
    18c6:	88 70       	andi	r24, 0x08	; 8
    18c8:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    18cc:	95 df       	rcall	.-214    	; 0x17f8 <LCD0_inic>
	SREG=tSREG;
    18ce:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    18d0:	8e e1       	ldi	r24, 0x1E	; 30
    18d2:	9a e0       	ldi	r25, 0x0A	; 10
    18d4:	99 83       	std	Y+1, r25	; 0x01
    18d6:	88 83       	st	Y, r24
    18d8:	82 ee       	ldi	r24, 0xE2	; 226
    18da:	9a e0       	ldi	r25, 0x0A	; 10
    18dc:	9b 83       	std	Y+3, r25	; 0x03
    18de:	8a 83       	std	Y+2, r24	; 0x02
    18e0:	8d e5       	ldi	r24, 0x5D	; 93
    18e2:	9b e0       	ldi	r25, 0x0B	; 11
    18e4:	9d 83       	std	Y+5, r25	; 0x05
    18e6:	8c 83       	std	Y+4, r24	; 0x04
    18e8:	8f e6       	ldi	r24, 0x6F	; 111
    18ea:	9b e0       	ldi	r25, 0x0B	; 11
    18ec:	9f 83       	std	Y+7, r25	; 0x07
    18ee:	8e 83       	std	Y+6, r24	; 0x06
    18f0:	84 e7       	ldi	r24, 0x74	; 116
    18f2:	9b e0       	ldi	r25, 0x0B	; 11
    18f4:	99 87       	std	Y+9, r25	; 0x09
    18f6:	88 87       	std	Y+8, r24	; 0x08
    18f8:	8d e7       	ldi	r24, 0x7D	; 125
    18fa:	9b e0       	ldi	r25, 0x0B	; 11
    18fc:	9b 87       	std	Y+11, r25	; 0x0b
    18fe:	8a 87       	std	Y+10, r24	; 0x0a
    1900:	8e e8       	ldi	r24, 0x8E	; 142
    1902:	9b e0       	ldi	r25, 0x0B	; 11
    1904:	9d 87       	std	Y+13, r25	; 0x0d
    1906:	8c 87       	std	Y+12, r24	; 0x0c
    1908:	8d eb       	ldi	r24, 0xBD	; 189
    190a:	9b e0       	ldi	r25, 0x0B	; 11
    190c:	9f 87       	std	Y+15, r25	; 0x0f
    190e:	8e 87       	std	Y+14, r24	; 0x0e
    1910:	81 ef       	ldi	r24, 0xF1	; 241
    1912:	9b e0       	ldi	r25, 0x0B	; 11
    1914:	99 8b       	std	Y+17, r25	; 0x11
    1916:	88 8b       	std	Y+16, r24	; 0x10
    1918:	8a ec       	ldi	r24, 0xCA	; 202
    191a:	9b e0       	ldi	r25, 0x0B	; 11
    191c:	9b 8b       	std	Y+19, r25	; 0x13
    191e:	8a 8b       	std	Y+18, r24	; 0x12
    1920:	89 e9       	ldi	r24, 0x99	; 153
    1922:	9c e0       	ldi	r25, 0x0C	; 12
    1924:	9d 8b       	std	Y+21, r25	; 0x15
    1926:	8c 8b       	std	Y+20, r24	; 0x14
}
    1928:	ce 01       	movw	r24, r28
    192a:	df 91       	pop	r29
    192c:	cf 91       	pop	r28
    192e:	1f 91       	pop	r17
    1930:	08 95       	ret

00001932 <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
	uint8_t tSREG;
	tSREG=SREG;
    1936:	df b7       	in	r29, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1938:	8f b7       	in	r24, 0x3f	; 63
    193a:	8f 77       	andi	r24, 0x7F	; 127
    193c:	8f bf       	out	0x3f, r24	; 63
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    193e:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <lcd0_PIN>
    1942:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <lcd0_PIN+0x1>
    1946:	c0 81       	ld	r28, Z
    1948:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    194a:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <lcd0_detect>
    194e:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    1950:	8c 23       	and	r24, r28
    1952:	09 f0       	breq	.+2      	; 0x1956 <LCD0_reboot+0x24>
		LCD0_inic();
    1954:	51 df       	rcall	.-350    	; 0x17f8 <LCD0_inic>
	lcd0_detect=tmp;
    1956:	c0 93 67 01 	sts	0x0167, r28	; 0x800167 <lcd0_detect>
	SREG=tSREG;
    195a:	df bf       	out	0x3f, r29	; 63
}
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	08 95       	ret

00001962 <HX711_read_bit>:
	self->readflag=OFF;
}
uint8_t HX711_read_bit(void)
{	
	uint16_t ibool;
	*hx711_PORT|=(ONE<<hx711_clkpin);
    1962:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <hx711_PORT>
    1966:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <hx711_PORT+0x1>
    196a:	20 81       	ld	r18, Z
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	00 90 73 01 	lds	r0, 0x0173	; 0x800173 <hx711_clkpin>
    1974:	02 c0       	rjmp	.+4      	; 0x197a <HX711_read_bit+0x18>
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	0a 94       	dec	r0
    197c:	e2 f7       	brpl	.-8      	; 0x1976 <HX711_read_bit+0x14>
    197e:	82 2b       	or	r24, r18
    1980:	80 83       	st	Z, r24
    1982:	84 e2       	ldi	r24, 0x24	; 36
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	01 97       	sbiw	r24, 0x01	; 1
	/**0.1us minimum**/
	for(ibool=ZERO; ibool<HX711_ticks; ibool++); //inline delay
    1988:	f1 f7       	brne	.-4      	; 0x1986 <HX711_read_bit+0x24>
	ibool=*hx711_PIN & (ONE<<hx711_datapin);
    198a:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <hx711_PIN>
    198e:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <hx711_PIN+0x1>
    1992:	40 81       	ld	r20, Z
    1994:	21 e0       	ldi	r18, 0x01	; 1
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	c9 01       	movw	r24, r18
    199a:	00 90 6c 01 	lds	r0, 0x016C	; 0x80016c <hx711_datapin>
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <HX711_read_bit+0x42>
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	0a 94       	dec	r0
    19a6:	e2 f7       	brpl	.-8      	; 0x19a0 <HX711_read_bit+0x3e>
	*hx711_PORT &= ~(ONE<<hx711_clkpin);
    19a8:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <hx711_PORT>
    19ac:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <hx711_PORT+0x1>
    19b0:	90 81       	ld	r25, Z
    19b2:	00 90 73 01 	lds	r0, 0x0173	; 0x800173 <hx711_clkpin>
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <HX711_read_bit+0x5a>
    19b8:	22 0f       	add	r18, r18
    19ba:	33 1f       	adc	r19, r19
    19bc:	0a 94       	dec	r0
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <HX711_read_bit+0x56>
    19c0:	20 95       	com	r18
    19c2:	29 23       	and	r18, r25
    19c4:	20 83       	st	Z, r18
	return ibool;
}
    19c6:	84 23       	and	r24, r20
    19c8:	08 95       	ret

000019ca <HX711_set_amplify>:
// Gain selector
// AVDD connected to 5V, channel B gain=32
void HX711_set_amplify(HX711* self, uint8_t amplify)
{
	switch(amplify){
    19ca:	60 34       	cpi	r22, 0x40	; 64
    19cc:	79 f0       	breq	.+30     	; 0x19ec <HX711_set_amplify+0x22>
    19ce:	60 38       	cpi	r22, 0x80	; 128
    19d0:	19 f0       	breq	.+6      	; 0x19d8 <HX711_set_amplify+0xe>
    19d2:	60 32       	cpi	r22, 0x20	; 32
    19d4:	81 f4       	brne	.+32     	; 0x19f6 <HX711_set_amplify+0x2c>
    19d6:	05 c0       	rjmp	.+10     	; 0x19e2 <HX711_set_amplify+0x18>
		case 128:
			self->amplify = ONE; //channel A
    19d8:	21 e0       	ldi	r18, 0x01	; 1
    19da:	fc 01       	movw	r30, r24
    19dc:	22 83       	std	Z+2, r18	; 0x02
			self->ampcount = ONE;
    19de:	23 83       	std	Z+3, r18	; 0x03
			break;
    19e0:	08 95       	ret
		case 32:
			self->amplify = 2; //channel B
    19e2:	22 e0       	ldi	r18, 0x02	; 2
    19e4:	fc 01       	movw	r30, r24
    19e6:	22 83       	std	Z+2, r18	; 0x02
			self->ampcount = 2; 
    19e8:	23 83       	std	Z+3, r18	; 0x03
			break;
    19ea:	08 95       	ret
		case 64:
			self->amplify = 3; //channel A
    19ec:	23 e0       	ldi	r18, 0x03	; 3
    19ee:	fc 01       	movw	r30, r24
    19f0:	22 83       	std	Z+2, r18	; 0x02
			self->ampcount = 3;
    19f2:	23 83       	std	Z+3, r18	; 0x03
			break;
    19f4:	08 95       	ret
		default:
			self->amplify = ONE;
    19f6:	21 e0       	ldi	r18, 0x01	; 1
    19f8:	fc 01       	movw	r30, r24
    19fa:	22 83       	std	Z+2, r18	; 0x02
			self->ampcount = ONE;
    19fc:	23 83       	std	Z+3, r18	; 0x03
    19fe:	08 95       	ret

00001a00 <HX711_query>:
	}
}
uint8_t HX711_query(HX711* self)
{
	uint8_t flag=OFF; // one shot
	if(!self->readflag){
    1a00:	fc 01       	movw	r30, r24
    1a02:	20 81       	ld	r18, Z
    1a04:	21 11       	cpse	r18, r1
    1a06:	14 c0       	rjmp	.+40     	; 0x1a30 <HX711_query+0x30>
		if(!(*hx711_PIN & (ONE << hx711_datapin))){
    1a08:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <hx711_PIN>
    1a0c:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <hx711_PIN+0x1>
    1a10:	20 81       	ld	r18, Z
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	00 90 6c 01 	lds	r0, 0x016C	; 0x80016c <hx711_datapin>
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <HX711_query+0x1e>
    1a1a:	35 95       	asr	r19
    1a1c:	27 95       	ror	r18
    1a1e:	0a 94       	dec	r0
    1a20:	e2 f7       	brpl	.-8      	; 0x1a1a <HX711_query+0x1a>
    1a22:	20 fd       	sbrc	r18, 0
    1a24:	07 c0       	rjmp	.+14     	; 0x1a34 <HX711_query+0x34>
			self->readflag=ON;
    1a26:	2f ef       	ldi	r18, 0xFF	; 255
    1a28:	fc 01       	movw	r30, r24
    1a2a:	20 83       	st	Z, r18
			flag=ON;
    1a2c:	8f ef       	ldi	r24, 0xFF	; 255
    1a2e:	08 95       	ret
			break;
	}
}
uint8_t HX711_query(HX711* self)
{
	uint8_t flag=OFF; // one shot
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	08 95       	ret
    1a34:	80 e0       	ldi	r24, 0x00	; 0
			self->readflag=ON;
			flag=ON;
		}
	}
	return flag;
}
    1a36:	08 95       	ret

00001a38 <HX711_raw_average>:
		}
	}
	return self->raw_reading;
}
float HX711_raw_average(HX711* self, uint8_t n)
{
    1a38:	0f 93       	push	r16
    1a3a:	1f 93       	push	r17
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	ec 01       	movw	r28, r24
	if(self->trigger){
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	88 23       	and	r24, r24
    1a46:	91 f1       	breq	.+100    	; 0x1aac <HX711_raw_average+0x74>
		if(self->av_n < n){
    1a48:	8a 89       	ldd	r24, Y+18	; 0x12
    1a4a:	86 17       	cp	r24, r22
    1a4c:	98 f4       	brcc	.+38     	; 0x1a74 <HX711_raw_average+0x3c>
			self->sum += self->raw_reading;
    1a4e:	0e 85       	ldd	r16, Y+14	; 0x0e
    1a50:	1f 85       	ldd	r17, Y+15	; 0x0f
    1a52:	28 89       	ldd	r18, Y+16	; 0x10
    1a54:	39 89       	ldd	r19, Y+17	; 0x11
    1a56:	4a 85       	ldd	r20, Y+10	; 0x0a
    1a58:	5b 85       	ldd	r21, Y+11	; 0x0b
    1a5a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a5c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a5e:	40 0f       	add	r20, r16
    1a60:	51 1f       	adc	r21, r17
    1a62:	62 1f       	adc	r22, r18
    1a64:	73 1f       	adc	r23, r19
    1a66:	4e 87       	std	Y+14, r20	; 0x0e
    1a68:	5f 87       	std	Y+15, r21	; 0x0f
    1a6a:	68 8b       	std	Y+16, r22	; 0x10
    1a6c:	79 8b       	std	Y+17, r23	; 0x11
			self->av_n++;
    1a6e:	8f 5f       	subi	r24, 0xFF	; 255
    1a70:	8a 8b       	std	Y+18, r24	; 0x12
    1a72:	1b c0       	rjmp	.+54     	; 0x1aaa <HX711_raw_average+0x72>
		}else{
			self->av_n = ZERO;
			self->raw_mean = self->sum / n;
    1a74:	26 2f       	mov	r18, r22
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	40 e0       	ldi	r20, 0x00	; 0
    1a7a:	50 e0       	ldi	r21, 0x00	; 0
    1a7c:	6e 85       	ldd	r22, Y+14	; 0x0e
    1a7e:	7f 85       	ldd	r23, Y+15	; 0x0f
    1a80:	88 89       	ldd	r24, Y+16	; 0x10
    1a82:	99 89       	ldd	r25, Y+17	; 0x11
    1a84:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__divmodsi4>
    1a88:	ca 01       	movw	r24, r20
    1a8a:	b9 01       	movw	r22, r18
    1a8c:	7c d6       	rcall	.+3320   	; 0x2786 <__floatsisf>
    1a8e:	6b 8b       	std	Y+19, r22	; 0x13
    1a90:	7c 8b       	std	Y+20, r23	; 0x14
    1a92:	8d 8b       	std	Y+21, r24	; 0x15
    1a94:	9e 8b       	std	Y+22, r25	; 0x16
			self->sum = ZERO;
			self->sum += self->raw_reading;
    1a96:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a98:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a9a:	ac 85       	ldd	r26, Y+12	; 0x0c
    1a9c:	bd 85       	ldd	r27, Y+13	; 0x0d
    1a9e:	8e 87       	std	Y+14, r24	; 0x0e
    1aa0:	9f 87       	std	Y+15, r25	; 0x0f
    1aa2:	a8 8b       	std	Y+16, r26	; 0x10
    1aa4:	b9 8b       	std	Y+17, r27	; 0x11
			self->av_n++;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	8a 8b       	std	Y+18, r24	; 0x12
		}
		self->trigger = ZERO;
    1aaa:	19 82       	std	Y+1, r1	; 0x01
	}
	return self->raw_mean;
    1aac:	6b 89       	ldd	r22, Y+19	; 0x13
    1aae:	7c 89       	ldd	r23, Y+20	; 0x14
    1ab0:	8d 89       	ldd	r24, Y+21	; 0x15
    1ab2:	9e 89       	ldd	r25, Y+22	; 0x16
}
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	08 95       	ret

00001abe <HX711_get_readflag>:
uint8_t HX711_get_readflag(HX711* self)
{
	return self->readflag;
    1abe:	fc 01       	movw	r30, r24
    1ac0:	80 81       	ld	r24, Z
}
    1ac2:	08 95       	ret

00001ac4 <HX711_get_cal>:
struct HX711_calibration* HX711_get_cal(HX711* self)
{
	return &(self->cal_data);
}
    1ac4:	47 96       	adiw	r24, 0x17	; 23
    1ac6:	08 95       	ret

00001ac8 <HX711_read_raw>:
}
/***
Function to be used in the interrupt routine with appropriate cycle period.
***/
int32_t HX711_read_raw(HX711* self)
{
    1ac8:	0f 93       	push	r16
    1aca:	1f 93       	push	r17
    1acc:	cf 93       	push	r28
    1ace:	df 93       	push	r29
    1ad0:	ec 01       	movw	r28, r24
	uint8_t aindex, bindex;
	int32_t value;
	aindex = self->bufferindex-ONE;
    1ad2:	09 85       	ldd	r16, Y+9	; 0x09
	bindex = self->bitcount-ONE;
    1ad4:	1c 81       	ldd	r17, Y+4	; 0x04
	ptr=(int32_t*)self->buffer;
    1ad6:	05 96       	adiw	r24, 0x05	; 5
    1ad8:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <ptr+0x1>
    1adc:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <ptr>
	/***Detect query for reading***/
	//if((!(*hx711_PIN & ONE << hx711_datapin)) && !self->readflag){
		//HX711_set_readflag(self);
	//}
	/***Interrupt 24 times sequence***/
	if(self->readflag){
    1ae0:	88 81       	ld	r24, Y
    1ae2:	88 23       	and	r24, r24
    1ae4:	09 f4       	brne	.+2      	; 0x1ae8 <HX711_read_raw+0x20>
    1ae6:	44 c0       	rjmp	.+136    	; 0x1b70 <HX711_read_raw+0xa8>
		if(self->bitcount){
    1ae8:	11 23       	and	r17, r17
    1aea:	29 f1       	breq	.+74     	; 0x1b36 <HX711_read_raw+0x6e>
			if (HX711_read_bit())
    1aec:	3a df       	rcall	.-396    	; 0x1962 <HX711_read_bit>
    1aee:	88 23       	and	r24, r24
    1af0:	a9 f0       	breq	.+42     	; 0x1b1c <HX711_read_raw+0x54>
				self->buffer[aindex] |= ONE<<(bindex-(aindex*8));
    1af2:	01 50       	subi	r16, 0x01	; 1
    1af4:	80 2f       	mov	r24, r16
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	fe 01       	movw	r30, r28
    1afa:	e8 0f       	add	r30, r24
    1afc:	f9 1f       	adc	r31, r25
    1afe:	11 50       	subi	r17, 0x01	; 1
    1b00:	28 e0       	ldi	r18, 0x08	; 8
    1b02:	02 9f       	mul	r16, r18
    1b04:	10 19       	sub	r17, r0
    1b06:	11 24       	eor	r1, r1
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <HX711_read_raw+0x4a>
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	1a 95       	dec	r17
    1b14:	e2 f7       	brpl	.-8      	; 0x1b0e <HX711_read_raw+0x46>
    1b16:	95 81       	ldd	r25, Z+5	; 0x05
    1b18:	89 2b       	or	r24, r25
    1b1a:	85 83       	std	Z+5, r24	; 0x05
			self->bitcount--;
    1b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1e:	81 50       	subi	r24, 0x01	; 1
    1b20:	8c 83       	std	Y+4, r24	; 0x04
			if(self->bitcount == 16)
    1b22:	80 31       	cpi	r24, 0x10	; 16
    1b24:	19 f4       	brne	.+6      	; 0x1b2c <HX711_read_raw+0x64>
				self->bufferindex=2;
    1b26:	82 e0       	ldi	r24, 0x02	; 2
    1b28:	89 87       	std	Y+9, r24	; 0x09
    1b2a:	22 c0       	rjmp	.+68     	; 0x1b70 <HX711_read_raw+0xa8>
			if(self->bitcount == 8)
    1b2c:	88 30       	cpi	r24, 0x08	; 8
    1b2e:	01 f5       	brne	.+64     	; 0x1b70 <HX711_read_raw+0xa8>
				self->bufferindex=ONE;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	89 87       	std	Y+9, r24	; 0x09
    1b34:	1d c0       	rjmp	.+58     	; 0x1b70 <HX711_read_raw+0xa8>
		}else{
			if(self->ampcount){
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	88 23       	and	r24, r24
				HX711_read_bit();
    1b3a:	29 f0       	breq	.+10     	; 0x1b46 <HX711_read_raw+0x7e>
    1b3c:	12 df       	rcall	.-476    	; 0x1962 <HX711_read_bit>
				self->ampcount--;
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	81 50       	subi	r24, 0x01	; 1
    1b42:	8b 83       	std	Y+3, r24	; 0x03
    1b44:	15 c0       	rjmp	.+42     	; 0x1b70 <HX711_read_raw+0xa8>
			}else{
				value = *(ptr);
				self->raw_reading = value;
    1b46:	8d 81       	ldd	r24, Y+5	; 0x05
    1b48:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4a:	af 81       	ldd	r26, Y+7	; 0x07
    1b4c:	b8 85       	ldd	r27, Y+8	; 0x08
    1b4e:	8a 87       	std	Y+10, r24	; 0x0a
    1b50:	9b 87       	std	Y+11, r25	; 0x0b
    1b52:	ac 87       	std	Y+12, r26	; 0x0c
    1b54:	bd 87       	std	Y+13, r27	; 0x0d
				self->bitcount = HX711_ADC_bits;
    1b56:	88 e1       	ldi	r24, 0x18	; 24
    1b58:	8c 83       	std	Y+4, r24	; 0x04
				self->bufferindex = HX711_VECT_SIZE-ONE;
    1b5a:	83 e0       	ldi	r24, 0x03	; 3
    1b5c:	89 87       	std	Y+9, r24	; 0x09
				self->ampcount = self->amplify;
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	8b 83       	std	Y+3, r24	; 0x03
				self->buffer[0] = ZERO;
    1b62:	1d 82       	std	Y+5, r1	; 0x05
				self->buffer[1] = ZERO;
    1b64:	1e 82       	std	Y+6, r1	; 0x06
				self->buffer[2] = ZERO;
    1b66:	1f 82       	std	Y+7, r1	; 0x07
				self->buffer[3] = ZERO;
    1b68:	18 86       	std	Y+8, r1	; 0x08
				self->trigger = ONE;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	89 83       	std	Y+1, r24	; 0x01
//{
	//self->readflag=ON;
//}
void HX711_reset_readflag(HX711* self)
{
	self->readflag=OFF;
    1b6e:	18 82       	st	Y, r1
				/***Reset ready for next query***/
				HX711_reset_readflag(self);
			}
		}
	}
	return self->raw_reading;
    1b70:	6a 85       	ldd	r22, Y+10	; 0x0a
    1b72:	7b 85       	ldd	r23, Y+11	; 0x0b
    1b74:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b76:	9d 85       	ldd	r25, Y+13	; 0x0d
}
    1b78:	df 91       	pop	r29
    1b7a:	cf 91       	pop	r28
    1b7c:	1f 91       	pop	r17
    1b7e:	0f 91       	pop	r16
    1b80:	08 95       	ret

00001b82 <HX711enable>:
float HX711_raw_average(HX711* self, uint8_t n);
uint8_t HX711_get_readflag(HX711* self);
struct HX711_calibration* HX711_get_cal(HX711* self);
/***Procedure & Function***/
HX711 HX711enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port, uint8_t datapin, uint8_t clkpin)
{
    1b82:	ef 92       	push	r14
    1b84:	0f 93       	push	r16
    1b86:	fc 01       	movw	r30, r24
    1b88:	da 01       	movw	r26, r20
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG = STATUS_REGISTER;
    1b8a:	5f b7       	in	r21, 0x3f	; 63
	STATUS_REGISTER &= ~(1<<GLOBAL_INTERRUPT_ENABLE);
    1b8c:	8f b7       	in	r24, 0x3f	; 63
    1b8e:	8f 77       	andi	r24, 0x7F	; 127
    1b90:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	HX711 hx711;
	//import parametros
	hx711_DDR = ddr;
    1b92:	70 93 75 01 	sts	0x0175, r23	; 0x800175 <hx711_DDR+0x1>
    1b96:	60 93 74 01 	sts	0x0174, r22	; 0x800174 <hx711_DDR>
	hx711_PIN = pin;
    1b9a:	b0 93 6e 01 	sts	0x016E, r27	; 0x80016e <hx711_PIN+0x1>
    1b9e:	a0 93 6d 01 	sts	0x016D, r26	; 0x80016d <hx711_PIN>
	hx711_PORT = port;
    1ba2:	30 93 70 01 	sts	0x0170, r19	; 0x800170 <hx711_PORT+0x1>
    1ba6:	20 93 6f 01 	sts	0x016F, r18	; 0x80016f <hx711_PORT>
	hx711_datapin = datapin;
    1baa:	00 93 6c 01 	sts	0x016C, r16	; 0x80016c <hx711_datapin>
	hx711_clkpin = clkpin;
    1bae:	e0 92 73 01 	sts	0x0173, r14	; 0x800173 <hx711_clkpin>
	//inic variables
	*hx711_DDR |= (ONE<<clkpin);
    1bb2:	db 01       	movw	r26, r22
    1bb4:	4c 91       	ld	r20, X
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	9c 01       	movw	r18, r24
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <HX711enable+0x40>
    1bbe:	22 0f       	add	r18, r18
    1bc0:	33 1f       	adc	r19, r19
    1bc2:	ea 94       	dec	r14
    1bc4:	e2 f7       	brpl	.-8      	; 0x1bbe <HX711enable+0x3c>
    1bc6:	24 2b       	or	r18, r20
    1bc8:	2c 93       	st	X, r18
	*hx711_PORT |= (ONE<<datapin);
    1bca:	a0 91 6f 01 	lds	r26, 0x016F	; 0x80016f <hx711_PORT>
    1bce:	b0 91 70 01 	lds	r27, 0x0170	; 0x800170 <hx711_PORT+0x1>
    1bd2:	2c 91       	ld	r18, X
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <HX711enable+0x58>
    1bd6:	88 0f       	add	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	0a 95       	dec	r16
    1bdc:	e2 f7       	brpl	.-8      	; 0x1bd6 <HX711enable+0x54>
    1bde:	82 2b       	or	r24, r18
    1be0:	8c 93       	st	X, r24
	hx711.readflag = ZERO;
    1be2:	10 82       	st	Z, r1
	hx711.trigger = ZERO;
    1be4:	11 82       	std	Z+1, r1	; 0x01
	hx711.amplify = ONE;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	82 83       	std	Z+2, r24	; 0x02
	hx711.ampcount = ONE;
    1bea:	83 83       	std	Z+3, r24	; 0x03
	hx711.bitcount = HX711_ADC_bits;
    1bec:	88 e1       	ldi	r24, 0x18	; 24
    1bee:	84 83       	std	Z+4, r24	; 0x04
	hx711.buffer[0] = ZERO;
    1bf0:	15 82       	std	Z+5, r1	; 0x05
	hx711.buffer[1] = ZERO;
    1bf2:	16 82       	std	Z+6, r1	; 0x06
	hx711.buffer[2] = ZERO;
    1bf4:	17 82       	std	Z+7, r1	; 0x07
	hx711.buffer[3] = ZERO;
    1bf6:	10 86       	std	Z+8, r1	; 0x08
	hx711.bufferindex = HX711_VECT_SIZE-ONE;
    1bf8:	83 e0       	ldi	r24, 0x03	; 3
    1bfa:	81 87       	std	Z+9, r24	; 0x09
	hx711.raw_reading = ZERO;
    1bfc:	12 86       	std	Z+10, r1	; 0x0a
    1bfe:	13 86       	std	Z+11, r1	; 0x0b
    1c00:	14 86       	std	Z+12, r1	; 0x0c
    1c02:	15 86       	std	Z+13, r1	; 0x0d
	hx711.sum = ZERO;
    1c04:	16 86       	std	Z+14, r1	; 0x0e
    1c06:	17 86       	std	Z+15, r1	; 0x0f
    1c08:	10 8a       	std	Z+16, r1	; 0x10
    1c0a:	11 8a       	std	Z+17, r1	; 0x11
	hx711.av_n = ZERO;
    1c0c:	12 8a       	std	Z+18, r1	; 0x12
	hx711.raw_mean = ZERO;
    1c0e:	13 8a       	std	Z+19, r1	; 0x13
    1c10:	14 8a       	std	Z+20, r1	; 0x14
    1c12:	15 8a       	std	Z+21, r1	; 0x15
    1c14:	16 8a       	std	Z+22, r1	; 0x16
	// offset para mesa usada.
	hx711.cal_data.offset_32 = 36800; // to subtract B
    1c16:	80 ec       	ldi	r24, 0xC0	; 192
    1c18:	9f e8       	ldi	r25, 0x8F	; 143
    1c1a:	a0 e0       	ldi	r26, 0x00	; 0
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	87 8b       	std	Z+23, r24	; 0x17
    1c20:	90 8f       	std	Z+24, r25	; 0x18
    1c22:	a1 8f       	std	Z+25, r26	; 0x19
    1c24:	b2 8f       	std	Z+26, r27	; 0x1a
	hx711.cal_data.offset_64 = 72700; // to subtract A 64
    1c26:	8c ef       	ldi	r24, 0xFC	; 252
    1c28:	9b e1       	ldi	r25, 0x1B	; 27
    1c2a:	a1 e0       	ldi	r26, 0x01	; 1
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	83 8f       	std	Z+27, r24	; 0x1b
    1c30:	94 8f       	std	Z+28, r25	; 0x1c
    1c32:	a5 8f       	std	Z+29, r26	; 0x1d
    1c34:	b6 8f       	std	Z+30, r27	; 0x1e
	hx711.cal_data.offset_128 = 147200; // to subtract A 128
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	9f e3       	ldi	r25, 0x3F	; 63
    1c3a:	a2 e0       	ldi	r26, 0x02	; 2
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	87 8f       	std	Z+31, r24	; 0x1f
    1c40:	90 a3       	std	Z+32, r25	; 0x20
    1c42:	a1 a3       	std	Z+33, r26	; 0x21
    1c44:	b2 a3       	std	Z+34, r27	; 0x22
	//div factor
	hx711.cal_data.divfactor_32=23; // to divide
    1c46:	87 e1       	ldi	r24, 0x17	; 23
    1c48:	83 a3       	std	Z+35, r24	; 0x23
	hx711.cal_data.divfactor_64=46; // to divide
    1c4a:	8e e2       	ldi	r24, 0x2E	; 46
    1c4c:	84 a3       	std	Z+36, r24	; 0x24
	hx711.cal_data.divfactor_128=92; // to divide
    1c4e:	8c e5       	ldi	r24, 0x5C	; 92
    1c50:	85 a3       	std	Z+37, r24	; 0x25
	hx711.cal_data.status=ZERO;
    1c52:	16 a2       	std	Z+38, r1	; 0x26
	//Direccionar apontadores para PROTOTIPOS
	//hx711.set_readflag=HX711_set_readflag;
	hx711.read_bit=HX711_read_bit;
    1c54:	81 eb       	ldi	r24, 0xB1	; 177
    1c56:	9c e0       	ldi	r25, 0x0C	; 12
    1c58:	90 a7       	std	Z+40, r25	; 0x28
    1c5a:	87 a3       	std	Z+39, r24	; 0x27
	hx711.set_amplify=HX711_set_amplify;
    1c5c:	85 ee       	ldi	r24, 0xE5	; 229
    1c5e:	9c e0       	ldi	r25, 0x0C	; 12
    1c60:	92 a7       	std	Z+42, r25	; 0x2a
    1c62:	81 a7       	std	Z+41, r24	; 0x29
	hx711.query=HX711_query;
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	9d e0       	ldi	r25, 0x0D	; 13
    1c68:	94 a7       	std	Z+44, r25	; 0x2c
    1c6a:	83 a7       	std	Z+43, r24	; 0x2b
	hx711.read_raw=HX711_read_raw;
    1c6c:	84 e6       	ldi	r24, 0x64	; 100
    1c6e:	9d e0       	ldi	r25, 0x0D	; 13
    1c70:	96 a7       	std	Z+46, r25	; 0x2e
    1c72:	85 a7       	std	Z+45, r24	; 0x2d
	hx711.raw_average=HX711_raw_average;
    1c74:	8c e1       	ldi	r24, 0x1C	; 28
    1c76:	9d e0       	ldi	r25, 0x0D	; 13
    1c78:	90 ab       	std	Z+48, r25	; 0x30
    1c7a:	87 a7       	std	Z+47, r24	; 0x2f
	hx711.get_readflag=HX711_get_readflag;
    1c7c:	8f e5       	ldi	r24, 0x5F	; 95
    1c7e:	9d e0       	ldi	r25, 0x0D	; 13
    1c80:	92 ab       	std	Z+50, r25	; 0x32
    1c82:	81 ab       	std	Z+49, r24	; 0x31
	hx711.get_cal=HX711_get_cal;
    1c84:	82 e6       	ldi	r24, 0x62	; 98
    1c86:	9d e0       	ldi	r25, 0x0D	; 13
    1c88:	94 ab       	std	Z+52, r25	; 0x34
    1c8a:	83 ab       	std	Z+51, r24	; 0x33
	STATUS_REGISTER = tSREG;
    1c8c:	5f bf       	out	0x3f, r21	; 63
	// returns a copy
	return hx711;
}
    1c8e:	cf 01       	movw	r24, r30
    1c90:	0f 91       	pop	r16
    1c92:	ef 90       	pop	r14
    1c94:	08 95       	ret

00001c96 <PORTINIT>:
** procedure and function
*/
void PORTINIT(void)
{
	//Control buttons
	PORTF |= IMASK;
    1c96:	e2 e6       	ldi	r30, 0x62	; 98
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	8f 63       	ori	r24, 0x3F	; 63
    1c9e:	80 83       	st	Z, r24
	//troubleshooting output
	DDRC = 0xFF;
    1ca0:	8f ef       	ldi	r24, 0xFF	; 255
    1ca2:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
    1ca4:	85 bb       	out	0x15, r24	; 21
    1ca6:	08 95       	ret

00001ca8 <main>:
** Header
*/
void PORTINIT();
/****MAIN****/
int main(void)
{
    1ca8:	cf 93       	push	r28
    1caa:	df 93       	push	r29
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	cd 5b       	subi	r28, 0xBD	; 189
    1cb2:	d1 09       	sbc	r29, r1
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
	PORTINIT();
    1cbe:	eb df       	rcall	.-42     	; 0x1c96 <PORTINIT>
	
	HX711_ptr = &HX711_data; // CALIBRATION DATA BUS
    1cc0:	0f 2e       	mov	r0, r31
    1cc2:	f8 ea       	ldi	r31, 0xA8	; 168
    1cc4:	cf 2e       	mov	r12, r31
    1cc6:	f1 e0       	ldi	r31, 0x01	; 1
    1cc8:	df 2e       	mov	r13, r31
    1cca:	f0 2d       	mov	r31, r0
    1ccc:	d0 92 b9 01 	sts	0x01B9, r13	; 0x8001b9 <HX711_ptr+0x1>
    1cd0:	c0 92 b8 01 	sts	0x01B8, r12	; 0x8001b8 <HX711_ptr>
	
	/***INICIALIZE OBJECTS***/
	F = EXPLODEenable();
    1cd4:	ce 01       	movw	r24, r28
    1cd6:	83 5a       	subi	r24, 0xA3	; 163
    1cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cda:	0e 94 50 04 	call	0x8a0	; 0x8a0 <EXPLODEenable>
    1cde:	84 e1       	ldi	r24, 0x14	; 20
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	e3 5a       	subi	r30, 0xA3	; 163
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	a5 e2       	ldi	r26, 0x25	; 37
    1ce8:	b2 e0       	ldi	r27, 0x02	; 2
    1cea:	01 90       	ld	r0, Z+
    1cec:	0d 92       	st	X+, r0
    1cee:	8a 95       	dec	r24
    1cf0:	e1 f7       	brne	.-8      	; 0x1cea <main+0x42>
	FUNC function = FUNCenable();
    1cf2:	ce 01       	movw	r24, r28
    1cf4:	01 96       	adiw	r24, 0x01	; 1
    1cf6:	04 da       	rcall	.-3064   	; 0x1100 <FUNCenable>
    1cf8:	2d 96       	adiw	r28, 0x0d	; 13
    1cfa:	8e ad       	ldd	r24, Y+62	; 0x3e
    1cfc:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cfe:	2d 97       	sbiw	r28, 0x0d	; 13
    1d00:	c4 54       	subi	r28, 0x44	; 68
    1d02:	df 4f       	sbci	r29, 0xFF	; 255
    1d04:	99 83       	std	Y+1, r25	; 0x01
    1d06:	88 83       	st	Y, r24
    1d08:	cc 5b       	subi	r28, 0xBC	; 188
    1d0a:	d0 40       	sbci	r29, 0x00	; 0
	lcd0 = LCD0enable(&DDRA,&PINA,&PORTA);
    1d0c:	2b e3       	ldi	r18, 0x3B	; 59
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	49 e3       	ldi	r20, 0x39	; 57
    1d12:	50 e0       	ldi	r21, 0x00	; 0
    1d14:	6a e3       	ldi	r22, 0x3A	; 58
    1d16:	70 e0       	ldi	r23, 0x00	; 0
    1d18:	ce 01       	movw	r24, r28
    1d1a:	8f 58       	subi	r24, 0x8F	; 143
    1d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1e:	b2 dd       	rcall	.-1180   	; 0x1884 <LCD0enable>
    1d20:	86 e1       	ldi	r24, 0x16	; 22
    1d22:	fe 01       	movw	r30, r28
    1d24:	ef 58       	subi	r30, 0x8F	; 143
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	aa ed       	ldi	r26, 0xDA	; 218
    1d2a:	b1 e0       	ldi	r27, 0x01	; 1
    1d2c:	01 90       	ld	r0, Z+
    1d2e:	0d 92       	st	X+, r0
    1d30:	8a 95       	dec	r24
    1d32:	e1 f7       	brne	.-8      	; 0x1d2c <main+0x84>
	timer0 = TIMER_COUNTER0enable(2,2); //2,2
    1d34:	42 e0       	ldi	r20, 0x02	; 2
    1d36:	62 e0       	ldi	r22, 0x02	; 2
    1d38:	ce 01       	movw	r24, r28
    1d3a:	83 5a       	subi	r24, 0xA3	; 163
    1d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3e:	0e 94 1d 02 	call	0x43a	; 0x43a <TIMER_COUNTER0enable>
    1d42:	80 e1       	ldi	r24, 0x10	; 16
    1d44:	fe 01       	movw	r30, r28
    1d46:	e3 5a       	subi	r30, 0xA3	; 163
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	aa e7       	ldi	r26, 0x7A	; 122
    1d4c:	b1 e0       	ldi	r27, 0x01	; 1
    1d4e:	01 90       	ld	r0, Z+
    1d50:	0d 92       	st	X+, r0
    1d52:	8a 95       	dec	r24
    1d54:	e1 f7       	brne	.-8      	; 0x1d4e <main+0xa6>
	TIMER_COUNTER1 timer1 = TIMER_COUNTER1enable(4,2); //4,2
    1d56:	42 e0       	ldi	r20, 0x02	; 2
    1d58:	64 e0       	ldi	r22, 0x04	; 4
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	83 5b       	subi	r24, 0xB3	; 179
    1d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d60:	0e 94 61 02 	call	0x4c2	; 0x4c2 <TIMER_COUNTER1enable>
	hx = HX711enable(&DDRF, &PINF, &PORTF, 6, 7); //6,7
    1d64:	0f 2e       	mov	r0, r31
    1d66:	f7 e0       	ldi	r31, 0x07	; 7
    1d68:	ef 2e       	mov	r14, r31
    1d6a:	f0 2d       	mov	r31, r0
    1d6c:	06 e0       	ldi	r16, 0x06	; 6
    1d6e:	22 e6       	ldi	r18, 0x62	; 98
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	40 e2       	ldi	r20, 0x20	; 32
    1d74:	50 e0       	ldi	r21, 0x00	; 0
    1d76:	61 e6       	ldi	r22, 0x61	; 97
    1d78:	70 e0       	ldi	r23, 0x00	; 0
    1d7a:	ce 01       	movw	r24, r28
    1d7c:	89 57       	subi	r24, 0x79	; 121
    1d7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d80:	00 df       	rcall	.-512    	; 0x1b82 <HX711enable>
    1d82:	85 e3       	ldi	r24, 0x35	; 53
    1d84:	fe 01       	movw	r30, r28
    1d86:	e9 57       	subi	r30, 0x79	; 121
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	a0 ef       	ldi	r26, 0xF0	; 240
    1d8c:	b1 e0       	ldi	r27, 0x01	; 1
    1d8e:	01 90       	ld	r0, Z+
    1d90:	0d 92       	st	X+, r0
    1d92:	8a 95       	dec	r24
    1d94:	e1 f7       	brne	.-8      	; 0x1d8e <main+0xe6>
	eprom = EEPROMenable();
    1d96:	ce 01       	movw	r24, r28
    1d98:	83 5a       	subi	r24, 0xA3	; 163
    1d9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d9c:	0e 94 c9 03 	call	0x792	; 0x792 <EEPROMenable>
    1da0:	8e e1       	ldi	r24, 0x1E	; 30
    1da2:	fe 01       	movw	r30, r28
    1da4:	e3 5a       	subi	r30, 0xA3	; 163
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	aa e8       	ldi	r26, 0x8A	; 138
    1daa:	b1 e0       	ldi	r27, 0x01	; 1
    1dac:	01 90       	ld	r0, Z+
    1dae:	0d 92       	st	X+, r0
    1db0:	8a 95       	dec	r24
    1db2:	e1 f7       	brne	.-8      	; 0x1dac <main+0x104>
	
	float value=0;
	float publish=0;
	
	// Get default values to buss memory
	HX711_data.offset_32 = hx.get_cal(&hx)->offset_32;
    1db4:	00 ef       	ldi	r16, 0xF0	; 240
    1db6:	11 e0       	ldi	r17, 0x01	; 1
    1db8:	d8 01       	movw	r26, r16
    1dba:	d3 96       	adiw	r26, 0x33	; 51
    1dbc:	ed 91       	ld	r30, X+
    1dbe:	fc 91       	ld	r31, X
    1dc0:	d4 97       	sbiw	r26, 0x34	; 52
    1dc2:	c8 01       	movw	r24, r16
    1dc4:	09 95       	icall
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	80 81       	ld	r24, Z
    1dca:	91 81       	ldd	r25, Z+1	; 0x01
    1dcc:	a2 81       	ldd	r26, Z+2	; 0x02
    1dce:	b3 81       	ldd	r27, Z+3	; 0x03
    1dd0:	f6 01       	movw	r30, r12
    1dd2:	80 83       	st	Z, r24
    1dd4:	91 83       	std	Z+1, r25	; 0x01
    1dd6:	a2 83       	std	Z+2, r26	; 0x02
    1dd8:	b3 83       	std	Z+3, r27	; 0x03
	HX711_data.offset_64 = hx.get_cal(&hx)->offset_64;
    1dda:	d8 01       	movw	r26, r16
    1ddc:	d3 96       	adiw	r26, 0x33	; 51
    1dde:	ed 91       	ld	r30, X+
    1de0:	fc 91       	ld	r31, X
    1de2:	d4 97       	sbiw	r26, 0x34	; 52
    1de4:	c8 01       	movw	r24, r16
    1de6:	09 95       	icall
    1de8:	fc 01       	movw	r30, r24
    1dea:	84 81       	ldd	r24, Z+4	; 0x04
    1dec:	95 81       	ldd	r25, Z+5	; 0x05
    1dee:	a6 81       	ldd	r26, Z+6	; 0x06
    1df0:	b7 81       	ldd	r27, Z+7	; 0x07
    1df2:	f6 01       	movw	r30, r12
    1df4:	84 83       	std	Z+4, r24	; 0x04
    1df6:	95 83       	std	Z+5, r25	; 0x05
    1df8:	a6 83       	std	Z+6, r26	; 0x06
    1dfa:	b7 83       	std	Z+7, r27	; 0x07
	HX711_data.offset_128 = hx.get_cal(&hx)->offset_128;
    1dfc:	d8 01       	movw	r26, r16
    1dfe:	d3 96       	adiw	r26, 0x33	; 51
    1e00:	ed 91       	ld	r30, X+
    1e02:	fc 91       	ld	r31, X
    1e04:	d4 97       	sbiw	r26, 0x34	; 52
    1e06:	c8 01       	movw	r24, r16
    1e08:	09 95       	icall
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	80 85       	ldd	r24, Z+8	; 0x08
    1e0e:	91 85       	ldd	r25, Z+9	; 0x09
    1e10:	a2 85       	ldd	r26, Z+10	; 0x0a
    1e12:	b3 85       	ldd	r27, Z+11	; 0x0b
    1e14:	f6 01       	movw	r30, r12
    1e16:	80 87       	std	Z+8, r24	; 0x08
    1e18:	91 87       	std	Z+9, r25	; 0x09
    1e1a:	a2 87       	std	Z+10, r26	; 0x0a
    1e1c:	b3 87       	std	Z+11, r27	; 0x0b
	HX711_data.divfactor_32 = hx.get_cal(&hx)->divfactor_32;
    1e1e:	d8 01       	movw	r26, r16
    1e20:	d3 96       	adiw	r26, 0x33	; 51
    1e22:	ed 91       	ld	r30, X+
    1e24:	fc 91       	ld	r31, X
    1e26:	d4 97       	sbiw	r26, 0x34	; 52
    1e28:	c8 01       	movw	r24, r16
    1e2a:	09 95       	icall
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	84 85       	ldd	r24, Z+12	; 0x0c
    1e30:	d6 01       	movw	r26, r12
    1e32:	1c 96       	adiw	r26, 0x0c	; 12
    1e34:	8c 93       	st	X, r24
	HX711_data.divfactor_64 = hx.get_cal(&hx)->divfactor_64;
    1e36:	d8 01       	movw	r26, r16
    1e38:	d3 96       	adiw	r26, 0x33	; 51
    1e3a:	ed 91       	ld	r30, X+
    1e3c:	fc 91       	ld	r31, X
    1e3e:	d4 97       	sbiw	r26, 0x34	; 52
    1e40:	c8 01       	movw	r24, r16
    1e42:	09 95       	icall
    1e44:	fc 01       	movw	r30, r24
    1e46:	85 85       	ldd	r24, Z+13	; 0x0d
    1e48:	d6 01       	movw	r26, r12
    1e4a:	1d 96       	adiw	r26, 0x0d	; 13
    1e4c:	8c 93       	st	X, r24
	HX711_data.divfactor_128 = hx.get_cal(&hx)->divfactor_128;
    1e4e:	d8 01       	movw	r26, r16
    1e50:	d3 96       	adiw	r26, 0x33	; 51
    1e52:	ed 91       	ld	r30, X+
    1e54:	fc 91       	ld	r31, X
    1e56:	d4 97       	sbiw	r26, 0x34	; 52
    1e58:	c8 01       	movw	r24, r16
    1e5a:	09 95       	icall
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	86 85       	ldd	r24, Z+14	; 0x0e
    1e60:	d6 01       	movw	r26, r12
    1e62:	1e 96       	adiw	r26, 0x0e	; 14
    1e64:	8c 93       	st	X, r24
	HX711_data.status = hx.get_cal(&hx)->status;
    1e66:	d8 01       	movw	r26, r16
    1e68:	d3 96       	adiw	r26, 0x33	; 51
    1e6a:	ed 91       	ld	r30, X+
    1e6c:	fc 91       	ld	r31, X
    1e6e:	d4 97       	sbiw	r26, 0x34	; 52
    1e70:	c8 01       	movw	r24, r16
    1e72:	09 95       	icall
    1e74:	fc 01       	movw	r30, r24
    1e76:	87 85       	ldd	r24, Z+15	; 0x0f
    1e78:	d6 01       	movw	r26, r12
    1e7a:	1f 96       	adiw	r26, 0x0f	; 15
    1e7c:	8c 93       	st	X, r24
	
	/***Parameters timers***/
	timer0.compoutmode(1); // troubleshooting blinking PORTB 5
    1e7e:	0f 2e       	mov	r0, r31
    1e80:	fa e7       	ldi	r31, 0x7A	; 122
    1e82:	ef 2e       	mov	r14, r31
    1e84:	f1 e0       	ldi	r31, 0x01	; 1
    1e86:	ff 2e       	mov	r15, r31
    1e88:	f0 2d       	mov	r31, r0
    1e8a:	d7 01       	movw	r26, r14
    1e8c:	ed 91       	ld	r30, X+
    1e8e:	fc 91       	ld	r31, X
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	09 95       	icall
	/***79 and 8  -> 80 us***/
	timer0.compare(60); // 8 -> 79 -> 80 us, fine tunned = 8 -> 60 -> 30.4us
    1e94:	d7 01       	movw	r26, r14
    1e96:	16 96       	adiw	r26, 0x06	; 6
    1e98:	ed 91       	ld	r30, X+
    1e9a:	fc 91       	ld	r31, X
    1e9c:	17 97       	sbiw	r26, 0x07	; 7
    1e9e:	8c e3       	ldi	r24, 0x3C	; 60
    1ea0:	09 95       	icall
	timer0.start(8); // 1 -> 32 us , 8 -> 256 us , 32 64 128 256 1024
    1ea2:	d7 01       	movw	r26, r14
    1ea4:	1c 96       	adiw	r26, 0x0c	; 12
    1ea6:	ed 91       	ld	r30, X+
    1ea8:	fc 91       	ld	r31, X
    1eaa:	1d 97       	sbiw	r26, 0x0d	; 13
    1eac:	88 e0       	ldi	r24, 0x08	; 8
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	09 95       	icall
	
	// to be used to jump menu for calibration in progress
	timer1.compoutmodeA(1); // troubleshooting blinking PORTB 6
    1eb2:	2f 96       	adiw	r28, 0x0f	; 15
    1eb4:	ee ad       	ldd	r30, Y+62	; 0x3e
    1eb6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1eb8:	2f 97       	sbiw	r28, 0x0f	; 15
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	09 95       	icall
	timer1.compareA(62800); // Freq = 256 -> 62800 -> 2 s
    1ebe:	65 96       	adiw	r28, 0x15	; 21
    1ec0:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ec2:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ec4:	65 97       	sbiw	r28, 0x15	; 21
    1ec6:	80 e5       	ldi	r24, 0x50	; 80
    1ec8:	95 ef       	ldi	r25, 0xF5	; 245
    1eca:	09 95       	icall
	timer1.start(256);
    1ecc:	6b 96       	adiw	r28, 0x1b	; 27
    1ece:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ed0:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ed2:	6b 97       	sbiw	r28, 0x1b	; 27
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	91 e0       	ldi	r25, 0x01	; 1
    1ed8:	09 95       	icall
	
	// HX711 Gain
	hx.set_amplify(&hx, 64); // 32 64 128
    1eda:	d8 01       	movw	r26, r16
    1edc:	99 96       	adiw	r26, 0x29	; 41
    1ede:	ed 91       	ld	r30, X+
    1ee0:	fc 91       	ld	r31, X
    1ee2:	9a 97       	sbiw	r26, 0x2a	; 42
    1ee4:	60 e4       	ldi	r22, 0x40	; 64
    1ee6:	c8 01       	movw	r24, r16
    1ee8:	09 95       	icall
	
	//Get stored calibration values and put them to effect
	eprom.read_block(HX711_ptr, (const void*) ZERO, sizeblock);
    1eea:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <eprom+0x18>
    1eee:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <eprom+0x19>
    1ef2:	40 e1       	ldi	r20, 0x10	; 16
    1ef4:	50 e0       	ldi	r21, 0x00	; 0
    1ef6:	60 e0       	ldi	r22, 0x00	; 0
    1ef8:	70 e0       	ldi	r23, 0x00	; 0
    1efa:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <HX711_ptr>
    1efe:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <HX711_ptr+0x1>
    1f02:	09 95       	icall
	if(HX711_ptr->status == 1){
    1f04:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <HX711_ptr>
    1f08:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <HX711_ptr+0x1>
    1f0c:	87 85       	ldd	r24, Z+15	; 0x0f
    1f0e:	81 30       	cpi	r24, 0x01	; 1
    1f10:	09 f0       	breq	.+2      	; 0x1f14 <main+0x26c>
    1f12:	70 c0       	rjmp	.+224    	; 0x1ff4 <main+0x34c>
		//Load stored value 
		hx.get_cal(&hx)->offset_32 = HX711_ptr->offset_32;
    1f14:	d8 01       	movw	r26, r16
    1f16:	d3 96       	adiw	r26, 0x33	; 51
    1f18:	ed 91       	ld	r30, X+
    1f1a:	fc 91       	ld	r31, X
    1f1c:	d4 97       	sbiw	r26, 0x34	; 52
    1f1e:	c8 01       	movw	r24, r16
    1f20:	09 95       	icall
    1f22:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <HX711_ptr>
    1f26:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <HX711_ptr+0x1>
    1f2a:	40 81       	ld	r20, Z
    1f2c:	51 81       	ldd	r21, Z+1	; 0x01
    1f2e:	62 81       	ldd	r22, Z+2	; 0x02
    1f30:	73 81       	ldd	r23, Z+3	; 0x03
    1f32:	fc 01       	movw	r30, r24
    1f34:	40 83       	st	Z, r20
    1f36:	51 83       	std	Z+1, r21	; 0x01
    1f38:	62 83       	std	Z+2, r22	; 0x02
    1f3a:	73 83       	std	Z+3, r23	; 0x03
		hx.get_cal(&hx)->offset_64 = HX711_ptr->offset_64;
    1f3c:	d8 01       	movw	r26, r16
    1f3e:	d3 96       	adiw	r26, 0x33	; 51
    1f40:	ed 91       	ld	r30, X+
    1f42:	fc 91       	ld	r31, X
    1f44:	d4 97       	sbiw	r26, 0x34	; 52
    1f46:	c8 01       	movw	r24, r16
    1f48:	09 95       	icall
    1f4a:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <HX711_ptr>
    1f4e:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <HX711_ptr+0x1>
    1f52:	44 81       	ldd	r20, Z+4	; 0x04
    1f54:	55 81       	ldd	r21, Z+5	; 0x05
    1f56:	66 81       	ldd	r22, Z+6	; 0x06
    1f58:	77 81       	ldd	r23, Z+7	; 0x07
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	44 83       	std	Z+4, r20	; 0x04
    1f5e:	55 83       	std	Z+5, r21	; 0x05
    1f60:	66 83       	std	Z+6, r22	; 0x06
    1f62:	77 83       	std	Z+7, r23	; 0x07
		hx.get_cal(&hx)->offset_128 = HX711_ptr->offset_128;
    1f64:	d8 01       	movw	r26, r16
    1f66:	d3 96       	adiw	r26, 0x33	; 51
    1f68:	ed 91       	ld	r30, X+
    1f6a:	fc 91       	ld	r31, X
    1f6c:	d4 97       	sbiw	r26, 0x34	; 52
    1f6e:	c8 01       	movw	r24, r16
    1f70:	09 95       	icall
    1f72:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <HX711_ptr>
    1f76:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <HX711_ptr+0x1>
    1f7a:	40 85       	ldd	r20, Z+8	; 0x08
    1f7c:	51 85       	ldd	r21, Z+9	; 0x09
    1f7e:	62 85       	ldd	r22, Z+10	; 0x0a
    1f80:	73 85       	ldd	r23, Z+11	; 0x0b
    1f82:	fc 01       	movw	r30, r24
    1f84:	40 87       	std	Z+8, r20	; 0x08
    1f86:	51 87       	std	Z+9, r21	; 0x09
    1f88:	62 87       	std	Z+10, r22	; 0x0a
    1f8a:	73 87       	std	Z+11, r23	; 0x0b
		hx.get_cal(&hx)->divfactor_32 = HX711_ptr->divfactor_32;
    1f8c:	d8 01       	movw	r26, r16
    1f8e:	d3 96       	adiw	r26, 0x33	; 51
    1f90:	ed 91       	ld	r30, X+
    1f92:	fc 91       	ld	r31, X
    1f94:	d4 97       	sbiw	r26, 0x34	; 52
    1f96:	c8 01       	movw	r24, r16
    1f98:	09 95       	icall
    1f9a:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <HX711_ptr>
    1f9e:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <HX711_ptr+0x1>
    1fa2:	24 85       	ldd	r18, Z+12	; 0x0c
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	24 87       	std	Z+12, r18	; 0x0c
		hx.get_cal(&hx)->divfactor_64 = HX711_ptr->divfactor_64;
    1fa8:	d8 01       	movw	r26, r16
    1faa:	d3 96       	adiw	r26, 0x33	; 51
    1fac:	ed 91       	ld	r30, X+
    1fae:	fc 91       	ld	r31, X
    1fb0:	d4 97       	sbiw	r26, 0x34	; 52
    1fb2:	c8 01       	movw	r24, r16
    1fb4:	09 95       	icall
    1fb6:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <HX711_ptr>
    1fba:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <HX711_ptr+0x1>
    1fbe:	25 85       	ldd	r18, Z+13	; 0x0d
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	25 87       	std	Z+13, r18	; 0x0d
		hx.get_cal(&hx)->divfactor_128 = HX711_ptr->divfactor_128;
    1fc4:	d8 01       	movw	r26, r16
    1fc6:	d3 96       	adiw	r26, 0x33	; 51
    1fc8:	ed 91       	ld	r30, X+
    1fca:	fc 91       	ld	r31, X
    1fcc:	d4 97       	sbiw	r26, 0x34	; 52
    1fce:	c8 01       	movw	r24, r16
    1fd0:	09 95       	icall
    1fd2:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <HX711_ptr>
    1fd6:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <HX711_ptr+0x1>
    1fda:	26 85       	ldd	r18, Z+14	; 0x0e
    1fdc:	fc 01       	movw	r30, r24
    1fde:	26 87       	std	Z+14, r18	; 0x0e
		hx.get_cal(&hx)->status=ZERO;
    1fe0:	d8 01       	movw	r26, r16
    1fe2:	d3 96       	adiw	r26, 0x33	; 51
    1fe4:	ed 91       	ld	r30, X+
    1fe6:	fc 91       	ld	r31, X
    1fe8:	d4 97       	sbiw	r26, 0x34	; 52
    1fea:	c8 01       	movw	r24, r16
    1fec:	09 95       	icall
    1fee:	fc 01       	movw	r30, r24
    1ff0:	17 86       	std	Z+15, r1	; 0x0f
		PORTC &= ~(ONE << 5); // troubleshooting
    1ff2:	ad 98       	cbi	0x15, 5	; 21
	//lcd0.string_size(function.ftoa(HX711_data.status, result, ZERO), 13);
	//lcd0.string_size(function.ftoa(hx.get_cal(&hx)->offset_64, result, ZERO), 13);
	/***********************************************************************************************/
	while(TRUE){
		/******PREAMBLE******/
		lcd0.reboot();
    1ff4:	0f 2e       	mov	r0, r31
    1ff6:	fa ed       	ldi	r31, 0xDA	; 218
    1ff8:	ef 2e       	mov	r14, r31
    1ffa:	f1 e0       	ldi	r31, 0x01	; 1
    1ffc:	ff 2e       	mov	r15, r31
    1ffe:	f0 2d       	mov	r31, r0
		F.boot(&F,PINF);
    2000:	0f 2e       	mov	r0, r31
    2002:	f5 e2       	ldi	r31, 0x25	; 37
    2004:	cf 2e       	mov	r12, r31
    2006:	f2 e0       	ldi	r31, 0x02	; 2
    2008:	df 2e       	mov	r13, r31
    200a:	f0 2d       	mov	r31, r0
		hx.query(&hx);
    200c:	00 ef       	ldi	r16, 0xF0	; 240
    200e:	11 e0       	ldi	r17, 0x01	; 1
				
				
				
				// Jump Menus signal
				if(signal == 2){
					Menu = '1';
    2010:	0f 2e       	mov	r0, r31
    2012:	f1 e3       	ldi	r31, 0x31	; 49
    2014:	3f 2e       	mov	r3, r31
    2016:	f0 2d       	mov	r31, r0
				
				//lcd0.gotoxy(1,0); // for troubleshooting
				//lcd0.string_size(function.ftoa(hx.read_raw(&hx), result, ZERO), 13);
				
				if(F.hl(&F) & ONE){ // calibrate offset by pressing button 1
					HX711_data.offset_32 = tmp;
    2018:	0f 2e       	mov	r0, r31
    201a:	f8 ea       	ldi	r31, 0xA8	; 168
    201c:	8f 2e       	mov	r8, r31
    201e:	f1 e0       	ldi	r31, 0x01	; 1
    2020:	9f 2e       	mov	r9, r31
    2022:	f0 2d       	mov	r31, r0
					HX711_data.offset_64 = tmp;
					HX711_data.offset_128 = tmp;
					HX711_data.divfactor_32 = hx.get_cal(&hx)->divfactor_32;
					HX711_data.divfactor_64 = hx.get_cal(&hx)->divfactor_64;
					HX711_data.divfactor_128 = hx.get_cal(&hx)->divfactor_128;
					HX711_data.status = ONE;
    2024:	22 24       	eor	r2, r2
    2026:	23 94       	inc	r2
	//lcd0.string_size(function.ftoa(HX711_data.status, result, ZERO), 13);
	//lcd0.string_size(function.ftoa(hx.get_cal(&hx)->offset_64, result, ZERO), 13);
	/***********************************************************************************************/
	while(TRUE){
		/******PREAMBLE******/
		lcd0.reboot();
    2028:	d7 01       	movw	r26, r14
    202a:	54 96       	adiw	r26, 0x14	; 20
    202c:	ed 91       	ld	r30, X+
    202e:	fc 91       	ld	r31, X
    2030:	55 97       	sbiw	r26, 0x15	; 21
    2032:	09 95       	icall
		F.boot(&F,PINF);
    2034:	60 b1       	in	r22, 0x00	; 0
    2036:	d6 01       	movw	r26, r12
    2038:	14 96       	adiw	r26, 0x04	; 4
    203a:	ed 91       	ld	r30, X+
    203c:	fc 91       	ld	r31, X
    203e:	15 97       	sbiw	r26, 0x05	; 5
    2040:	c6 01       	movw	r24, r12
    2042:	09 95       	icall
		hx.query(&hx);
    2044:	d8 01       	movw	r26, r16
    2046:	9b 96       	adiw	r26, 0x2b	; 43
    2048:	ed 91       	ld	r30, X+
    204a:	fc 91       	ld	r31, X
    204c:	9c 97       	sbiw	r26, 0x2c	; 44
    204e:	c8 01       	movw	r24, r16
    2050:	09 95       	icall
		//if(hx.query(&hx)){ // one shot
			//timer0.start(8);
			//hx.read_raw(&hx);
		//}
		/************INPUT***********/
		tmp = hx.raw_average(&hx, average_n); // average_n  25 or 50, smaller means faster or more readings
    2052:	d8 01       	movw	r26, r16
    2054:	9f 96       	adiw	r26, 0x2f	; 47
    2056:	ed 91       	ld	r30, X+
    2058:	fc 91       	ld	r31, X
    205a:	d0 97       	sbiw	r26, 0x30	; 48
    205c:	68 e1       	ldi	r22, 0x18	; 24
    205e:	c8 01       	movw	r24, r16
    2060:	09 95       	icall
    2062:	60 93 76 01 	sts	0x0176, r22	; 0x800176 <tmp>
    2066:	70 93 77 01 	sts	0x0177, r23	; 0x800177 <tmp+0x1>
    206a:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <tmp+0x2>
    206e:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <tmp+0x3>
		/****************************/
		switch(Menu){
    2072:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2076:	82 33       	cpi	r24, 0x32	; 50
    2078:	09 f4       	brne	.+2      	; 0x207c <main+0x3d4>
    207a:	81 c1       	rjmp	.+770    	; 0x237e <main+0x6d6>
    207c:	83 33       	cpi	r24, 0x33	; 51
    207e:	09 f4       	brne	.+2      	; 0x2082 <main+0x3da>
    2080:	9f c1       	rjmp	.+830    	; 0x23c0 <main+0x718>
    2082:	81 33       	cpi	r24, 0x31	; 49
    2084:	09 f0       	breq	.+2      	; 0x2088 <main+0x3e0>
    2086:	b0 c1       	rjmp	.+864    	; 0x23e8 <main+0x740>
			/***MENU 1***/
			case '1': // Main Program Menu
				lcd0.gotoxy(0,3); //TITLE
    2088:	d7 01       	movw	r26, r14
    208a:	52 96       	adiw	r26, 0x12	; 18
    208c:	ed 91       	ld	r30, X+
    208e:	fc 91       	ld	r31, X
    2090:	53 97       	sbiw	r26, 0x13	; 19
    2092:	63 e0       	ldi	r22, 0x03	; 3
    2094:	70 e0       	ldi	r23, 0x00	; 0
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	09 95       	icall
				lcd0.string_size("Weight Scale", 12); //TITLE
    209c:	d7 01       	movw	r26, r14
    209e:	1c 96       	adiw	r26, 0x0c	; 12
    20a0:	ed 91       	ld	r30, X+
    20a2:	fc 91       	ld	r31, X
    20a4:	1d 97       	sbiw	r26, 0x0d	; 13
    20a6:	6c e0       	ldi	r22, 0x0C	; 12
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	91 e0       	ldi	r25, 0x01	; 1
    20ac:	09 95       	icall
				
				//lcd0.gotoxy(1,0); // for troubleshooting
				//lcd0.string_size(function.ftoa(hx.read_raw(&hx), result, ZERO), 13);
				
				if(F.hl(&F) & ONE){ // calibrate offset by pressing button 1
    20ae:	d6 01       	movw	r26, r12
    20b0:	1e 96       	adiw	r26, 0x0e	; 14
    20b2:	ed 91       	ld	r30, X+
    20b4:	fc 91       	ld	r31, X
    20b6:	1f 97       	sbiw	r26, 0x0f	; 15
    20b8:	c6 01       	movw	r24, r12
    20ba:	09 95       	icall
    20bc:	80 ff       	sbrs	r24, 0
    20be:	b9 c0       	rjmp	.+370    	; 0x2232 <main+0x58a>
					HX711_data.offset_32 = tmp;
    20c0:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <tmp>
    20c4:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <tmp+0x1>
    20c8:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <tmp+0x2>
    20cc:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <tmp+0x3>
    20d0:	27 d3       	rcall	.+1614   	; 0x2720 <__fixsfsi>
    20d2:	f4 01       	movw	r30, r8
    20d4:	60 83       	st	Z, r22
    20d6:	71 83       	std	Z+1, r23	; 0x01
    20d8:	82 83       	std	Z+2, r24	; 0x02
    20da:	93 83       	std	Z+3, r25	; 0x03
					HX711_data.offset_64 = tmp;
    20dc:	64 83       	std	Z+4, r22	; 0x04
    20de:	75 83       	std	Z+5, r23	; 0x05
    20e0:	86 83       	std	Z+6, r24	; 0x06
    20e2:	97 83       	std	Z+7, r25	; 0x07
					HX711_data.offset_128 = tmp;
    20e4:	60 87       	std	Z+8, r22	; 0x08
    20e6:	71 87       	std	Z+9, r23	; 0x09
    20e8:	82 87       	std	Z+10, r24	; 0x0a
    20ea:	93 87       	std	Z+11, r25	; 0x0b
					HX711_data.divfactor_32 = hx.get_cal(&hx)->divfactor_32;
    20ec:	d8 01       	movw	r26, r16
    20ee:	d3 96       	adiw	r26, 0x33	; 51
    20f0:	ed 91       	ld	r30, X+
    20f2:	fc 91       	ld	r31, X
    20f4:	d4 97       	sbiw	r26, 0x34	; 52
    20f6:	c8 01       	movw	r24, r16
    20f8:	09 95       	icall
    20fa:	fc 01       	movw	r30, r24
    20fc:	84 85       	ldd	r24, Z+12	; 0x0c
    20fe:	d4 01       	movw	r26, r8
    2100:	1c 96       	adiw	r26, 0x0c	; 12
    2102:	8c 93       	st	X, r24
					HX711_data.divfactor_64 = hx.get_cal(&hx)->divfactor_64;
    2104:	d8 01       	movw	r26, r16
    2106:	d3 96       	adiw	r26, 0x33	; 51
    2108:	ed 91       	ld	r30, X+
    210a:	fc 91       	ld	r31, X
    210c:	d4 97       	sbiw	r26, 0x34	; 52
    210e:	c8 01       	movw	r24, r16
    2110:	09 95       	icall
    2112:	fc 01       	movw	r30, r24
    2114:	85 85       	ldd	r24, Z+13	; 0x0d
    2116:	d4 01       	movw	r26, r8
    2118:	1d 96       	adiw	r26, 0x0d	; 13
    211a:	8c 93       	st	X, r24
					HX711_data.divfactor_128 = hx.get_cal(&hx)->divfactor_128;
    211c:	d8 01       	movw	r26, r16
    211e:	d3 96       	adiw	r26, 0x33	; 51
    2120:	ed 91       	ld	r30, X+
    2122:	fc 91       	ld	r31, X
    2124:	d4 97       	sbiw	r26, 0x34	; 52
    2126:	c8 01       	movw	r24, r16
    2128:	09 95       	icall
    212a:	fc 01       	movw	r30, r24
    212c:	86 85       	ldd	r24, Z+14	; 0x0e
    212e:	d4 01       	movw	r26, r8
    2130:	1e 96       	adiw	r26, 0x0e	; 14
    2132:	8c 93       	st	X, r24
    2134:	1e 97       	sbiw	r26, 0x0e	; 14
					HX711_data.status = ONE;
    2136:	1f 96       	adiw	r26, 0x0f	; 15
    2138:	2c 92       	st	X, r2
					eprom.update_block(HX711_ptr, (void*) ZERO, sizeblock);
    213a:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <eprom+0x1c>
    213e:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <eprom+0x1d>
    2142:	40 e1       	ldi	r20, 0x10	; 16
    2144:	50 e0       	ldi	r21, 0x00	; 0
    2146:	60 e0       	ldi	r22, 0x00	; 0
    2148:	70 e0       	ldi	r23, 0x00	; 0
    214a:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <HX711_ptr>
    214e:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <HX711_ptr+0x1>
    2152:	09 95       	icall
					hx.get_cal(&hx)->offset_32 = HX711_ptr->offset_32;
    2154:	d8 01       	movw	r26, r16
    2156:	d3 96       	adiw	r26, 0x33	; 51
    2158:	ed 91       	ld	r30, X+
    215a:	fc 91       	ld	r31, X
    215c:	d4 97       	sbiw	r26, 0x34	; 52
    215e:	c8 01       	movw	r24, r16
    2160:	09 95       	icall
    2162:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <HX711_ptr>
    2166:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <HX711_ptr+0x1>
    216a:	40 81       	ld	r20, Z
    216c:	51 81       	ldd	r21, Z+1	; 0x01
    216e:	62 81       	ldd	r22, Z+2	; 0x02
    2170:	73 81       	ldd	r23, Z+3	; 0x03
    2172:	fc 01       	movw	r30, r24
    2174:	40 83       	st	Z, r20
    2176:	51 83       	std	Z+1, r21	; 0x01
    2178:	62 83       	std	Z+2, r22	; 0x02
    217a:	73 83       	std	Z+3, r23	; 0x03
					hx.get_cal(&hx)->offset_64 = HX711_ptr->offset_64;
    217c:	d8 01       	movw	r26, r16
    217e:	d3 96       	adiw	r26, 0x33	; 51
    2180:	ed 91       	ld	r30, X+
    2182:	fc 91       	ld	r31, X
    2184:	d4 97       	sbiw	r26, 0x34	; 52
    2186:	c8 01       	movw	r24, r16
    2188:	09 95       	icall
    218a:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <HX711_ptr>
    218e:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <HX711_ptr+0x1>
    2192:	44 81       	ldd	r20, Z+4	; 0x04
    2194:	55 81       	ldd	r21, Z+5	; 0x05
    2196:	66 81       	ldd	r22, Z+6	; 0x06
    2198:	77 81       	ldd	r23, Z+7	; 0x07
    219a:	fc 01       	movw	r30, r24
    219c:	44 83       	std	Z+4, r20	; 0x04
    219e:	55 83       	std	Z+5, r21	; 0x05
    21a0:	66 83       	std	Z+6, r22	; 0x06
    21a2:	77 83       	std	Z+7, r23	; 0x07
					hx.get_cal(&hx)->offset_128 = HX711_ptr->offset_128;
    21a4:	d8 01       	movw	r26, r16
    21a6:	d3 96       	adiw	r26, 0x33	; 51
    21a8:	ed 91       	ld	r30, X+
    21aa:	fc 91       	ld	r31, X
    21ac:	d4 97       	sbiw	r26, 0x34	; 52
    21ae:	c8 01       	movw	r24, r16
    21b0:	09 95       	icall
    21b2:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <HX711_ptr>
    21b6:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <HX711_ptr+0x1>
    21ba:	40 85       	ldd	r20, Z+8	; 0x08
    21bc:	51 85       	ldd	r21, Z+9	; 0x09
    21be:	62 85       	ldd	r22, Z+10	; 0x0a
    21c0:	73 85       	ldd	r23, Z+11	; 0x0b
    21c2:	fc 01       	movw	r30, r24
    21c4:	40 87       	std	Z+8, r20	; 0x08
    21c6:	51 87       	std	Z+9, r21	; 0x09
    21c8:	62 87       	std	Z+10, r22	; 0x0a
    21ca:	73 87       	std	Z+11, r23	; 0x0b
					hx.get_cal(&hx)->divfactor_32 = HX711_ptr->divfactor_32;
    21cc:	d8 01       	movw	r26, r16
    21ce:	d3 96       	adiw	r26, 0x33	; 51
    21d0:	ed 91       	ld	r30, X+
    21d2:	fc 91       	ld	r31, X
    21d4:	d4 97       	sbiw	r26, 0x34	; 52
    21d6:	c8 01       	movw	r24, r16
    21d8:	09 95       	icall
    21da:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <HX711_ptr>
    21de:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <HX711_ptr+0x1>
    21e2:	24 85       	ldd	r18, Z+12	; 0x0c
    21e4:	fc 01       	movw	r30, r24
    21e6:	24 87       	std	Z+12, r18	; 0x0c
					hx.get_cal(&hx)->divfactor_64 = HX711_ptr->divfactor_64;
    21e8:	d8 01       	movw	r26, r16
    21ea:	d3 96       	adiw	r26, 0x33	; 51
    21ec:	ed 91       	ld	r30, X+
    21ee:	fc 91       	ld	r31, X
    21f0:	d4 97       	sbiw	r26, 0x34	; 52
    21f2:	c8 01       	movw	r24, r16
    21f4:	09 95       	icall
    21f6:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <HX711_ptr>
    21fa:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <HX711_ptr+0x1>
    21fe:	25 85       	ldd	r18, Z+13	; 0x0d
    2200:	fc 01       	movw	r30, r24
    2202:	25 87       	std	Z+13, r18	; 0x0d
					hx.get_cal(&hx)->divfactor_128 = HX711_ptr->divfactor_128;
    2204:	d8 01       	movw	r26, r16
    2206:	d3 96       	adiw	r26, 0x33	; 51
    2208:	ed 91       	ld	r30, X+
    220a:	fc 91       	ld	r31, X
    220c:	d4 97       	sbiw	r26, 0x34	; 52
    220e:	c8 01       	movw	r24, r16
    2210:	09 95       	icall
    2212:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <HX711_ptr>
    2216:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <HX711_ptr+0x1>
    221a:	26 85       	ldd	r18, Z+14	; 0x0e
    221c:	fc 01       	movw	r30, r24
    221e:	26 87       	std	Z+14, r18	; 0x0e
					hx.get_cal(&hx)->status=ZERO;
    2220:	d8 01       	movw	r26, r16
    2222:	d3 96       	adiw	r26, 0x33	; 51
    2224:	ed 91       	ld	r30, X+
    2226:	fc 91       	ld	r31, X
    2228:	d4 97       	sbiw	r26, 0x34	; 52
    222a:	c8 01       	movw	r24, r16
    222c:	09 95       	icall
    222e:	fc 01       	movw	r30, r24
    2230:	17 86       	std	Z+15, r1	; 0x0f
				}
				
				//value = (value - hx.get_cal(&hx)->offset_128) / hx.get_cal(&hx)->divfactor_128; //value to be published to LCD
				value = (tmp - hx.get_cal(&hx)->offset_64) / hx.get_cal(&hx)->divfactor_64; //value to be published to LCD
    2232:	40 90 76 01 	lds	r4, 0x0176	; 0x800176 <tmp>
    2236:	50 90 77 01 	lds	r5, 0x0177	; 0x800177 <tmp+0x1>
    223a:	60 90 78 01 	lds	r6, 0x0178	; 0x800178 <tmp+0x2>
    223e:	70 90 79 01 	lds	r7, 0x0179	; 0x800179 <tmp+0x3>
    2242:	d8 01       	movw	r26, r16
    2244:	d3 96       	adiw	r26, 0x33	; 51
    2246:	ed 91       	ld	r30, X+
    2248:	fc 91       	ld	r31, X
    224a:	d4 97       	sbiw	r26, 0x34	; 52
    224c:	c8 01       	movw	r24, r16
    224e:	09 95       	icall
    2250:	fc 01       	movw	r30, r24
    2252:	64 81       	ldd	r22, Z+4	; 0x04
    2254:	75 81       	ldd	r23, Z+5	; 0x05
    2256:	86 81       	ldd	r24, Z+6	; 0x06
    2258:	97 81       	ldd	r25, Z+7	; 0x07
    225a:	95 d2       	rcall	.+1322   	; 0x2786 <__floatsisf>
    225c:	9b 01       	movw	r18, r22
    225e:	ac 01       	movw	r20, r24
    2260:	c3 01       	movw	r24, r6
    2262:	b2 01       	movw	r22, r4
    2264:	8c d1       	rcall	.+792    	; 0x257e <__subsf3>
    2266:	2b 01       	movw	r4, r22
    2268:	3c 01       	movw	r6, r24
    226a:	d8 01       	movw	r26, r16
    226c:	d3 96       	adiw	r26, 0x33	; 51
    226e:	ed 91       	ld	r30, X+
    2270:	fc 91       	ld	r31, X
    2272:	d4 97       	sbiw	r26, 0x34	; 52
    2274:	c8 01       	movw	r24, r16
    2276:	09 95       	icall
    2278:	fc 01       	movw	r30, r24
    227a:	65 85       	ldd	r22, Z+13	; 0x0d
    227c:	70 e0       	ldi	r23, 0x00	; 0
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	81 d2       	rcall	.+1282   	; 0x2786 <__floatsisf>
    2284:	9b 01       	movw	r18, r22
    2286:	ac 01       	movw	r20, r24
    2288:	c3 01       	movw	r24, r6
    228a:	b2 01       	movw	r22, r4
    228c:	e1 d1       	rcall	.+962    	; 0x2650 <__divsf3>
    228e:	2b 01       	movw	r4, r22
				
				//lcd0.gotoxy(3,0);
				//lcd0.string_size(function.ftoa(hx.get_cal(&hx)->offset_64, result, ZERO), 13);
				
				//Display
				if (value > 1000 || value < -1000){
    2290:	3c 01       	movw	r6, r24
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	4a e7       	ldi	r20, 0x7A	; 122
    2298:	54 e4       	ldi	r21, 0x44	; 68
    229a:	25 d3       	rcall	.+1610   	; 0x28e6 <__gesf2>
    229c:	18 16       	cp	r1, r24
    229e:	4c f0       	brlt	.+18     	; 0x22b2 <main+0x60a>
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	4a e7       	ldi	r20, 0x7A	; 122
    22a6:	54 ec       	ldi	r21, 0xC4	; 196
    22a8:	c3 01       	movw	r24, r6
    22aa:	b2 01       	movw	r22, r4
    22ac:	cd d1       	rcall	.+922    	; 0x2648 <__cmpsf2>
    22ae:	88 23       	and	r24, r24
    22b0:	5c f5       	brge	.+86     	; 0x2308 <main+0x660>
					publish = value / 1000;
					lcd0.gotoxy(2,0);
    22b2:	d7 01       	movw	r26, r14
    22b4:	52 96       	adiw	r26, 0x12	; 18
    22b6:	ed 91       	ld	r30, X+
    22b8:	fc 91       	ld	r31, X
    22ba:	53 97       	sbiw	r26, 0x13	; 19
    22bc:	60 e0       	ldi	r22, 0x00	; 0
    22be:	70 e0       	ldi	r23, 0x00	; 0
    22c0:	82 e0       	ldi	r24, 0x02	; 2
    22c2:	90 e0       	ldi	r25, 0x00	; 0
					lcd0.string_size(function.ftoa(publish, result, 3), 13); lcd0.string_size("Kg", 4);
    22c4:	09 95       	icall
    22c6:	f7 01       	movw	r30, r14
    22c8:	a4 84       	ldd	r10, Z+12	; 0x0c
    22ca:	b5 84       	ldd	r11, Z+13	; 0x0d
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	4a e7       	ldi	r20, 0x7A	; 122
    22d2:	54 e4       	ldi	r21, 0x44	; 68
    22d4:	c3 01       	movw	r24, r6
    22d6:	b2 01       	movw	r22, r4
    22d8:	bb d1       	rcall	.+886    	; 0x2650 <__divsf3>
    22da:	23 e0       	ldi	r18, 0x03	; 3
    22dc:	4a eb       	ldi	r20, 0xBA	; 186
    22de:	51 e0       	ldi	r21, 0x01	; 1
    22e0:	c4 54       	subi	r28, 0x44	; 68
    22e2:	df 4f       	sbci	r29, 0xFF	; 255
    22e4:	e8 81       	ld	r30, Y
    22e6:	f9 81       	ldd	r31, Y+1	; 0x01
    22e8:	cc 5b       	subi	r28, 0xBC	; 188
    22ea:	d0 40       	sbci	r29, 0x00	; 0
    22ec:	09 95       	icall
    22ee:	6d e0       	ldi	r22, 0x0D	; 13
    22f0:	f5 01       	movw	r30, r10
    22f2:	09 95       	icall
    22f4:	d7 01       	movw	r26, r14
    22f6:	1c 96       	adiw	r26, 0x0c	; 12
    22f8:	ed 91       	ld	r30, X+
    22fa:	fc 91       	ld	r31, X
    22fc:	1d 97       	sbiw	r26, 0x0d	; 13
    22fe:	64 e0       	ldi	r22, 0x04	; 4
    2300:	8e e0       	ldi	r24, 0x0E	; 14
    2302:	91 e0       	ldi	r25, 0x01	; 1
    2304:	09 95       	icall
    2306:	2c c0       	rjmp	.+88     	; 0x2360 <main+0x6b8>
				}else{
					publish = value;
					lcd0.gotoxy(2,0);
    2308:	d7 01       	movw	r26, r14
    230a:	52 96       	adiw	r26, 0x12	; 18
    230c:	ed 91       	ld	r30, X+
    230e:	fc 91       	ld	r31, X
    2310:	53 97       	sbiw	r26, 0x13	; 19
    2312:	60 e0       	ldi	r22, 0x00	; 0
    2314:	70 e0       	ldi	r23, 0x00	; 0
    2316:	82 e0       	ldi	r24, 0x02	; 2
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	09 95       	icall
					lcd0.string_size(function.ftoa(publish, result, ZERO), 13); lcd0.string_size("gram", 4);
    231c:	f7 01       	movw	r30, r14
    231e:	a4 84       	ldd	r10, Z+12	; 0x0c
    2320:	b5 84       	ldd	r11, Z+13	; 0x0d
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	4a eb       	ldi	r20, 0xBA	; 186
    2326:	51 e0       	ldi	r21, 0x01	; 1
    2328:	c3 01       	movw	r24, r6
    232a:	b2 01       	movw	r22, r4
    232c:	c4 54       	subi	r28, 0x44	; 68
    232e:	df 4f       	sbci	r29, 0xFF	; 255
    2330:	e8 81       	ld	r30, Y
    2332:	f9 81       	ldd	r31, Y+1	; 0x01
    2334:	cc 5b       	subi	r28, 0xBC	; 188
    2336:	d0 40       	sbci	r29, 0x00	; 0
    2338:	09 95       	icall
    233a:	6d e0       	ldi	r22, 0x0D	; 13
    233c:	f5 01       	movw	r30, r10
    233e:	09 95       	icall
    2340:	d7 01       	movw	r26, r14
    2342:	1c 96       	adiw	r26, 0x0c	; 12
    2344:	ed 91       	ld	r30, X+
    2346:	fc 91       	ld	r31, X
    2348:	1d 97       	sbiw	r26, 0x0d	; 13
    234a:	64 e0       	ldi	r22, 0x04	; 4
    234c:	81 e1       	ldi	r24, 0x11	; 17
    234e:	91 e0       	ldi	r25, 0x01	; 1
    2350:	09 95       	icall
					hx.query(&hx);
    2352:	d8 01       	movw	r26, r16
    2354:	9b 96       	adiw	r26, 0x2b	; 43
    2356:	ed 91       	ld	r30, X+
    2358:	fc 91       	ld	r31, X
    235a:	9c 97       	sbiw	r26, 0x2c	; 44
    235c:	c8 01       	movw	r24, r16
    235e:	09 95       	icall
				}
				
				// Jump Menu signal
				if(signal == 1){
    2360:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    2364:	81 30       	cpi	r24, 0x01	; 1
    2366:	09 f0       	breq	.+2      	; 0x236a <main+0x6c2>
    2368:	5f ce       	rjmp	.-834    	; 0x2028 <main+0x380>
					Menu = '2';
    236a:	b2 e3       	ldi	r27, 0x32	; 50
    236c:	b0 93 00 01 	sts	0x0100, r27	; 0x800100 <__DATA_REGION_ORIGIN__>
					lcd0.clear();
    2370:	d7 01       	movw	r26, r14
    2372:	50 96       	adiw	r26, 0x10	; 16
    2374:	ed 91       	ld	r30, X+
    2376:	fc 91       	ld	r31, X
    2378:	51 97       	sbiw	r26, 0x11	; 17
    237a:	09 95       	icall
    237c:	55 ce       	rjmp	.-854    	; 0x2028 <main+0x380>
				
				break;
			/***MENU 2***/
			case '2': //
				/**/
				lcd0.gotoxy(0,3);
    237e:	d7 01       	movw	r26, r14
    2380:	52 96       	adiw	r26, 0x12	; 18
    2382:	ed 91       	ld	r30, X+
    2384:	fc 91       	ld	r31, X
    2386:	53 97       	sbiw	r26, 0x13	; 19
    2388:	63 e0       	ldi	r22, 0x03	; 3
    238a:	70 e0       	ldi	r23, 0x00	; 0
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	09 95       	icall
				lcd0.string_size("SETUP DIVFACTOR",15);
    2392:	d7 01       	movw	r26, r14
    2394:	1c 96       	adiw	r26, 0x0c	; 12
    2396:	ed 91       	ld	r30, X+
    2398:	fc 91       	ld	r31, X
    239a:	1d 97       	sbiw	r26, 0x0d	; 13
    239c:	6f e0       	ldi	r22, 0x0F	; 15
    239e:	86 e1       	ldi	r24, 0x16	; 22
    23a0:	91 e0       	ldi	r25, 0x01	; 1
    23a2:	09 95       	icall
				
				
				
				
				// Jump Menus signal
				if(signal == 2){
    23a4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    23a8:	82 30       	cpi	r24, 0x02	; 2
    23aa:	09 f0       	breq	.+2      	; 0x23ae <main+0x706>
    23ac:	3d ce       	rjmp	.-902    	; 0x2028 <main+0x380>
					Menu = '1';
    23ae:	30 92 00 01 	sts	0x0100, r3	; 0x800100 <__DATA_REGION_ORIGIN__>
					lcd0.clear();
    23b2:	d7 01       	movw	r26, r14
    23b4:	50 96       	adiw	r26, 0x10	; 16
    23b6:	ed 91       	ld	r30, X+
    23b8:	fc 91       	ld	r31, X
    23ba:	51 97       	sbiw	r26, 0x11	; 17
    23bc:	09 95       	icall
    23be:	34 ce       	rjmp	.-920    	; 0x2028 <main+0x380>
				}
				/**/
				break;
			/***MENU 3***/
			case '3': //
				lcd0.gotoxy(0,0);
    23c0:	d7 01       	movw	r26, r14
    23c2:	52 96       	adiw	r26, 0x12	; 18
    23c4:	ed 91       	ld	r30, X+
    23c6:	fc 91       	ld	r31, X
    23c8:	53 97       	sbiw	r26, 0x13	; 19
    23ca:	60 e0       	ldi	r22, 0x00	; 0
    23cc:	70 e0       	ldi	r23, 0x00	; 0
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	09 95       	icall
				lcd0.string_size("Not being used",19);
    23d4:	d7 01       	movw	r26, r14
    23d6:	1c 96       	adiw	r26, 0x0c	; 12
    23d8:	ed 91       	ld	r30, X+
    23da:	fc 91       	ld	r31, X
    23dc:	1d 97       	sbiw	r26, 0x0d	; 13
    23de:	63 e1       	ldi	r22, 0x13	; 19
    23e0:	86 e2       	ldi	r24, 0x26	; 38
    23e2:	91 e0       	ldi	r25, 0x01	; 1
    23e4:	09 95       	icall
				/***Play around***/
				break;
    23e6:	20 ce       	rjmp	.-960    	; 0x2028 <main+0x380>
				/********************************************************************/
			default:
				Menu = '1';
    23e8:	30 92 00 01 	sts	0x0100, r3	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
    23ec:	1d ce       	rjmp	.-966    	; 0x2028 <main+0x380>

000023ee <__vector_15>:
}
/*
** interrupt
*/
ISR(TIMER0_COMP_vect) // 15.4 us intervals
{
    23ee:	1f 92       	push	r1
    23f0:	0f 92       	push	r0
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	0f 92       	push	r0
    23f6:	11 24       	eor	r1, r1
    23f8:	0b b6       	in	r0, 0x3b	; 59
    23fa:	0f 92       	push	r0
    23fc:	2f 93       	push	r18
    23fe:	3f 93       	push	r19
    2400:	4f 93       	push	r20
    2402:	5f 93       	push	r21
    2404:	6f 93       	push	r22
    2406:	7f 93       	push	r23
    2408:	8f 93       	push	r24
    240a:	9f 93       	push	r25
    240c:	af 93       	push	r26
    240e:	bf 93       	push	r27
    2410:	cf 93       	push	r28
    2412:	ef 93       	push	r30
    2414:	ff 93       	push	r31
	/***Block other interrupts during this procedure***/
	uint8_t Sreg;
	Sreg = STATUS_REGISTER;
    2416:	cf b7       	in	r28, 0x3f	; 63
	STATUS_REGISTER &= ~(ONE << INTERRUPT);	
    2418:	8f b7       	in	r24, 0x3f	; 63
    241a:	8f 77       	andi	r24, 0x7F	; 127
    241c:	8f bf       	out	0x3f, r24	; 63
	hx.read_raw(&hx);
    241e:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <hx+0x2d>
    2422:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <hx+0x2e>
    2426:	80 ef       	ldi	r24, 0xF0	; 240
    2428:	91 e0       	ldi	r25, 0x01	; 1
    242a:	09 95       	icall
	//if(!hx.get_readflag(&hx))
		//timer0.stop();
	/***enable interrupts again***/
	STATUS_REGISTER = Sreg;
    242c:	cf bf       	out	0x3f, r28	; 63
}
    242e:	ff 91       	pop	r31
    2430:	ef 91       	pop	r30
    2432:	cf 91       	pop	r28
    2434:	bf 91       	pop	r27
    2436:	af 91       	pop	r26
    2438:	9f 91       	pop	r25
    243a:	8f 91       	pop	r24
    243c:	7f 91       	pop	r23
    243e:	6f 91       	pop	r22
    2440:	5f 91       	pop	r21
    2442:	4f 91       	pop	r20
    2444:	3f 91       	pop	r19
    2446:	2f 91       	pop	r18
    2448:	0f 90       	pop	r0
    244a:	0b be       	out	0x3b, r0	; 59
    244c:	0f 90       	pop	r0
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	0f 90       	pop	r0
    2452:	1f 90       	pop	r1
    2454:	18 95       	reti

00002456 <__vector_12>:
ISR(TIMER1_COMPA_vect) // 1 second intervals
{
    2456:	1f 92       	push	r1
    2458:	0f 92       	push	r0
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	0f 92       	push	r0
    245e:	11 24       	eor	r1, r1
    2460:	0b b6       	in	r0, 0x3b	; 59
    2462:	0f 92       	push	r0
    2464:	2f 93       	push	r18
    2466:	3f 93       	push	r19
    2468:	4f 93       	push	r20
    246a:	5f 93       	push	r21
    246c:	6f 93       	push	r22
    246e:	7f 93       	push	r23
    2470:	8f 93       	push	r24
    2472:	9f 93       	push	r25
    2474:	af 93       	push	r26
    2476:	bf 93       	push	r27
    2478:	ef 93       	push	r30
    247a:	ff 93       	push	r31
	/***CLEAR EEPROM OFFSET SEQUENCE START***/
	if((F.ll(&F) & IMASK) == (ONE << 3)) //button 4
    247c:	e0 91 2f 02 	lds	r30, 0x022F	; 0x80022f <F+0xa>
    2480:	f0 91 30 02 	lds	r31, 0x0230	; 0x800230 <F+0xb>
    2484:	85 e2       	ldi	r24, 0x25	; 37
    2486:	92 e0       	ldi	r25, 0x02	; 2
    2488:	09 95       	icall
    248a:	8f 73       	andi	r24, 0x3F	; 63
    248c:	88 30       	cpi	r24, 0x08	; 8
    248e:	41 f4       	brne	.+16     	; 0x24a0 <__vector_12+0x4a>
		counter_1++;
    2490:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <counter_1>
    2494:	8f 5f       	subi	r24, 0xFF	; 255
    2496:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <counter_1>
	else if(counter_1 < _5sec+ONE)
		counter_1=0;
		
	if(counter_1 > _5sec){
    249a:	86 30       	cpi	r24, 0x06	; 6
    249c:	58 f1       	brcs	.+86     	; 0x24f4 <__vector_12+0x9e>
    249e:	07 c0       	rjmp	.+14     	; 0x24ae <__vector_12+0x58>
ISR(TIMER1_COMPA_vect) // 1 second intervals
{
	/***CLEAR EEPROM OFFSET SEQUENCE START***/
	if((F.ll(&F) & IMASK) == (ONE << 3)) //button 4
		counter_1++;
	else if(counter_1 < _5sec+ONE)
    24a0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <counter_1>
    24a4:	86 30       	cpi	r24, 0x06	; 6
    24a6:	18 f4       	brcc	.+6      	; 0x24ae <__vector_12+0x58>
		counter_1=0;
    24a8:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <counter_1>
    24ac:	23 c0       	rjmp	.+70     	; 0x24f4 <__vector_12+0x9e>
		
	if(counter_1 > _5sec){
		counter_1 = _5sec+ONE; //lock in place
    24ae:	86 e0       	ldi	r24, 0x06	; 6
    24b0:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <counter_1>
		PORTC ^= (ONE << 6); // troubleshooting
    24b4:	95 b3       	in	r25, 0x15	; 21
    24b6:	80 e4       	ldi	r24, 0x40	; 64
    24b8:	89 27       	eor	r24, r25
    24ba:	85 bb       	out	0x15, r24	; 21
		if((F.ll(&F) & IMASK) == (ONE << 5)){ //button 6
    24bc:	e0 91 2f 02 	lds	r30, 0x022F	; 0x80022f <F+0xa>
    24c0:	f0 91 30 02 	lds	r31, 0x0230	; 0x800230 <F+0xb>
    24c4:	85 e2       	ldi	r24, 0x25	; 37
    24c6:	92 e0       	ldi	r25, 0x02	; 2
    24c8:	09 95       	icall
    24ca:	8f 73       	andi	r24, 0x3F	; 63
    24cc:	80 32       	cpi	r24, 0x20	; 32
    24ce:	91 f4       	brne	.+36     	; 0x24f4 <__vector_12+0x9e>
			// Delete eerpom memory ZERO
			HX711_data.status = ZERO;
    24d0:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <HX711_data+0xf>
			eprom.update_block(HX711_ptr, (void*) ZERO, sizeblock);
    24d4:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <eprom+0x1c>
    24d8:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <eprom+0x1d>
    24dc:	40 e1       	ldi	r20, 0x10	; 16
    24de:	50 e0       	ldi	r21, 0x00	; 0
    24e0:	60 e0       	ldi	r22, 0x00	; 0
    24e2:	70 e0       	ldi	r23, 0x00	; 0
    24e4:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <HX711_ptr>
    24e8:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <HX711_ptr+0x1>
    24ec:	09 95       	icall
			PORTC |= (ONE << 6); // troubleshooting
    24ee:	ae 9a       	sbi	0x15, 6	; 21
			counter_1 = ZERO;
    24f0:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <counter_1>
		}
	}
	/***CLEAR EEPROM OFFSET SEQUENCE END***/
	
	/***CAL DIVFACTOR DEFINE START***/
	if((F.ll(&F) & IMASK) == (ONE << 4)) //button 5
    24f4:	e0 91 2f 02 	lds	r30, 0x022F	; 0x80022f <F+0xa>
    24f8:	f0 91 30 02 	lds	r31, 0x0230	; 0x800230 <F+0xb>
    24fc:	85 e2       	ldi	r24, 0x25	; 37
    24fe:	92 e0       	ldi	r25, 0x02	; 2
    2500:	09 95       	icall
    2502:	8f 73       	andi	r24, 0x3F	; 63
    2504:	80 31       	cpi	r24, 0x10	; 16
    2506:	41 f4       	brne	.+16     	; 0x2518 <__vector_12+0xc2>
		counter_2++;
    2508:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <counter_2>
    250c:	8f 5f       	subi	r24, 0xFF	; 255
    250e:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <counter_2>
	else if(counter_2 < _5sec+ONE)
		counter_2=0;
	
	if(counter_2 > _5sec){
    2512:	86 30       	cpi	r24, 0x06	; 6
    2514:	08 f1       	brcs	.+66     	; 0x2558 <__vector_12+0x102>
    2516:	07 c0       	rjmp	.+14     	; 0x2526 <__vector_12+0xd0>
	/***CLEAR EEPROM OFFSET SEQUENCE END***/
	
	/***CAL DIVFACTOR DEFINE START***/
	if((F.ll(&F) & IMASK) == (ONE << 4)) //button 5
		counter_2++;
	else if(counter_2 < _5sec+ONE)
    2518:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <counter_2>
    251c:	86 30       	cpi	r24, 0x06	; 6
    251e:	18 f4       	brcc	.+6      	; 0x2526 <__vector_12+0xd0>
		counter_2=0;
    2520:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <counter_2>
    2524:	19 c0       	rjmp	.+50     	; 0x2558 <__vector_12+0x102>
	
	if(counter_2 > _5sec){
		counter_2 = _5sec+ONE; //lock in place
    2526:	86 e0       	ldi	r24, 0x06	; 6
    2528:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <counter_2>
		signal = ONE;
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
		PORTC ^= (ONE << 7); // troubleshooting
    2532:	85 b3       	in	r24, 0x15	; 21
    2534:	80 58       	subi	r24, 0x80	; 128
    2536:	85 bb       	out	0x15, r24	; 21
		if((F.ll(&F) & IMASK) == (ONE << 5)){ //button 6
    2538:	e0 91 2f 02 	lds	r30, 0x022F	; 0x80022f <F+0xa>
    253c:	f0 91 30 02 	lds	r31, 0x0230	; 0x800230 <F+0xb>
    2540:	85 e2       	ldi	r24, 0x25	; 37
    2542:	92 e0       	ldi	r25, 0x02	; 2
    2544:	09 95       	icall
    2546:	8f 73       	andi	r24, 0x3F	; 63
    2548:	80 32       	cpi	r24, 0x20	; 32
    254a:	31 f4       	brne	.+12     	; 0x2558 <__vector_12+0x102>
			signal = 2;
    254c:	82 e0       	ldi	r24, 0x02	; 2
    254e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
			PORTC |= (ONE << 7); // troubleshooting
    2552:	af 9a       	sbi	0x15, 7	; 21
			counter_2 = ZERO;
    2554:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <counter_2>
		}
	}
	/***CAL DIVFACTOR DEFINE END***/
}
    2558:	ff 91       	pop	r31
    255a:	ef 91       	pop	r30
    255c:	bf 91       	pop	r27
    255e:	af 91       	pop	r26
    2560:	9f 91       	pop	r25
    2562:	8f 91       	pop	r24
    2564:	7f 91       	pop	r23
    2566:	6f 91       	pop	r22
    2568:	5f 91       	pop	r21
    256a:	4f 91       	pop	r20
    256c:	3f 91       	pop	r19
    256e:	2f 91       	pop	r18
    2570:	0f 90       	pop	r0
    2572:	0b be       	out	0x3b, r0	; 59
    2574:	0f 90       	pop	r0
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	0f 90       	pop	r0
    257a:	1f 90       	pop	r1
    257c:	18 95       	reti

0000257e <__subsf3>:
    257e:	50 58       	subi	r21, 0x80	; 128

00002580 <__addsf3>:
    2580:	bb 27       	eor	r27, r27
    2582:	aa 27       	eor	r26, r26
    2584:	0e d0       	rcall	.+28     	; 0x25a2 <__addsf3x>
    2586:	75 c1       	rjmp	.+746    	; 0x2872 <__fp_round>
    2588:	66 d1       	rcall	.+716    	; 0x2856 <__fp_pscA>
    258a:	30 f0       	brcs	.+12     	; 0x2598 <__addsf3+0x18>
    258c:	6b d1       	rcall	.+726    	; 0x2864 <__fp_pscB>
    258e:	20 f0       	brcs	.+8      	; 0x2598 <__addsf3+0x18>
    2590:	31 f4       	brne	.+12     	; 0x259e <__addsf3+0x1e>
    2592:	9f 3f       	cpi	r25, 0xFF	; 255
    2594:	11 f4       	brne	.+4      	; 0x259a <__addsf3+0x1a>
    2596:	1e f4       	brtc	.+6      	; 0x259e <__addsf3+0x1e>
    2598:	5b c1       	rjmp	.+694    	; 0x2850 <__fp_nan>
    259a:	0e f4       	brtc	.+2      	; 0x259e <__addsf3+0x1e>
    259c:	e0 95       	com	r30
    259e:	e7 fb       	bst	r30, 7
    25a0:	51 c1       	rjmp	.+674    	; 0x2844 <__fp_inf>

000025a2 <__addsf3x>:
    25a2:	e9 2f       	mov	r30, r25
    25a4:	77 d1       	rcall	.+750    	; 0x2894 <__fp_split3>
    25a6:	80 f3       	brcs	.-32     	; 0x2588 <__addsf3+0x8>
    25a8:	ba 17       	cp	r27, r26
    25aa:	62 07       	cpc	r22, r18
    25ac:	73 07       	cpc	r23, r19
    25ae:	84 07       	cpc	r24, r20
    25b0:	95 07       	cpc	r25, r21
    25b2:	18 f0       	brcs	.+6      	; 0x25ba <__addsf3x+0x18>
    25b4:	71 f4       	brne	.+28     	; 0x25d2 <__addsf3x+0x30>
    25b6:	9e f5       	brtc	.+102    	; 0x261e <__addsf3x+0x7c>
    25b8:	8f c1       	rjmp	.+798    	; 0x28d8 <__fp_zero>
    25ba:	0e f4       	brtc	.+2      	; 0x25be <__addsf3x+0x1c>
    25bc:	e0 95       	com	r30
    25be:	0b 2e       	mov	r0, r27
    25c0:	ba 2f       	mov	r27, r26
    25c2:	a0 2d       	mov	r26, r0
    25c4:	0b 01       	movw	r0, r22
    25c6:	b9 01       	movw	r22, r18
    25c8:	90 01       	movw	r18, r0
    25ca:	0c 01       	movw	r0, r24
    25cc:	ca 01       	movw	r24, r20
    25ce:	a0 01       	movw	r20, r0
    25d0:	11 24       	eor	r1, r1
    25d2:	ff 27       	eor	r31, r31
    25d4:	59 1b       	sub	r21, r25
    25d6:	99 f0       	breq	.+38     	; 0x25fe <__addsf3x+0x5c>
    25d8:	59 3f       	cpi	r21, 0xF9	; 249
    25da:	50 f4       	brcc	.+20     	; 0x25f0 <__addsf3x+0x4e>
    25dc:	50 3e       	cpi	r21, 0xE0	; 224
    25de:	68 f1       	brcs	.+90     	; 0x263a <__addsf3x+0x98>
    25e0:	1a 16       	cp	r1, r26
    25e2:	f0 40       	sbci	r31, 0x00	; 0
    25e4:	a2 2f       	mov	r26, r18
    25e6:	23 2f       	mov	r18, r19
    25e8:	34 2f       	mov	r19, r20
    25ea:	44 27       	eor	r20, r20
    25ec:	58 5f       	subi	r21, 0xF8	; 248
    25ee:	f3 cf       	rjmp	.-26     	; 0x25d6 <__addsf3x+0x34>
    25f0:	46 95       	lsr	r20
    25f2:	37 95       	ror	r19
    25f4:	27 95       	ror	r18
    25f6:	a7 95       	ror	r26
    25f8:	f0 40       	sbci	r31, 0x00	; 0
    25fa:	53 95       	inc	r21
    25fc:	c9 f7       	brne	.-14     	; 0x25f0 <__addsf3x+0x4e>
    25fe:	7e f4       	brtc	.+30     	; 0x261e <__addsf3x+0x7c>
    2600:	1f 16       	cp	r1, r31
    2602:	ba 0b       	sbc	r27, r26
    2604:	62 0b       	sbc	r22, r18
    2606:	73 0b       	sbc	r23, r19
    2608:	84 0b       	sbc	r24, r20
    260a:	ba f0       	brmi	.+46     	; 0x263a <__addsf3x+0x98>
    260c:	91 50       	subi	r25, 0x01	; 1
    260e:	a1 f0       	breq	.+40     	; 0x2638 <__addsf3x+0x96>
    2610:	ff 0f       	add	r31, r31
    2612:	bb 1f       	adc	r27, r27
    2614:	66 1f       	adc	r22, r22
    2616:	77 1f       	adc	r23, r23
    2618:	88 1f       	adc	r24, r24
    261a:	c2 f7       	brpl	.-16     	; 0x260c <__addsf3x+0x6a>
    261c:	0e c0       	rjmp	.+28     	; 0x263a <__addsf3x+0x98>
    261e:	ba 0f       	add	r27, r26
    2620:	62 1f       	adc	r22, r18
    2622:	73 1f       	adc	r23, r19
    2624:	84 1f       	adc	r24, r20
    2626:	48 f4       	brcc	.+18     	; 0x263a <__addsf3x+0x98>
    2628:	87 95       	ror	r24
    262a:	77 95       	ror	r23
    262c:	67 95       	ror	r22
    262e:	b7 95       	ror	r27
    2630:	f7 95       	ror	r31
    2632:	9e 3f       	cpi	r25, 0xFE	; 254
    2634:	08 f0       	brcs	.+2      	; 0x2638 <__addsf3x+0x96>
    2636:	b3 cf       	rjmp	.-154    	; 0x259e <__addsf3+0x1e>
    2638:	93 95       	inc	r25
    263a:	88 0f       	add	r24, r24
    263c:	08 f0       	brcs	.+2      	; 0x2640 <__addsf3x+0x9e>
    263e:	99 27       	eor	r25, r25
    2640:	ee 0f       	add	r30, r30
    2642:	97 95       	ror	r25
    2644:	87 95       	ror	r24
    2646:	08 95       	ret

00002648 <__cmpsf2>:
    2648:	d9 d0       	rcall	.+434    	; 0x27fc <__fp_cmp>
    264a:	08 f4       	brcc	.+2      	; 0x264e <__cmpsf2+0x6>
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	08 95       	ret

00002650 <__divsf3>:
    2650:	0c d0       	rcall	.+24     	; 0x266a <__divsf3x>
    2652:	0f c1       	rjmp	.+542    	; 0x2872 <__fp_round>
    2654:	07 d1       	rcall	.+526    	; 0x2864 <__fp_pscB>
    2656:	40 f0       	brcs	.+16     	; 0x2668 <__divsf3+0x18>
    2658:	fe d0       	rcall	.+508    	; 0x2856 <__fp_pscA>
    265a:	30 f0       	brcs	.+12     	; 0x2668 <__divsf3+0x18>
    265c:	21 f4       	brne	.+8      	; 0x2666 <__divsf3+0x16>
    265e:	5f 3f       	cpi	r21, 0xFF	; 255
    2660:	19 f0       	breq	.+6      	; 0x2668 <__divsf3+0x18>
    2662:	f0 c0       	rjmp	.+480    	; 0x2844 <__fp_inf>
    2664:	51 11       	cpse	r21, r1
    2666:	39 c1       	rjmp	.+626    	; 0x28da <__fp_szero>
    2668:	f3 c0       	rjmp	.+486    	; 0x2850 <__fp_nan>

0000266a <__divsf3x>:
    266a:	14 d1       	rcall	.+552    	; 0x2894 <__fp_split3>
    266c:	98 f3       	brcs	.-26     	; 0x2654 <__divsf3+0x4>

0000266e <__divsf3_pse>:
    266e:	99 23       	and	r25, r25
    2670:	c9 f3       	breq	.-14     	; 0x2664 <__divsf3+0x14>
    2672:	55 23       	and	r21, r21
    2674:	b1 f3       	breq	.-20     	; 0x2662 <__divsf3+0x12>
    2676:	95 1b       	sub	r25, r21
    2678:	55 0b       	sbc	r21, r21
    267a:	bb 27       	eor	r27, r27
    267c:	aa 27       	eor	r26, r26
    267e:	62 17       	cp	r22, r18
    2680:	73 07       	cpc	r23, r19
    2682:	84 07       	cpc	r24, r20
    2684:	38 f0       	brcs	.+14     	; 0x2694 <__divsf3_pse+0x26>
    2686:	9f 5f       	subi	r25, 0xFF	; 255
    2688:	5f 4f       	sbci	r21, 0xFF	; 255
    268a:	22 0f       	add	r18, r18
    268c:	33 1f       	adc	r19, r19
    268e:	44 1f       	adc	r20, r20
    2690:	aa 1f       	adc	r26, r26
    2692:	a9 f3       	breq	.-22     	; 0x267e <__divsf3_pse+0x10>
    2694:	33 d0       	rcall	.+102    	; 0x26fc <__divsf3_pse+0x8e>
    2696:	0e 2e       	mov	r0, r30
    2698:	3a f0       	brmi	.+14     	; 0x26a8 <__divsf3_pse+0x3a>
    269a:	e0 e8       	ldi	r30, 0x80	; 128
    269c:	30 d0       	rcall	.+96     	; 0x26fe <__divsf3_pse+0x90>
    269e:	91 50       	subi	r25, 0x01	; 1
    26a0:	50 40       	sbci	r21, 0x00	; 0
    26a2:	e6 95       	lsr	r30
    26a4:	00 1c       	adc	r0, r0
    26a6:	ca f7       	brpl	.-14     	; 0x269a <__divsf3_pse+0x2c>
    26a8:	29 d0       	rcall	.+82     	; 0x26fc <__divsf3_pse+0x8e>
    26aa:	fe 2f       	mov	r31, r30
    26ac:	27 d0       	rcall	.+78     	; 0x26fc <__divsf3_pse+0x8e>
    26ae:	66 0f       	add	r22, r22
    26b0:	77 1f       	adc	r23, r23
    26b2:	88 1f       	adc	r24, r24
    26b4:	bb 1f       	adc	r27, r27
    26b6:	26 17       	cp	r18, r22
    26b8:	37 07       	cpc	r19, r23
    26ba:	48 07       	cpc	r20, r24
    26bc:	ab 07       	cpc	r26, r27
    26be:	b0 e8       	ldi	r27, 0x80	; 128
    26c0:	09 f0       	breq	.+2      	; 0x26c4 <__divsf3_pse+0x56>
    26c2:	bb 0b       	sbc	r27, r27
    26c4:	80 2d       	mov	r24, r0
    26c6:	bf 01       	movw	r22, r30
    26c8:	ff 27       	eor	r31, r31
    26ca:	93 58       	subi	r25, 0x83	; 131
    26cc:	5f 4f       	sbci	r21, 0xFF	; 255
    26ce:	2a f0       	brmi	.+10     	; 0x26da <__divsf3_pse+0x6c>
    26d0:	9e 3f       	cpi	r25, 0xFE	; 254
    26d2:	51 05       	cpc	r21, r1
    26d4:	68 f0       	brcs	.+26     	; 0x26f0 <__divsf3_pse+0x82>
    26d6:	b6 c0       	rjmp	.+364    	; 0x2844 <__fp_inf>
    26d8:	00 c1       	rjmp	.+512    	; 0x28da <__fp_szero>
    26da:	5f 3f       	cpi	r21, 0xFF	; 255
    26dc:	ec f3       	brlt	.-6      	; 0x26d8 <__divsf3_pse+0x6a>
    26de:	98 3e       	cpi	r25, 0xE8	; 232
    26e0:	dc f3       	brlt	.-10     	; 0x26d8 <__divsf3_pse+0x6a>
    26e2:	86 95       	lsr	r24
    26e4:	77 95       	ror	r23
    26e6:	67 95       	ror	r22
    26e8:	b7 95       	ror	r27
    26ea:	f7 95       	ror	r31
    26ec:	9f 5f       	subi	r25, 0xFF	; 255
    26ee:	c9 f7       	brne	.-14     	; 0x26e2 <__divsf3_pse+0x74>
    26f0:	88 0f       	add	r24, r24
    26f2:	91 1d       	adc	r25, r1
    26f4:	96 95       	lsr	r25
    26f6:	87 95       	ror	r24
    26f8:	97 f9       	bld	r25, 7
    26fa:	08 95       	ret
    26fc:	e1 e0       	ldi	r30, 0x01	; 1
    26fe:	66 0f       	add	r22, r22
    2700:	77 1f       	adc	r23, r23
    2702:	88 1f       	adc	r24, r24
    2704:	bb 1f       	adc	r27, r27
    2706:	62 17       	cp	r22, r18
    2708:	73 07       	cpc	r23, r19
    270a:	84 07       	cpc	r24, r20
    270c:	ba 07       	cpc	r27, r26
    270e:	20 f0       	brcs	.+8      	; 0x2718 <__divsf3_pse+0xaa>
    2710:	62 1b       	sub	r22, r18
    2712:	73 0b       	sbc	r23, r19
    2714:	84 0b       	sbc	r24, r20
    2716:	ba 0b       	sbc	r27, r26
    2718:	ee 1f       	adc	r30, r30
    271a:	88 f7       	brcc	.-30     	; 0x26fe <__divsf3_pse+0x90>
    271c:	e0 95       	com	r30
    271e:	08 95       	ret

00002720 <__fixsfsi>:
    2720:	04 d0       	rcall	.+8      	; 0x272a <__fixunssfsi>
    2722:	68 94       	set
    2724:	b1 11       	cpse	r27, r1
    2726:	d9 c0       	rjmp	.+434    	; 0x28da <__fp_szero>
    2728:	08 95       	ret

0000272a <__fixunssfsi>:
    272a:	bc d0       	rcall	.+376    	; 0x28a4 <__fp_splitA>
    272c:	88 f0       	brcs	.+34     	; 0x2750 <__fixunssfsi+0x26>
    272e:	9f 57       	subi	r25, 0x7F	; 127
    2730:	90 f0       	brcs	.+36     	; 0x2756 <__fixunssfsi+0x2c>
    2732:	b9 2f       	mov	r27, r25
    2734:	99 27       	eor	r25, r25
    2736:	b7 51       	subi	r27, 0x17	; 23
    2738:	a0 f0       	brcs	.+40     	; 0x2762 <__fixunssfsi+0x38>
    273a:	d1 f0       	breq	.+52     	; 0x2770 <__fixunssfsi+0x46>
    273c:	66 0f       	add	r22, r22
    273e:	77 1f       	adc	r23, r23
    2740:	88 1f       	adc	r24, r24
    2742:	99 1f       	adc	r25, r25
    2744:	1a f0       	brmi	.+6      	; 0x274c <__fixunssfsi+0x22>
    2746:	ba 95       	dec	r27
    2748:	c9 f7       	brne	.-14     	; 0x273c <__fixunssfsi+0x12>
    274a:	12 c0       	rjmp	.+36     	; 0x2770 <__fixunssfsi+0x46>
    274c:	b1 30       	cpi	r27, 0x01	; 1
    274e:	81 f0       	breq	.+32     	; 0x2770 <__fixunssfsi+0x46>
    2750:	c3 d0       	rcall	.+390    	; 0x28d8 <__fp_zero>
    2752:	b1 e0       	ldi	r27, 0x01	; 1
    2754:	08 95       	ret
    2756:	c0 c0       	rjmp	.+384    	; 0x28d8 <__fp_zero>
    2758:	67 2f       	mov	r22, r23
    275a:	78 2f       	mov	r23, r24
    275c:	88 27       	eor	r24, r24
    275e:	b8 5f       	subi	r27, 0xF8	; 248
    2760:	39 f0       	breq	.+14     	; 0x2770 <__fixunssfsi+0x46>
    2762:	b9 3f       	cpi	r27, 0xF9	; 249
    2764:	cc f3       	brlt	.-14     	; 0x2758 <__fixunssfsi+0x2e>
    2766:	86 95       	lsr	r24
    2768:	77 95       	ror	r23
    276a:	67 95       	ror	r22
    276c:	b3 95       	inc	r27
    276e:	d9 f7       	brne	.-10     	; 0x2766 <__fixunssfsi+0x3c>
    2770:	3e f4       	brtc	.+14     	; 0x2780 <__fixunssfsi+0x56>
    2772:	90 95       	com	r25
    2774:	80 95       	com	r24
    2776:	70 95       	com	r23
    2778:	61 95       	neg	r22
    277a:	7f 4f       	sbci	r23, 0xFF	; 255
    277c:	8f 4f       	sbci	r24, 0xFF	; 255
    277e:	9f 4f       	sbci	r25, 0xFF	; 255
    2780:	08 95       	ret

00002782 <__floatunsisf>:
    2782:	e8 94       	clt
    2784:	09 c0       	rjmp	.+18     	; 0x2798 <__floatsisf+0x12>

00002786 <__floatsisf>:
    2786:	97 fb       	bst	r25, 7
    2788:	3e f4       	brtc	.+14     	; 0x2798 <__floatsisf+0x12>
    278a:	90 95       	com	r25
    278c:	80 95       	com	r24
    278e:	70 95       	com	r23
    2790:	61 95       	neg	r22
    2792:	7f 4f       	sbci	r23, 0xFF	; 255
    2794:	8f 4f       	sbci	r24, 0xFF	; 255
    2796:	9f 4f       	sbci	r25, 0xFF	; 255
    2798:	99 23       	and	r25, r25
    279a:	a9 f0       	breq	.+42     	; 0x27c6 <__floatsisf+0x40>
    279c:	f9 2f       	mov	r31, r25
    279e:	96 e9       	ldi	r25, 0x96	; 150
    27a0:	bb 27       	eor	r27, r27
    27a2:	93 95       	inc	r25
    27a4:	f6 95       	lsr	r31
    27a6:	87 95       	ror	r24
    27a8:	77 95       	ror	r23
    27aa:	67 95       	ror	r22
    27ac:	b7 95       	ror	r27
    27ae:	f1 11       	cpse	r31, r1
    27b0:	f8 cf       	rjmp	.-16     	; 0x27a2 <__floatsisf+0x1c>
    27b2:	fa f4       	brpl	.+62     	; 0x27f2 <__floatsisf+0x6c>
    27b4:	bb 0f       	add	r27, r27
    27b6:	11 f4       	brne	.+4      	; 0x27bc <__floatsisf+0x36>
    27b8:	60 ff       	sbrs	r22, 0
    27ba:	1b c0       	rjmp	.+54     	; 0x27f2 <__floatsisf+0x6c>
    27bc:	6f 5f       	subi	r22, 0xFF	; 255
    27be:	7f 4f       	sbci	r23, 0xFF	; 255
    27c0:	8f 4f       	sbci	r24, 0xFF	; 255
    27c2:	9f 4f       	sbci	r25, 0xFF	; 255
    27c4:	16 c0       	rjmp	.+44     	; 0x27f2 <__floatsisf+0x6c>
    27c6:	88 23       	and	r24, r24
    27c8:	11 f0       	breq	.+4      	; 0x27ce <__floatsisf+0x48>
    27ca:	96 e9       	ldi	r25, 0x96	; 150
    27cc:	11 c0       	rjmp	.+34     	; 0x27f0 <__floatsisf+0x6a>
    27ce:	77 23       	and	r23, r23
    27d0:	21 f0       	breq	.+8      	; 0x27da <__floatsisf+0x54>
    27d2:	9e e8       	ldi	r25, 0x8E	; 142
    27d4:	87 2f       	mov	r24, r23
    27d6:	76 2f       	mov	r23, r22
    27d8:	05 c0       	rjmp	.+10     	; 0x27e4 <__floatsisf+0x5e>
    27da:	66 23       	and	r22, r22
    27dc:	71 f0       	breq	.+28     	; 0x27fa <__floatsisf+0x74>
    27de:	96 e8       	ldi	r25, 0x86	; 134
    27e0:	86 2f       	mov	r24, r22
    27e2:	70 e0       	ldi	r23, 0x00	; 0
    27e4:	60 e0       	ldi	r22, 0x00	; 0
    27e6:	2a f0       	brmi	.+10     	; 0x27f2 <__floatsisf+0x6c>
    27e8:	9a 95       	dec	r25
    27ea:	66 0f       	add	r22, r22
    27ec:	77 1f       	adc	r23, r23
    27ee:	88 1f       	adc	r24, r24
    27f0:	da f7       	brpl	.-10     	; 0x27e8 <__floatsisf+0x62>
    27f2:	88 0f       	add	r24, r24
    27f4:	96 95       	lsr	r25
    27f6:	87 95       	ror	r24
    27f8:	97 f9       	bld	r25, 7
    27fa:	08 95       	ret

000027fc <__fp_cmp>:
    27fc:	99 0f       	add	r25, r25
    27fe:	00 08       	sbc	r0, r0
    2800:	55 0f       	add	r21, r21
    2802:	aa 0b       	sbc	r26, r26
    2804:	e0 e8       	ldi	r30, 0x80	; 128
    2806:	fe ef       	ldi	r31, 0xFE	; 254
    2808:	16 16       	cp	r1, r22
    280a:	17 06       	cpc	r1, r23
    280c:	e8 07       	cpc	r30, r24
    280e:	f9 07       	cpc	r31, r25
    2810:	c0 f0       	brcs	.+48     	; 0x2842 <__fp_cmp+0x46>
    2812:	12 16       	cp	r1, r18
    2814:	13 06       	cpc	r1, r19
    2816:	e4 07       	cpc	r30, r20
    2818:	f5 07       	cpc	r31, r21
    281a:	98 f0       	brcs	.+38     	; 0x2842 <__fp_cmp+0x46>
    281c:	62 1b       	sub	r22, r18
    281e:	73 0b       	sbc	r23, r19
    2820:	84 0b       	sbc	r24, r20
    2822:	95 0b       	sbc	r25, r21
    2824:	39 f4       	brne	.+14     	; 0x2834 <__fp_cmp+0x38>
    2826:	0a 26       	eor	r0, r26
    2828:	61 f0       	breq	.+24     	; 0x2842 <__fp_cmp+0x46>
    282a:	23 2b       	or	r18, r19
    282c:	24 2b       	or	r18, r20
    282e:	25 2b       	or	r18, r21
    2830:	21 f4       	brne	.+8      	; 0x283a <__fp_cmp+0x3e>
    2832:	08 95       	ret
    2834:	0a 26       	eor	r0, r26
    2836:	09 f4       	brne	.+2      	; 0x283a <__fp_cmp+0x3e>
    2838:	a1 40       	sbci	r26, 0x01	; 1
    283a:	a6 95       	lsr	r26
    283c:	8f ef       	ldi	r24, 0xFF	; 255
    283e:	81 1d       	adc	r24, r1
    2840:	81 1d       	adc	r24, r1
    2842:	08 95       	ret

00002844 <__fp_inf>:
    2844:	97 f9       	bld	r25, 7
    2846:	9f 67       	ori	r25, 0x7F	; 127
    2848:	80 e8       	ldi	r24, 0x80	; 128
    284a:	70 e0       	ldi	r23, 0x00	; 0
    284c:	60 e0       	ldi	r22, 0x00	; 0
    284e:	08 95       	ret

00002850 <__fp_nan>:
    2850:	9f ef       	ldi	r25, 0xFF	; 255
    2852:	80 ec       	ldi	r24, 0xC0	; 192
    2854:	08 95       	ret

00002856 <__fp_pscA>:
    2856:	00 24       	eor	r0, r0
    2858:	0a 94       	dec	r0
    285a:	16 16       	cp	r1, r22
    285c:	17 06       	cpc	r1, r23
    285e:	18 06       	cpc	r1, r24
    2860:	09 06       	cpc	r0, r25
    2862:	08 95       	ret

00002864 <__fp_pscB>:
    2864:	00 24       	eor	r0, r0
    2866:	0a 94       	dec	r0
    2868:	12 16       	cp	r1, r18
    286a:	13 06       	cpc	r1, r19
    286c:	14 06       	cpc	r1, r20
    286e:	05 06       	cpc	r0, r21
    2870:	08 95       	ret

00002872 <__fp_round>:
    2872:	09 2e       	mov	r0, r25
    2874:	03 94       	inc	r0
    2876:	00 0c       	add	r0, r0
    2878:	11 f4       	brne	.+4      	; 0x287e <__fp_round+0xc>
    287a:	88 23       	and	r24, r24
    287c:	52 f0       	brmi	.+20     	; 0x2892 <__fp_round+0x20>
    287e:	bb 0f       	add	r27, r27
    2880:	40 f4       	brcc	.+16     	; 0x2892 <__fp_round+0x20>
    2882:	bf 2b       	or	r27, r31
    2884:	11 f4       	brne	.+4      	; 0x288a <__fp_round+0x18>
    2886:	60 ff       	sbrs	r22, 0
    2888:	04 c0       	rjmp	.+8      	; 0x2892 <__fp_round+0x20>
    288a:	6f 5f       	subi	r22, 0xFF	; 255
    288c:	7f 4f       	sbci	r23, 0xFF	; 255
    288e:	8f 4f       	sbci	r24, 0xFF	; 255
    2890:	9f 4f       	sbci	r25, 0xFF	; 255
    2892:	08 95       	ret

00002894 <__fp_split3>:
    2894:	57 fd       	sbrc	r21, 7
    2896:	90 58       	subi	r25, 0x80	; 128
    2898:	44 0f       	add	r20, r20
    289a:	55 1f       	adc	r21, r21
    289c:	59 f0       	breq	.+22     	; 0x28b4 <__fp_splitA+0x10>
    289e:	5f 3f       	cpi	r21, 0xFF	; 255
    28a0:	71 f0       	breq	.+28     	; 0x28be <__fp_splitA+0x1a>
    28a2:	47 95       	ror	r20

000028a4 <__fp_splitA>:
    28a4:	88 0f       	add	r24, r24
    28a6:	97 fb       	bst	r25, 7
    28a8:	99 1f       	adc	r25, r25
    28aa:	61 f0       	breq	.+24     	; 0x28c4 <__fp_splitA+0x20>
    28ac:	9f 3f       	cpi	r25, 0xFF	; 255
    28ae:	79 f0       	breq	.+30     	; 0x28ce <__fp_splitA+0x2a>
    28b0:	87 95       	ror	r24
    28b2:	08 95       	ret
    28b4:	12 16       	cp	r1, r18
    28b6:	13 06       	cpc	r1, r19
    28b8:	14 06       	cpc	r1, r20
    28ba:	55 1f       	adc	r21, r21
    28bc:	f2 cf       	rjmp	.-28     	; 0x28a2 <__fp_split3+0xe>
    28be:	46 95       	lsr	r20
    28c0:	f1 df       	rcall	.-30     	; 0x28a4 <__fp_splitA>
    28c2:	08 c0       	rjmp	.+16     	; 0x28d4 <__fp_splitA+0x30>
    28c4:	16 16       	cp	r1, r22
    28c6:	17 06       	cpc	r1, r23
    28c8:	18 06       	cpc	r1, r24
    28ca:	99 1f       	adc	r25, r25
    28cc:	f1 cf       	rjmp	.-30     	; 0x28b0 <__fp_splitA+0xc>
    28ce:	86 95       	lsr	r24
    28d0:	71 05       	cpc	r23, r1
    28d2:	61 05       	cpc	r22, r1
    28d4:	08 94       	sec
    28d6:	08 95       	ret

000028d8 <__fp_zero>:
    28d8:	e8 94       	clt

000028da <__fp_szero>:
    28da:	bb 27       	eor	r27, r27
    28dc:	66 27       	eor	r22, r22
    28de:	77 27       	eor	r23, r23
    28e0:	cb 01       	movw	r24, r22
    28e2:	97 f9       	bld	r25, 7
    28e4:	08 95       	ret

000028e6 <__gesf2>:
    28e6:	8a df       	rcall	.-236    	; 0x27fc <__fp_cmp>
    28e8:	08 f4       	brcc	.+2      	; 0x28ec <__gesf2+0x6>
    28ea:	8f ef       	ldi	r24, 0xFF	; 255
    28ec:	08 95       	ret

000028ee <__mulsf3>:
    28ee:	0b d0       	rcall	.+22     	; 0x2906 <__mulsf3x>
    28f0:	c0 cf       	rjmp	.-128    	; 0x2872 <__fp_round>
    28f2:	b1 df       	rcall	.-158    	; 0x2856 <__fp_pscA>
    28f4:	28 f0       	brcs	.+10     	; 0x2900 <__mulsf3+0x12>
    28f6:	b6 df       	rcall	.-148    	; 0x2864 <__fp_pscB>
    28f8:	18 f0       	brcs	.+6      	; 0x2900 <__mulsf3+0x12>
    28fa:	95 23       	and	r25, r21
    28fc:	09 f0       	breq	.+2      	; 0x2900 <__mulsf3+0x12>
    28fe:	a2 cf       	rjmp	.-188    	; 0x2844 <__fp_inf>
    2900:	a7 cf       	rjmp	.-178    	; 0x2850 <__fp_nan>
    2902:	11 24       	eor	r1, r1
    2904:	ea cf       	rjmp	.-44     	; 0x28da <__fp_szero>

00002906 <__mulsf3x>:
    2906:	c6 df       	rcall	.-116    	; 0x2894 <__fp_split3>
    2908:	a0 f3       	brcs	.-24     	; 0x28f2 <__mulsf3+0x4>

0000290a <__mulsf3_pse>:
    290a:	95 9f       	mul	r25, r21
    290c:	d1 f3       	breq	.-12     	; 0x2902 <__mulsf3+0x14>
    290e:	95 0f       	add	r25, r21
    2910:	50 e0       	ldi	r21, 0x00	; 0
    2912:	55 1f       	adc	r21, r21
    2914:	62 9f       	mul	r22, r18
    2916:	f0 01       	movw	r30, r0
    2918:	72 9f       	mul	r23, r18
    291a:	bb 27       	eor	r27, r27
    291c:	f0 0d       	add	r31, r0
    291e:	b1 1d       	adc	r27, r1
    2920:	63 9f       	mul	r22, r19
    2922:	aa 27       	eor	r26, r26
    2924:	f0 0d       	add	r31, r0
    2926:	b1 1d       	adc	r27, r1
    2928:	aa 1f       	adc	r26, r26
    292a:	64 9f       	mul	r22, r20
    292c:	66 27       	eor	r22, r22
    292e:	b0 0d       	add	r27, r0
    2930:	a1 1d       	adc	r26, r1
    2932:	66 1f       	adc	r22, r22
    2934:	82 9f       	mul	r24, r18
    2936:	22 27       	eor	r18, r18
    2938:	b0 0d       	add	r27, r0
    293a:	a1 1d       	adc	r26, r1
    293c:	62 1f       	adc	r22, r18
    293e:	73 9f       	mul	r23, r19
    2940:	b0 0d       	add	r27, r0
    2942:	a1 1d       	adc	r26, r1
    2944:	62 1f       	adc	r22, r18
    2946:	83 9f       	mul	r24, r19
    2948:	a0 0d       	add	r26, r0
    294a:	61 1d       	adc	r22, r1
    294c:	22 1f       	adc	r18, r18
    294e:	74 9f       	mul	r23, r20
    2950:	33 27       	eor	r19, r19
    2952:	a0 0d       	add	r26, r0
    2954:	61 1d       	adc	r22, r1
    2956:	23 1f       	adc	r18, r19
    2958:	84 9f       	mul	r24, r20
    295a:	60 0d       	add	r22, r0
    295c:	21 1d       	adc	r18, r1
    295e:	82 2f       	mov	r24, r18
    2960:	76 2f       	mov	r23, r22
    2962:	6a 2f       	mov	r22, r26
    2964:	11 24       	eor	r1, r1
    2966:	9f 57       	subi	r25, 0x7F	; 127
    2968:	50 40       	sbci	r21, 0x00	; 0
    296a:	8a f0       	brmi	.+34     	; 0x298e <__mulsf3_pse+0x84>
    296c:	e1 f0       	breq	.+56     	; 0x29a6 <__mulsf3_pse+0x9c>
    296e:	88 23       	and	r24, r24
    2970:	4a f0       	brmi	.+18     	; 0x2984 <__mulsf3_pse+0x7a>
    2972:	ee 0f       	add	r30, r30
    2974:	ff 1f       	adc	r31, r31
    2976:	bb 1f       	adc	r27, r27
    2978:	66 1f       	adc	r22, r22
    297a:	77 1f       	adc	r23, r23
    297c:	88 1f       	adc	r24, r24
    297e:	91 50       	subi	r25, 0x01	; 1
    2980:	50 40       	sbci	r21, 0x00	; 0
    2982:	a9 f7       	brne	.-22     	; 0x296e <__mulsf3_pse+0x64>
    2984:	9e 3f       	cpi	r25, 0xFE	; 254
    2986:	51 05       	cpc	r21, r1
    2988:	70 f0       	brcs	.+28     	; 0x29a6 <__mulsf3_pse+0x9c>
    298a:	5c cf       	rjmp	.-328    	; 0x2844 <__fp_inf>
    298c:	a6 cf       	rjmp	.-180    	; 0x28da <__fp_szero>
    298e:	5f 3f       	cpi	r21, 0xFF	; 255
    2990:	ec f3       	brlt	.-6      	; 0x298c <__mulsf3_pse+0x82>
    2992:	98 3e       	cpi	r25, 0xE8	; 232
    2994:	dc f3       	brlt	.-10     	; 0x298c <__mulsf3_pse+0x82>
    2996:	86 95       	lsr	r24
    2998:	77 95       	ror	r23
    299a:	67 95       	ror	r22
    299c:	b7 95       	ror	r27
    299e:	f7 95       	ror	r31
    29a0:	e7 95       	ror	r30
    29a2:	9f 5f       	subi	r25, 0xFF	; 255
    29a4:	c1 f7       	brne	.-16     	; 0x2996 <__mulsf3_pse+0x8c>
    29a6:	fe 2b       	or	r31, r30
    29a8:	88 0f       	add	r24, r24
    29aa:	91 1d       	adc	r25, r1
    29ac:	96 95       	lsr	r25
    29ae:	87 95       	ror	r24
    29b0:	97 f9       	bld	r25, 7
    29b2:	08 95       	ret

000029b4 <pow>:
    29b4:	fa 01       	movw	r30, r20
    29b6:	ee 0f       	add	r30, r30
    29b8:	ff 1f       	adc	r31, r31
    29ba:	30 96       	adiw	r30, 0x00	; 0
    29bc:	21 05       	cpc	r18, r1
    29be:	31 05       	cpc	r19, r1
    29c0:	99 f1       	breq	.+102    	; 0x2a28 <pow+0x74>
    29c2:	61 15       	cp	r22, r1
    29c4:	71 05       	cpc	r23, r1
    29c6:	61 f4       	brne	.+24     	; 0x29e0 <pow+0x2c>
    29c8:	80 38       	cpi	r24, 0x80	; 128
    29ca:	bf e3       	ldi	r27, 0x3F	; 63
    29cc:	9b 07       	cpc	r25, r27
    29ce:	49 f1       	breq	.+82     	; 0x2a22 <pow+0x6e>
    29d0:	68 94       	set
    29d2:	90 38       	cpi	r25, 0x80	; 128
    29d4:	81 05       	cpc	r24, r1
    29d6:	61 f0       	breq	.+24     	; 0x29f0 <pow+0x3c>
    29d8:	80 38       	cpi	r24, 0x80	; 128
    29da:	bf ef       	ldi	r27, 0xFF	; 255
    29dc:	9b 07       	cpc	r25, r27
    29de:	41 f0       	breq	.+16     	; 0x29f0 <pow+0x3c>
    29e0:	99 23       	and	r25, r25
    29e2:	42 f5       	brpl	.+80     	; 0x2a34 <pow+0x80>
    29e4:	ff 3f       	cpi	r31, 0xFF	; 255
    29e6:	e1 05       	cpc	r30, r1
    29e8:	31 05       	cpc	r19, r1
    29ea:	21 05       	cpc	r18, r1
    29ec:	11 f1       	breq	.+68     	; 0x2a32 <pow+0x7e>
    29ee:	e8 94       	clt
    29f0:	08 94       	sec
    29f2:	e7 95       	ror	r30
    29f4:	d9 01       	movw	r26, r18
    29f6:	aa 23       	and	r26, r26
    29f8:	29 f4       	brne	.+10     	; 0x2a04 <pow+0x50>
    29fa:	ab 2f       	mov	r26, r27
    29fc:	be 2f       	mov	r27, r30
    29fe:	f8 5f       	subi	r31, 0xF8	; 248
    2a00:	d0 f3       	brcs	.-12     	; 0x29f6 <pow+0x42>
    2a02:	10 c0       	rjmp	.+32     	; 0x2a24 <pow+0x70>
    2a04:	ff 5f       	subi	r31, 0xFF	; 255
    2a06:	70 f4       	brcc	.+28     	; 0x2a24 <pow+0x70>
    2a08:	a6 95       	lsr	r26
    2a0a:	e0 f7       	brcc	.-8      	; 0x2a04 <pow+0x50>
    2a0c:	f7 39       	cpi	r31, 0x97	; 151
    2a0e:	50 f0       	brcs	.+20     	; 0x2a24 <pow+0x70>
    2a10:	19 f0       	breq	.+6      	; 0x2a18 <pow+0x64>
    2a12:	ff 3a       	cpi	r31, 0xAF	; 175
    2a14:	38 f4       	brcc	.+14     	; 0x2a24 <pow+0x70>
    2a16:	9f 77       	andi	r25, 0x7F	; 127
    2a18:	9f 93       	push	r25
    2a1a:	0c d0       	rcall	.+24     	; 0x2a34 <pow+0x80>
    2a1c:	0f 90       	pop	r0
    2a1e:	07 fc       	sbrc	r0, 7
    2a20:	90 58       	subi	r25, 0x80	; 128
    2a22:	08 95       	ret
    2a24:	3e f0       	brts	.+14     	; 0x2a34 <pow+0x80>
    2a26:	14 cf       	rjmp	.-472    	; 0x2850 <__fp_nan>
    2a28:	60 e0       	ldi	r22, 0x00	; 0
    2a2a:	70 e0       	ldi	r23, 0x00	; 0
    2a2c:	80 e8       	ldi	r24, 0x80	; 128
    2a2e:	9f e3       	ldi	r25, 0x3F	; 63
    2a30:	08 95       	ret
    2a32:	4f e7       	ldi	r20, 0x7F	; 127
    2a34:	9f 77       	andi	r25, 0x7F	; 127
    2a36:	5f 93       	push	r21
    2a38:	4f 93       	push	r20
    2a3a:	3f 93       	push	r19
    2a3c:	2f 93       	push	r18
    2a3e:	9e d0       	rcall	.+316    	; 0x2b7c <log>
    2a40:	2f 91       	pop	r18
    2a42:	3f 91       	pop	r19
    2a44:	4f 91       	pop	r20
    2a46:	5f 91       	pop	r21
    2a48:	52 df       	rcall	.-348    	; 0x28ee <__mulsf3>
    2a4a:	05 c0       	rjmp	.+10     	; 0x2a56 <exp>
    2a4c:	19 f4       	brne	.+6      	; 0x2a54 <pow+0xa0>
    2a4e:	0e f0       	brts	.+2      	; 0x2a52 <pow+0x9e>
    2a50:	f9 ce       	rjmp	.-526    	; 0x2844 <__fp_inf>
    2a52:	42 cf       	rjmp	.-380    	; 0x28d8 <__fp_zero>
    2a54:	fd ce       	rjmp	.-518    	; 0x2850 <__fp_nan>

00002a56 <exp>:
    2a56:	26 df       	rcall	.-436    	; 0x28a4 <__fp_splitA>
    2a58:	c8 f3       	brcs	.-14     	; 0x2a4c <pow+0x98>
    2a5a:	96 38       	cpi	r25, 0x86	; 134
    2a5c:	c0 f7       	brcc	.-16     	; 0x2a4e <pow+0x9a>
    2a5e:	07 f8       	bld	r0, 7
    2a60:	0f 92       	push	r0
    2a62:	e8 94       	clt
    2a64:	2b e3       	ldi	r18, 0x3B	; 59
    2a66:	3a ea       	ldi	r19, 0xAA	; 170
    2a68:	48 eb       	ldi	r20, 0xB8	; 184
    2a6a:	5f e7       	ldi	r21, 0x7F	; 127
    2a6c:	4e df       	rcall	.-356    	; 0x290a <__mulsf3_pse>
    2a6e:	0f 92       	push	r0
    2a70:	0f 92       	push	r0
    2a72:	0f 92       	push	r0
    2a74:	4d b7       	in	r20, 0x3d	; 61
    2a76:	5e b7       	in	r21, 0x3e	; 62
    2a78:	0f 92       	push	r0
    2a7a:	c0 d0       	rcall	.+384    	; 0x2bfc <modf>
    2a7c:	e2 ec       	ldi	r30, 0xC2	; 194
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	16 d0       	rcall	.+44     	; 0x2aae <__fp_powser>
    2a82:	4f 91       	pop	r20
    2a84:	5f 91       	pop	r21
    2a86:	ef 91       	pop	r30
    2a88:	ff 91       	pop	r31
    2a8a:	e5 95       	asr	r30
    2a8c:	ee 1f       	adc	r30, r30
    2a8e:	ff 1f       	adc	r31, r31
    2a90:	49 f0       	breq	.+18     	; 0x2aa4 <exp+0x4e>
    2a92:	fe 57       	subi	r31, 0x7E	; 126
    2a94:	e0 68       	ori	r30, 0x80	; 128
    2a96:	44 27       	eor	r20, r20
    2a98:	ee 0f       	add	r30, r30
    2a9a:	44 1f       	adc	r20, r20
    2a9c:	fa 95       	dec	r31
    2a9e:	e1 f7       	brne	.-8      	; 0x2a98 <exp+0x42>
    2aa0:	41 95       	neg	r20
    2aa2:	55 0b       	sbc	r21, r21
    2aa4:	32 d0       	rcall	.+100    	; 0x2b0a <ldexp>
    2aa6:	0f 90       	pop	r0
    2aa8:	07 fe       	sbrs	r0, 7
    2aaa:	26 c0       	rjmp	.+76     	; 0x2af8 <inverse>
    2aac:	08 95       	ret

00002aae <__fp_powser>:
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	1f 93       	push	r17
    2ab4:	0f 93       	push	r16
    2ab6:	ff 92       	push	r15
    2ab8:	ef 92       	push	r14
    2aba:	df 92       	push	r13
    2abc:	7b 01       	movw	r14, r22
    2abe:	8c 01       	movw	r16, r24
    2ac0:	68 94       	set
    2ac2:	05 c0       	rjmp	.+10     	; 0x2ace <__fp_powser+0x20>
    2ac4:	da 2e       	mov	r13, r26
    2ac6:	ef 01       	movw	r28, r30
    2ac8:	1e df       	rcall	.-452    	; 0x2906 <__mulsf3x>
    2aca:	fe 01       	movw	r30, r28
    2acc:	e8 94       	clt
    2ace:	a5 91       	lpm	r26, Z+
    2ad0:	25 91       	lpm	r18, Z+
    2ad2:	35 91       	lpm	r19, Z+
    2ad4:	45 91       	lpm	r20, Z+
    2ad6:	55 91       	lpm	r21, Z+
    2ad8:	ae f3       	brts	.-22     	; 0x2ac4 <__fp_powser+0x16>
    2ada:	ef 01       	movw	r28, r30
    2adc:	62 dd       	rcall	.-1340   	; 0x25a2 <__addsf3x>
    2ade:	fe 01       	movw	r30, r28
    2ae0:	97 01       	movw	r18, r14
    2ae2:	a8 01       	movw	r20, r16
    2ae4:	da 94       	dec	r13
    2ae6:	79 f7       	brne	.-34     	; 0x2ac6 <__fp_powser+0x18>
    2ae8:	df 90       	pop	r13
    2aea:	ef 90       	pop	r14
    2aec:	ff 90       	pop	r15
    2aee:	0f 91       	pop	r16
    2af0:	1f 91       	pop	r17
    2af2:	cf 91       	pop	r28
    2af4:	df 91       	pop	r29
    2af6:	08 95       	ret

00002af8 <inverse>:
    2af8:	9b 01       	movw	r18, r22
    2afa:	ac 01       	movw	r20, r24
    2afc:	60 e0       	ldi	r22, 0x00	; 0
    2afe:	70 e0       	ldi	r23, 0x00	; 0
    2b00:	80 e8       	ldi	r24, 0x80	; 128
    2b02:	9f e3       	ldi	r25, 0x3F	; 63
    2b04:	a5 cd       	rjmp	.-1206   	; 0x2650 <__divsf3>
    2b06:	9e ce       	rjmp	.-708    	; 0x2844 <__fp_inf>
    2b08:	ac c0       	rjmp	.+344    	; 0x2c62 <__fp_mpack>

00002b0a <ldexp>:
    2b0a:	cc de       	rcall	.-616    	; 0x28a4 <__fp_splitA>
    2b0c:	e8 f3       	brcs	.-6      	; 0x2b08 <inverse+0x10>
    2b0e:	99 23       	and	r25, r25
    2b10:	d9 f3       	breq	.-10     	; 0x2b08 <inverse+0x10>
    2b12:	94 0f       	add	r25, r20
    2b14:	51 1d       	adc	r21, r1
    2b16:	bb f3       	brvs	.-18     	; 0x2b06 <inverse+0xe>
    2b18:	91 50       	subi	r25, 0x01	; 1
    2b1a:	50 40       	sbci	r21, 0x00	; 0
    2b1c:	94 f0       	brlt	.+36     	; 0x2b42 <ldexp+0x38>
    2b1e:	59 f0       	breq	.+22     	; 0x2b36 <ldexp+0x2c>
    2b20:	88 23       	and	r24, r24
    2b22:	32 f0       	brmi	.+12     	; 0x2b30 <ldexp+0x26>
    2b24:	66 0f       	add	r22, r22
    2b26:	77 1f       	adc	r23, r23
    2b28:	88 1f       	adc	r24, r24
    2b2a:	91 50       	subi	r25, 0x01	; 1
    2b2c:	50 40       	sbci	r21, 0x00	; 0
    2b2e:	c1 f7       	brne	.-16     	; 0x2b20 <ldexp+0x16>
    2b30:	9e 3f       	cpi	r25, 0xFE	; 254
    2b32:	51 05       	cpc	r21, r1
    2b34:	44 f7       	brge	.-48     	; 0x2b06 <inverse+0xe>
    2b36:	88 0f       	add	r24, r24
    2b38:	91 1d       	adc	r25, r1
    2b3a:	96 95       	lsr	r25
    2b3c:	87 95       	ror	r24
    2b3e:	97 f9       	bld	r25, 7
    2b40:	08 95       	ret
    2b42:	5f 3f       	cpi	r21, 0xFF	; 255
    2b44:	ac f0       	brlt	.+42     	; 0x2b70 <ldexp+0x66>
    2b46:	98 3e       	cpi	r25, 0xE8	; 232
    2b48:	9c f0       	brlt	.+38     	; 0x2b70 <ldexp+0x66>
    2b4a:	bb 27       	eor	r27, r27
    2b4c:	86 95       	lsr	r24
    2b4e:	77 95       	ror	r23
    2b50:	67 95       	ror	r22
    2b52:	b7 95       	ror	r27
    2b54:	08 f4       	brcc	.+2      	; 0x2b58 <ldexp+0x4e>
    2b56:	b1 60       	ori	r27, 0x01	; 1
    2b58:	93 95       	inc	r25
    2b5a:	c1 f7       	brne	.-16     	; 0x2b4c <ldexp+0x42>
    2b5c:	bb 0f       	add	r27, r27
    2b5e:	58 f7       	brcc	.-42     	; 0x2b36 <ldexp+0x2c>
    2b60:	11 f4       	brne	.+4      	; 0x2b66 <ldexp+0x5c>
    2b62:	60 ff       	sbrs	r22, 0
    2b64:	e8 cf       	rjmp	.-48     	; 0x2b36 <ldexp+0x2c>
    2b66:	6f 5f       	subi	r22, 0xFF	; 255
    2b68:	7f 4f       	sbci	r23, 0xFF	; 255
    2b6a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b6e:	e3 cf       	rjmp	.-58     	; 0x2b36 <ldexp+0x2c>
    2b70:	b4 ce       	rjmp	.-664    	; 0x28da <__fp_szero>
    2b72:	0e f0       	brts	.+2      	; 0x2b76 <ldexp+0x6c>
    2b74:	76 c0       	rjmp	.+236    	; 0x2c62 <__fp_mpack>
    2b76:	6c ce       	rjmp	.-808    	; 0x2850 <__fp_nan>
    2b78:	68 94       	set
    2b7a:	64 ce       	rjmp	.-824    	; 0x2844 <__fp_inf>

00002b7c <log>:
    2b7c:	93 de       	rcall	.-730    	; 0x28a4 <__fp_splitA>
    2b7e:	c8 f3       	brcs	.-14     	; 0x2b72 <ldexp+0x68>
    2b80:	99 23       	and	r25, r25
    2b82:	d1 f3       	breq	.-12     	; 0x2b78 <ldexp+0x6e>
    2b84:	c6 f3       	brts	.-16     	; 0x2b76 <ldexp+0x6c>
    2b86:	df 93       	push	r29
    2b88:	cf 93       	push	r28
    2b8a:	1f 93       	push	r17
    2b8c:	0f 93       	push	r16
    2b8e:	ff 92       	push	r15
    2b90:	c9 2f       	mov	r28, r25
    2b92:	dd 27       	eor	r29, r29
    2b94:	88 23       	and	r24, r24
    2b96:	2a f0       	brmi	.+10     	; 0x2ba2 <log+0x26>
    2b98:	21 97       	sbiw	r28, 0x01	; 1
    2b9a:	66 0f       	add	r22, r22
    2b9c:	77 1f       	adc	r23, r23
    2b9e:	88 1f       	adc	r24, r24
    2ba0:	da f7       	brpl	.-10     	; 0x2b98 <log+0x1c>
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	40 e8       	ldi	r20, 0x80	; 128
    2ba8:	5f eb       	ldi	r21, 0xBF	; 191
    2baa:	9f e3       	ldi	r25, 0x3F	; 63
    2bac:	88 39       	cpi	r24, 0x98	; 152
    2bae:	20 f0       	brcs	.+8      	; 0x2bb8 <log+0x3c>
    2bb0:	80 3e       	cpi	r24, 0xE0	; 224
    2bb2:	30 f0       	brcs	.+12     	; 0x2bc0 <log+0x44>
    2bb4:	21 96       	adiw	r28, 0x01	; 1
    2bb6:	8f 77       	andi	r24, 0x7F	; 127
    2bb8:	e3 dc       	rcall	.-1594   	; 0x2580 <__addsf3>
    2bba:	ea ee       	ldi	r30, 0xEA	; 234
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	03 c0       	rjmp	.+6      	; 0x2bc6 <log+0x4a>
    2bc0:	df dc       	rcall	.-1602   	; 0x2580 <__addsf3>
    2bc2:	e7 e1       	ldi	r30, 0x17	; 23
    2bc4:	f1 e0       	ldi	r31, 0x01	; 1
    2bc6:	73 df       	rcall	.-282    	; 0x2aae <__fp_powser>
    2bc8:	8b 01       	movw	r16, r22
    2bca:	be 01       	movw	r22, r28
    2bcc:	ec 01       	movw	r28, r24
    2bce:	fb 2e       	mov	r15, r27
    2bd0:	6f 57       	subi	r22, 0x7F	; 127
    2bd2:	71 09       	sbc	r23, r1
    2bd4:	75 95       	asr	r23
    2bd6:	77 1f       	adc	r23, r23
    2bd8:	88 0b       	sbc	r24, r24
    2bda:	99 0b       	sbc	r25, r25
    2bdc:	d4 dd       	rcall	.-1112   	; 0x2786 <__floatsisf>
    2bde:	28 e1       	ldi	r18, 0x18	; 24
    2be0:	32 e7       	ldi	r19, 0x72	; 114
    2be2:	41 e3       	ldi	r20, 0x31	; 49
    2be4:	5f e3       	ldi	r21, 0x3F	; 63
    2be6:	8f de       	rcall	.-738    	; 0x2906 <__mulsf3x>
    2be8:	af 2d       	mov	r26, r15
    2bea:	98 01       	movw	r18, r16
    2bec:	ae 01       	movw	r20, r28
    2bee:	ff 90       	pop	r15
    2bf0:	0f 91       	pop	r16
    2bf2:	1f 91       	pop	r17
    2bf4:	cf 91       	pop	r28
    2bf6:	df 91       	pop	r29
    2bf8:	d4 dc       	rcall	.-1624   	; 0x25a2 <__addsf3x>
    2bfa:	3b ce       	rjmp	.-906    	; 0x2872 <__fp_round>

00002bfc <modf>:
    2bfc:	fa 01       	movw	r30, r20
    2bfe:	dc 01       	movw	r26, r24
    2c00:	aa 0f       	add	r26, r26
    2c02:	bb 1f       	adc	r27, r27
    2c04:	9b 01       	movw	r18, r22
    2c06:	ac 01       	movw	r20, r24
    2c08:	bf 57       	subi	r27, 0x7F	; 127
    2c0a:	28 f4       	brcc	.+10     	; 0x2c16 <modf+0x1a>
    2c0c:	22 27       	eor	r18, r18
    2c0e:	33 27       	eor	r19, r19
    2c10:	44 27       	eor	r20, r20
    2c12:	50 78       	andi	r21, 0x80	; 128
    2c14:	1f c0       	rjmp	.+62     	; 0x2c54 <modf+0x58>
    2c16:	b7 51       	subi	r27, 0x17	; 23
    2c18:	88 f4       	brcc	.+34     	; 0x2c3c <modf+0x40>
    2c1a:	ab 2f       	mov	r26, r27
    2c1c:	00 24       	eor	r0, r0
    2c1e:	46 95       	lsr	r20
    2c20:	37 95       	ror	r19
    2c22:	27 95       	ror	r18
    2c24:	01 1c       	adc	r0, r1
    2c26:	a3 95       	inc	r26
    2c28:	d2 f3       	brmi	.-12     	; 0x2c1e <modf+0x22>
    2c2a:	00 20       	and	r0, r0
    2c2c:	69 f0       	breq	.+26     	; 0x2c48 <modf+0x4c>
    2c2e:	22 0f       	add	r18, r18
    2c30:	33 1f       	adc	r19, r19
    2c32:	44 1f       	adc	r20, r20
    2c34:	b3 95       	inc	r27
    2c36:	da f3       	brmi	.-10     	; 0x2c2e <modf+0x32>
    2c38:	0d d0       	rcall	.+26     	; 0x2c54 <modf+0x58>
    2c3a:	a1 cc       	rjmp	.-1726   	; 0x257e <__subsf3>
    2c3c:	61 30       	cpi	r22, 0x01	; 1
    2c3e:	71 05       	cpc	r23, r1
    2c40:	a0 e8       	ldi	r26, 0x80	; 128
    2c42:	8a 07       	cpc	r24, r26
    2c44:	b9 46       	sbci	r27, 0x69	; 105
    2c46:	30 f4       	brcc	.+12     	; 0x2c54 <modf+0x58>
    2c48:	9b 01       	movw	r18, r22
    2c4a:	ac 01       	movw	r20, r24
    2c4c:	66 27       	eor	r22, r22
    2c4e:	77 27       	eor	r23, r23
    2c50:	88 27       	eor	r24, r24
    2c52:	90 78       	andi	r25, 0x80	; 128
    2c54:	30 96       	adiw	r30, 0x00	; 0
    2c56:	21 f0       	breq	.+8      	; 0x2c60 <modf+0x64>
    2c58:	20 83       	st	Z, r18
    2c5a:	31 83       	std	Z+1, r19	; 0x01
    2c5c:	42 83       	std	Z+2, r20	; 0x02
    2c5e:	53 83       	std	Z+3, r21	; 0x03
    2c60:	08 95       	ret

00002c62 <__fp_mpack>:
    2c62:	9f 3f       	cpi	r25, 0xFF	; 255
    2c64:	31 f0       	breq	.+12     	; 0x2c72 <__fp_mpack_finite+0xc>

00002c66 <__fp_mpack_finite>:
    2c66:	91 50       	subi	r25, 0x01	; 1
    2c68:	20 f4       	brcc	.+8      	; 0x2c72 <__fp_mpack_finite+0xc>
    2c6a:	87 95       	ror	r24
    2c6c:	77 95       	ror	r23
    2c6e:	67 95       	ror	r22
    2c70:	b7 95       	ror	r27
    2c72:	88 0f       	add	r24, r24
    2c74:	91 1d       	adc	r25, r1
    2c76:	96 95       	lsr	r25
    2c78:	87 95       	ror	r24
    2c7a:	97 f9       	bld	r25, 7
    2c7c:	08 95       	ret

00002c7e <__mulsi3>:
    2c7e:	db 01       	movw	r26, r22
    2c80:	8f 93       	push	r24
    2c82:	9f 93       	push	r25
    2c84:	52 d0       	rcall	.+164    	; 0x2d2a <__muluhisi3>
    2c86:	bf 91       	pop	r27
    2c88:	af 91       	pop	r26
    2c8a:	a2 9f       	mul	r26, r18
    2c8c:	80 0d       	add	r24, r0
    2c8e:	91 1d       	adc	r25, r1
    2c90:	a3 9f       	mul	r26, r19
    2c92:	90 0d       	add	r25, r0
    2c94:	b2 9f       	mul	r27, r18
    2c96:	90 0d       	add	r25, r0
    2c98:	11 24       	eor	r1, r1
    2c9a:	08 95       	ret

00002c9c <__divmodhi4>:
    2c9c:	97 fb       	bst	r25, 7
    2c9e:	07 2e       	mov	r0, r23
    2ca0:	16 f4       	brtc	.+4      	; 0x2ca6 <__divmodhi4+0xa>
    2ca2:	00 94       	com	r0
    2ca4:	06 d0       	rcall	.+12     	; 0x2cb2 <__divmodhi4_neg1>
    2ca6:	77 fd       	sbrc	r23, 7
    2ca8:	08 d0       	rcall	.+16     	; 0x2cba <__divmodhi4_neg2>
    2caa:	49 d0       	rcall	.+146    	; 0x2d3e <__udivmodhi4>
    2cac:	07 fc       	sbrc	r0, 7
    2cae:	05 d0       	rcall	.+10     	; 0x2cba <__divmodhi4_neg2>
    2cb0:	3e f4       	brtc	.+14     	; 0x2cc0 <__divmodhi4_exit>

00002cb2 <__divmodhi4_neg1>:
    2cb2:	90 95       	com	r25
    2cb4:	81 95       	neg	r24
    2cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb8:	08 95       	ret

00002cba <__divmodhi4_neg2>:
    2cba:	70 95       	com	r23
    2cbc:	61 95       	neg	r22
    2cbe:	7f 4f       	sbci	r23, 0xFF	; 255

00002cc0 <__divmodhi4_exit>:
    2cc0:	08 95       	ret

00002cc2 <__divmodsi4>:
    2cc2:	05 2e       	mov	r0, r21
    2cc4:	97 fb       	bst	r25, 7
    2cc6:	16 f4       	brtc	.+4      	; 0x2ccc <__divmodsi4+0xa>
    2cc8:	00 94       	com	r0
    2cca:	0f d0       	rcall	.+30     	; 0x2cea <__negsi2>
    2ccc:	57 fd       	sbrc	r21, 7
    2cce:	05 d0       	rcall	.+10     	; 0x2cda <__divmodsi4_neg2>
    2cd0:	4a d0       	rcall	.+148    	; 0x2d66 <__udivmodsi4>
    2cd2:	07 fc       	sbrc	r0, 7
    2cd4:	02 d0       	rcall	.+4      	; 0x2cda <__divmodsi4_neg2>
    2cd6:	46 f4       	brtc	.+16     	; 0x2ce8 <__divmodsi4_exit>
    2cd8:	08 c0       	rjmp	.+16     	; 0x2cea <__negsi2>

00002cda <__divmodsi4_neg2>:
    2cda:	50 95       	com	r21
    2cdc:	40 95       	com	r20
    2cde:	30 95       	com	r19
    2ce0:	21 95       	neg	r18
    2ce2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce4:	4f 4f       	sbci	r20, 0xFF	; 255
    2ce6:	5f 4f       	sbci	r21, 0xFF	; 255

00002ce8 <__divmodsi4_exit>:
    2ce8:	08 95       	ret

00002cea <__negsi2>:
    2cea:	90 95       	com	r25
    2cec:	80 95       	com	r24
    2cee:	70 95       	com	r23
    2cf0:	61 95       	neg	r22
    2cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    2cf4:	8f 4f       	sbci	r24, 0xFF	; 255
    2cf6:	9f 4f       	sbci	r25, 0xFF	; 255
    2cf8:	08 95       	ret

00002cfa <__tablejump2__>:
    2cfa:	ee 0f       	add	r30, r30
    2cfc:	ff 1f       	adc	r31, r31
    2cfe:	00 24       	eor	r0, r0
    2d00:	00 1c       	adc	r0, r0
    2d02:	0b be       	out	0x3b, r0	; 59
    2d04:	07 90       	elpm	r0, Z+
    2d06:	f6 91       	elpm	r31, Z
    2d08:	e0 2d       	mov	r30, r0
    2d0a:	09 94       	ijmp

00002d0c <__umulhisi3>:
    2d0c:	a2 9f       	mul	r26, r18
    2d0e:	b0 01       	movw	r22, r0
    2d10:	b3 9f       	mul	r27, r19
    2d12:	c0 01       	movw	r24, r0
    2d14:	a3 9f       	mul	r26, r19
    2d16:	70 0d       	add	r23, r0
    2d18:	81 1d       	adc	r24, r1
    2d1a:	11 24       	eor	r1, r1
    2d1c:	91 1d       	adc	r25, r1
    2d1e:	b2 9f       	mul	r27, r18
    2d20:	70 0d       	add	r23, r0
    2d22:	81 1d       	adc	r24, r1
    2d24:	11 24       	eor	r1, r1
    2d26:	91 1d       	adc	r25, r1
    2d28:	08 95       	ret

00002d2a <__muluhisi3>:
    2d2a:	f0 df       	rcall	.-32     	; 0x2d0c <__umulhisi3>
    2d2c:	a5 9f       	mul	r26, r21
    2d2e:	90 0d       	add	r25, r0
    2d30:	b4 9f       	mul	r27, r20
    2d32:	90 0d       	add	r25, r0
    2d34:	a4 9f       	mul	r26, r20
    2d36:	80 0d       	add	r24, r0
    2d38:	91 1d       	adc	r25, r1
    2d3a:	11 24       	eor	r1, r1
    2d3c:	08 95       	ret

00002d3e <__udivmodhi4>:
    2d3e:	aa 1b       	sub	r26, r26
    2d40:	bb 1b       	sub	r27, r27
    2d42:	51 e1       	ldi	r21, 0x11	; 17
    2d44:	07 c0       	rjmp	.+14     	; 0x2d54 <__udivmodhi4_ep>

00002d46 <__udivmodhi4_loop>:
    2d46:	aa 1f       	adc	r26, r26
    2d48:	bb 1f       	adc	r27, r27
    2d4a:	a6 17       	cp	r26, r22
    2d4c:	b7 07       	cpc	r27, r23
    2d4e:	10 f0       	brcs	.+4      	; 0x2d54 <__udivmodhi4_ep>
    2d50:	a6 1b       	sub	r26, r22
    2d52:	b7 0b       	sbc	r27, r23

00002d54 <__udivmodhi4_ep>:
    2d54:	88 1f       	adc	r24, r24
    2d56:	99 1f       	adc	r25, r25
    2d58:	5a 95       	dec	r21
    2d5a:	a9 f7       	brne	.-22     	; 0x2d46 <__udivmodhi4_loop>
    2d5c:	80 95       	com	r24
    2d5e:	90 95       	com	r25
    2d60:	bc 01       	movw	r22, r24
    2d62:	cd 01       	movw	r24, r26
    2d64:	08 95       	ret

00002d66 <__udivmodsi4>:
    2d66:	a1 e2       	ldi	r26, 0x21	; 33
    2d68:	1a 2e       	mov	r1, r26
    2d6a:	aa 1b       	sub	r26, r26
    2d6c:	bb 1b       	sub	r27, r27
    2d6e:	fd 01       	movw	r30, r26
    2d70:	0d c0       	rjmp	.+26     	; 0x2d8c <__udivmodsi4_ep>

00002d72 <__udivmodsi4_loop>:
    2d72:	aa 1f       	adc	r26, r26
    2d74:	bb 1f       	adc	r27, r27
    2d76:	ee 1f       	adc	r30, r30
    2d78:	ff 1f       	adc	r31, r31
    2d7a:	a2 17       	cp	r26, r18
    2d7c:	b3 07       	cpc	r27, r19
    2d7e:	e4 07       	cpc	r30, r20
    2d80:	f5 07       	cpc	r31, r21
    2d82:	20 f0       	brcs	.+8      	; 0x2d8c <__udivmodsi4_ep>
    2d84:	a2 1b       	sub	r26, r18
    2d86:	b3 0b       	sbc	r27, r19
    2d88:	e4 0b       	sbc	r30, r20
    2d8a:	f5 0b       	sbc	r31, r21

00002d8c <__udivmodsi4_ep>:
    2d8c:	66 1f       	adc	r22, r22
    2d8e:	77 1f       	adc	r23, r23
    2d90:	88 1f       	adc	r24, r24
    2d92:	99 1f       	adc	r25, r25
    2d94:	1a 94       	dec	r1
    2d96:	69 f7       	brne	.-38     	; 0x2d72 <__udivmodsi4_loop>
    2d98:	60 95       	com	r22
    2d9a:	70 95       	com	r23
    2d9c:	80 95       	com	r24
    2d9e:	90 95       	com	r25
    2da0:	9b 01       	movw	r18, r22
    2da2:	ac 01       	movw	r20, r24
    2da4:	bd 01       	movw	r22, r26
    2da6:	cf 01       	movw	r24, r30
    2da8:	08 95       	ret

00002daa <eeprom_read_block>:
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22

00002dae <eeprom_read_blraw>:
    2dae:	fc 01       	movw	r30, r24
    2db0:	e1 99       	sbic	0x1c, 1	; 28
    2db2:	fe cf       	rjmp	.-4      	; 0x2db0 <eeprom_read_blraw+0x2>
    2db4:	06 c0       	rjmp	.+12     	; 0x2dc2 <eeprom_read_blraw+0x14>
    2db6:	ff bb       	out	0x1f, r31	; 31
    2db8:	ee bb       	out	0x1e, r30	; 30
    2dba:	e0 9a       	sbi	0x1c, 0	; 28
    2dbc:	31 96       	adiw	r30, 0x01	; 1
    2dbe:	0d b2       	in	r0, 0x1d	; 29
    2dc0:	0d 92       	st	X+, r0
    2dc2:	41 50       	subi	r20, 0x01	; 1
    2dc4:	50 40       	sbci	r21, 0x00	; 0
    2dc6:	b8 f7       	brcc	.-18     	; 0x2db6 <eeprom_read_blraw+0x8>
    2dc8:	08 95       	ret

00002dca <eeprom_read_byte>:
    2dca:	e1 99       	sbic	0x1c, 1	; 28
    2dcc:	fe cf       	rjmp	.-4      	; 0x2dca <eeprom_read_byte>
    2dce:	9f bb       	out	0x1f, r25	; 31
    2dd0:	8e bb       	out	0x1e, r24	; 30
    2dd2:	e0 9a       	sbi	0x1c, 0	; 28
    2dd4:	99 27       	eor	r25, r25
    2dd6:	8d b3       	in	r24, 0x1d	; 29
    2dd8:	08 95       	ret

00002dda <eeprom_read_word>:
    2dda:	a8 e1       	ldi	r26, 0x18	; 24
    2ddc:	b0 e0       	ldi	r27, 0x00	; 0
    2dde:	42 e0       	ldi	r20, 0x02	; 2
    2de0:	50 e0       	ldi	r21, 0x00	; 0
    2de2:	e5 cf       	rjmp	.-54     	; 0x2dae <eeprom_read_blraw>

00002de4 <eeprom_update_block>:
    2de4:	dc 01       	movw	r26, r24
    2de6:	a4 0f       	add	r26, r20
    2de8:	b5 1f       	adc	r27, r21
    2dea:	41 50       	subi	r20, 0x01	; 1
    2dec:	50 40       	sbci	r21, 0x00	; 0
    2dee:	40 f0       	brcs	.+16     	; 0x2e00 <eeprom_update_block+0x1c>
    2df0:	cb 01       	movw	r24, r22
    2df2:	84 0f       	add	r24, r20
    2df4:	95 1f       	adc	r25, r21
    2df6:	2e 91       	ld	r18, -X
    2df8:	05 d0       	rcall	.+10     	; 0x2e04 <eeprom_update_r18>
    2dfa:	41 50       	subi	r20, 0x01	; 1
    2dfc:	50 40       	sbci	r21, 0x00	; 0
    2dfe:	d8 f7       	brcc	.-10     	; 0x2df6 <eeprom_update_block+0x12>
    2e00:	08 95       	ret

00002e02 <eeprom_update_byte>:
    2e02:	26 2f       	mov	r18, r22

00002e04 <eeprom_update_r18>:
    2e04:	e1 99       	sbic	0x1c, 1	; 28
    2e06:	fe cf       	rjmp	.-4      	; 0x2e04 <eeprom_update_r18>
    2e08:	9f bb       	out	0x1f, r25	; 31
    2e0a:	8e bb       	out	0x1e, r24	; 30
    2e0c:	e0 9a       	sbi	0x1c, 0	; 28
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	0d b2       	in	r0, 0x1d	; 29
    2e12:	02 16       	cp	r0, r18
    2e14:	31 f0       	breq	.+12     	; 0x2e22 <eeprom_update_r18+0x1e>
    2e16:	2d bb       	out	0x1d, r18	; 29
    2e18:	0f b6       	in	r0, 0x3f	; 63
    2e1a:	f8 94       	cli
    2e1c:	e2 9a       	sbi	0x1c, 2	; 28
    2e1e:	e1 9a       	sbi	0x1c, 1	; 28
    2e20:	0f be       	out	0x3f, r0	; 63
    2e22:	08 95       	ret

00002e24 <eeprom_update_dword>:
    2e24:	03 96       	adiw	r24, 0x03	; 3
    2e26:	27 2f       	mov	r18, r23
    2e28:	ed df       	rcall	.-38     	; 0x2e04 <eeprom_update_r18>
    2e2a:	eb df       	rcall	.-42     	; 0x2e02 <eeprom_update_byte>
    2e2c:	25 2f       	mov	r18, r21
    2e2e:	ea df       	rcall	.-44     	; 0x2e04 <eeprom_update_r18>
    2e30:	24 2f       	mov	r18, r20
    2e32:	e8 cf       	rjmp	.-48     	; 0x2e04 <eeprom_update_r18>

00002e34 <eeprom_update_word>:
    2e34:	01 96       	adiw	r24, 0x01	; 1
    2e36:	27 2f       	mov	r18, r23
    2e38:	e5 df       	rcall	.-54     	; 0x2e04 <eeprom_update_r18>
    2e3a:	e3 cf       	rjmp	.-58     	; 0x2e02 <eeprom_update_byte>

00002e3c <eeprom_write_block>:
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	02 c0       	rjmp	.+4      	; 0x2e46 <eeprom_write_block+0xa>
    2e42:	2d 91       	ld	r18, X+
    2e44:	05 d0       	rcall	.+10     	; 0x2e50 <eeprom_write_r18>
    2e46:	41 50       	subi	r20, 0x01	; 1
    2e48:	50 40       	sbci	r21, 0x00	; 0
    2e4a:	d8 f7       	brcc	.-10     	; 0x2e42 <eeprom_write_block+0x6>
    2e4c:	08 95       	ret

00002e4e <eeprom_write_byte>:
    2e4e:	26 2f       	mov	r18, r22

00002e50 <eeprom_write_r18>:
    2e50:	e1 99       	sbic	0x1c, 1	; 28
    2e52:	fe cf       	rjmp	.-4      	; 0x2e50 <eeprom_write_r18>
    2e54:	9f bb       	out	0x1f, r25	; 31
    2e56:	8e bb       	out	0x1e, r24	; 30
    2e58:	2d bb       	out	0x1d, r18	; 29
    2e5a:	0f b6       	in	r0, 0x3f	; 63
    2e5c:	f8 94       	cli
    2e5e:	e2 9a       	sbi	0x1c, 2	; 28
    2e60:	e1 9a       	sbi	0x1c, 1	; 28
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	01 96       	adiw	r24, 0x01	; 1
    2e66:	08 95       	ret

00002e68 <eeprom_write_dword>:
    2e68:	24 2f       	mov	r18, r20
    2e6a:	f2 df       	rcall	.-28     	; 0x2e50 <eeprom_write_r18>
    2e6c:	25 2f       	mov	r18, r21
    2e6e:	f0 df       	rcall	.-32     	; 0x2e50 <eeprom_write_r18>
    2e70:	00 c0       	rjmp	.+0      	; 0x2e72 <eeprom_write_word>

00002e72 <eeprom_write_word>:
    2e72:	ed df       	rcall	.-38     	; 0x2e4e <eeprom_write_byte>
    2e74:	27 2f       	mov	r18, r23
    2e76:	ec cf       	rjmp	.-40     	; 0x2e50 <eeprom_write_r18>

00002e78 <_exit>:
    2e78:	f8 94       	cli

00002e7a <__stop_program>:
    2e7a:	ff cf       	rjmp	.-2      	; 0x2e7a <__stop_program>
