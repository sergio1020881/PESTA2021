
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000031ea  0000327e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010b  00800136  00800136  000032b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000032b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000032e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006b8  00000000  00000000  00003320  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006326  00000000  00000000  000039d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016e5  00000000  00000000  00009cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000383e  00000000  00000000  0000b3e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e5c  00000000  00000000  0000ec24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001178  00000000  00000000  0000fa80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004437  00000000  00000000  00010bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d8  00000000  00000000  0001502f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b9 c0       	rjmp	.+370    	; 0x174 <__ctors_end>
       2:	00 00       	nop
       4:	6a c2       	rjmp	.+1236   	; 0x4da <__vector_1>
       6:	00 00       	nop
       8:	72 c2       	rjmp	.+1252   	; 0x4ee <__vector_2>
       a:	00 00       	nop
       c:	7a c2       	rjmp	.+1268   	; 0x502 <__vector_3>
       e:	00 00       	nop
      10:	82 c2       	rjmp	.+1284   	; 0x516 <__vector_4>
      12:	00 00       	nop
      14:	8a c2       	rjmp	.+1300   	; 0x52a <__vector_5>
      16:	00 00       	nop
      18:	92 c2       	rjmp	.+1316   	; 0x53e <__vector_6>
      1a:	00 00       	nop
      1c:	9a c2       	rjmp	.+1332   	; 0x552 <__vector_7>
      1e:	00 00       	nop
      20:	a2 c2       	rjmp	.+1348   	; 0x566 <__vector_8>
      22:	00 00       	nop
      24:	c6 c0       	rjmp	.+396    	; 0x1b2 <__bad_interrupt>
      26:	00 00       	nop
      28:	23 c5       	rjmp	.+2630   	; 0xa70 <__vector_10>
      2a:	00 00       	nop
      2c:	f9 c4       	rjmp	.+2546   	; 0xa20 <__vector_11>
      2e:	00 00       	nop
      30:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__vector_12>
      34:	ff c4       	rjmp	.+2558   	; 0xa34 <__vector_13>
      36:	00 00       	nop
      38:	11 c5       	rjmp	.+2594   	; 0xa5c <__vector_14>
      3a:	00 00       	nop
      3c:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__vector_15>
      40:	e5 c4       	rjmp	.+2506   	; 0xa0c <__vector_16>
      42:	00 00       	nop
      44:	b6 c0       	rjmp	.+364    	; 0x1b2 <__bad_interrupt>
      46:	00 00       	nop
      48:	b4 c0       	rjmp	.+360    	; 0x1b2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b2 c0       	rjmp	.+356    	; 0x1b2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	b0 c0       	rjmp	.+352    	; 0x1b2 <__bad_interrupt>
      52:	00 00       	nop
      54:	ae c0       	rjmp	.+348    	; 0x1b2 <__bad_interrupt>
      56:	00 00       	nop
      58:	ac c0       	rjmp	.+344    	; 0x1b2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	aa c0       	rjmp	.+340    	; 0x1b2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f3 c4       	rjmp	.+2534   	; 0xa48 <__vector_24>
      62:	00 00       	nop
      64:	0f c5       	rjmp	.+2590   	; 0xa84 <__vector_25>
      66:	00 00       	nop
      68:	17 c5       	rjmp	.+2606   	; 0xa98 <__vector_26>
      6a:	00 00       	nop
      6c:	1f c5       	rjmp	.+2622   	; 0xaac <__vector_27>
      6e:	00 00       	nop
      70:	27 c5       	rjmp	.+2638   	; 0xac0 <__vector_28>
      72:	00 00       	nop
      74:	2f c5       	rjmp	.+2654   	; 0xad4 <__vector_29>
      76:	00 00       	nop
      78:	9c c0       	rjmp	.+312    	; 0x1b2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9a c0       	rjmp	.+308    	; 0x1b2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	98 c0       	rjmp	.+304    	; 0x1b2 <__bad_interrupt>
      82:	00 00       	nop
      84:	96 c0       	rjmp	.+300    	; 0x1b2 <__bad_interrupt>
      86:	00 00       	nop
      88:	94 c0       	rjmp	.+296    	; 0x1b2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	11 01       	movw	r2, r2
      8e:	2d 01       	movw	r4, r26
      90:	49 01       	movw	r8, r18
      92:	65 01       	movw	r12, r10
      94:	81 01       	movw	r16, r2
      96:	9c 01       	movw	r18, r24
      98:	b7 01       	movw	r22, r14
      9a:	d2 01       	movw	r26, r4
      9c:	f8 01       	movw	r30, r16
      9e:	fc 01       	movw	r30, r24
      a0:	00 02       	muls	r16, r16
      a2:	04 02       	muls	r16, r20
      a4:	08 02       	muls	r16, r24
      a6:	0c 02       	muls	r16, r28
      a8:	10 02       	muls	r17, r16
      aa:	14 02       	muls	r17, r20
      ac:	23 02       	muls	r18, r19
      ae:	27 02       	muls	r18, r23
      b0:	2b 02       	muls	r18, r27
      b2:	2f 02       	muls	r18, r31
      b4:	33 02       	muls	r19, r19
      b6:	37 02       	muls	r19, r23
      b8:	3b 02       	muls	r19, r27
      ba:	3f 02       	muls	r19, r31
      bc:	27 04       	cpc	r2, r7
      be:	2b 04       	cpc	r2, r11
      c0:	2f 04       	cpc	r2, r15
      c2:	33 04       	cpc	r3, r3
      c4:	37 04       	cpc	r3, r7
      c6:	3e 04       	cpc	r3, r14
      c8:	45 04       	cpc	r4, r5
      ca:	4c 04       	cpc	r4, r12
      cc:	50 04       	cpc	r5, r0
      ce:	57 04       	cpc	r5, r7
      d0:	5e 04       	cpc	r5, r14
      d2:	65 04       	cpc	r6, r5
      d4:	69 04       	cpc	r6, r9
      d6:	70 04       	cpc	r7, r0
      d8:	77 04       	cpc	r7, r7
      da:	93 04       	cpc	r9, r3
      dc:	97 04       	cpc	r9, r7
      de:	9b 04       	cpc	r9, r11
      e0:	9f 04       	cpc	r9, r15
      e2:	a5 04       	cpc	r10, r5
      e4:	a9 04       	cpc	r10, r9
      e6:	ad 04       	cpc	r10, r13
      e8:	b1 04       	cpc	r11, r1
      ea:	ba 04       	cpc	r11, r10
      ec:	be 04       	cpc	r11, r14
      ee:	c2 04       	cpc	r12, r2
      f0:	cb 04       	cpc	r12, r11
      f2:	07 63       	ori	r16, 0x37	; 55
      f4:	42 36       	cpi	r20, 0x62	; 98
      f6:	b7 9b       	sbis	0x16, 7	; 22
      f8:	d8 a7       	std	Y+40, r29	; 0x28
      fa:	1a 39       	cpi	r17, 0x9A	; 154
      fc:	68 56       	subi	r22, 0x68	; 104
      fe:	18 ae       	std	Y+56, r1	; 0x38
     100:	ba ab       	std	Y+50, r27	; 0x32
     102:	55 8c       	ldd	r5, Z+29	; 0x1d
     104:	1d 3c       	cpi	r17, 0xCD	; 205
     106:	b7 cc       	rjmp	.-1682   	; 0xfffffa76 <__eeprom_end+0xff7efa76>
     108:	57 63       	ori	r21, 0x37	; 55
     10a:	bd 6d       	ori	r27, 0xDD	; 221
     10c:	ed fd       	.word	0xfded	; ????
     10e:	75 3e       	cpi	r23, 0xE5	; 229
     110:	f6 17       	cp	r31, r22
     112:	72 31       	cpi	r23, 0x12	; 18
     114:	bf 00       	.word	0x00bf	; ????
     116:	00 00       	nop
     118:	80 3f       	cpi	r24, 0xF0	; 240
     11a:	08 00       	.word	0x0008	; ????
     11c:	00 00       	nop
     11e:	be 92       	st	-X, r11
     120:	24 49       	sbci	r18, 0x94	; 148
     122:	12 3e       	cpi	r17, 0xE2	; 226
     124:	ab aa       	std	Y+51, r10	; 0x33
     126:	aa 2a       	or	r10, r26
     128:	be cd       	rjmp	.-1156   	; 0xfffffca6 <__eeprom_end+0xff7efca6>
     12a:	cc cc       	rjmp	.-1640   	; 0xfffffac4 <__eeprom_end+0xff7efac4>
     12c:	4c 3e       	cpi	r20, 0xEC	; 236
     12e:	00 00       	nop
     130:	00 80       	ld	r0, Z
     132:	be ab       	std	Y+54, r27	; 0x36
     134:	aa aa       	std	Y+50, r10	; 0x32
     136:	aa 3e       	cpi	r26, 0xEA	; 234
     138:	00 00       	nop
     13a:	00 00       	nop
     13c:	bf 00       	.word	0x00bf	; ????
     13e:	00 00       	nop
     140:	80 3f       	cpi	r24, 0xF0	; 240
     142:	00 00       	nop
     144:	00 00       	nop
     146:	00 08       	sbc	r0, r0
     148:	41 78       	andi	r20, 0x81	; 129
     14a:	d3 bb       	out	0x13, r29	; 19
     14c:	43 87       	std	Z+11, r20	; 0x0b
     14e:	d1 13       	cpse	r29, r17
     150:	3d 19       	sub	r19, r13
     152:	0e 3c       	cpi	r16, 0xCE	; 206
     154:	c3 bd       	out	0x23, r28	; 35
     156:	42 82       	std	Z+2, r4	; 0x02
     158:	ad 2b       	or	r26, r29
     15a:	3e 68       	ori	r19, 0x8E	; 142
     15c:	ec 82       	std	Y+4, r14	; 0x04
     15e:	76 be       	out	0x36, r7	; 54
     160:	d9 8f       	std	Y+25, r29	; 0x19
     162:	e1 a9       	ldd	r30, Z+49	; 0x31
     164:	3e 4c       	sbci	r19, 0xCE	; 206
     166:	80 ef       	ldi	r24, 0xF0	; 240
     168:	ff be       	out	0x3f, r15	; 63
     16a:	01 c4       	rjmp	.+2050   	; 0x96e <TIMER_COUNTER1enable+0x156>
     16c:	ff 7f       	andi	r31, 0xFF	; 255
     16e:	3f 00       	.word	0x003f	; ????
     170:	00 00       	nop
	...

00000174 <__ctors_end>:
     174:	11 24       	eor	r1, r1
     176:	1f be       	out	0x3f, r1	; 63
     178:	cf ef       	ldi	r28, 0xFF	; 255
     17a:	d0 e1       	ldi	r29, 0x10	; 16
     17c:	de bf       	out	0x3e, r29	; 62
     17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
     180:	11 e0       	ldi	r17, 0x01	; 1
     182:	a0 e0       	ldi	r26, 0x00	; 0
     184:	b1 e0       	ldi	r27, 0x01	; 1
     186:	ea ee       	ldi	r30, 0xEA	; 234
     188:	f1 e3       	ldi	r31, 0x31	; 49
     18a:	00 e0       	ldi	r16, 0x00	; 0
     18c:	0b bf       	out	0x3b, r16	; 59
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x14>
     190:	07 90       	elpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a6 33       	cpi	r26, 0x36	; 54
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0x10>

0000019a <__do_clear_bss>:
     19a:	22 e0       	ldi	r18, 0x02	; 2
     19c:	a6 e3       	ldi	r26, 0x36	; 54
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a1 34       	cpi	r26, 0x41	; 65
     1a6:	b2 07       	cpc	r27, r18
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <main>
     1ae:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <_exit>

000001b2 <__bad_interrupt>:
     1b2:	26 cf       	rjmp	.-436    	; 0x0 <__vectors>

000001b4 <INTERRUPT_reset_status>:
	return interrupt;
}
uint8_t INTERRUPT_reset_status(void)
{
	uint8_t reset, ret=0;
	reset=(MCU_Control_Status_Register & MCU_Control_Status_Register_Mask);
     1b4:	84 b7       	in	r24, 0x34	; 52
	switch(reset){
     1b6:	8f 71       	andi	r24, 0x1F	; 31
     1b8:	84 30       	cpi	r24, 0x04	; 4
     1ba:	a9 f0       	breq	.+42     	; 0x1e6 <INTERRUPT_reset_status+0x32>
     1bc:	28 f4       	brcc	.+10     	; 0x1c8 <INTERRUPT_reset_status+0x14>
     1be:	81 30       	cpi	r24, 0x01	; 1
     1c0:	41 f0       	breq	.+16     	; 0x1d2 <INTERRUPT_reset_status+0x1e>
     1c2:	82 30       	cpi	r24, 0x02	; 2
     1c4:	59 f0       	breq	.+22     	; 0x1dc <INTERRUPT_reset_status+0x28>
     1c6:	1e c0       	rjmp	.+60     	; 0x204 <INTERRUPT_reset_status+0x50>
     1c8:	88 30       	cpi	r24, 0x08	; 8
     1ca:	91 f0       	breq	.+36     	; 0x1f0 <INTERRUPT_reset_status+0x3c>
     1cc:	80 31       	cpi	r24, 0x10	; 16
     1ce:	a9 f0       	breq	.+42     	; 0x1fa <INTERRUPT_reset_status+0x46>
     1d0:	19 c0       	rjmp	.+50     	; 0x204 <INTERRUPT_reset_status+0x50>
		case 1: // Power-On Reset Flag
			ret=0;
			MCU_Control_Status_Register &= ~(1<<PORF);
     1d2:	84 b7       	in	r24, 0x34	; 52
     1d4:	8e 7f       	andi	r24, 0xFE	; 254
     1d6:	84 bf       	out	0x34, r24	; 52
{
	uint8_t reset, ret=0;
	reset=(MCU_Control_Status_Register & MCU_Control_Status_Register_Mask);
	switch(reset){
		case 1: // Power-On Reset Flag
			ret=0;
     1d8:	80 e0       	ldi	r24, 0x00	; 0
			MCU_Control_Status_Register &= ~(1<<PORF);
			break;
     1da:	08 95       	ret
		case 2: // External Reset Flag
			MCU_Control_Status_Register &= ~(1<<EXTRF);
     1dc:	84 b7       	in	r24, 0x34	; 52
     1de:	8d 7f       	andi	r24, 0xFD	; 253
     1e0:	84 bf       	out	0x34, r24	; 52
			ret=1;
     1e2:	81 e0       	ldi	r24, 0x01	; 1
			break;
     1e4:	08 95       	ret
		case 4: // Brown-out Reset Flag
			MCU_Control_Status_Register &= ~(1<<BORF);
     1e6:	84 b7       	in	r24, 0x34	; 52
     1e8:	8b 7f       	andi	r24, 0xFB	; 251
     1ea:	84 bf       	out	0x34, r24	; 52
			ret=2;
     1ec:	82 e0       	ldi	r24, 0x02	; 2
			break;
     1ee:	08 95       	ret
		case 8: // Watchdog Reset Flag
			MCU_Control_Status_Register &= ~(1<<WDRF);
     1f0:	84 b7       	in	r24, 0x34	; 52
     1f2:	87 7f       	andi	r24, 0xF7	; 247
     1f4:	84 bf       	out	0x34, r24	; 52
			ret=3;
     1f6:	83 e0       	ldi	r24, 0x03	; 3
			break;
     1f8:	08 95       	ret
		case 16: // JTAG Reset Flag
			MCU_Control_Status_Register &= ~(1<<JTRF);
     1fa:	84 b7       	in	r24, 0x34	; 52
     1fc:	8f 7e       	andi	r24, 0xEF	; 239
     1fe:	84 bf       	out	0x34, r24	; 52
			ret=4;
     200:	84 e0       	ldi	r24, 0x04	; 4
			break;
     202:	08 95       	ret
		default: // clear all status
			MCU_Control_Status_Register &= ~(MCU_Control_Status_Register_Mask);
     204:	84 b7       	in	r24, 0x34	; 52
     206:	80 7e       	andi	r24, 0xE0	; 224
     208:	84 bf       	out	0x34, r24	; 52
	interrupt.reset_status=INTERRUPT_reset_status;
	return interrupt;
}
uint8_t INTERRUPT_reset_status(void)
{
	uint8_t reset, ret=0;
     20a:	80 e0       	ldi	r24, 0x00	; 0
		default: // clear all status
			MCU_Control_Status_Register &= ~(MCU_Control_Status_Register_Mask);
			break;
	}
	return ret;
}
     20c:	08 95       	ret

0000020e <INTERRUPT_set>:
void INTERRUPT_set(uint8_t channel, uint8_t sense)
{
	switch( channel ){
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	88 30       	cpi	r24, 0x08	; 8
     212:	91 05       	cpc	r25, r1
     214:	08 f0       	brcs	.+2      	; 0x218 <INTERRUPT_set+0xa>
     216:	e1 c0       	rjmp	.+450    	; 0x3da <INTERRUPT_set+0x1cc>
     218:	fc 01       	movw	r30, r24
     21a:	ea 5b       	subi	r30, 0xBA	; 186
     21c:	ff 4f       	sbci	r31, 0xFF	; 255
     21e:	0c 94 34 18 	jmp	0x3068	; 0x3068 <__tablejump2__>
		case 0: 
			External_Interrupt_Mask_Register &= ~(1<<INT0);
     222:	89 b7       	in	r24, 0x39	; 57
     224:	8e 7f       	andi	r24, 0xFE	; 254
     226:	89 bf       	out	0x39, r24	; 57
			External_Interrupt_Control_Register_A &= ~((1<<ISC01) | (1<<ISC00));
     228:	ea e6       	ldi	r30, 0x6A	; 106
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	8c 7f       	andi	r24, 0xFC	; 252
     230:	80 83       	st	Z, r24
			switch(sense){
     232:	62 30       	cpi	r22, 0x02	; 2
     234:	19 f0       	breq	.+6      	; 0x23c <INTERRUPT_set+0x2e>
     236:	63 30       	cpi	r22, 0x03	; 3
     238:	39 f0       	breq	.+14     	; 0x248 <INTERRUPT_set+0x3a>
     23a:	0b c0       	rjmp	.+22     	; 0x252 <INTERRUPT_set+0x44>
				case 0: // The low level of INTn generates an interrupt request.
				case 1: // The low level of INTn generates an interrupt request.
					break;
				case 2: // The falling edge of INTn generates asynchronously an interrupt request.
					External_Interrupt_Control_Register_A |= (1<<ISC01);
     23c:	ea e6       	ldi	r30, 0x6A	; 106
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	82 60       	ori	r24, 0x02	; 2
     244:	80 83       	st	Z, r24
					break;
     246:	05 c0       	rjmp	.+10     	; 0x252 <INTERRUPT_set+0x44>
				case 3: // The rising edge of INTn generates asynchronously an interrupt request.
					External_Interrupt_Control_Register_A |= ((1<<ISC01) | (1<<ISC00));
     248:	ea e6       	ldi	r30, 0x6A	; 106
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	80 81       	ld	r24, Z
     24e:	83 60       	ori	r24, 0x03	; 3
     250:	80 83       	st	Z, r24
					break;
				default: // The low level of INTn generates an interrupt request.
					break;
			}
			External_Interrupt_Mask_Register |= (1<<INT0);
     252:	89 b7       	in	r24, 0x39	; 57
     254:	81 60       	ori	r24, 0x01	; 1
     256:	89 bf       	out	0x39, r24	; 57
			break;
     258:	08 95       	ret
		case 1:
			External_Interrupt_Mask_Register &= ~(1<<INT1);
     25a:	89 b7       	in	r24, 0x39	; 57
     25c:	8d 7f       	andi	r24, 0xFD	; 253
     25e:	89 bf       	out	0x39, r24	; 57
			External_Interrupt_Control_Register_A &= ~((1<<ISC11) | (1<<ISC10));
     260:	ea e6       	ldi	r30, 0x6A	; 106
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	80 81       	ld	r24, Z
     266:	83 7f       	andi	r24, 0xF3	; 243
     268:	80 83       	st	Z, r24
			switch(sense){
     26a:	62 30       	cpi	r22, 0x02	; 2
     26c:	19 f0       	breq	.+6      	; 0x274 <INTERRUPT_set+0x66>
     26e:	63 30       	cpi	r22, 0x03	; 3
     270:	39 f0       	breq	.+14     	; 0x280 <INTERRUPT_set+0x72>
     272:	0b c0       	rjmp	.+22     	; 0x28a <INTERRUPT_set+0x7c>
				case 0: // The low level of INTn generates an interrupt request.
				case 1: // The low level of INTn generates an interrupt request.
					break;
				case 2: // The falling edge of INTn generates asynchronously an interrupt request.
					External_Interrupt_Control_Register_A |= (1<<ISC11);
     274:	ea e6       	ldi	r30, 0x6A	; 106
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	80 81       	ld	r24, Z
     27a:	88 60       	ori	r24, 0x08	; 8
     27c:	80 83       	st	Z, r24
					break;
     27e:	05 c0       	rjmp	.+10     	; 0x28a <INTERRUPT_set+0x7c>
				case 3: // The rising edge of INTn generates asynchronously an interrupt request.
					External_Interrupt_Control_Register_A |= ((1<<ISC11) | (1<<ISC10));
     280:	ea e6       	ldi	r30, 0x6A	; 106
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	80 81       	ld	r24, Z
     286:	8c 60       	ori	r24, 0x0C	; 12
     288:	80 83       	st	Z, r24
					break;
				default: // The low level of INTn generates an interrupt request.
					break;
			}
			External_Interrupt_Mask_Register |= (1<<INT1);
     28a:	89 b7       	in	r24, 0x39	; 57
     28c:	82 60       	ori	r24, 0x02	; 2
     28e:	89 bf       	out	0x39, r24	; 57
			break;
     290:	08 95       	ret
		case 2:
			External_Interrupt_Mask_Register &= ~(1<<INT2);
     292:	89 b7       	in	r24, 0x39	; 57
     294:	8b 7f       	andi	r24, 0xFB	; 251
     296:	89 bf       	out	0x39, r24	; 57
			External_Interrupt_Control_Register_A &= ~((1<<ISC21) | (1<<ISC20));
     298:	ea e6       	ldi	r30, 0x6A	; 106
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	80 81       	ld	r24, Z
     29e:	8f 7c       	andi	r24, 0xCF	; 207
     2a0:	80 83       	st	Z, r24
			switch(sense){
     2a2:	62 30       	cpi	r22, 0x02	; 2
     2a4:	19 f0       	breq	.+6      	; 0x2ac <INTERRUPT_set+0x9e>
     2a6:	63 30       	cpi	r22, 0x03	; 3
     2a8:	39 f0       	breq	.+14     	; 0x2b8 <INTERRUPT_set+0xaa>
     2aa:	0b c0       	rjmp	.+22     	; 0x2c2 <INTERRUPT_set+0xb4>
				case 0: // The low level of INTn generates an interrupt request.
				case 1: // The low level of INTn generates an interrupt request.
					break;
				case 2: // The falling edge of INTn generates asynchronously an interrupt request.
					External_Interrupt_Control_Register_A |= (1<<ISC21);
     2ac:	ea e6       	ldi	r30, 0x6A	; 106
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	80 81       	ld	r24, Z
     2b2:	80 62       	ori	r24, 0x20	; 32
     2b4:	80 83       	st	Z, r24
					break;
     2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <INTERRUPT_set+0xb4>
				case 3: // The rising edge of INTn generates asynchronously an interrupt request.
					External_Interrupt_Control_Register_A |= ((1<<ISC21) | (1<<ISC20));
     2b8:	ea e6       	ldi	r30, 0x6A	; 106
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	80 81       	ld	r24, Z
     2be:	80 63       	ori	r24, 0x30	; 48
     2c0:	80 83       	st	Z, r24
					break;
				default: // The low level of INTn generates an interrupt request.
					break;
			}
			External_Interrupt_Mask_Register |= (1<<INT2);
     2c2:	89 b7       	in	r24, 0x39	; 57
     2c4:	84 60       	ori	r24, 0x04	; 4
     2c6:	89 bf       	out	0x39, r24	; 57
			break;
     2c8:	08 95       	ret
		case 3:
			External_Interrupt_Mask_Register &= ~(1<<INT3);
     2ca:	89 b7       	in	r24, 0x39	; 57
     2cc:	87 7f       	andi	r24, 0xF7	; 247
     2ce:	89 bf       	out	0x39, r24	; 57
			External_Interrupt_Control_Register_A &= ~((1<<ISC31) | (1<<ISC30));
     2d0:	ea e6       	ldi	r30, 0x6A	; 106
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	80 81       	ld	r24, Z
     2d6:	8f 73       	andi	r24, 0x3F	; 63
     2d8:	80 83       	st	Z, r24
			switch(sense){
     2da:	62 30       	cpi	r22, 0x02	; 2
     2dc:	19 f0       	breq	.+6      	; 0x2e4 <INTERRUPT_set+0xd6>
     2de:	63 30       	cpi	r22, 0x03	; 3
     2e0:	39 f0       	breq	.+14     	; 0x2f0 <INTERRUPT_set+0xe2>
     2e2:	0b c0       	rjmp	.+22     	; 0x2fa <INTERRUPT_set+0xec>
				case 0: // The low level of INTn generates an interrupt request.
				case 1: // The low level of INTn generates an interrupt request.
					break;
				case 2: // The falling edge of INTn generates asynchronously an interrupt request.
					External_Interrupt_Control_Register_A |= (1<<ISC31);
     2e4:	ea e6       	ldi	r30, 0x6A	; 106
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	80 81       	ld	r24, Z
     2ea:	80 68       	ori	r24, 0x80	; 128
     2ec:	80 83       	st	Z, r24
					break;
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <INTERRUPT_set+0xec>
				case 3: // The rising edge of INTn generates asynchronously an interrupt request.
					External_Interrupt_Control_Register_A |= ((1<<ISC31) | (1<<ISC30));
     2f0:	ea e6       	ldi	r30, 0x6A	; 106
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	80 6c       	ori	r24, 0xC0	; 192
     2f8:	80 83       	st	Z, r24
					break;
				default: // The low level of INTn generates an interrupt request.
					break;
			}
			External_Interrupt_Mask_Register |= (1<<INT3);
     2fa:	89 b7       	in	r24, 0x39	; 57
     2fc:	88 60       	ori	r24, 0x08	; 8
     2fe:	89 bf       	out	0x39, r24	; 57
			break;
     300:	08 95       	ret
		case 4:
			External_Interrupt_Mask_Register &= ~(1<<INT4);
     302:	89 b7       	in	r24, 0x39	; 57
     304:	8f 7e       	andi	r24, 0xEF	; 239
     306:	89 bf       	out	0x39, r24	; 57
			External_Interrupt_Control_Register_B &= ~((1<<ISC41) | (1<<ISC40));
     308:	8a b7       	in	r24, 0x3a	; 58
     30a:	8c 7f       	andi	r24, 0xFC	; 252
     30c:	8a bf       	out	0x3a, r24	; 58
			switch(sense){
     30e:	62 30       	cpi	r22, 0x02	; 2
     310:	41 f0       	breq	.+16     	; 0x322 <INTERRUPT_set+0x114>
     312:	63 30       	cpi	r22, 0x03	; 3
     314:	51 f0       	breq	.+20     	; 0x32a <INTERRUPT_set+0x11c>
     316:	61 30       	cpi	r22, 0x01	; 1
     318:	59 f4       	brne	.+22     	; 0x330 <INTERRUPT_set+0x122>
				case 0: // The low level of INTn generates an interrupt request.
					break;
				case 1: // Any logical change on INTn generates an interrupt request
					External_Interrupt_Control_Register_B |= (1<<ISC40);
     31a:	8a b7       	in	r24, 0x3a	; 58
     31c:	81 60       	ori	r24, 0x01	; 1
     31e:	8a bf       	out	0x3a, r24	; 58
					break;
     320:	07 c0       	rjmp	.+14     	; 0x330 <INTERRUPT_set+0x122>
				case 2: // The falling edge between two samples of INTn generates an interrupt request.
					External_Interrupt_Control_Register_B |= (1<<ISC41);
     322:	8a b7       	in	r24, 0x3a	; 58
     324:	82 60       	ori	r24, 0x02	; 2
     326:	8a bf       	out	0x3a, r24	; 58
					break;
     328:	03 c0       	rjmp	.+6      	; 0x330 <INTERRUPT_set+0x122>
				case 3: // The rising edge between two samples of INTn generates an interrupt request.
					External_Interrupt_Control_Register_B |= ((1<<ISC41) | (1<<ISC40));
     32a:	8a b7       	in	r24, 0x3a	; 58
     32c:	83 60       	ori	r24, 0x03	; 3
     32e:	8a bf       	out	0x3a, r24	; 58
					break;
				default: // The low level of INTn generates an interrupt request.
					break;
			}
			External_Interrupt_Mask_Register |= (1<<INT4);
     330:	89 b7       	in	r24, 0x39	; 57
     332:	80 61       	ori	r24, 0x10	; 16
     334:	89 bf       	out	0x39, r24	; 57
			break;
     336:	08 95       	ret
		case 5:
			External_Interrupt_Mask_Register &= ~(1<<INT5);
     338:	89 b7       	in	r24, 0x39	; 57
     33a:	8f 7d       	andi	r24, 0xDF	; 223
     33c:	89 bf       	out	0x39, r24	; 57
			External_Interrupt_Control_Register_B &= ~((1<<ISC51) | (1<<ISC50));
     33e:	8a b7       	in	r24, 0x3a	; 58
     340:	83 7f       	andi	r24, 0xF3	; 243
     342:	8a bf       	out	0x3a, r24	; 58
			switch(sense){
     344:	62 30       	cpi	r22, 0x02	; 2
     346:	41 f0       	breq	.+16     	; 0x358 <INTERRUPT_set+0x14a>
     348:	63 30       	cpi	r22, 0x03	; 3
     34a:	51 f0       	breq	.+20     	; 0x360 <INTERRUPT_set+0x152>
     34c:	61 30       	cpi	r22, 0x01	; 1
     34e:	59 f4       	brne	.+22     	; 0x366 <INTERRUPT_set+0x158>
				case 0: // The low level of INTn generates an interrupt request.
					break;
				case 1: // Any logical change on INTn generates an interrupt request
					External_Interrupt_Control_Register_B |= (1<<ISC50);
     350:	8a b7       	in	r24, 0x3a	; 58
     352:	84 60       	ori	r24, 0x04	; 4
     354:	8a bf       	out	0x3a, r24	; 58
					break;
     356:	07 c0       	rjmp	.+14     	; 0x366 <INTERRUPT_set+0x158>
				case 2: // The falling edge between two samples of INTn generates an interrupt request.
					External_Interrupt_Control_Register_B |= (1<<ISC51);
     358:	8a b7       	in	r24, 0x3a	; 58
     35a:	88 60       	ori	r24, 0x08	; 8
     35c:	8a bf       	out	0x3a, r24	; 58
					break;
     35e:	03 c0       	rjmp	.+6      	; 0x366 <INTERRUPT_set+0x158>
				case 3: // The rising edge between two samples of INTn generates an interrupt request.
					External_Interrupt_Control_Register_B |= ((1<<ISC51) | (1<<ISC50));
     360:	8a b7       	in	r24, 0x3a	; 58
     362:	8c 60       	ori	r24, 0x0C	; 12
     364:	8a bf       	out	0x3a, r24	; 58
					break;
				default: // The low level of INTn generates an interrupt request.
					break;
			}
			External_Interrupt_Mask_Register |= (1<<INT5);
     366:	89 b7       	in	r24, 0x39	; 57
     368:	80 62       	ori	r24, 0x20	; 32
     36a:	89 bf       	out	0x39, r24	; 57
			break;
     36c:	08 95       	ret
		case 6:
			External_Interrupt_Mask_Register &= ~(1<<INT6);
     36e:	89 b7       	in	r24, 0x39	; 57
     370:	8f 7b       	andi	r24, 0xBF	; 191
     372:	89 bf       	out	0x39, r24	; 57
			External_Interrupt_Control_Register_B &= ~((1<<ISC61) | (1<<ISC60));
     374:	8a b7       	in	r24, 0x3a	; 58
     376:	8f 7c       	andi	r24, 0xCF	; 207
     378:	8a bf       	out	0x3a, r24	; 58
			switch(sense){
     37a:	62 30       	cpi	r22, 0x02	; 2
     37c:	41 f0       	breq	.+16     	; 0x38e <INTERRUPT_set+0x180>
     37e:	63 30       	cpi	r22, 0x03	; 3
     380:	51 f0       	breq	.+20     	; 0x396 <INTERRUPT_set+0x188>
     382:	61 30       	cpi	r22, 0x01	; 1
     384:	59 f4       	brne	.+22     	; 0x39c <INTERRUPT_set+0x18e>
				case 0: // The low level of INTn generates an interrupt request.
					break;
				case 1: // Any logical change on INTn generates an interrupt request
					External_Interrupt_Control_Register_B |= (1<<ISC60);
     386:	8a b7       	in	r24, 0x3a	; 58
     388:	80 61       	ori	r24, 0x10	; 16
     38a:	8a bf       	out	0x3a, r24	; 58
					break;
     38c:	07 c0       	rjmp	.+14     	; 0x39c <INTERRUPT_set+0x18e>
				case 2: // The falling edge between two samples of INTn generates an interrupt request.
					External_Interrupt_Control_Register_B |= (1<<ISC61);
     38e:	8a b7       	in	r24, 0x3a	; 58
     390:	80 62       	ori	r24, 0x20	; 32
     392:	8a bf       	out	0x3a, r24	; 58
					break;
     394:	03 c0       	rjmp	.+6      	; 0x39c <INTERRUPT_set+0x18e>
				case 3: // The rising edge between two samples of INTn generates an interrupt request.
					External_Interrupt_Control_Register_B |= ((1<<ISC61) | (1<<ISC60));
     396:	8a b7       	in	r24, 0x3a	; 58
     398:	80 63       	ori	r24, 0x30	; 48
     39a:	8a bf       	out	0x3a, r24	; 58
					break;
				default: // The low level of INTn generates an interrupt request.
					break;
			}
			External_Interrupt_Mask_Register |= (1<<INT6);
     39c:	89 b7       	in	r24, 0x39	; 57
     39e:	80 64       	ori	r24, 0x40	; 64
     3a0:	89 bf       	out	0x39, r24	; 57
			break;
     3a2:	08 95       	ret
		case 7:
			External_Interrupt_Mask_Register &= ~(1<<INT7);
     3a4:	89 b7       	in	r24, 0x39	; 57
     3a6:	8f 77       	andi	r24, 0x7F	; 127
     3a8:	89 bf       	out	0x39, r24	; 57
			External_Interrupt_Control_Register_B &= ~((1<<ISC71) | (1<<ISC70));
     3aa:	8a b7       	in	r24, 0x3a	; 58
     3ac:	8f 73       	andi	r24, 0x3F	; 63
     3ae:	8a bf       	out	0x3a, r24	; 58
			switch(sense){
     3b0:	62 30       	cpi	r22, 0x02	; 2
     3b2:	41 f0       	breq	.+16     	; 0x3c4 <INTERRUPT_set+0x1b6>
     3b4:	63 30       	cpi	r22, 0x03	; 3
     3b6:	51 f0       	breq	.+20     	; 0x3cc <INTERRUPT_set+0x1be>
     3b8:	61 30       	cpi	r22, 0x01	; 1
     3ba:	59 f4       	brne	.+22     	; 0x3d2 <INTERRUPT_set+0x1c4>
				case 0: // The low level of INTn generates an interrupt request.
					break;
				case 1: // Any logical change on INTn generates an interrupt request
					External_Interrupt_Control_Register_B |= (1<<ISC70);
     3bc:	8a b7       	in	r24, 0x3a	; 58
     3be:	80 64       	ori	r24, 0x40	; 64
     3c0:	8a bf       	out	0x3a, r24	; 58
					break;
     3c2:	07 c0       	rjmp	.+14     	; 0x3d2 <INTERRUPT_set+0x1c4>
				case 2: // The falling edge between two samples of INTn generates an interrupt request.
					External_Interrupt_Control_Register_B |= (1<<ISC71);
     3c4:	8a b7       	in	r24, 0x3a	; 58
     3c6:	80 68       	ori	r24, 0x80	; 128
     3c8:	8a bf       	out	0x3a, r24	; 58
					break;
     3ca:	03 c0       	rjmp	.+6      	; 0x3d2 <INTERRUPT_set+0x1c4>
				case 3: // The rising edge between two samples of INTn generates an interrupt request.
					External_Interrupt_Control_Register_B |= ((1<<ISC71) | (1<<ISC70));
     3cc:	8a b7       	in	r24, 0x3a	; 58
     3ce:	80 6c       	ori	r24, 0xC0	; 192
     3d0:	8a bf       	out	0x3a, r24	; 58
					break;
				default: // The low level of INTn generates an interrupt request.
					break;
			}
			External_Interrupt_Mask_Register |= (1<<INT7);
     3d2:	89 b7       	in	r24, 0x39	; 57
     3d4:	80 68       	ori	r24, 0x80	; 128
     3d6:	89 bf       	out	0x39, r24	; 57
			break;
     3d8:	08 95       	ret
		default:
			External_Interrupt_Mask_Register = 0X00;
     3da:	19 be       	out	0x39, r1	; 57
     3dc:	08 95       	ret

000003de <INTERRUPT_off>:
			break;
	}
}
void INTERRUPT_off(uint8_t channel)
{
	switch( channel ){
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	88 30       	cpi	r24, 0x08	; 8
     3e2:	91 05       	cpc	r25, r1
     3e4:	28 f5       	brcc	.+74     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     3e6:	fc 01       	movw	r30, r24
     3e8:	e2 5b       	subi	r30, 0xB2	; 178
     3ea:	ff 4f       	sbci	r31, 0xFF	; 255
     3ec:	0c 94 34 18 	jmp	0x3068	; 0x3068 <__tablejump2__>
		case 0: // disable
			External_Interrupt_Mask_Register &= ~(1<<INT0);
     3f0:	89 b7       	in	r24, 0x39	; 57
     3f2:	8e 7f       	andi	r24, 0xFE	; 254
     3f4:	89 bf       	out	0x39, r24	; 57
			break;
     3f6:	08 95       	ret
		case 1: // disable
			External_Interrupt_Mask_Register &= ~(1<<INT1);
     3f8:	89 b7       	in	r24, 0x39	; 57
     3fa:	8d 7f       	andi	r24, 0xFD	; 253
     3fc:	89 bf       	out	0x39, r24	; 57
			break;
     3fe:	08 95       	ret
		case 2: // disable
			External_Interrupt_Mask_Register &= ~(1<<INT2);
     400:	89 b7       	in	r24, 0x39	; 57
     402:	8b 7f       	andi	r24, 0xFB	; 251
     404:	89 bf       	out	0x39, r24	; 57
			break;
     406:	08 95       	ret
		case 3: // disable
			External_Interrupt_Mask_Register &= ~(1<<INT3);
     408:	89 b7       	in	r24, 0x39	; 57
     40a:	87 7f       	andi	r24, 0xF7	; 247
     40c:	89 bf       	out	0x39, r24	; 57
			break;
     40e:	08 95       	ret
		case 4: // disable
			External_Interrupt_Mask_Register &= ~(1<<INT4);
     410:	89 b7       	in	r24, 0x39	; 57
     412:	8f 7e       	andi	r24, 0xEF	; 239
     414:	89 bf       	out	0x39, r24	; 57
			break;
     416:	08 95       	ret
		case 5: // disable
			External_Interrupt_Mask_Register &= ~(1<<INT5);
     418:	89 b7       	in	r24, 0x39	; 57
     41a:	8f 7d       	andi	r24, 0xDF	; 223
     41c:	89 bf       	out	0x39, r24	; 57
			break;
     41e:	08 95       	ret
		case 6: // disable
			External_Interrupt_Mask_Register &= ~(1<<INT6);
     420:	89 b7       	in	r24, 0x39	; 57
     422:	8f 7b       	andi	r24, 0xBF	; 191
     424:	89 bf       	out	0x39, r24	; 57
			break;
     426:	08 95       	ret
		case 7: // disable
			External_Interrupt_Mask_Register &= ~(1<<INT7);
     428:	89 b7       	in	r24, 0x39	; 57
     42a:	8f 77       	andi	r24, 0x7F	; 127
     42c:	89 bf       	out	0x39, r24	; 57
			break;
     42e:	08 95       	ret
		default: // all disable
			External_Interrupt_Mask_Register = 0X00;
     430:	19 be       	out	0x39, r1	; 57
     432:	08 95       	ret

00000434 <INTERRUPT_on>:
			break;
	}
}
void INTERRUPT_on(uint8_t channel)
{
	switch( channel ){
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	88 30       	cpi	r24, 0x08	; 8
     438:	91 05       	cpc	r25, r1
     43a:	28 f5       	brcc	.+74     	; 0x486 <INTERRUPT_on+0x52>
     43c:	fc 01       	movw	r30, r24
     43e:	ea 5a       	subi	r30, 0xAA	; 170
     440:	ff 4f       	sbci	r31, 0xFF	; 255
     442:	0c 94 34 18 	jmp	0x3068	; 0x3068 <__tablejump2__>
		case 0:
			External_Interrupt_Mask_Register |= (1<<INT0);
     446:	89 b7       	in	r24, 0x39	; 57
     448:	81 60       	ori	r24, 0x01	; 1
     44a:	89 bf       	out	0x39, r24	; 57
			break;
     44c:	08 95       	ret
		case 1:
			External_Interrupt_Mask_Register |= (1<<INT1);
     44e:	89 b7       	in	r24, 0x39	; 57
     450:	82 60       	ori	r24, 0x02	; 2
     452:	89 bf       	out	0x39, r24	; 57
			break;
     454:	08 95       	ret
		case 2:
			External_Interrupt_Mask_Register |= (1<<INT2);
     456:	89 b7       	in	r24, 0x39	; 57
     458:	84 60       	ori	r24, 0x04	; 4
     45a:	89 bf       	out	0x39, r24	; 57
			break;
     45c:	08 95       	ret
		case 3:
			External_Interrupt_Mask_Register |= (1<<INT3);
     45e:	89 b7       	in	r24, 0x39	; 57
     460:	88 60       	ori	r24, 0x08	; 8
     462:	89 bf       	out	0x39, r24	; 57
			break;
     464:	08 95       	ret
		case 4:
			External_Interrupt_Mask_Register |= (1<<INT4);
     466:	89 b7       	in	r24, 0x39	; 57
     468:	80 61       	ori	r24, 0x10	; 16
     46a:	89 bf       	out	0x39, r24	; 57
			break;
     46c:	08 95       	ret
		case 5:
			External_Interrupt_Mask_Register |= (1<<INT5);
     46e:	89 b7       	in	r24, 0x39	; 57
     470:	80 62       	ori	r24, 0x20	; 32
     472:	89 bf       	out	0x39, r24	; 57
			break;
     474:	08 95       	ret
		case 6:
			External_Interrupt_Mask_Register |= (1<<INT6);
     476:	89 b7       	in	r24, 0x39	; 57
     478:	80 64       	ori	r24, 0x40	; 64
     47a:	89 bf       	out	0x39, r24	; 57
			break;
     47c:	08 95       	ret
		case 7:
			External_Interrupt_Mask_Register |= (1<<INT7);
     47e:	89 b7       	in	r24, 0x39	; 57
     480:	80 68       	ori	r24, 0x80	; 128
     482:	89 bf       	out	0x39, r24	; 57
			break;
     484:	08 95       	ret
		default: // all disable
			External_Interrupt_Mask_Register = 0X00;
     486:	19 be       	out	0x39, r1	; 57
     488:	08 95       	ret

0000048a <INTERRUPTenable>:
/***Procedure & Function***/
INTERRUPT INTERRUPTenable(void)
/***
Setup blank
***/
{
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	28 97       	sbiw	r28, 0x08	; 8
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	f8 94       	cli
     498:	de bf       	out	0x3e, r29	; 62
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	cd bf       	out	0x3d, r28	; 61
	INTERRUPT interrupt;
	External_Interrupt_Mask_Register = 0X00;
     49e:	19 be       	out	0x39, r1	; 57
	/******/
	interrupt.set=INTERRUPT_set;
	interrupt.off=INTERRUPT_off;
	interrupt.on=INTERRUPT_on;
	interrupt.reset_status=INTERRUPT_reset_status;
	return interrupt;
     4a0:	27 e0       	ldi	r18, 0x07	; 7
     4a2:	31 e0       	ldi	r19, 0x01	; 1
     4a4:	3a 83       	std	Y+2, r19	; 0x02
     4a6:	29 83       	std	Y+1, r18	; 0x01
     4a8:	4f ee       	ldi	r20, 0xEF	; 239
     4aa:	51 e0       	ldi	r21, 0x01	; 1
     4ac:	5c 83       	std	Y+4, r21	; 0x04
     4ae:	4b 83       	std	Y+3, r20	; 0x03
     4b0:	6a e1       	ldi	r22, 0x1A	; 26
     4b2:	72 e0       	ldi	r23, 0x02	; 2
     4b4:	7e 83       	std	Y+6, r23	; 0x06
     4b6:	6d 83       	std	Y+5, r22	; 0x05
     4b8:	8a ed       	ldi	r24, 0xDA	; 218
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	98 87       	std	Y+8, r25	; 0x08
     4be:	8f 83       	std	Y+7, r24	; 0x07
     4c0:	3a 81       	ldd	r19, Y+2	; 0x02
     4c2:	5c 81       	ldd	r21, Y+4	; 0x04
     4c4:	7e 81       	ldd	r23, Y+6	; 0x06
}
     4c6:	98 85       	ldd	r25, Y+8	; 0x08
     4c8:	28 96       	adiw	r28, 0x08	; 8
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	08 95       	ret

000004da <__vector_1>:
			break;
	}
}
/***Interrupt***/
// cross out the ones being used and redefine in main
ISR(INT0_vect){ }
     4da:	1f 92       	push	r1
     4dc:	0f 92       	push	r0
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	0f 92       	push	r0
     4e2:	11 24       	eor	r1, r1
     4e4:	0f 90       	pop	r0
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	0f 90       	pop	r0
     4ea:	1f 90       	pop	r1
     4ec:	18 95       	reti

000004ee <__vector_2>:
ISR(INT1_vect){ }
     4ee:	1f 92       	push	r1
     4f0:	0f 92       	push	r0
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	0f 92       	push	r0
     4f6:	11 24       	eor	r1, r1
     4f8:	0f 90       	pop	r0
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	0f 90       	pop	r0
     4fe:	1f 90       	pop	r1
     500:	18 95       	reti

00000502 <__vector_3>:
ISR(INT2_vect){ }
     502:	1f 92       	push	r1
     504:	0f 92       	push	r0
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	0f 92       	push	r0
     50a:	11 24       	eor	r1, r1
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <__vector_4>:
ISR(INT3_vect){ }
     516:	1f 92       	push	r1
     518:	0f 92       	push	r0
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	0f 92       	push	r0
     51e:	11 24       	eor	r1, r1
     520:	0f 90       	pop	r0
     522:	0f be       	out	0x3f, r0	; 63
     524:	0f 90       	pop	r0
     526:	1f 90       	pop	r1
     528:	18 95       	reti

0000052a <__vector_5>:
ISR(INT4_vect){ }
     52a:	1f 92       	push	r1
     52c:	0f 92       	push	r0
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	0f 92       	push	r0
     532:	11 24       	eor	r1, r1
     534:	0f 90       	pop	r0
     536:	0f be       	out	0x3f, r0	; 63
     538:	0f 90       	pop	r0
     53a:	1f 90       	pop	r1
     53c:	18 95       	reti

0000053e <__vector_6>:
ISR(INT5_vect){ }
     53e:	1f 92       	push	r1
     540:	0f 92       	push	r0
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	0f 92       	push	r0
     546:	11 24       	eor	r1, r1
     548:	0f 90       	pop	r0
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	0f 90       	pop	r0
     54e:	1f 90       	pop	r1
     550:	18 95       	reti

00000552 <__vector_7>:
ISR(INT6_vect){ }
     552:	1f 92       	push	r1
     554:	0f 92       	push	r0
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	0f 92       	push	r0
     55a:	11 24       	eor	r1, r1
     55c:	0f 90       	pop	r0
     55e:	0f be       	out	0x3f, r0	; 63
     560:	0f 90       	pop	r0
     562:	1f 90       	pop	r1
     564:	18 95       	reti

00000566 <__vector_8>:
ISR(INT7_vect){ }
     566:	1f 92       	push	r1
     568:	0f 92       	push	r0
     56a:	0f b6       	in	r0, 0x3f	; 63
     56c:	0f 92       	push	r0
     56e:	11 24       	eor	r1, r1
     570:	0f 90       	pop	r0
     572:	0f be       	out	0x3f, r0	; 63
     574:	0f 90       	pop	r0
     576:	1f 90       	pop	r1
     578:	18 95       	reti

0000057a <TIMER_COUNTER0_start>:
	timer3.compareB=TIMER_COUNTER3_compareB;
	timer3.compareC=TIMER_COUNTER3_compareC;
	timer3.start=TIMER_COUNTER3_start;
	timer3.stop=TIMER_COUNTER3_stop;
	return timer3;
}
     57a:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <timer0_state>
     57e:	21 11       	cpse	r18, r1
     580:	41 c0       	rjmp	.+130    	; 0x604 <TIMER_COUNTER0_start+0x8a>
     582:	23 b7       	in	r18, 0x33	; 51
     584:	28 7f       	andi	r18, 0xF8	; 248
     586:	23 bf       	out	0x33, r18	; 51
     588:	80 34       	cpi	r24, 0x40	; 64
     58a:	91 05       	cpc	r25, r1
     58c:	11 f1       	breq	.+68     	; 0x5d2 <TIMER_COUNTER0_start+0x58>
     58e:	48 f4       	brcc	.+18     	; 0x5a2 <TIMER_COUNTER0_start+0x28>
     590:	88 30       	cpi	r24, 0x08	; 8
     592:	91 05       	cpc	r25, r1
     594:	b1 f0       	breq	.+44     	; 0x5c2 <TIMER_COUNTER0_start+0x48>
     596:	80 32       	cpi	r24, 0x20	; 32
     598:	91 05       	cpc	r25, r1
     59a:	b9 f0       	breq	.+46     	; 0x5ca <TIMER_COUNTER0_start+0x50>
     59c:	01 97       	sbiw	r24, 0x01	; 1
     59e:	49 f5       	brne	.+82     	; 0x5f2 <TIMER_COUNTER0_start+0x78>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <TIMER_COUNTER0_start+0x40>
     5a2:	81 15       	cp	r24, r1
     5a4:	21 e0       	ldi	r18, 0x01	; 1
     5a6:	92 07       	cpc	r25, r18
     5a8:	e1 f0       	breq	.+56     	; 0x5e2 <TIMER_COUNTER0_start+0x68>
     5aa:	81 15       	cp	r24, r1
     5ac:	24 e0       	ldi	r18, 0x04	; 4
     5ae:	92 07       	cpc	r25, r18
     5b0:	e1 f0       	breq	.+56     	; 0x5ea <TIMER_COUNTER0_start+0x70>
     5b2:	80 38       	cpi	r24, 0x80	; 128
     5b4:	91 05       	cpc	r25, r1
     5b6:	e9 f4       	brne	.+58     	; 0x5f2 <TIMER_COUNTER0_start+0x78>
     5b8:	10 c0       	rjmp	.+32     	; 0x5da <TIMER_COUNTER0_start+0x60>
     5ba:	83 b7       	in	r24, 0x33	; 51
     5bc:	81 60       	ori	r24, 0x01	; 1
     5be:	83 bf       	out	0x33, r24	; 51
     5c0:	1b c0       	rjmp	.+54     	; 0x5f8 <TIMER_COUNTER0_start+0x7e>
     5c2:	83 b7       	in	r24, 0x33	; 51
     5c4:	82 60       	ori	r24, 0x02	; 2
     5c6:	83 bf       	out	0x33, r24	; 51
     5c8:	17 c0       	rjmp	.+46     	; 0x5f8 <TIMER_COUNTER0_start+0x7e>
     5ca:	83 b7       	in	r24, 0x33	; 51
     5cc:	83 60       	ori	r24, 0x03	; 3
     5ce:	83 bf       	out	0x33, r24	; 51
     5d0:	13 c0       	rjmp	.+38     	; 0x5f8 <TIMER_COUNTER0_start+0x7e>
     5d2:	83 b7       	in	r24, 0x33	; 51
     5d4:	84 60       	ori	r24, 0x04	; 4
     5d6:	83 bf       	out	0x33, r24	; 51
     5d8:	0f c0       	rjmp	.+30     	; 0x5f8 <TIMER_COUNTER0_start+0x7e>
     5da:	83 b7       	in	r24, 0x33	; 51
     5dc:	85 60       	ori	r24, 0x05	; 5
     5de:	83 bf       	out	0x33, r24	; 51
     5e0:	0b c0       	rjmp	.+22     	; 0x5f8 <TIMER_COUNTER0_start+0x7e>
     5e2:	83 b7       	in	r24, 0x33	; 51
     5e4:	86 60       	ori	r24, 0x06	; 6
     5e6:	83 bf       	out	0x33, r24	; 51
     5e8:	07 c0       	rjmp	.+14     	; 0x5f8 <TIMER_COUNTER0_start+0x7e>
     5ea:	83 b7       	in	r24, 0x33	; 51
     5ec:	87 60       	ori	r24, 0x07	; 7
     5ee:	83 bf       	out	0x33, r24	; 51
     5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <TIMER_COUNTER0_start+0x7e>
     5f2:	83 b7       	in	r24, 0x33	; 51
     5f4:	87 60       	ori	r24, 0x07	; 7
     5f6:	83 bf       	out	0x33, r24	; 51
     5f8:	8f b7       	in	r24, 0x3f	; 63
     5fa:	80 68       	ori	r24, 0x80	; 128
     5fc:	8f bf       	out	0x3f, r24	; 63
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timer0_state>
     604:	08 95       	ret

00000606 <TIMER_COUNTER0_compoutmode>:
     606:	93 b7       	in	r25, 0x33	; 51
     608:	9f 7c       	andi	r25, 0xCF	; 207
     60a:	93 bf       	out	0x33, r25	; 51
     60c:	82 30       	cpi	r24, 0x02	; 2
     60e:	51 f0       	breq	.+20     	; 0x624 <TIMER_COUNTER0_compoutmode+0x1e>
     610:	83 30       	cpi	r24, 0x03	; 3
     612:	71 f0       	breq	.+28     	; 0x630 <TIMER_COUNTER0_compoutmode+0x2a>
     614:	81 30       	cpi	r24, 0x01	; 1
     616:	89 f4       	brne	.+34     	; 0x63a <TIMER_COUNTER0_compoutmode+0x34>
     618:	80 e1       	ldi	r24, 0x10	; 16
     61a:	87 bb       	out	0x17, r24	; 23
     61c:	83 b7       	in	r24, 0x33	; 51
     61e:	80 61       	ori	r24, 0x10	; 16
     620:	83 bf       	out	0x33, r24	; 51
     622:	08 95       	ret
     624:	80 e1       	ldi	r24, 0x10	; 16
     626:	87 bb       	out	0x17, r24	; 23
     628:	83 b7       	in	r24, 0x33	; 51
     62a:	80 62       	ori	r24, 0x20	; 32
     62c:	83 bf       	out	0x33, r24	; 51
     62e:	08 95       	ret
     630:	80 e1       	ldi	r24, 0x10	; 16
     632:	87 bb       	out	0x17, r24	; 23
     634:	83 b7       	in	r24, 0x33	; 51
     636:	80 63       	ori	r24, 0x30	; 48
     638:	83 bf       	out	0x33, r24	; 51
     63a:	08 95       	ret

0000063c <TIMER_COUNTER0_compare>:
     63c:	81 bf       	out	0x31, r24	; 49
     63e:	08 95       	ret

00000640 <TIMER_COUNTER0_stop>:
     640:	83 b7       	in	r24, 0x33	; 51
     642:	88 7f       	andi	r24, 0xF8	; 248
     644:	83 bf       	out	0x33, r24	; 51
     646:	12 be       	out	0x32, r1	; 50
     648:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <timer0_state>
     64c:	08 95       	ret

0000064e <TIMER_COUNTER1_start>:
     64e:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <timer1_state>
     652:	21 11       	cpse	r18, r1
     654:	41 c0       	rjmp	.+130    	; 0x6d8 <TIMER_COUNTER1_start+0x8a>
     656:	2e b5       	in	r18, 0x2e	; 46
     658:	28 7f       	andi	r18, 0xF8	; 248
     65a:	2e bd       	out	0x2e, r18	; 46
     65c:	88 30       	cpi	r24, 0x08	; 8
     65e:	91 05       	cpc	r25, r1
     660:	d1 f0       	breq	.+52     	; 0x696 <TIMER_COUNTER1_start+0x48>
     662:	48 f4       	brcc	.+18     	; 0x676 <TIMER_COUNTER1_start+0x28>
     664:	83 30       	cpi	r24, 0x03	; 3
     666:	91 05       	cpc	r25, r1
     668:	31 f1       	breq	.+76     	; 0x6b6 <TIMER_COUNTER1_start+0x68>
     66a:	85 30       	cpi	r24, 0x05	; 5
     66c:	91 05       	cpc	r25, r1
     66e:	39 f1       	breq	.+78     	; 0x6be <TIMER_COUNTER1_start+0x70>
     670:	01 97       	sbiw	r24, 0x01	; 1
     672:	49 f5       	brne	.+82     	; 0x6c6 <TIMER_COUNTER1_start+0x78>
     674:	0c c0       	rjmp	.+24     	; 0x68e <TIMER_COUNTER1_start+0x40>
     676:	81 15       	cp	r24, r1
     678:	21 e0       	ldi	r18, 0x01	; 1
     67a:	92 07       	cpc	r25, r18
     67c:	a1 f0       	breq	.+40     	; 0x6a6 <TIMER_COUNTER1_start+0x58>
     67e:	81 15       	cp	r24, r1
     680:	24 e0       	ldi	r18, 0x04	; 4
     682:	92 07       	cpc	r25, r18
     684:	a1 f0       	breq	.+40     	; 0x6ae <TIMER_COUNTER1_start+0x60>
     686:	80 34       	cpi	r24, 0x40	; 64
     688:	91 05       	cpc	r25, r1
     68a:	e9 f4       	brne	.+58     	; 0x6c6 <TIMER_COUNTER1_start+0x78>
     68c:	08 c0       	rjmp	.+16     	; 0x69e <TIMER_COUNTER1_start+0x50>
     68e:	8e b5       	in	r24, 0x2e	; 46
     690:	81 60       	ori	r24, 0x01	; 1
     692:	8e bd       	out	0x2e, r24	; 46
     694:	1b c0       	rjmp	.+54     	; 0x6cc <TIMER_COUNTER1_start+0x7e>
     696:	8e b5       	in	r24, 0x2e	; 46
     698:	82 60       	ori	r24, 0x02	; 2
     69a:	8e bd       	out	0x2e, r24	; 46
     69c:	17 c0       	rjmp	.+46     	; 0x6cc <TIMER_COUNTER1_start+0x7e>
     69e:	8e b5       	in	r24, 0x2e	; 46
     6a0:	83 60       	ori	r24, 0x03	; 3
     6a2:	8e bd       	out	0x2e, r24	; 46
     6a4:	13 c0       	rjmp	.+38     	; 0x6cc <TIMER_COUNTER1_start+0x7e>
     6a6:	8e b5       	in	r24, 0x2e	; 46
     6a8:	84 60       	ori	r24, 0x04	; 4
     6aa:	8e bd       	out	0x2e, r24	; 46
     6ac:	0f c0       	rjmp	.+30     	; 0x6cc <TIMER_COUNTER1_start+0x7e>
     6ae:	8e b5       	in	r24, 0x2e	; 46
     6b0:	85 60       	ori	r24, 0x05	; 5
     6b2:	8e bd       	out	0x2e, r24	; 46
     6b4:	0b c0       	rjmp	.+22     	; 0x6cc <TIMER_COUNTER1_start+0x7e>
     6b6:	8e b5       	in	r24, 0x2e	; 46
     6b8:	86 60       	ori	r24, 0x06	; 6
     6ba:	8e bd       	out	0x2e, r24	; 46
     6bc:	07 c0       	rjmp	.+14     	; 0x6cc <TIMER_COUNTER1_start+0x7e>
     6be:	8e b5       	in	r24, 0x2e	; 46
     6c0:	87 60       	ori	r24, 0x07	; 7
     6c2:	8e bd       	out	0x2e, r24	; 46
     6c4:	03 c0       	rjmp	.+6      	; 0x6cc <TIMER_COUNTER1_start+0x7e>
     6c6:	8e b5       	in	r24, 0x2e	; 46
     6c8:	85 60       	ori	r24, 0x05	; 5
     6ca:	8e bd       	out	0x2e, r24	; 46
     6cc:	8f b7       	in	r24, 0x3f	; 63
     6ce:	80 68       	ori	r24, 0x80	; 128
     6d0:	8f bf       	out	0x3f, r24	; 63
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <timer1_state>
     6d8:	08 95       	ret

000006da <TIMER_COUNTER1_compoutmodeA>:
     6da:	9f b5       	in	r25, 0x2f	; 47
     6dc:	9f 73       	andi	r25, 0x3F	; 63
     6de:	9f bd       	out	0x2f, r25	; 47
     6e0:	82 30       	cpi	r24, 0x02	; 2
     6e2:	49 f0       	breq	.+18     	; 0x6f6 <TIMER_COUNTER1_compoutmodeA+0x1c>
     6e4:	83 30       	cpi	r24, 0x03	; 3
     6e6:	61 f0       	breq	.+24     	; 0x700 <TIMER_COUNTER1_compoutmodeA+0x26>
     6e8:	81 30       	cpi	r24, 0x01	; 1
     6ea:	71 f4       	brne	.+28     	; 0x708 <TIMER_COUNTER1_compoutmodeA+0x2e>
     6ec:	bd 9a       	sbi	0x17, 5	; 23
     6ee:	8f b5       	in	r24, 0x2f	; 47
     6f0:	80 64       	ori	r24, 0x40	; 64
     6f2:	8f bd       	out	0x2f, r24	; 47
     6f4:	08 95       	ret
     6f6:	bd 9a       	sbi	0x17, 5	; 23
     6f8:	8f b5       	in	r24, 0x2f	; 47
     6fa:	80 68       	ori	r24, 0x80	; 128
     6fc:	8f bd       	out	0x2f, r24	; 47
     6fe:	08 95       	ret
     700:	bd 9a       	sbi	0x17, 5	; 23
     702:	8f b5       	in	r24, 0x2f	; 47
     704:	80 6c       	ori	r24, 0xC0	; 192
     706:	8f bd       	out	0x2f, r24	; 47
     708:	08 95       	ret

0000070a <TIMER_COUNTER1_compoutmodeB>:
     70a:	9f b5       	in	r25, 0x2f	; 47
     70c:	9f 7c       	andi	r25, 0xCF	; 207
     70e:	9f bd       	out	0x2f, r25	; 47
     710:	82 30       	cpi	r24, 0x02	; 2
     712:	49 f0       	breq	.+18     	; 0x726 <TIMER_COUNTER1_compoutmodeB+0x1c>
     714:	83 30       	cpi	r24, 0x03	; 3
     716:	61 f0       	breq	.+24     	; 0x730 <TIMER_COUNTER1_compoutmodeB+0x26>
     718:	81 30       	cpi	r24, 0x01	; 1
     71a:	71 f4       	brne	.+28     	; 0x738 <TIMER_COUNTER1_compoutmodeB+0x2e>
     71c:	be 9a       	sbi	0x17, 6	; 23
     71e:	8f b5       	in	r24, 0x2f	; 47
     720:	80 61       	ori	r24, 0x10	; 16
     722:	8f bd       	out	0x2f, r24	; 47
     724:	08 95       	ret
     726:	be 9a       	sbi	0x17, 6	; 23
     728:	8f b5       	in	r24, 0x2f	; 47
     72a:	80 62       	ori	r24, 0x20	; 32
     72c:	8f bd       	out	0x2f, r24	; 47
     72e:	08 95       	ret
     730:	be 9a       	sbi	0x17, 6	; 23
     732:	8f b5       	in	r24, 0x2f	; 47
     734:	80 63       	ori	r24, 0x30	; 48
     736:	8f bd       	out	0x2f, r24	; 47
     738:	08 95       	ret

0000073a <TIMER_COUNTER1_compoutmodeC>:
     73a:	9f b5       	in	r25, 0x2f	; 47
     73c:	93 7f       	andi	r25, 0xF3	; 243
     73e:	9f bd       	out	0x2f, r25	; 47
     740:	82 30       	cpi	r24, 0x02	; 2
     742:	49 f0       	breq	.+18     	; 0x756 <TIMER_COUNTER1_compoutmodeC+0x1c>
     744:	83 30       	cpi	r24, 0x03	; 3
     746:	61 f0       	breq	.+24     	; 0x760 <TIMER_COUNTER1_compoutmodeC+0x26>
     748:	81 30       	cpi	r24, 0x01	; 1
     74a:	71 f4       	brne	.+28     	; 0x768 <TIMER_COUNTER1_compoutmodeC+0x2e>
     74c:	bf 9a       	sbi	0x17, 7	; 23
     74e:	8f b5       	in	r24, 0x2f	; 47
     750:	84 60       	ori	r24, 0x04	; 4
     752:	8f bd       	out	0x2f, r24	; 47
     754:	08 95       	ret
     756:	bf 9a       	sbi	0x17, 7	; 23
     758:	8f b5       	in	r24, 0x2f	; 47
     75a:	88 60       	ori	r24, 0x08	; 8
     75c:	8f bd       	out	0x2f, r24	; 47
     75e:	08 95       	ret
     760:	bf 9a       	sbi	0x17, 7	; 23
     762:	8f b5       	in	r24, 0x2f	; 47
     764:	8c 60       	ori	r24, 0x0C	; 12
     766:	8f bd       	out	0x2f, r24	; 47
     768:	08 95       	ret

0000076a <TIMER_COUNTER1_compareA>:
     76a:	9b bd       	out	0x2b, r25	; 43
     76c:	8a bd       	out	0x2a, r24	; 42
     76e:	08 95       	ret

00000770 <TIMER_COUNTER1_compareB>:
     770:	99 bd       	out	0x29, r25	; 41
     772:	88 bd       	out	0x28, r24	; 40
     774:	08 95       	ret

00000776 <TIMER_COUNTER1_compareC>:
     776:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     77a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     77e:	08 95       	ret

00000780 <TIMER_COUNTER1_stop>:
     780:	8e b5       	in	r24, 0x2e	; 46
     782:	88 7f       	andi	r24, 0xF8	; 248
     784:	8e bd       	out	0x2e, r24	; 46
     786:	1d bc       	out	0x2d, r1	; 45
     788:	1c bc       	out	0x2c, r1	; 44
     78a:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <timer1_state>
     78e:	08 95       	ret

00000790 <TIMER_COUNTER0enable>:
     790:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <timer0_state>
     794:	2f ef       	ldi	r18, 0xFF	; 255
     796:	21 bf       	out	0x31, r18	; 49
     798:	23 b7       	in	r18, 0x33	; 51
     79a:	27 7b       	andi	r18, 0xB7	; 183
     79c:	23 bf       	out	0x33, r18	; 51
     79e:	62 30       	cpi	r22, 0x02	; 2
     7a0:	41 f0       	breq	.+16     	; 0x7b2 <TIMER_COUNTER0enable+0x22>
     7a2:	63 30       	cpi	r22, 0x03	; 3
     7a4:	51 f0       	breq	.+20     	; 0x7ba <TIMER_COUNTER0enable+0x2a>
     7a6:	61 30       	cpi	r22, 0x01	; 1
     7a8:	59 f4       	brne	.+22     	; 0x7c0 <TIMER_COUNTER0enable+0x30>
     7aa:	23 b7       	in	r18, 0x33	; 51
     7ac:	20 64       	ori	r18, 0x40	; 64
     7ae:	23 bf       	out	0x33, r18	; 51
     7b0:	07 c0       	rjmp	.+14     	; 0x7c0 <TIMER_COUNTER0enable+0x30>
     7b2:	23 b7       	in	r18, 0x33	; 51
     7b4:	28 60       	ori	r18, 0x08	; 8
     7b6:	23 bf       	out	0x33, r18	; 51
     7b8:	03 c0       	rjmp	.+6      	; 0x7c0 <TIMER_COUNTER0enable+0x30>
     7ba:	23 b7       	in	r18, 0x33	; 51
     7bc:	28 64       	ori	r18, 0x48	; 72
     7be:	23 bf       	out	0x33, r18	; 51
     7c0:	27 b7       	in	r18, 0x37	; 55
     7c2:	2e 7f       	andi	r18, 0xFE	; 254
     7c4:	27 bf       	out	0x37, r18	; 55
     7c6:	27 b7       	in	r18, 0x37	; 55
     7c8:	2d 7f       	andi	r18, 0xFD	; 253
     7ca:	27 bf       	out	0x37, r18	; 55
     7cc:	42 30       	cpi	r20, 0x02	; 2
     7ce:	41 f0       	breq	.+16     	; 0x7e0 <TIMER_COUNTER0enable+0x50>
     7d0:	43 30       	cpi	r20, 0x03	; 3
     7d2:	51 f0       	breq	.+20     	; 0x7e8 <TIMER_COUNTER0enable+0x58>
     7d4:	41 30       	cpi	r20, 0x01	; 1
     7d6:	71 f4       	brne	.+28     	; 0x7f4 <TIMER_COUNTER0enable+0x64>
     7d8:	27 b7       	in	r18, 0x37	; 55
     7da:	21 60       	ori	r18, 0x01	; 1
     7dc:	27 bf       	out	0x37, r18	; 55
     7de:	0a c0       	rjmp	.+20     	; 0x7f4 <TIMER_COUNTER0enable+0x64>
     7e0:	27 b7       	in	r18, 0x37	; 55
     7e2:	22 60       	ori	r18, 0x02	; 2
     7e4:	27 bf       	out	0x37, r18	; 55
     7e6:	06 c0       	rjmp	.+12     	; 0x7f4 <TIMER_COUNTER0enable+0x64>
     7e8:	27 b7       	in	r18, 0x37	; 55
     7ea:	21 60       	ori	r18, 0x01	; 1
     7ec:	27 bf       	out	0x37, r18	; 55
     7ee:	27 b7       	in	r18, 0x37	; 55
     7f0:	22 60       	ori	r18, 0x02	; 2
     7f2:	27 bf       	out	0x37, r18	; 55
     7f4:	23 e0       	ldi	r18, 0x03	; 3
     7f6:	33 e0       	ldi	r19, 0x03	; 3
     7f8:	fc 01       	movw	r30, r24
     7fa:	31 83       	std	Z+1, r19	; 0x01
     7fc:	20 83       	st	Z, r18
     7fe:	2e e1       	ldi	r18, 0x1E	; 30
     800:	33 e0       	ldi	r19, 0x03	; 3
     802:	37 83       	std	Z+7, r19	; 0x07
     804:	26 83       	std	Z+6, r18	; 0x06
     806:	2d eb       	ldi	r18, 0xBD	; 189
     808:	32 e0       	ldi	r19, 0x02	; 2
     80a:	35 87       	std	Z+13, r19	; 0x0d
     80c:	24 87       	std	Z+12, r18	; 0x0c
     80e:	20 e2       	ldi	r18, 0x20	; 32
     810:	33 e0       	ldi	r19, 0x03	; 3
     812:	37 87       	std	Z+15, r19	; 0x0f
     814:	26 87       	std	Z+14, r18	; 0x0e
     816:	08 95       	ret

00000818 <TIMER_COUNTER1enable>:
     818:	0f 93       	push	r16
     81a:	1f 93       	push	r17
     81c:	dc 01       	movw	r26, r24
     81e:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <timer1_state>
     822:	8f ef       	ldi	r24, 0xFF	; 255
     824:	9f ef       	ldi	r25, 0xFF	; 255
     826:	9b bd       	out	0x2b, r25	; 43
     828:	8a bd       	out	0x2a, r24	; 42
     82a:	8f b5       	in	r24, 0x2f	; 47
     82c:	8c 7f       	andi	r24, 0xFC	; 252
     82e:	8f bd       	out	0x2f, r24	; 47
     830:	8e b5       	in	r24, 0x2e	; 46
     832:	87 7e       	andi	r24, 0xE7	; 231
     834:	8e bd       	out	0x2e, r24	; 46
     836:	06 2f       	mov	r16, r22
     838:	10 e0       	ldi	r17, 0x00	; 0
     83a:	f8 01       	movw	r30, r16
     83c:	31 97       	sbiw	r30, 0x01	; 1
     83e:	ef 30       	cpi	r30, 0x0F	; 15
     840:	f1 05       	cpc	r31, r1
     842:	08 f0       	brcs	.+2      	; 0x846 <TIMER_COUNTER1enable+0x2e>
     844:	5a c0       	rjmp	.+180    	; 0x8fa <TIMER_COUNTER1enable+0xe2>
     846:	e2 5a       	subi	r30, 0xA2	; 162
     848:	ff 4f       	sbci	r31, 0xFF	; 255
     84a:	0c 94 34 18 	jmp	0x3068	; 0x3068 <__tablejump2__>
     84e:	8f b5       	in	r24, 0x2f	; 47
     850:	81 60       	ori	r24, 0x01	; 1
     852:	8f bd       	out	0x2f, r24	; 47
     854:	52 c0       	rjmp	.+164    	; 0x8fa <TIMER_COUNTER1enable+0xe2>
     856:	8f b5       	in	r24, 0x2f	; 47
     858:	82 60       	ori	r24, 0x02	; 2
     85a:	8f bd       	out	0x2f, r24	; 47
     85c:	4e c0       	rjmp	.+156    	; 0x8fa <TIMER_COUNTER1enable+0xe2>
     85e:	8f b5       	in	r24, 0x2f	; 47
     860:	83 60       	ori	r24, 0x03	; 3
     862:	8f bd       	out	0x2f, r24	; 47
     864:	4a c0       	rjmp	.+148    	; 0x8fa <TIMER_COUNTER1enable+0xe2>
     866:	8e b5       	in	r24, 0x2e	; 46
     868:	88 60       	ori	r24, 0x08	; 8
     86a:	8e bd       	out	0x2e, r24	; 46
     86c:	46 c0       	rjmp	.+140    	; 0x8fa <TIMER_COUNTER1enable+0xe2>
     86e:	8f b5       	in	r24, 0x2f	; 47
     870:	81 60       	ori	r24, 0x01	; 1
     872:	8f bd       	out	0x2f, r24	; 47
     874:	8e b5       	in	r24, 0x2e	; 46
     876:	88 60       	ori	r24, 0x08	; 8
     878:	8e bd       	out	0x2e, r24	; 46
     87a:	3f c0       	rjmp	.+126    	; 0x8fa <TIMER_COUNTER1enable+0xe2>
     87c:	8f b5       	in	r24, 0x2f	; 47
     87e:	82 60       	ori	r24, 0x02	; 2
     880:	8f bd       	out	0x2f, r24	; 47
     882:	8e b5       	in	r24, 0x2e	; 46
     884:	88 60       	ori	r24, 0x08	; 8
     886:	8e bd       	out	0x2e, r24	; 46
     888:	38 c0       	rjmp	.+112    	; 0x8fa <TIMER_COUNTER1enable+0xe2>
     88a:	8f b5       	in	r24, 0x2f	; 47
     88c:	83 60       	ori	r24, 0x03	; 3
     88e:	8f bd       	out	0x2f, r24	; 47
     890:	8e b5       	in	r24, 0x2e	; 46
     892:	88 60       	ori	r24, 0x08	; 8
     894:	8e bd       	out	0x2e, r24	; 46
     896:	31 c0       	rjmp	.+98     	; 0x8fa <TIMER_COUNTER1enable+0xe2>
     898:	8e b5       	in	r24, 0x2e	; 46
     89a:	80 61       	ori	r24, 0x10	; 16
     89c:	8e bd       	out	0x2e, r24	; 46
     89e:	2d c0       	rjmp	.+90     	; 0x8fa <TIMER_COUNTER1enable+0xe2>
     8a0:	8f b5       	in	r24, 0x2f	; 47
     8a2:	81 60       	ori	r24, 0x01	; 1
     8a4:	8f bd       	out	0x2f, r24	; 47
     8a6:	8e b5       	in	r24, 0x2e	; 46
     8a8:	80 61       	ori	r24, 0x10	; 16
     8aa:	8e bd       	out	0x2e, r24	; 46
     8ac:	26 c0       	rjmp	.+76     	; 0x8fa <TIMER_COUNTER1enable+0xe2>
     8ae:	8f b5       	in	r24, 0x2f	; 47
     8b0:	82 60       	ori	r24, 0x02	; 2
     8b2:	8f bd       	out	0x2f, r24	; 47
     8b4:	8e b5       	in	r24, 0x2e	; 46
     8b6:	80 61       	ori	r24, 0x10	; 16
     8b8:	8e bd       	out	0x2e, r24	; 46
     8ba:	1f c0       	rjmp	.+62     	; 0x8fa <TIMER_COUNTER1enable+0xe2>
     8bc:	8f b5       	in	r24, 0x2f	; 47
     8be:	83 60       	ori	r24, 0x03	; 3
     8c0:	8f bd       	out	0x2f, r24	; 47
     8c2:	8e b5       	in	r24, 0x2e	; 46
     8c4:	80 61       	ori	r24, 0x10	; 16
     8c6:	8e bd       	out	0x2e, r24	; 46
     8c8:	18 c0       	rjmp	.+48     	; 0x8fa <TIMER_COUNTER1enable+0xe2>
     8ca:	8e b5       	in	r24, 0x2e	; 46
     8cc:	88 61       	ori	r24, 0x18	; 24
     8ce:	8e bd       	out	0x2e, r24	; 46
     8d0:	14 c0       	rjmp	.+40     	; 0x8fa <TIMER_COUNTER1enable+0xe2>
     8d2:	8f b5       	in	r24, 0x2f	; 47
     8d4:	81 60       	ori	r24, 0x01	; 1
     8d6:	8f bd       	out	0x2f, r24	; 47
     8d8:	8e b5       	in	r24, 0x2e	; 46
     8da:	88 61       	ori	r24, 0x18	; 24
     8dc:	8e bd       	out	0x2e, r24	; 46
     8de:	0d c0       	rjmp	.+26     	; 0x8fa <TIMER_COUNTER1enable+0xe2>
     8e0:	8f b5       	in	r24, 0x2f	; 47
     8e2:	82 60       	ori	r24, 0x02	; 2
     8e4:	8f bd       	out	0x2f, r24	; 47
     8e6:	8e b5       	in	r24, 0x2e	; 46
     8e8:	88 61       	ori	r24, 0x18	; 24
     8ea:	8e bd       	out	0x2e, r24	; 46
     8ec:	06 c0       	rjmp	.+12     	; 0x8fa <TIMER_COUNTER1enable+0xe2>
     8ee:	8f b5       	in	r24, 0x2f	; 47
     8f0:	83 60       	ori	r24, 0x03	; 3
     8f2:	8f bd       	out	0x2f, r24	; 47
     8f4:	8e b5       	in	r24, 0x2e	; 46
     8f6:	88 61       	ori	r24, 0x18	; 24
     8f8:	8e bd       	out	0x2e, r24	; 46
     8fa:	8f b5       	in	r24, 0x2f	; 47
     8fc:	83 70       	andi	r24, 0x03	; 3
     8fe:	8f bd       	out	0x2f, r24	; 47
     900:	87 b7       	in	r24, 0x37	; 55
     902:	83 7c       	andi	r24, 0xC3	; 195
     904:	87 bf       	out	0x37, r24	; 55
     906:	ed e7       	ldi	r30, 0x7D	; 125
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	80 81       	ld	r24, Z
     90c:	8e 7f       	andi	r24, 0xFE	; 254
     90e:	80 83       	st	Z, r24
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	fa 01       	movw	r30, r20
     914:	31 97       	sbiw	r30, 0x01	; 1
     916:	ec 30       	cpi	r30, 0x0C	; 12
     918:	f1 05       	cpc	r31, r1
     91a:	08 f0       	brcs	.+2      	; 0x91e <TIMER_COUNTER1enable+0x106>
     91c:	44 c0       	rjmp	.+136    	; 0x9a6 <TIMER_COUNTER1enable+0x18e>
     91e:	e3 59       	subi	r30, 0x93	; 147
     920:	ff 4f       	sbci	r31, 0xFF	; 255
     922:	0c 94 34 18 	jmp	0x3068	; 0x3068 <__tablejump2__>
     926:	87 b7       	in	r24, 0x37	; 55
     928:	84 60       	ori	r24, 0x04	; 4
     92a:	87 bf       	out	0x37, r24	; 55
     92c:	3c c0       	rjmp	.+120    	; 0x9a6 <TIMER_COUNTER1enable+0x18e>
     92e:	87 b7       	in	r24, 0x37	; 55
     930:	80 61       	ori	r24, 0x10	; 16
     932:	87 bf       	out	0x37, r24	; 55
     934:	38 c0       	rjmp	.+112    	; 0x9a6 <TIMER_COUNTER1enable+0x18e>
     936:	87 b7       	in	r24, 0x37	; 55
     938:	88 60       	ori	r24, 0x08	; 8
     93a:	87 bf       	out	0x37, r24	; 55
     93c:	34 c0       	rjmp	.+104    	; 0x9a6 <TIMER_COUNTER1enable+0x18e>
     93e:	ed e7       	ldi	r30, 0x7D	; 125
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	80 81       	ld	r24, Z
     944:	81 60       	ori	r24, 0x01	; 1
     946:	80 83       	st	Z, r24
     948:	2e c0       	rjmp	.+92     	; 0x9a6 <TIMER_COUNTER1enable+0x18e>
     94a:	87 b7       	in	r24, 0x37	; 55
     94c:	80 62       	ori	r24, 0x20	; 32
     94e:	87 bf       	out	0x37, r24	; 55
     950:	2a c0       	rjmp	.+84     	; 0x9a6 <TIMER_COUNTER1enable+0x18e>
     952:	87 b7       	in	r24, 0x37	; 55
     954:	84 61       	ori	r24, 0x14	; 20
     956:	87 bf       	out	0x37, r24	; 55
     958:	26 c0       	rjmp	.+76     	; 0x9a6 <TIMER_COUNTER1enable+0x18e>
     95a:	87 b7       	in	r24, 0x37	; 55
     95c:	8c 60       	ori	r24, 0x0C	; 12
     95e:	87 bf       	out	0x37, r24	; 55
     960:	22 c0       	rjmp	.+68     	; 0x9a6 <TIMER_COUNTER1enable+0x18e>
     962:	87 b7       	in	r24, 0x37	; 55
     964:	84 60       	ori	r24, 0x04	; 4
     966:	87 bf       	out	0x37, r24	; 55
     968:	ed e7       	ldi	r30, 0x7D	; 125
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	80 81       	ld	r24, Z
     96e:	81 60       	ori	r24, 0x01	; 1
     970:	80 83       	st	Z, r24
     972:	19 c0       	rjmp	.+50     	; 0x9a6 <TIMER_COUNTER1enable+0x18e>
     974:	87 b7       	in	r24, 0x37	; 55
     976:	84 62       	ori	r24, 0x24	; 36
     978:	87 bf       	out	0x37, r24	; 55
     97a:	15 c0       	rjmp	.+42     	; 0x9a6 <TIMER_COUNTER1enable+0x18e>
     97c:	87 b7       	in	r24, 0x37	; 55
     97e:	8c 61       	ori	r24, 0x1C	; 28
     980:	87 bf       	out	0x37, r24	; 55
     982:	11 c0       	rjmp	.+34     	; 0x9a6 <TIMER_COUNTER1enable+0x18e>
     984:	87 b7       	in	r24, 0x37	; 55
     986:	8c 61       	ori	r24, 0x1C	; 28
     988:	87 bf       	out	0x37, r24	; 55
     98a:	ed e7       	ldi	r30, 0x7D	; 125
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	80 81       	ld	r24, Z
     990:	81 60       	ori	r24, 0x01	; 1
     992:	80 83       	st	Z, r24
     994:	08 c0       	rjmp	.+16     	; 0x9a6 <TIMER_COUNTER1enable+0x18e>
     996:	87 b7       	in	r24, 0x37	; 55
     998:	88 61       	ori	r24, 0x18	; 24
     99a:	87 bf       	out	0x37, r24	; 55
     99c:	ed e7       	ldi	r30, 0x7D	; 125
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	80 81       	ld	r24, Z
     9a2:	81 60       	ori	r24, 0x01	; 1
     9a4:	80 83       	st	Z, r24
     9a6:	8d e6       	ldi	r24, 0x6D	; 109
     9a8:	93 e0       	ldi	r25, 0x03	; 3
     9aa:	11 96       	adiw	r26, 0x01	; 1
     9ac:	9c 93       	st	X, r25
     9ae:	8e 93       	st	-X, r24
     9b0:	85 e8       	ldi	r24, 0x85	; 133
     9b2:	93 e0       	ldi	r25, 0x03	; 3
     9b4:	13 96       	adiw	r26, 0x03	; 3
     9b6:	9c 93       	st	X, r25
     9b8:	8e 93       	st	-X, r24
     9ba:	12 97       	sbiw	r26, 0x02	; 2
     9bc:	8d e9       	ldi	r24, 0x9D	; 157
     9be:	93 e0       	ldi	r25, 0x03	; 3
     9c0:	15 96       	adiw	r26, 0x05	; 5
     9c2:	9c 93       	st	X, r25
     9c4:	8e 93       	st	-X, r24
     9c6:	14 97       	sbiw	r26, 0x04	; 4
     9c8:	85 eb       	ldi	r24, 0xB5	; 181
     9ca:	93 e0       	ldi	r25, 0x03	; 3
     9cc:	17 96       	adiw	r26, 0x07	; 7
     9ce:	9c 93       	st	X, r25
     9d0:	8e 93       	st	-X, r24
     9d2:	16 97       	sbiw	r26, 0x06	; 6
     9d4:	88 eb       	ldi	r24, 0xB8	; 184
     9d6:	93 e0       	ldi	r25, 0x03	; 3
     9d8:	19 96       	adiw	r26, 0x09	; 9
     9da:	9c 93       	st	X, r25
     9dc:	8e 93       	st	-X, r24
     9de:	18 97       	sbiw	r26, 0x08	; 8
     9e0:	8b eb       	ldi	r24, 0xBB	; 187
     9e2:	93 e0       	ldi	r25, 0x03	; 3
     9e4:	1b 96       	adiw	r26, 0x0b	; 11
     9e6:	9c 93       	st	X, r25
     9e8:	8e 93       	st	-X, r24
     9ea:	1a 97       	sbiw	r26, 0x0a	; 10
     9ec:	87 e2       	ldi	r24, 0x27	; 39
     9ee:	93 e0       	ldi	r25, 0x03	; 3
     9f0:	1d 96       	adiw	r26, 0x0d	; 13
     9f2:	9c 93       	st	X, r25
     9f4:	8e 93       	st	-X, r24
     9f6:	1c 97       	sbiw	r26, 0x0c	; 12
     9f8:	80 ec       	ldi	r24, 0xC0	; 192
     9fa:	93 e0       	ldi	r25, 0x03	; 3
     9fc:	1f 96       	adiw	r26, 0x0f	; 15
     9fe:	9c 93       	st	X, r25
     a00:	8e 93       	st	-X, r24
     a02:	1e 97       	sbiw	r26, 0x0e	; 14
     a04:	cd 01       	movw	r24, r26
     a06:	1f 91       	pop	r17
     a08:	0f 91       	pop	r16
     a0a:	08 95       	ret

00000a0c <__vector_16>:
	timer3_state=0;
}
/***Interrupt***/
// So that main will not freeze when not defined, therefore exclude here! before use.
//ISR(TIMER0_COMP_vect){ }
ISR(TIMER0_OVF_vect){ }
     a0c:	1f 92       	push	r1
     a0e:	0f 92       	push	r0
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	0f 92       	push	r0
     a14:	11 24       	eor	r1, r1
     a16:	0f 90       	pop	r0
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	0f 90       	pop	r0
     a1c:	1f 90       	pop	r1
     a1e:	18 95       	reti

00000a20 <__vector_11>:
ISR(TIMER1_CAPT_vect){ }
     a20:	1f 92       	push	r1
     a22:	0f 92       	push	r0
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	0f 92       	push	r0
     a28:	11 24       	eor	r1, r1
     a2a:	0f 90       	pop	r0
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	0f 90       	pop	r0
     a30:	1f 90       	pop	r1
     a32:	18 95       	reti

00000a34 <__vector_13>:
//ISR(TIMER1_COMPA_vect){ }
ISR(TIMER1_COMPB_vect){ }
     a34:	1f 92       	push	r1
     a36:	0f 92       	push	r0
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	0f 92       	push	r0
     a3c:	11 24       	eor	r1, r1
     a3e:	0f 90       	pop	r0
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	0f 90       	pop	r0
     a44:	1f 90       	pop	r1
     a46:	18 95       	reti

00000a48 <__vector_24>:
ISR(TIMER1_COMPC_vect){ }
     a48:	1f 92       	push	r1
     a4a:	0f 92       	push	r0
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	0f 92       	push	r0
     a50:	11 24       	eor	r1, r1
     a52:	0f 90       	pop	r0
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	0f 90       	pop	r0
     a58:	1f 90       	pop	r1
     a5a:	18 95       	reti

00000a5c <__vector_14>:
ISR(TIMER1_OVF_vect){ }
     a5c:	1f 92       	push	r1
     a5e:	0f 92       	push	r0
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	0f 92       	push	r0
     a64:	11 24       	eor	r1, r1
     a66:	0f 90       	pop	r0
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	0f 90       	pop	r0
     a6c:	1f 90       	pop	r1
     a6e:	18 95       	reti

00000a70 <__vector_10>:
ISR(TIMER2_OVF_vect){ }
     a70:	1f 92       	push	r1
     a72:	0f 92       	push	r0
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	0f 92       	push	r0
     a78:	11 24       	eor	r1, r1
     a7a:	0f 90       	pop	r0
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	0f 90       	pop	r0
     a80:	1f 90       	pop	r1
     a82:	18 95       	reti

00000a84 <__vector_25>:
ISR(TIMER3_CAPT_vect){ }
     a84:	1f 92       	push	r1
     a86:	0f 92       	push	r0
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	0f 92       	push	r0
     a8c:	11 24       	eor	r1, r1
     a8e:	0f 90       	pop	r0
     a90:	0f be       	out	0x3f, r0	; 63
     a92:	0f 90       	pop	r0
     a94:	1f 90       	pop	r1
     a96:	18 95       	reti

00000a98 <__vector_26>:
ISR(TIMER3_COMPA_vect){ }
     a98:	1f 92       	push	r1
     a9a:	0f 92       	push	r0
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	0f 92       	push	r0
     aa0:	11 24       	eor	r1, r1
     aa2:	0f 90       	pop	r0
     aa4:	0f be       	out	0x3f, r0	; 63
     aa6:	0f 90       	pop	r0
     aa8:	1f 90       	pop	r1
     aaa:	18 95       	reti

00000aac <__vector_27>:
ISR(TIMER3_COMPB_vect){ }
     aac:	1f 92       	push	r1
     aae:	0f 92       	push	r0
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	0f 92       	push	r0
     ab4:	11 24       	eor	r1, r1
     ab6:	0f 90       	pop	r0
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	0f 90       	pop	r0
     abc:	1f 90       	pop	r1
     abe:	18 95       	reti

00000ac0 <__vector_28>:
ISR(TIMER3_COMPC_vect){ }
     ac0:	1f 92       	push	r1
     ac2:	0f 92       	push	r0
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	0f 92       	push	r0
     ac8:	11 24       	eor	r1, r1
     aca:	0f 90       	pop	r0
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	0f 90       	pop	r0
     ad0:	1f 90       	pop	r1
     ad2:	18 95       	reti

00000ad4 <__vector_29>:
ISR(TIMER3_OVF_vect){ }
     ad4:	1f 92       	push	r1
     ad6:	0f 92       	push	r0
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	0f 92       	push	r0
     adc:	11 24       	eor	r1, r1
     ade:	0f 90       	pop	r0
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	0f 90       	pop	r0
     ae4:	1f 90       	pop	r1
     ae6:	18 95       	reti

00000ae8 <EEPROMenable>:
#include "eeprom.h"
/***Constant & Macro***/
/***Global File Variable***/
/***Header***/
/***Procedure & Function***/
EEPROM EEPROMenable(void){
     ae8:	fc 01       	movw	r30, r24
	eprom.write_float=eeprom_write_float;
	eprom.update_float=eeprom_update_float;
	eprom.read_block=eeprom_read_block;
	eprom.write_block=eeprom_write_block;
	eprom.update_block=eeprom_update_block;
	return eprom;
     aea:	8c e9       	ldi	r24, 0x9C	; 156
     aec:	98 e1       	ldi	r25, 0x18	; 24
     aee:	91 83       	std	Z+1, r25	; 0x01
     af0:	80 83       	st	Z, r24
     af2:	8e ed       	ldi	r24, 0xDE	; 222
     af4:	98 e1       	ldi	r25, 0x18	; 24
     af6:	93 83       	std	Z+3, r25	; 0x03
     af8:	82 83       	std	Z+2, r24	; 0x02
     afa:	88 eb       	ldi	r24, 0xB8	; 184
     afc:	98 e1       	ldi	r25, 0x18	; 24
     afe:	95 83       	std	Z+5, r25	; 0x05
     b00:	84 83       	std	Z+4, r24	; 0x04
     b02:	84 ea       	ldi	r24, 0xA4	; 164
     b04:	98 e1       	ldi	r25, 0x18	; 24
     b06:	97 83       	std	Z+7, r25	; 0x07
     b08:	86 83       	std	Z+6, r24	; 0x06
     b0a:	80 ef       	ldi	r24, 0xF0	; 240
     b0c:	98 e1       	ldi	r25, 0x18	; 24
     b0e:	91 87       	std	Z+9, r25	; 0x09
     b10:	80 87       	std	Z+8, r24	; 0x08
     b12:	81 ed       	ldi	r24, 0xD1	; 209
     b14:	98 e1       	ldi	r25, 0x18	; 24
     b16:	93 87       	std	Z+11, r25	; 0x0b
     b18:	82 87       	std	Z+10, r24	; 0x0a
     b1a:	8b ee       	ldi	r24, 0xEB	; 235
     b1c:	98 e1       	ldi	r25, 0x18	; 24
     b1e:	97 87       	std	Z+15, r25	; 0x0f
     b20:	86 87       	std	Z+14, r24	; 0x0e
     b22:	8b ee       	ldi	r24, 0xEB	; 235
     b24:	98 e1       	ldi	r25, 0x18	; 24
     b26:	95 8b       	std	Z+21, r25	; 0x15
     b28:	84 8b       	std	Z+20, r24	; 0x14
     b2a:	89 ec       	ldi	r24, 0xC9	; 201
     b2c:	98 e1       	ldi	r25, 0x18	; 24
     b2e:	97 8b       	std	Z+23, r25	; 0x17
     b30:	86 8b       	std	Z+22, r24	; 0x16
     b32:	8c e8       	ldi	r24, 0x8C	; 140
     b34:	98 e1       	ldi	r25, 0x18	; 24
     b36:	91 8f       	std	Z+25, r25	; 0x19
     b38:	80 8f       	std	Z+24, r24	; 0x18
     b3a:	85 ed       	ldi	r24, 0xD5	; 213
     b3c:	98 e1       	ldi	r25, 0x18	; 24
     b3e:	93 8f       	std	Z+27, r25	; 0x1b
     b40:	82 8f       	std	Z+26, r24	; 0x1a
     b42:	89 ea       	ldi	r24, 0xA9	; 169
     b44:	98 e1       	ldi	r25, 0x18	; 24
     b46:	95 8f       	std	Z+29, r25	; 0x1d
     b48:	84 8f       	std	Z+28, r24	; 0x1c
}
     b4a:	cf 01       	movw	r24, r30
     b4c:	08 95       	ret

00000b4e <EXPLODEboot>:
	/******/
	return explode;
}
// boot
void EXPLODEboot(EXPLODE* self, uint8_t x)
{
     b4e:	fc 01       	movw	r30, r24
	self->XI = self->XF;
     b50:	82 81       	ldd	r24, Z+2	; 0x02
     b52:	93 81       	ldd	r25, Z+3	; 0x03
     b54:	91 83       	std	Z+1, r25	; 0x01
     b56:	80 83       	st	Z, r24
	self->XF = x;
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	73 83       	std	Z+3, r23	; 0x03
     b5c:	62 83       	std	Z+2, r22	; 0x02
     b5e:	08 95       	ret

00000b60 <EXPLODEhh>:
	trans = diff & self->XF;
	return (trans << nbits) | diff;
}
// hh
uint8_t EXPLODEhh(EXPLODE* self)
{
     b60:	fc 01       	movw	r30, r24
	uint8_t i;
	i = self->XI & self->XF;
	return i;
     b62:	90 81       	ld	r25, Z
     b64:	82 81       	ldd	r24, Z+2	; 0x02
}
     b66:	89 23       	and	r24, r25
     b68:	08 95       	ret

00000b6a <EXPLODEll>:
// ll
uint8_t EXPLODEll(EXPLODE* self)
{
     b6a:	fc 01       	movw	r30, r24
	uint8_t i;
	i = self->XI | self->XF;
	return ~i;
     b6c:	90 81       	ld	r25, Z
     b6e:	82 81       	ldd	r24, Z+2	; 0x02
     b70:	89 2b       	or	r24, r25
}
     b72:	80 95       	com	r24
     b74:	08 95       	ret

00000b76 <EXPLODElh>:
// lh
uint8_t EXPLODElh(EXPLODE* self)
{
     b76:	fc 01       	movw	r30, r24
	uint8_t i;
	i = self->XI ^ self->XF;
     b78:	92 81       	ldd	r25, Z+2	; 0x02
     b7a:	80 81       	ld	r24, Z
     b7c:	89 27       	eor	r24, r25
	i &= self->XF;
	return i;
}
     b7e:	89 23       	and	r24, r25
     b80:	08 95       	ret

00000b82 <EXPLODEhl>:
// hl
uint8_t EXPLODEhl(EXPLODE* self)
{
     b82:	fc 01       	movw	r30, r24
	uint8_t i;
	i = self->XF ^ self->XI;
     b84:	90 81       	ld	r25, Z
     b86:	82 81       	ldd	r24, Z+2	; 0x02
     b88:	89 27       	eor	r24, r25
	i &= self->XI;
	return i;
}
     b8a:	89 23       	and	r24, r25
     b8c:	08 95       	ret

00000b8e <EXPLODEdiff>:
// diff
uint8_t EXPLODEdiff(EXPLODE* self)
{
     b8e:	fc 01       	movw	r30, r24
	return self->XF ^ self->XI;
     b90:	92 81       	ldd	r25, Z+2	; 0x02
     b92:	80 81       	ld	r24, Z
}
     b94:	89 27       	eor	r24, r25
     b96:	08 95       	ret

00000b98 <EXPLODEdata>:
uint8_t EXPLODEdata(EXPLODE* self)
{
	return self->XF;	
}
     b98:	fc 01       	movw	r30, r24
     b9a:	82 81       	ldd	r24, Z+2	; 0x02
     b9c:	08 95       	ret

00000b9e <EXPLODEmayia>:
	self->XI = self->XF;
	self->XF = x;
}
// mayia
uint8_t EXPLODEmayia(EXPLODE* self, uint8_t nbits)
{//magic formula
     b9e:	dc 01       	movw	r26, r24
// power: raise base to n-th power; n >= 0
uint8_t EXPLODEPwr(uint8_t bs, uint8_t n)
{
	uint8_t i, p;
	p = ONE;
	for (i = ONE; i <= n; ++i)
     ba0:	66 23       	and	r22, r22
     ba2:	39 f0       	breq	.+14     	; 0xbb2 <EXPLODEmayia+0x14>
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	21 e0       	ldi	r18, 0x01	; 1
	p = p * bs;
     ba8:	22 0f       	add	r18, r18
// power: raise base to n-th power; n >= 0
uint8_t EXPLODEPwr(uint8_t bs, uint8_t n)
{
	uint8_t i, p;
	p = ONE;
	for (i = ONE; i <= n; ++i)
     baa:	9f 5f       	subi	r25, 0xFF	; 255
     bac:	69 17       	cp	r22, r25
     bae:	e0 f7       	brcc	.-8      	; 0xba8 <EXPLODEmayia+0xa>
     bb0:	01 c0       	rjmp	.+2      	; 0xbb4 <EXPLODEmayia+0x16>
/*******************************************************************/
// power: raise base to n-th power; n >= 0
uint8_t EXPLODEPwr(uint8_t bs, uint8_t n)
{
	uint8_t i, p;
	p = ONE;
     bb2:	21 e0       	ldi	r18, 0x01	; 1
uint8_t EXPLODEmayia(EXPLODE* self, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask = EXPLODEPwr(2,nbits)-ONE;
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	21 50       	subi	r18, 0x01	; 1
     bb8:	31 09       	sbc	r19, r1
	self->XI &= mask;
     bba:	ed 91       	ld	r30, X+
     bbc:	fc 91       	ld	r31, X
     bbe:	11 97       	sbiw	r26, 0x01	; 1
     bc0:	e2 23       	and	r30, r18
     bc2:	f3 23       	and	r31, r19
     bc4:	11 96       	adiw	r26, 0x01	; 1
     bc6:	fc 93       	st	X, r31
     bc8:	ee 93       	st	-X, r30
	self->XF &= mask;
     bca:	12 96       	adiw	r26, 0x02	; 2
     bcc:	4d 91       	ld	r20, X+
     bce:	5c 91       	ld	r21, X
     bd0:	13 97       	sbiw	r26, 0x03	; 3
     bd2:	24 23       	and	r18, r20
     bd4:	35 23       	and	r19, r21
     bd6:	13 96       	adiw	r26, 0x03	; 3
     bd8:	3c 93       	st	X, r19
     bda:	2e 93       	st	-X, r18
     bdc:	12 97       	sbiw	r26, 0x02	; 2
	diff = self->XF ^ self->XI;
     bde:	cf 01       	movw	r24, r30
     be0:	82 27       	eor	r24, r18
     be2:	93 27       	eor	r25, r19
	trans = diff & self->XF;
	return (trans << nbits) | diff;
     be4:	28 23       	and	r18, r24
     be6:	39 23       	and	r19, r25
     be8:	02 c0       	rjmp	.+4      	; 0xbee <EXPLODEmayia+0x50>
     bea:	22 0f       	add	r18, r18
     bec:	33 1f       	adc	r19, r19
     bee:	6a 95       	dec	r22
     bf0:	e2 f7       	brpl	.-8      	; 0xbea <EXPLODEmayia+0x4c>
}
     bf2:	82 2b       	or	r24, r18
     bf4:	08 95       	ret

00000bf6 <EXPLODEenable>:
uint8_t EXPLODEhl(EXPLODE* self);
uint8_t EXPLODEdiff(EXPLODE* self);
uint8_t EXPLODEdata(EXPLODE* self);
/***Procedure & Function***/
EXPLODE EXPLODEenable( void )
{
     bf6:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG = STATUS_REGISTER;
     bf8:	9f b7       	in	r25, 0x3f	; 63
	STATUS_REGISTER &= ~(ONE<<GLOBAL_INTERRUPT_ENABLE);
     bfa:	8f b7       	in	r24, 0x3f	; 63
     bfc:	8f 77       	andi	r24, 0x7F	; 127
     bfe:	8f bf       	out	0x3f, r24	; 63
	explode.ll = EXPLODEll;
	explode.lh = EXPLODElh;
	explode.hl = EXPLODEhl;
	explode.diff = EXPLODEdiff;
	explode.data = EXPLODEdata;
	STATUS_REGISTER = tSREG;
     c00:	9f bf       	out	0x3f, r25	; 63
	/******/
	return explode;
     c02:	11 82       	std	Z+1, r1	; 0x01
     c04:	10 82       	st	Z, r1
     c06:	13 82       	std	Z+3, r1	; 0x03
     c08:	12 82       	std	Z+2, r1	; 0x02
     c0a:	87 ea       	ldi	r24, 0xA7	; 167
     c0c:	95 e0       	ldi	r25, 0x05	; 5
     c0e:	95 83       	std	Z+5, r25	; 0x05
     c10:	84 83       	std	Z+4, r24	; 0x04
     c12:	8f ec       	ldi	r24, 0xCF	; 207
     c14:	95 e0       	ldi	r25, 0x05	; 5
     c16:	97 83       	std	Z+7, r25	; 0x07
     c18:	86 83       	std	Z+6, r24	; 0x06
     c1a:	80 eb       	ldi	r24, 0xB0	; 176
     c1c:	95 e0       	ldi	r25, 0x05	; 5
     c1e:	91 87       	std	Z+9, r25	; 0x09
     c20:	80 87       	std	Z+8, r24	; 0x08
     c22:	85 eb       	ldi	r24, 0xB5	; 181
     c24:	95 e0       	ldi	r25, 0x05	; 5
     c26:	93 87       	std	Z+11, r25	; 0x0b
     c28:	82 87       	std	Z+10, r24	; 0x0a
     c2a:	8b eb       	ldi	r24, 0xBB	; 187
     c2c:	95 e0       	ldi	r25, 0x05	; 5
     c2e:	95 87       	std	Z+13, r25	; 0x0d
     c30:	84 87       	std	Z+12, r24	; 0x0c
     c32:	81 ec       	ldi	r24, 0xC1	; 193
     c34:	95 e0       	ldi	r25, 0x05	; 5
     c36:	97 87       	std	Z+15, r25	; 0x0f
     c38:	86 87       	std	Z+14, r24	; 0x0e
     c3a:	87 ec       	ldi	r24, 0xC7	; 199
     c3c:	95 e0       	ldi	r25, 0x05	; 5
     c3e:	91 8b       	std	Z+17, r25	; 0x11
     c40:	80 8b       	std	Z+16, r24	; 0x10
     c42:	8c ec       	ldi	r24, 0xCC	; 204
     c44:	95 e0       	ldi	r25, 0x05	; 5
     c46:	93 8b       	std	Z+19, r25	; 0x13
     c48:	82 8b       	std	Z+18, r24	; 0x12
}
     c4a:	cf 01       	movw	r24, r30
     c4c:	08 95       	ret

00000c4e <FUNCpinmatch>:
	return i;
}
uint8_t  bintobcd(uint8_t bin)
{
	return (((bin) / 10) << 4) + ((bin) % 10);
}
     c4e:	68 23       	and	r22, r24
     c50:	44 23       	and	r20, r20
     c52:	21 f0       	breq	.+8      	; 0xc5c <FUNCpinmatch+0xe>
     c54:	86 17       	cp	r24, r22
     c56:	21 f0       	breq	.+8      	; 0xc60 <FUNCpinmatch+0x12>
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	08 95       	ret
     c5c:	61 11       	cpse	r22, r1
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	08 95       	ret

00000c62 <FUNChmerge>:
     c62:	86 2b       	or	r24, r22
     c64:	08 95       	ret

00000c66 <FUNClmerge>:
     c66:	86 23       	and	r24, r22
     c68:	08 95       	ret

00000c6a <FUNChh>:
     c6a:	86 23       	and	r24, r22
     c6c:	08 95       	ret

00000c6e <FUNCll>:
     c6e:	86 2b       	or	r24, r22
     c70:	80 95       	com	r24
     c72:	08 95       	ret

00000c74 <FUNClh>:
     c74:	86 27       	eor	r24, r22
     c76:	86 23       	and	r24, r22
     c78:	08 95       	ret

00000c7a <FUNChl>:
     c7a:	60 95       	com	r22
     c7c:	86 23       	and	r24, r22
     c7e:	08 95       	ret

00000c80 <FUNCdiff>:
     c80:	86 27       	eor	r24, r22
     c82:	08 95       	ret

00000c84 <FUNCswap>:
     c84:	cf 92       	push	r12
     c86:	df 92       	push	r13
     c88:	ef 92       	push	r14
     c8a:	ff 92       	push	r15
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	fc 01       	movw	r30, r24
     c92:	00 81       	ld	r16, Z
     c94:	11 81       	ldd	r17, Z+1	; 0x01
     c96:	22 81       	ldd	r18, Z+2	; 0x02
     c98:	33 81       	ldd	r19, Z+3	; 0x03
     c9a:	fb 01       	movw	r30, r22
     c9c:	c0 80       	ld	r12, Z
     c9e:	d1 80       	ldd	r13, Z+1	; 0x01
     ca0:	e2 80       	ldd	r14, Z+2	; 0x02
     ca2:	f3 80       	ldd	r15, Z+3	; 0x03
     ca4:	fc 01       	movw	r30, r24
     ca6:	c0 82       	st	Z, r12
     ca8:	d1 82       	std	Z+1, r13	; 0x01
     caa:	e2 82       	std	Z+2, r14	; 0x02
     cac:	f3 82       	std	Z+3, r15	; 0x03
     cae:	fb 01       	movw	r30, r22
     cb0:	00 83       	st	Z, r16
     cb2:	11 83       	std	Z+1, r17	; 0x01
     cb4:	22 83       	std	Z+2, r18	; 0x02
     cb6:	33 83       	std	Z+3, r19	; 0x03
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	df 90       	pop	r13
     cc2:	cf 90       	pop	r12
     cc4:	08 95       	ret

00000cc6 <FUNCcopy>:
     cc6:	fb 01       	movw	r30, r22
     cc8:	20 81       	ld	r18, Z
     cca:	fc 01       	movw	r30, r24
     ccc:	20 83       	st	Z, r18
     cce:	22 23       	and	r18, r18
     cd0:	39 f0       	breq	.+14     	; 0xce0 <FUNCcopy+0x1a>
     cd2:	db 01       	movw	r26, r22
     cd4:	11 96       	adiw	r26, 0x01	; 1
     cd6:	31 96       	adiw	r30, 0x01	; 1
     cd8:	9d 91       	ld	r25, X+
     cda:	91 93       	st	Z+, r25
     cdc:	91 11       	cpse	r25, r1
     cde:	fc cf       	rjmp	.-8      	; 0xcd8 <FUNCcopy+0x12>
     ce0:	08 95       	ret

00000ce2 <FUNCsqueeze>:
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	ec 01       	movw	r28, r24
     ce8:	98 81       	ld	r25, Y
     cea:	99 23       	and	r25, r25
     cec:	99 f0       	breq	.+38     	; 0xd14 <FUNCsqueeze+0x32>
     cee:	fe 01       	movw	r30, r28
     cf0:	31 96       	adiw	r30, 0x01	; 1
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	49 2f       	mov	r20, r25
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	46 17       	cp	r20, r22
     cfc:	57 07       	cpc	r21, r23
     cfe:	31 f0       	breq	.+12     	; 0xd0c <FUNCsqueeze+0x2a>
     d00:	de 01       	movw	r26, r28
     d02:	a2 0f       	add	r26, r18
     d04:	b3 1f       	adc	r27, r19
     d06:	9c 93       	st	X, r25
     d08:	2f 5f       	subi	r18, 0xFF	; 255
     d0a:	3f 4f       	sbci	r19, 0xFF	; 255
     d0c:	91 91       	ld	r25, Z+
     d0e:	91 11       	cpse	r25, r1
     d10:	f2 cf       	rjmp	.-28     	; 0xcf6 <FUNCsqueeze+0x14>
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <FUNCsqueeze+0x36>
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	fe 01       	movw	r30, r28
     d1a:	e2 0f       	add	r30, r18
     d1c:	f3 1f       	adc	r31, r19
     d1e:	10 82       	st	Z, r1
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <FUNCshellsort>:
     d26:	2f 92       	push	r2
     d28:	3f 92       	push	r3
     d2a:	4f 92       	push	r4
     d2c:	5f 92       	push	r5
     d2e:	6f 92       	push	r6
     d30:	7f 92       	push	r7
     d32:	8f 92       	push	r8
     d34:	9f 92       	push	r9
     d36:	af 92       	push	r10
     d38:	bf 92       	push	r11
     d3a:	cf 92       	push	r12
     d3c:	df 92       	push	r13
     d3e:	ef 92       	push	r14
     d40:	ff 92       	push	r15
     d42:	0f 93       	push	r16
     d44:	1f 93       	push	r17
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <FUNCshellsort+0x26>
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <FUNCshellsort+0x28>
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	2c 01       	movw	r4, r24
     d54:	1b 01       	movw	r2, r22
     d56:	4b 01       	movw	r8, r22
     d58:	77 23       	and	r23, r23
     d5a:	1c f4       	brge	.+6      	; 0xd62 <FUNCshellsort+0x3c>
     d5c:	2f ef       	ldi	r18, 0xFF	; 255
     d5e:	82 1a       	sub	r8, r18
     d60:	92 0a       	sbc	r9, r18
     d62:	95 94       	asr	r9
     d64:	87 94       	ror	r8
     d66:	18 14       	cp	r1, r8
     d68:	19 04       	cpc	r1, r9
     d6a:	0c f4       	brge	.+2      	; 0xd6e <FUNCshellsort+0x48>
     d6c:	51 c0       	rjmp	.+162    	; 0xe10 <FUNCshellsort+0xea>
     d6e:	6a c0       	rjmp	.+212    	; 0xe44 <FUNCshellsort+0x11e>
     d70:	96 01       	movw	r18, r12
     d72:	dd 20       	and	r13, r13
     d74:	9c f1       	brlt	.+102    	; 0xddc <FUNCshellsort+0xb6>
     d76:	f5 01       	movw	r30, r10
     d78:	40 81       	ld	r20, Z
     d7a:	51 81       	ldd	r21, Z+1	; 0x01
     d7c:	f4 01       	movw	r30, r8
     d7e:	60 81       	ld	r22, Z
     d80:	71 81       	ldd	r23, Z+1	; 0x01
     d82:	64 17       	cp	r22, r20
     d84:	75 07       	cpc	r23, r21
     d86:	54 f5       	brge	.+84     	; 0xddc <FUNCshellsort+0xb6>
     d88:	8c 01       	movw	r16, r24
     d8a:	0a 0d       	add	r16, r10
     d8c:	1b 1d       	adc	r17, r11
     d8e:	d4 01       	movw	r26, r8
     d90:	bc 82       	std	Y+4, r11	; 0x04
     d92:	ab 82       	std	Y+3, r10	; 0x03
     d94:	ba 82       	std	Y+2, r11	; 0x02
     d96:	a9 82       	std	Y+1, r10	; 0x01
     d98:	eb 81       	ldd	r30, Y+3	; 0x03
     d9a:	fc 81       	ldd	r31, Y+4	; 0x04
     d9c:	71 83       	std	Z+1, r23	; 0x01
     d9e:	60 83       	st	Z, r22
     da0:	11 96       	adiw	r26, 0x01	; 1
     da2:	5c 93       	st	X, r21
     da4:	4e 93       	st	-X, r20
     da6:	2e 19       	sub	r18, r14
     da8:	3f 09       	sbc	r19, r15
     daa:	c2 f0       	brmi	.+48     	; 0xddc <FUNCshellsort+0xb6>
     dac:	f8 01       	movw	r30, r16
     dae:	40 81       	ld	r20, Z
     db0:	51 81       	ldd	r21, Z+1	; 0x01
     db2:	e9 81       	ldd	r30, Y+1	; 0x01
     db4:	fa 81       	ldd	r31, Y+2	; 0x02
     db6:	60 81       	ld	r22, Z
     db8:	71 81       	ldd	r23, Z+1	; 0x01
     dba:	08 0f       	add	r16, r24
     dbc:	19 1f       	adc	r17, r25
     dbe:	e8 0f       	add	r30, r24
     dc0:	f9 1f       	adc	r31, r25
     dc2:	fa 83       	std	Y+2, r31	; 0x02
     dc4:	e9 83       	std	Y+1, r30	; 0x01
     dc6:	eb 81       	ldd	r30, Y+3	; 0x03
     dc8:	fc 81       	ldd	r31, Y+4	; 0x04
     dca:	e8 0f       	add	r30, r24
     dcc:	f9 1f       	adc	r31, r25
     dce:	fc 83       	std	Y+4, r31	; 0x04
     dd0:	eb 83       	std	Y+3, r30	; 0x03
     dd2:	a8 0f       	add	r26, r24
     dd4:	b9 1f       	adc	r27, r25
     dd6:	64 17       	cp	r22, r20
     dd8:	75 07       	cpc	r23, r21
     dda:	f4 f2       	brlt	.-68     	; 0xd98 <FUNCshellsort+0x72>
     ddc:	ff ef       	ldi	r31, 0xFF	; 255
     dde:	cf 1a       	sub	r12, r31
     de0:	df 0a       	sbc	r13, r31
     de2:	22 e0       	ldi	r18, 0x02	; 2
     de4:	a2 0e       	add	r10, r18
     de6:	b1 1c       	adc	r11, r1
     de8:	e2 e0       	ldi	r30, 0x02	; 2
     dea:	8e 0e       	add	r8, r30
     dec:	91 1c       	adc	r9, r1
     dee:	c6 14       	cp	r12, r6
     df0:	d7 04       	cpc	r13, r7
     df2:	09 f0       	breq	.+2      	; 0xdf6 <FUNCshellsort+0xd0>
     df4:	bd cf       	rjmp	.-134    	; 0xd70 <FUNCshellsort+0x4a>
     df6:	47 01       	movw	r8, r14
     df8:	ff 20       	and	r15, r15
     dfa:	1c f4       	brge	.+6      	; 0xe02 <FUNCshellsort+0xdc>
     dfc:	ff ef       	ldi	r31, 0xFF	; 255
     dfe:	8f 1a       	sub	r8, r31
     e00:	9f 0a       	sbc	r9, r31
     e02:	95 94       	asr	r9
     e04:	87 94       	ror	r8
     e06:	18 14       	cp	r1, r8
     e08:	19 04       	cpc	r1, r9
     e0a:	e4 f4       	brge	.+56     	; 0xe44 <FUNCshellsort+0x11e>
     e0c:	74 01       	movw	r14, r8
     e0e:	01 c0       	rjmp	.+2      	; 0xe12 <FUNCshellsort+0xec>
     e10:	74 01       	movw	r14, r8
     e12:	82 14       	cp	r8, r2
     e14:	93 04       	cpc	r9, r3
     e16:	7c f7       	brge	.-34     	; 0xdf6 <FUNCshellsort+0xd0>
     e18:	64 01       	movw	r12, r8
     e1a:	ce 18       	sub	r12, r14
     e1c:	df 08       	sbc	r13, r15
     e1e:	56 01       	movw	r10, r12
     e20:	aa 0c       	add	r10, r10
     e22:	bb 1c       	adc	r11, r11
     e24:	a4 0c       	add	r10, r4
     e26:	b5 1c       	adc	r11, r5
     e28:	88 0c       	add	r8, r8
     e2a:	99 1c       	adc	r9, r9
     e2c:	84 0c       	add	r8, r4
     e2e:	95 1c       	adc	r9, r5
     e30:	31 01       	movw	r6, r2
     e32:	6e 18       	sub	r6, r14
     e34:	7f 08       	sbc	r7, r15
     e36:	c7 01       	movw	r24, r14
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	91 95       	neg	r25
     e3e:	81 95       	neg	r24
     e40:	91 09       	sbc	r25, r1
     e42:	96 cf       	rjmp	.-212    	; 0xd70 <FUNCshellsort+0x4a>
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	ff 90       	pop	r15
     e56:	ef 90       	pop	r14
     e58:	df 90       	pop	r13
     e5a:	cf 90       	pop	r12
     e5c:	bf 90       	pop	r11
     e5e:	af 90       	pop	r10
     e60:	9f 90       	pop	r9
     e62:	8f 90       	pop	r8
     e64:	7f 90       	pop	r7
     e66:	6f 90       	pop	r6
     e68:	5f 90       	pop	r5
     e6a:	4f 90       	pop	r4
     e6c:	3f 90       	pop	r3
     e6e:	2f 90       	pop	r2
     e70:	08 95       	ret

00000e72 <FUNCpmax>:
     e72:	86 17       	cp	r24, r22
     e74:	97 07       	cpc	r25, r23
     e76:	0c f4       	brge	.+2      	; 0xe7a <FUNCpmax+0x8>
     e78:	cb 01       	movw	r24, r22
     e7a:	08 95       	ret

00000e7c <FUNCgcd>:
     e7c:	9b 01       	movw	r18, r22
     e7e:	67 2b       	or	r22, r23
     e80:	11 f4       	brne	.+4      	; 0xe86 <FUNCgcd+0xa>
     e82:	08 95       	ret
     e84:	9a 01       	movw	r18, r20
     e86:	b9 01       	movw	r22, r18
     e88:	0e 94 05 18 	call	0x300a	; 0x300a <__divmodhi4>
     e8c:	ac 01       	movw	r20, r24
     e8e:	82 2f       	mov	r24, r18
     e90:	93 2f       	mov	r25, r19
     e92:	41 15       	cp	r20, r1
     e94:	51 05       	cpc	r21, r1
     e96:	b1 f7       	brne	.-20     	; 0xe84 <FUNCgcd+0x8>
     e98:	08 95       	ret

00000e9a <FUNCstrToInt>:
     e9a:	fc 01       	movw	r30, r24
     e9c:	90 81       	ld	r25, Z
     e9e:	80 ed       	ldi	r24, 0xD0	; 208
     ea0:	89 0f       	add	r24, r25
     ea2:	8a 30       	cpi	r24, 0x0A	; 10
     ea4:	d0 f4       	brcc	.+52     	; 0xeda <FUNCstrToInt+0x40>
     ea6:	31 96       	adiw	r30, 0x01	; 1
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	a9 01       	movw	r20, r18
     eae:	44 0f       	add	r20, r20
     eb0:	55 1f       	adc	r21, r21
     eb2:	22 0f       	add	r18, r18
     eb4:	33 1f       	adc	r19, r19
     eb6:	22 0f       	add	r18, r18
     eb8:	33 1f       	adc	r19, r19
     eba:	22 0f       	add	r18, r18
     ebc:	33 1f       	adc	r19, r19
     ebe:	42 0f       	add	r20, r18
     ec0:	53 1f       	adc	r21, r19
     ec2:	29 2f       	mov	r18, r25
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	20 53       	subi	r18, 0x30	; 48
     ec8:	31 09       	sbc	r19, r1
     eca:	24 0f       	add	r18, r20
     ecc:	35 1f       	adc	r19, r21
     ece:	91 91       	ld	r25, Z+
     ed0:	80 ed       	ldi	r24, 0xD0	; 208
     ed2:	89 0f       	add	r24, r25
     ed4:	8a 30       	cpi	r24, 0x0A	; 10
     ed6:	50 f3       	brcs	.-44     	; 0xeac <FUNCstrToInt+0x12>
     ed8:	02 c0       	rjmp	.+4      	; 0xede <FUNCstrToInt+0x44>
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	c9 01       	movw	r24, r18
     ee0:	08 95       	ret

00000ee2 <FUNCfilter>:
     ee2:	86 23       	and	r24, r22
     ee4:	08 95       	ret

00000ee6 <FUNCticks>:
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	39 f0       	breq	.+14     	; 0xef8 <FUNCticks+0x12>
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	2f 5f       	subi	r18, 0xFF	; 255
     ef0:	3f 4f       	sbci	r19, 0xFF	; 255
     ef2:	82 17       	cp	r24, r18
     ef4:	93 07       	cpc	r25, r19
     ef6:	d9 f7       	brne	.-10     	; 0xeee <FUNCticks+0x8>
     ef8:	08 95       	ret

00000efa <FUNCtwocomptoint8bit>:
     efa:	87 ff       	sbrs	r24, 7
     efc:	08 c0       	rjmp	.+16     	; 0xf0e <FUNCtwocomptoint8bit+0x14>
     efe:	91 95       	neg	r25
     f00:	81 95       	neg	r24
     f02:	91 09       	sbc	r25, r1
     f04:	99 27       	eor	r25, r25
     f06:	91 95       	neg	r25
     f08:	81 95       	neg	r24
     f0a:	91 09       	sbc	r25, r1
     f0c:	08 95       	ret
     f0e:	8f 77       	andi	r24, 0x7F	; 127
     f10:	99 27       	eor	r25, r25
     f12:	08 95       	ret

00000f14 <FUNCtwocomptoint10bit>:
     f14:	91 ff       	sbrs	r25, 1
     f16:	08 c0       	rjmp	.+16     	; 0xf28 <FUNCtwocomptoint10bit+0x14>
     f18:	91 95       	neg	r25
     f1a:	81 95       	neg	r24
     f1c:	91 09       	sbc	r25, r1
     f1e:	93 70       	andi	r25, 0x03	; 3
     f20:	91 95       	neg	r25
     f22:	81 95       	neg	r24
     f24:	91 09       	sbc	r25, r1
     f26:	08 95       	ret
     f28:	91 70       	andi	r25, 0x01	; 1
     f2a:	08 95       	ret

00000f2c <FUNCtwocomptointnbit>:
     f2c:	61 50       	subi	r22, 0x01	; 1
     f2e:	21 e0       	ldi	r18, 0x01	; 1
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <FUNCtwocomptointnbit+0xc>
     f34:	22 0f       	add	r18, r18
     f36:	33 1f       	adc	r19, r19
     f38:	6a 95       	dec	r22
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <FUNCtwocomptointnbit+0x8>
     f3c:	a9 01       	movw	r20, r18
     f3e:	41 50       	subi	r20, 0x01	; 1
     f40:	51 09       	sbc	r21, r1
     f42:	b9 01       	movw	r22, r18
     f44:	68 23       	and	r22, r24
     f46:	79 23       	and	r23, r25
     f48:	67 2b       	or	r22, r23
     f4a:	29 f0       	breq	.+10     	; 0xf56 <FUNCtwocomptointnbit+0x2a>
     f4c:	84 23       	and	r24, r20
     f4e:	95 23       	and	r25, r21
     f50:	82 1b       	sub	r24, r18
     f52:	93 0b       	sbc	r25, r19
     f54:	08 95       	ret
     f56:	84 23       	and	r24, r20
     f58:	95 23       	and	r25, r21
     f5a:	08 95       	ret

00000f5c <FUNCdec2bcd>:
     f5c:	9d ec       	ldi	r25, 0xCD	; 205
     f5e:	89 9f       	mul	r24, r25
     f60:	91 2d       	mov	r25, r1
     f62:	11 24       	eor	r1, r1
     f64:	96 95       	lsr	r25
     f66:	96 95       	lsr	r25
     f68:	96 95       	lsr	r25
     f6a:	39 2f       	mov	r19, r25
     f6c:	33 0f       	add	r19, r19
     f6e:	23 2f       	mov	r18, r19
     f70:	22 0f       	add	r18, r18
     f72:	22 0f       	add	r18, r18
     f74:	23 0f       	add	r18, r19
     f76:	82 1b       	sub	r24, r18
     f78:	20 e1       	ldi	r18, 0x10	; 16
     f7a:	92 9f       	mul	r25, r18
     f7c:	80 0d       	add	r24, r0
     f7e:	11 24       	eor	r1, r1
     f80:	08 95       	ret

00000f82 <FUNCbcd2dec>:
     f82:	98 2f       	mov	r25, r24
     f84:	92 95       	swap	r25
     f86:	9f 70       	andi	r25, 0x0F	; 15
     f88:	99 0f       	add	r25, r25
     f8a:	29 2f       	mov	r18, r25
     f8c:	22 0f       	add	r18, r18
     f8e:	22 0f       	add	r18, r18
     f90:	92 0f       	add	r25, r18
     f92:	8f 70       	andi	r24, 0x0F	; 15
     f94:	89 0f       	add	r24, r25
     f96:	08 95       	ret

00000f98 <FUNCresizestr>:
     f98:	fc 01       	movw	r30, r24
     f9a:	db 01       	movw	r26, r22
     f9c:	a3 5c       	subi	r26, 0xC3	; 195
     f9e:	be 4f       	sbci	r27, 0xFE	; 254
     fa0:	1c 92       	st	X, r1
     fa2:	16 16       	cp	r1, r22
     fa4:	17 06       	cpc	r1, r23
     fa6:	14 f5       	brge	.+68     	; 0xfec <FUNCresizestr+0x54>
     fa8:	90 81       	ld	r25, Z
     faa:	91 11       	cpse	r25, r1
     fac:	0c c0       	rjmp	.+24     	; 0xfc6 <FUNCresizestr+0x2e>
     fae:	17 c0       	rjmp	.+46     	; 0xfde <FUNCresizestr+0x46>
     fb0:	91 91       	ld	r25, Z+
     fb2:	91 11       	cpse	r25, r1
     fb4:	0d c0       	rjmp	.+26     	; 0xfd0 <FUNCresizestr+0x38>
     fb6:	15 c0       	rjmp	.+42     	; 0xfe2 <FUNCresizestr+0x4a>
     fb8:	81 93       	st	Z+, r24
     fba:	2f 5f       	subi	r18, 0xFF	; 255
     fbc:	3f 4f       	sbci	r19, 0xFF	; 255
     fbe:	26 17       	cp	r18, r22
     fc0:	37 07       	cpc	r19, r23
     fc2:	d4 f3       	brlt	.-12     	; 0xfb8 <FUNCresizestr+0x20>
     fc4:	13 c0       	rjmp	.+38     	; 0xfec <FUNCresizestr+0x54>
     fc6:	ad e3       	ldi	r26, 0x3D	; 61
     fc8:	b1 e0       	ldi	r27, 0x01	; 1
     fca:	31 96       	adiw	r30, 0x01	; 1
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	9d 93       	st	X+, r25
     fd2:	2f 5f       	subi	r18, 0xFF	; 255
     fd4:	3f 4f       	sbci	r19, 0xFF	; 255
     fd6:	62 17       	cp	r22, r18
     fd8:	73 07       	cpc	r23, r19
     fda:	51 f7       	brne	.-44     	; 0xfb0 <FUNCresizestr+0x18>
     fdc:	07 c0       	rjmp	.+14     	; 0xfec <FUNCresizestr+0x54>
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	f9 01       	movw	r30, r18
     fe4:	e3 5c       	subi	r30, 0xC3	; 195
     fe6:	fe 4f       	sbci	r31, 0xFE	; 254
     fe8:	80 e2       	ldi	r24, 0x20	; 32
     fea:	e6 cf       	rjmp	.-52     	; 0xfb8 <FUNCresizestr+0x20>
     fec:	8d e3       	ldi	r24, 0x3D	; 61
     fee:	91 e0       	ldi	r25, 0x01	; 1
     ff0:	08 95       	ret

00000ff2 <FUNCtrimmer>:
     ff2:	4f 92       	push	r4
     ff4:	5f 92       	push	r5
     ff6:	6f 92       	push	r6
     ff8:	7f 92       	push	r7
     ffa:	af 92       	push	r10
     ffc:	bf 92       	push	r11
     ffe:	cf 92       	push	r12
    1000:	df 92       	push	r13
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	29 01       	movw	r4, r18
    1014:	3a 01       	movw	r6, r20
    1016:	9b 01       	movw	r18, r22
    1018:	ac 01       	movw	r20, r24
    101a:	24 19       	sub	r18, r4
    101c:	35 09       	sbc	r19, r5
    101e:	46 09       	sbc	r20, r6
    1020:	57 09       	sbc	r21, r7
    1022:	89 89       	ldd	r24, Y+17	; 0x11
    1024:	9a 89       	ldd	r25, Y+18	; 0x12
    1026:	ab 89       	ldd	r26, Y+19	; 0x13
    1028:	bc 89       	ldd	r27, Y+20	; 0x14
    102a:	bc 01       	movw	r22, r24
    102c:	cd 01       	movw	r24, r26
    102e:	6a 19       	sub	r22, r10
    1030:	7b 09       	sbc	r23, r11
    1032:	8c 09       	sbc	r24, r12
    1034:	9d 09       	sbc	r25, r13
    1036:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__mulsi3>
    103a:	a8 01       	movw	r20, r16
    103c:	97 01       	movw	r18, r14
    103e:	24 19       	sub	r18, r4
    1040:	35 09       	sbc	r19, r5
    1042:	46 09       	sbc	r20, r6
    1044:	57 09       	sbc	r21, r7
    1046:	0e 94 18 18 	call	0x3030	; 0x3030 <__divmodsi4>
    104a:	ca 01       	movw	r24, r20
    104c:	b9 01       	movw	r22, r18
    104e:	6a 0d       	add	r22, r10
    1050:	7b 1d       	adc	r23, r11
    1052:	8c 1d       	adc	r24, r12
    1054:	9d 1d       	adc	r25, r13
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	ff 90       	pop	r15
    1060:	ef 90       	pop	r14
    1062:	df 90       	pop	r13
    1064:	cf 90       	pop	r12
    1066:	bf 90       	pop	r11
    1068:	af 90       	pop	r10
    106a:	7f 90       	pop	r7
    106c:	6f 90       	pop	r6
    106e:	5f 90       	pop	r5
    1070:	4f 90       	pop	r4
    1072:	08 95       	ret

00001074 <Pwr>:
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	61 15       	cp	r22, r1
    1078:	71 05       	cpc	r23, r1
    107a:	99 f0       	breq	.+38     	; 0x10a2 <Pwr+0x2e>
    107c:	41 e0       	ldi	r20, 0x01	; 1
    107e:	50 e0       	ldi	r21, 0x00	; 0
    1080:	21 e0       	ldi	r18, 0x01	; 1
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	fa 01       	movw	r30, r20
    1088:	e8 9f       	mul	r30, r24
    108a:	a0 01       	movw	r20, r0
    108c:	e9 9f       	mul	r30, r25
    108e:	50 0d       	add	r21, r0
    1090:	f8 9f       	mul	r31, r24
    1092:	50 0d       	add	r21, r0
    1094:	11 24       	eor	r1, r1
    1096:	2f 5f       	subi	r18, 0xFF	; 255
    1098:	3f 4f       	sbci	r19, 0xFF	; 255
    109a:	62 17       	cp	r22, r18
    109c:	73 07       	cpc	r23, r19
    109e:	98 f7       	brcc	.-26     	; 0x1086 <Pwr+0x12>
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <Pwr+0x32>
    10a2:	41 e0       	ldi	r20, 0x01	; 1
    10a4:	50 e0       	ldi	r21, 0x00	; 0
    10a6:	ca 01       	movw	r24, r20
    10a8:	08 95       	ret

000010aa <StringLength>:
    10aa:	fc 01       	movw	r30, r24
    10ac:	20 81       	ld	r18, Z
    10ae:	22 23       	and	r18, r18
    10b0:	41 f0       	breq	.+16     	; 0x10c2 <StringLength+0x18>
    10b2:	31 96       	adiw	r30, 0x01	; 1
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	01 96       	adiw	r24, 0x01	; 1
    10ba:	21 91       	ld	r18, Z+
    10bc:	21 11       	cpse	r18, r1
    10be:	fc cf       	rjmp	.-8      	; 0x10b8 <StringLength+0xe>
    10c0:	08 95       	ret
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	08 95       	ret

000010c8 <FUNCtrim>:
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	ec 01       	movw	r28, r24
    10ce:	ed df       	rcall	.-38     	; 0x10aa <StringLength>
    10d0:	9c 01       	movw	r18, r24
    10d2:	21 50       	subi	r18, 0x01	; 1
    10d4:	31 09       	sbc	r19, r1
    10d6:	62 f0       	brmi	.+24     	; 0x10f0 <FUNCtrim+0x28>
    10d8:	fe 01       	movw	r30, r28
    10da:	e8 0f       	add	r30, r24
    10dc:	f9 1f       	adc	r31, r25
    10de:	92 91       	ld	r25, -Z
    10e0:	90 32       	cpi	r25, 0x20	; 32
    10e2:	19 f0       	breq	.+6      	; 0x10ea <FUNCtrim+0x22>
    10e4:	99 50       	subi	r25, 0x09	; 9
    10e6:	92 30       	cpi	r25, 0x02	; 2
    10e8:	18 f4       	brcc	.+6      	; 0x10f0 <FUNCtrim+0x28>
    10ea:	21 50       	subi	r18, 0x01	; 1
    10ec:	31 09       	sbc	r19, r1
    10ee:	b8 f7       	brcc	.-18     	; 0x10de <FUNCtrim+0x16>
    10f0:	c2 0f       	add	r28, r18
    10f2:	d3 1f       	adc	r29, r19
    10f4:	19 82       	std	Y+1, r1	; 0x01
    10f6:	c9 01       	movw	r24, r18
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	08 95       	ret

000010fe <Reverse>:
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	ec 01       	movw	r28, r24
    1104:	d2 df       	rcall	.-92     	; 0x10aa <StringLength>
    1106:	9c 01       	movw	r18, r24
    1108:	21 50       	subi	r18, 0x01	; 1
    110a:	31 09       	sbc	r19, r1
    110c:	12 16       	cp	r1, r18
    110e:	13 06       	cpc	r1, r19
    1110:	84 f4       	brge	.+32     	; 0x1132 <__stack+0x33>
    1112:	de 01       	movw	r26, r28
    1114:	a8 0f       	add	r26, r24
    1116:	b9 1f       	adc	r27, r25
    1118:	fe 01       	movw	r30, r28
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	40 81       	ld	r20, Z
    1120:	5e 91       	ld	r21, -X
    1122:	51 93       	st	Z+, r21
    1124:	4c 93       	st	X, r20
    1126:	01 96       	adiw	r24, 0x01	; 1
    1128:	21 50       	subi	r18, 0x01	; 1
    112a:	31 09       	sbc	r19, r1
    112c:	82 17       	cp	r24, r18
    112e:	93 07       	cpc	r25, r19
    1130:	b4 f3       	brlt	.-20     	; 0x111e <__stack+0x1f>
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <FUNCi32toa>:
    1138:	8f 92       	push	r8
    113a:	9f 92       	push	r9
    113c:	af 92       	push	r10
    113e:	bf 92       	push	r11
    1140:	cf 92       	push	r12
    1142:	df 92       	push	r13
    1144:	ef 92       	push	r14
    1146:	ff 92       	push	r15
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	6b 01       	movw	r12, r22
    1152:	7c 01       	movw	r14, r24
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	ff 20       	and	r15, r15
    115a:	3c f4       	brge	.+14     	; 0x116a <FUNCi32toa+0x32>
    115c:	88 27       	eor	r24, r24
    115e:	99 27       	eor	r25, r25
    1160:	dc 01       	movw	r26, r24
    1162:	8c 19       	sub	r24, r12
    1164:	9d 09       	sbc	r25, r13
    1166:	ae 09       	sbc	r26, r14
    1168:	bf 09       	sbc	r27, r15
    116a:	bc 01       	movw	r22, r24
    116c:	cd 01       	movw	r24, r26
    116e:	10 e0       	ldi	r17, 0x00	; 0
    1170:	0f 2e       	mov	r0, r31
    1172:	fa e0       	ldi	r31, 0x0A	; 10
    1174:	8f 2e       	mov	r8, r31
    1176:	91 2c       	mov	r9, r1
    1178:	a1 2c       	mov	r10, r1
    117a:	b1 2c       	mov	r11, r1
    117c:	f0 2d       	mov	r31, r0
    117e:	01 c0       	rjmp	.+2      	; 0x1182 <FUNCi32toa+0x4a>
    1180:	10 2f       	mov	r17, r16
    1182:	01 e0       	ldi	r16, 0x01	; 1
    1184:	01 0f       	add	r16, r17
    1186:	c1 2f       	mov	r28, r17
    1188:	d0 e0       	ldi	r29, 0x00	; 0
    118a:	c3 5c       	subi	r28, 0xC3	; 195
    118c:	de 4f       	sbci	r29, 0xFE	; 254
    118e:	a5 01       	movw	r20, r10
    1190:	94 01       	movw	r18, r8
    1192:	0e 94 18 18 	call	0x3030	; 0x3030 <__divmodsi4>
    1196:	60 5d       	subi	r22, 0xD0	; 208
    1198:	68 83       	st	Y, r22
    119a:	62 2f       	mov	r22, r18
    119c:	73 2f       	mov	r23, r19
    119e:	84 2f       	mov	r24, r20
    11a0:	95 2f       	mov	r25, r21
    11a2:	16 16       	cp	r1, r22
    11a4:	17 06       	cpc	r1, r23
    11a6:	18 06       	cpc	r1, r24
    11a8:	19 06       	cpc	r1, r25
    11aa:	54 f3       	brlt	.-44     	; 0x1180 <FUNCi32toa+0x48>
    11ac:	ff 20       	and	r15, r15
    11ae:	44 f4       	brge	.+16     	; 0x11c0 <FUNCi32toa+0x88>
    11b0:	e0 2f       	mov	r30, r16
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	e3 5c       	subi	r30, 0xC3	; 195
    11b6:	fe 4f       	sbci	r31, 0xFE	; 254
    11b8:	8d e2       	ldi	r24, 0x2D	; 45
    11ba:	80 83       	st	Z, r24
    11bc:	02 e0       	ldi	r16, 0x02	; 2
    11be:	01 0f       	add	r16, r17
    11c0:	e0 2f       	mov	r30, r16
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	e3 5c       	subi	r30, 0xC3	; 195
    11c6:	fe 4f       	sbci	r31, 0xFE	; 254
    11c8:	10 82       	st	Z, r1
    11ca:	8d e3       	ldi	r24, 0x3D	; 61
    11cc:	91 e0       	ldi	r25, 0x01	; 1
    11ce:	97 df       	rcall	.-210    	; 0x10fe <Reverse>
    11d0:	8d e3       	ldi	r24, 0x3D	; 61
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	1f 91       	pop	r17
    11da:	0f 91       	pop	r16
    11dc:	ff 90       	pop	r15
    11de:	ef 90       	pop	r14
    11e0:	df 90       	pop	r13
    11e2:	cf 90       	pop	r12
    11e4:	bf 90       	pop	r11
    11e6:	af 90       	pop	r10
    11e8:	9f 90       	pop	r9
    11ea:	8f 90       	pop	r8
    11ec:	08 95       	ret

000011ee <FUNCi16toa>:
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	ec 01       	movw	r28, r24
    11f8:	99 23       	and	r25, r25
    11fa:	24 f4       	brge	.+8      	; 0x1204 <FUNCi16toa+0x16>
    11fc:	88 27       	eor	r24, r24
    11fe:	99 27       	eor	r25, r25
    1200:	8c 1b       	sub	r24, r28
    1202:	9d 0b       	sbc	r25, r29
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	0a e0       	ldi	r16, 0x0A	; 10
    1208:	10 e0       	ldi	r17, 0x00	; 0
    120a:	01 c0       	rjmp	.+2      	; 0x120e <FUNCi16toa+0x20>
    120c:	23 2f       	mov	r18, r19
    120e:	31 e0       	ldi	r19, 0x01	; 1
    1210:	32 0f       	add	r19, r18
    1212:	e2 2f       	mov	r30, r18
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	e3 5c       	subi	r30, 0xC3	; 195
    1218:	fe 4f       	sbci	r31, 0xFE	; 254
    121a:	b8 01       	movw	r22, r16
    121c:	0e 94 05 18 	call	0x300a	; 0x300a <__divmodhi4>
    1220:	80 5d       	subi	r24, 0xD0	; 208
    1222:	80 83       	st	Z, r24
    1224:	86 2f       	mov	r24, r22
    1226:	97 2f       	mov	r25, r23
    1228:	18 16       	cp	r1, r24
    122a:	19 06       	cpc	r1, r25
    122c:	7c f3       	brlt	.-34     	; 0x120c <FUNCi16toa+0x1e>
    122e:	dd 23       	and	r29, r29
    1230:	44 f4       	brge	.+16     	; 0x1242 <FUNCi16toa+0x54>
    1232:	e3 2f       	mov	r30, r19
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	e3 5c       	subi	r30, 0xC3	; 195
    1238:	fe 4f       	sbci	r31, 0xFE	; 254
    123a:	8d e2       	ldi	r24, 0x2D	; 45
    123c:	80 83       	st	Z, r24
    123e:	32 e0       	ldi	r19, 0x02	; 2
    1240:	32 0f       	add	r19, r18
    1242:	e3 2f       	mov	r30, r19
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	e3 5c       	subi	r30, 0xC3	; 195
    1248:	fe 4f       	sbci	r31, 0xFE	; 254
    124a:	10 82       	st	Z, r1
    124c:	8d e3       	ldi	r24, 0x3D	; 61
    124e:	91 e0       	ldi	r25, 0x01	; 1
    1250:	56 df       	rcall	.-340    	; 0x10fe <Reverse>
    1252:	8d e3       	ldi	r24, 0x3D	; 61
    1254:	91 e0       	ldi	r25, 0x01	; 1
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	08 95       	ret

00001260 <FUNCui16toa>:
    1260:	cf 93       	push	r28
    1262:	ac 01       	movw	r20, r24
    1264:	e0 e0       	ldi	r30, 0x00	; 0
    1266:	c1 e0       	ldi	r28, 0x01	; 1
    1268:	ce 0f       	add	r28, r30
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	e3 5c       	subi	r30, 0xC3	; 195
    126e:	fe 4f       	sbci	r31, 0xFE	; 254
    1270:	9a 01       	movw	r18, r20
    1272:	ad ec       	ldi	r26, 0xCD	; 205
    1274:	bc ec       	ldi	r27, 0xCC	; 204
    1276:	0e 94 3d 18 	call	0x307a	; 0x307a <__umulhisi3>
    127a:	96 95       	lsr	r25
    127c:	87 95       	ror	r24
    127e:	96 95       	lsr	r25
    1280:	87 95       	ror	r24
    1282:	96 95       	lsr	r25
    1284:	87 95       	ror	r24
    1286:	9c 01       	movw	r18, r24
    1288:	22 0f       	add	r18, r18
    128a:	33 1f       	adc	r19, r19
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	82 0f       	add	r24, r18
    129a:	93 1f       	adc	r25, r19
    129c:	9a 01       	movw	r18, r20
    129e:	28 1b       	sub	r18, r24
    12a0:	39 0b       	sbc	r19, r25
    12a2:	c9 01       	movw	r24, r18
    12a4:	80 5d       	subi	r24, 0xD0	; 208
    12a6:	80 83       	st	Z, r24
    12a8:	9a 01       	movw	r18, r20
    12aa:	0e 94 3d 18 	call	0x307a	; 0x307a <__umulhisi3>
    12ae:	ac 01       	movw	r20, r24
    12b0:	56 95       	lsr	r21
    12b2:	47 95       	ror	r20
    12b4:	56 95       	lsr	r21
    12b6:	47 95       	ror	r20
    12b8:	56 95       	lsr	r21
    12ba:	47 95       	ror	r20
    12bc:	ec 2f       	mov	r30, r28
    12be:	41 15       	cp	r20, r1
    12c0:	51 05       	cpc	r21, r1
    12c2:	89 f6       	brne	.-94     	; 0x1266 <FUNCui16toa+0x6>
    12c4:	ec 2f       	mov	r30, r28
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	e3 5c       	subi	r30, 0xC3	; 195
    12ca:	fe 4f       	sbci	r31, 0xFE	; 254
    12cc:	10 82       	st	Z, r1
    12ce:	8d e3       	ldi	r24, 0x3D	; 61
    12d0:	91 e0       	ldi	r25, 0x01	; 1
    12d2:	15 df       	rcall	.-470    	; 0x10fe <Reverse>
    12d4:	8d e3       	ldi	r24, 0x3D	; 61
    12d6:	91 e0       	ldi	r25, 0x01	; 1
    12d8:	cf 91       	pop	r28
    12da:	08 95       	ret

000012dc <FUNCbcd2bin>:
    12dc:	98 2f       	mov	r25, r24
    12de:	92 95       	swap	r25
    12e0:	9f 70       	andi	r25, 0x0F	; 15
    12e2:	99 0f       	add	r25, r25
    12e4:	29 2f       	mov	r18, r25
    12e6:	22 0f       	add	r18, r18
    12e8:	22 0f       	add	r18, r18
    12ea:	92 0f       	add	r25, r18
    12ec:	8f 70       	andi	r24, 0x0F	; 15
    12ee:	89 0f       	add	r24, r25
    12f0:	08 95       	ret

000012f2 <FUNCbin2bcd>:
    12f2:	ac 01       	movw	r20, r24
    12f4:	9c 01       	movw	r18, r24
    12f6:	ad ec       	ldi	r26, 0xCD	; 205
    12f8:	bc ec       	ldi	r27, 0xCC	; 204
    12fa:	0e 94 3d 18 	call	0x307a	; 0x307a <__umulhisi3>
    12fe:	96 95       	lsr	r25
    1300:	87 95       	ror	r24
    1302:	96 95       	lsr	r25
    1304:	87 95       	ror	r24
    1306:	96 95       	lsr	r25
    1308:	87 95       	ror	r24
    130a:	bc 01       	movw	r22, r24
    130c:	66 0f       	add	r22, r22
    130e:	77 1f       	adc	r23, r23
    1310:	9c 01       	movw	r18, r24
    1312:	22 0f       	add	r18, r18
    1314:	33 1f       	adc	r19, r19
    1316:	22 0f       	add	r18, r18
    1318:	33 1f       	adc	r19, r19
    131a:	22 0f       	add	r18, r18
    131c:	33 1f       	adc	r19, r19
    131e:	26 0f       	add	r18, r22
    1320:	37 1f       	adc	r19, r23
    1322:	42 1b       	sub	r20, r18
    1324:	53 0b       	sbc	r21, r19
    1326:	34 2f       	mov	r19, r20
    1328:	20 e1       	ldi	r18, 0x10	; 16
    132a:	82 9f       	mul	r24, r18
    132c:	30 0d       	add	r19, r0
    132e:	11 24       	eor	r1, r1
    1330:	83 2f       	mov	r24, r19
    1332:	08 95       	ret

00001334 <FUNCgcd1>:
    1334:	cf 92       	push	r12
    1336:	df 92       	push	r13
    1338:	ef 92       	push	r14
    133a:	ff 92       	push	r15
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	28 97       	sbiw	r28, 0x08	; 8
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
    1350:	6b 01       	movw	r12, r22
    1352:	7c 01       	movw	r14, r24
    1354:	69 83       	std	Y+1, r22	; 0x01
    1356:	7a 83       	std	Y+2, r23	; 0x02
    1358:	8b 83       	std	Y+3, r24	; 0x03
    135a:	9c 83       	std	Y+4, r25	; 0x04
    135c:	2d 83       	std	Y+5, r18	; 0x05
    135e:	3e 83       	std	Y+6, r19	; 0x06
    1360:	4f 83       	std	Y+7, r20	; 0x07
    1362:	58 87       	std	Y+8, r21	; 0x08
    1364:	c2 16       	cp	r12, r18
    1366:	d3 06       	cpc	r13, r19
    1368:	e4 06       	cpc	r14, r20
    136a:	f5 06       	cpc	r15, r21
    136c:	34 f4       	brge	.+12     	; 0x137a <FUNCgcd1+0x46>
    136e:	be 01       	movw	r22, r28
    1370:	6b 5f       	subi	r22, 0xFB	; 251
    1372:	7f 4f       	sbci	r23, 0xFF	; 255
    1374:	ce 01       	movw	r24, r28
    1376:	01 96       	adiw	r24, 0x01	; 1
    1378:	85 dc       	rcall	.-1782   	; 0xc84 <FUNCswap>
    137a:	8d 81       	ldd	r24, Y+5	; 0x05
    137c:	9e 81       	ldd	r25, Y+6	; 0x06
    137e:	af 81       	ldd	r26, Y+7	; 0x07
    1380:	b8 85       	ldd	r27, Y+8	; 0x08
    1382:	89 2b       	or	r24, r25
    1384:	8a 2b       	or	r24, r26
    1386:	8b 2b       	or	r24, r27
    1388:	71 f4       	brne	.+28     	; 0x13a6 <FUNCgcd1+0x72>
    138a:	69 81       	ldd	r22, Y+1	; 0x01
    138c:	7a 81       	ldd	r23, Y+2	; 0x02
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	a9 01       	movw	r20, r18
    1398:	0e 94 18 18 	call	0x3030	; 0x3030 <__divmodsi4>
    139c:	61 15       	cp	r22, r1
    139e:	71 05       	cpc	r23, r1
    13a0:	81 05       	cpc	r24, r1
    13a2:	91 05       	cpc	r25, r1
    13a4:	29 f4       	brne	.+10     	; 0x13b0 <FUNCgcd1+0x7c>
    13a6:	6d 81       	ldd	r22, Y+5	; 0x05
    13a8:	7e 81       	ldd	r23, Y+6	; 0x06
    13aa:	8f 81       	ldd	r24, Y+7	; 0x07
    13ac:	98 85       	ldd	r25, Y+8	; 0x08
    13ae:	05 c0       	rjmp	.+10     	; 0x13ba <FUNCgcd1+0x86>
    13b0:	6d 83       	std	Y+5, r22	; 0x05
    13b2:	7e 83       	std	Y+6, r23	; 0x06
    13b4:	8f 83       	std	Y+7, r24	; 0x07
    13b6:	98 87       	std	Y+8, r25	; 0x08
    13b8:	f6 cf       	rjmp	.-20     	; 0x13a6 <FUNCgcd1+0x72>
    13ba:	28 96       	adiw	r28, 0x08	; 8
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	ff 90       	pop	r15
    13cc:	ef 90       	pop	r14
    13ce:	df 90       	pop	r13
    13d0:	cf 90       	pop	r12
    13d2:	08 95       	ret

000013d4 <FUNCpincheck>:
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <FUNCpincheck+0x8>
    13d8:	95 95       	asr	r25
    13da:	87 95       	ror	r24
    13dc:	6a 95       	dec	r22
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <FUNCpincheck+0x4>
    13e0:	81 70       	andi	r24, 0x01	; 1
    13e2:	08 95       	ret

000013e4 <FUNCprint_binary>:
    13e4:	ed e3       	ldi	r30, 0x3D	; 61
    13e6:	f1 e0       	ldi	r31, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	20 e8       	ldi	r18, 0x80	; 128
    13ec:	50 e3       	ldi	r21, 0x30	; 48
    13ee:	41 e3       	ldi	r20, 0x31	; 49
    13f0:	38 2f       	mov	r19, r24
    13f2:	32 23       	and	r19, r18
    13f4:	11 f0       	breq	.+4      	; 0x13fa <FUNCprint_binary+0x16>
    13f6:	40 83       	st	Z, r20
    13f8:	01 c0       	rjmp	.+2      	; 0x13fc <FUNCprint_binary+0x18>
    13fa:	50 83       	st	Z, r21
    13fc:	26 95       	lsr	r18
    13fe:	9f 5f       	subi	r25, 0xFF	; 255
    1400:	31 96       	adiw	r30, 0x01	; 1
    1402:	98 30       	cpi	r25, 0x08	; 8
    1404:	a9 f7       	brne	.-22     	; 0x13f0 <FUNCprint_binary+0xc>
    1406:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <FUNCstr+0x8>
    140a:	8d e3       	ldi	r24, 0x3D	; 61
    140c:	91 e0       	ldi	r25, 0x01	; 1
    140e:	08 95       	ret

00001410 <FUNCmayia>:
    1410:	a4 2f       	mov	r26, r20
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	10 97       	sbiw	r26, 0x00	; 0
    1416:	61 f0       	breq	.+24     	; 0x1430 <FUNCmayia+0x20>
    1418:	21 e0       	ldi	r18, 0x01	; 1
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	e1 e0       	ldi	r30, 0x01	; 1
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	ee 0f       	add	r30, r30
    1422:	ff 1f       	adc	r31, r31
    1424:	2f 5f       	subi	r18, 0xFF	; 255
    1426:	3f 4f       	sbci	r19, 0xFF	; 255
    1428:	a2 17       	cp	r26, r18
    142a:	b3 07       	cpc	r27, r19
    142c:	c8 f7       	brcc	.-14     	; 0x1420 <FUNCmayia+0x10>
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <FUNCmayia+0x24>
    1430:	e1 e0       	ldi	r30, 0x01	; 1
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	31 97       	sbiw	r30, 0x01	; 1
    1436:	6e 23       	and	r22, r30
    1438:	7f 23       	and	r23, r31
    143a:	8e 23       	and	r24, r30
    143c:	9f 23       	and	r25, r31
    143e:	86 27       	eor	r24, r22
    1440:	97 27       	eor	r25, r23
    1442:	68 23       	and	r22, r24
    1444:	79 23       	and	r23, r25
    1446:	02 c0       	rjmp	.+4      	; 0x144c <FUNCmayia+0x3c>
    1448:	66 0f       	add	r22, r22
    144a:	77 1f       	adc	r23, r23
    144c:	4a 95       	dec	r20
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <FUNCmayia+0x38>
    1450:	86 2b       	or	r24, r22
    1452:	97 2b       	or	r25, r23
    1454:	08 95       	ret

00001456 <FUNCenable>:
    1456:	fc 01       	movw	r30, r24
    1458:	9f b7       	in	r25, 0x3f	; 63
    145a:	8f b7       	in	r24, 0x3f	; 63
    145c:	8f 77       	andi	r24, 0x7F	; 127
    145e:	8f bf       	out	0x3f, r24	; 63
    1460:	9f bf       	out	0x3f, r25	; 63
    1462:	8a e3       	ldi	r24, 0x3A	; 58
    1464:	98 e0       	ldi	r25, 0x08	; 8
    1466:	91 83       	std	Z+1, r25	; 0x01
    1468:	80 83       	st	Z, r24
    146a:	85 e5       	ldi	r24, 0x55	; 85
    146c:	98 e0       	ldi	r25, 0x08	; 8
    146e:	93 83       	std	Z+3, r25	; 0x03
    1470:	82 83       	std	Z+2, r24	; 0x02
    1472:	8f e7       	ldi	r24, 0x7F	; 127
    1474:	98 e0       	ldi	r25, 0x08	; 8
    1476:	95 83       	std	Z+5, r25	; 0x05
    1478:	84 83       	std	Z+4, r24	; 0x04
    147a:	88 e0       	ldi	r24, 0x08	; 8
    147c:	9a e0       	ldi	r25, 0x0A	; 10
    147e:	97 83       	std	Z+7, r25	; 0x07
    1480:	86 83       	std	Z+6, r24	; 0x06
    1482:	87 e2       	ldi	r24, 0x27	; 39
    1484:	96 e0       	ldi	r25, 0x06	; 6
    1486:	91 87       	std	Z+9, r25	; 0x09
    1488:	80 87       	std	Z+8, r24	; 0x08
    148a:	85 e3       	ldi	r24, 0x35	; 53
    148c:	96 e0       	ldi	r25, 0x06	; 6
    148e:	93 87       	std	Z+11, r25	; 0x0b
    1490:	82 87       	std	Z+10, r24	; 0x0a
    1492:	87 e3       	ldi	r24, 0x37	; 55
    1494:	96 e0       	ldi	r25, 0x06	; 6
    1496:	95 87       	std	Z+13, r25	; 0x0d
    1498:	84 87       	std	Z+12, r24	; 0x0c
    149a:	8a e3       	ldi	r24, 0x3A	; 58
    149c:	96 e0       	ldi	r25, 0x06	; 6
    149e:	97 87       	std	Z+15, r25	; 0x0f
    14a0:	86 87       	std	Z+14, r24	; 0x0e
    14a2:	8d e3       	ldi	r24, 0x3D	; 61
    14a4:	96 e0       	ldi	r25, 0x06	; 6
    14a6:	91 8b       	std	Z+17, r25	; 0x11
    14a8:	80 8b       	std	Z+16, r24	; 0x10
    14aa:	80 e4       	ldi	r24, 0x40	; 64
    14ac:	96 e0       	ldi	r25, 0x06	; 6
    14ae:	93 8b       	std	Z+19, r25	; 0x13
    14b0:	82 8b       	std	Z+18, r24	; 0x12
    14b2:	81 e3       	ldi	r24, 0x31	; 49
    14b4:	96 e0       	ldi	r25, 0x06	; 6
    14b6:	95 8b       	std	Z+21, r25	; 0x15
    14b8:	84 8b       	std	Z+20, r24	; 0x14
    14ba:	83 e3       	ldi	r24, 0x33	; 51
    14bc:	96 e0       	ldi	r25, 0x06	; 6
    14be:	97 8b       	std	Z+23, r25	; 0x17
    14c0:	86 8b       	std	Z+22, r24	; 0x16
    14c2:	82 e4       	ldi	r24, 0x42	; 66
    14c4:	96 e0       	ldi	r25, 0x06	; 6
    14c6:	91 8f       	std	Z+25, r25	; 0x19
    14c8:	80 8f       	std	Z+24, r24	; 0x18
    14ca:	83 e6       	ldi	r24, 0x63	; 99
    14cc:	96 e0       	ldi	r25, 0x06	; 6
    14ce:	93 8f       	std	Z+27, r25	; 0x1b
    14d0:	82 8f       	std	Z+26, r24	; 0x1a
    14d2:	81 e7       	ldi	r24, 0x71	; 113
    14d4:	96 e0       	ldi	r25, 0x06	; 6
    14d6:	95 8f       	std	Z+29, r25	; 0x1d
    14d8:	84 8f       	std	Z+28, r24	; 0x1c
    14da:	83 e9       	ldi	r24, 0x93	; 147
    14dc:	96 e0       	ldi	r25, 0x06	; 6
    14de:	97 8f       	std	Z+31, r25	; 0x1f
    14e0:	86 8f       	std	Z+30, r24	; 0x1e
    14e2:	87 ef       	ldi	r24, 0xF7	; 247
    14e4:	98 e0       	ldi	r25, 0x08	; 8
    14e6:	91 a3       	std	Z+33, r25	; 0x21
    14e8:	80 a3       	std	Z+32, r24	; 0x20
    14ea:	80 e3       	ldi	r24, 0x30	; 48
    14ec:	99 e0       	ldi	r25, 0x09	; 9
    14ee:	93 a3       	std	Z+35, r25	; 0x23
    14f0:	82 a3       	std	Z+34, r24	; 0x22
    14f2:	8c e9       	ldi	r24, 0x9C	; 156
    14f4:	98 e0       	ldi	r25, 0x08	; 8
    14f6:	95 a3       	std	Z+37, r25	; 0x25
    14f8:	84 a3       	std	Z+36, r24	; 0x24
    14fa:	84 e6       	ldi	r24, 0x64	; 100
    14fc:	98 e0       	ldi	r25, 0x08	; 8
    14fe:	97 a3       	std	Z+39, r25	; 0x27
    1500:	86 a3       	std	Z+38, r24	; 0x26
    1502:	89 e3       	ldi	r24, 0x39	; 57
    1504:	97 e0       	ldi	r25, 0x07	; 7
    1506:	91 a7       	std	Z+41, r25	; 0x29
    1508:	80 a7       	std	Z+40, r24	; 0x28
    150a:	8e e3       	ldi	r24, 0x3E	; 62
    150c:	97 e0       	ldi	r25, 0x07	; 7
    150e:	93 a7       	std	Z+43, r25	; 0x2b
    1510:	82 a7       	std	Z+42, r24	; 0x2a
    1512:	8d e4       	ldi	r24, 0x4D	; 77
    1514:	97 e0       	ldi	r25, 0x07	; 7
    1516:	95 a7       	std	Z+45, r25	; 0x2d
    1518:	84 a7       	std	Z+44, r24	; 0x2c
    151a:	81 e7       	ldi	r24, 0x71	; 113
    151c:	97 e0       	ldi	r25, 0x07	; 7
    151e:	97 a7       	std	Z+47, r25	; 0x2f
    1520:	86 a7       	std	Z+46, r24	; 0x2e
    1522:	83 e7       	ldi	r24, 0x73	; 115
    1524:	97 e0       	ldi	r25, 0x07	; 7
    1526:	91 ab       	std	Z+49, r25	; 0x31
    1528:	80 ab       	std	Z+48, r24	; 0x30
    152a:	8d e7       	ldi	r24, 0x7D	; 125
    152c:	97 e0       	ldi	r25, 0x07	; 7
    152e:	93 ab       	std	Z+51, r25	; 0x33
    1530:	82 ab       	std	Z+50, r24	; 0x32
    1532:	8a e8       	ldi	r24, 0x8A	; 138
    1534:	97 e0       	ldi	r25, 0x07	; 7
    1536:	95 ab       	std	Z+53, r25	; 0x35
    1538:	84 ab       	std	Z+52, r24	; 0x34
    153a:	86 e9       	ldi	r24, 0x96	; 150
    153c:	97 e0       	ldi	r25, 0x07	; 7
    153e:	97 ab       	std	Z+55, r25	; 0x37
    1540:	86 ab       	std	Z+54, r24	; 0x36
    1542:	8e ea       	ldi	r24, 0xAE	; 174
    1544:	97 e0       	ldi	r25, 0x07	; 7
    1546:	91 af       	std	Z+57, r25	; 0x39
    1548:	80 af       	std	Z+56, r24	; 0x38
    154a:	81 ec       	ldi	r24, 0xC1	; 193
    154c:	97 e0       	ldi	r25, 0x07	; 7
    154e:	93 af       	std	Z+59, r25	; 0x3b
    1550:	82 af       	std	Z+58, r24	; 0x3a
    1552:	8c ec       	ldi	r24, 0xCC	; 204
    1554:	97 e0       	ldi	r25, 0x07	; 7
    1556:	95 af       	std	Z+61, r25	; 0x3d
    1558:	84 af       	std	Z+60, r24	; 0x3c
    155a:	89 ef       	ldi	r24, 0xF9	; 249
    155c:	97 e0       	ldi	r25, 0x07	; 7
    155e:	97 af       	std	Z+63, r25	; 0x3f
    1560:	86 af       	std	Z+62, r24	; 0x3e
    1562:	df 01       	movw	r26, r30
    1564:	a0 5c       	subi	r26, 0xC0	; 192
    1566:	bf 4f       	sbci	r27, 0xFF	; 255
    1568:	8e e6       	ldi	r24, 0x6E	; 110
    156a:	99 e0       	ldi	r25, 0x09	; 9
    156c:	11 96       	adiw	r26, 0x01	; 1
    156e:	9c 93       	st	X, r25
    1570:	8e 93       	st	-X, r24
    1572:	12 96       	adiw	r26, 0x02	; 2
    1574:	89 e7       	ldi	r24, 0x79	; 121
    1576:	99 e0       	ldi	r25, 0x09	; 9
    1578:	11 96       	adiw	r26, 0x01	; 1
    157a:	9c 93       	st	X, r25
    157c:	8e 93       	st	-X, r24
    157e:	12 96       	adiw	r26, 0x02	; 2
    1580:	8a e9       	ldi	r24, 0x9A	; 154
    1582:	99 e0       	ldi	r25, 0x09	; 9
    1584:	11 96       	adiw	r26, 0x01	; 1
    1586:	9c 93       	st	X, r25
    1588:	8e 93       	st	-X, r24
    158a:	12 96       	adiw	r26, 0x02	; 2
    158c:	8a ee       	ldi	r24, 0xEA	; 234
    158e:	99 e0       	ldi	r25, 0x09	; 9
    1590:	11 96       	adiw	r26, 0x01	; 1
    1592:	9c 93       	st	X, r25
    1594:	8e 93       	st	-X, r24
    1596:	12 96       	adiw	r26, 0x02	; 2
    1598:	82 ef       	ldi	r24, 0xF2	; 242
    159a:	99 e0       	ldi	r25, 0x09	; 9
    159c:	11 96       	adiw	r26, 0x01	; 1
    159e:	9c 93       	st	X, r25
    15a0:	8e 93       	st	-X, r24
    15a2:	12 96       	adiw	r26, 0x02	; 2
    15a4:	82 e3       	ldi	r24, 0x32	; 50
    15a6:	9b e0       	ldi	r25, 0x0B	; 11
    15a8:	8d 93       	st	X+, r24
    15aa:	9c 93       	st	X, r25
    15ac:	cf 01       	movw	r24, r30
    15ae:	08 95       	ret

000015b0 <FUNCintinvstr>:
/***intinvstr***/
uint8_t FUNCintinvstr(int32_t n, char* res, uint8_t n_digit)
{
    15b0:	8f 92       	push	r8
    15b2:	9f 92       	push	r9
    15b4:	af 92       	push	r10
    15b6:	bf 92       	push	r11
    15b8:	ef 92       	push	r14
    15ba:	ff 92       	push	r15
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	8a 01       	movw	r16, r20
    15c6:	d2 2f       	mov	r29, r18
	uint8_t k=0;
	for(res[k++] = (n % 10) + '0' ; (n/=10) > ZERO ; res[k++] = (n % 10) + '0');
    15c8:	2a e0       	ldi	r18, 0x0A	; 10
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	40 e0       	ldi	r20, 0x00	; 0
    15ce:	50 e0       	ldi	r21, 0x00	; 0
    15d0:	0e 94 18 18 	call	0x3030	; 0x3030 <__divmodsi4>
    15d4:	60 5d       	subi	r22, 0xD0	; 208
    15d6:	f8 01       	movw	r30, r16
    15d8:	60 83       	st	Z, r22
    15da:	62 2f       	mov	r22, r18
    15dc:	73 2f       	mov	r23, r19
    15de:	84 2f       	mov	r24, r20
    15e0:	95 2f       	mov	r25, r21
    15e2:	16 16       	cp	r1, r22
    15e4:	17 06       	cpc	r1, r23
    15e6:	18 06       	cpc	r1, r24
    15e8:	19 06       	cpc	r1, r25
    15ea:	fc f4       	brge	.+62     	; 0x162a <FUNCintinvstr+0x7a>
    15ec:	21 e0       	ldi	r18, 0x01	; 1
    15ee:	0f 2e       	mov	r0, r31
    15f0:	fa e0       	ldi	r31, 0x0A	; 10
    15f2:	8f 2e       	mov	r8, r31
    15f4:	91 2c       	mov	r9, r1
    15f6:	a1 2c       	mov	r10, r1
    15f8:	b1 2c       	mov	r11, r1
    15fa:	f0 2d       	mov	r31, r0
    15fc:	c1 e0       	ldi	r28, 0x01	; 1
    15fe:	c2 0f       	add	r28, r18
    1600:	78 01       	movw	r14, r16
    1602:	e2 0e       	add	r14, r18
    1604:	f1 1c       	adc	r15, r1
    1606:	a5 01       	movw	r20, r10
    1608:	94 01       	movw	r18, r8
    160a:	0e 94 18 18 	call	0x3030	; 0x3030 <__divmodsi4>
    160e:	60 5d       	subi	r22, 0xD0	; 208
    1610:	f7 01       	movw	r30, r14
    1612:	60 83       	st	Z, r22
    1614:	62 2f       	mov	r22, r18
    1616:	73 2f       	mov	r23, r19
    1618:	84 2f       	mov	r24, r20
    161a:	95 2f       	mov	r25, r21
    161c:	2c 2f       	mov	r18, r28
    161e:	16 16       	cp	r1, r22
    1620:	17 06       	cpc	r1, r23
    1622:	18 06       	cpc	r1, r24
    1624:	19 06       	cpc	r1, r25
    1626:	54 f3       	brlt	.-44     	; 0x15fc <FUNCintinvstr+0x4c>
    1628:	01 c0       	rjmp	.+2      	; 0x162c <FUNCintinvstr+0x7c>
    162a:	c1 e0       	ldi	r28, 0x01	; 1
	for( ; k < n_digit ; res[k++] = '0');
    162c:	cd 17       	cp	r28, r29
    162e:	48 f4       	brcc	.+18     	; 0x1642 <FUNCintinvstr+0x92>
    1630:	80 e3       	ldi	r24, 0x30	; 48
    1632:	f8 01       	movw	r30, r16
    1634:	ec 0f       	add	r30, r28
    1636:	f1 1d       	adc	r31, r1
    1638:	80 83       	st	Z, r24
    163a:	cf 5f       	subi	r28, 0xFF	; 255
    163c:	dc 13       	cpse	r29, r28
    163e:	f9 cf       	rjmp	.-14     	; 0x1632 <FUNCintinvstr+0x82>
    1640:	01 c0       	rjmp	.+2      	; 0x1644 <FUNCintinvstr+0x94>
    1642:	dc 2f       	mov	r29, r28
	res[k]='\0';
    1644:	f8 01       	movw	r30, r16
    1646:	ed 0f       	add	r30, r29
    1648:	f1 1d       	adc	r31, r1
    164a:	10 82       	st	Z, r1
	return k;
}
    164c:	8d 2f       	mov	r24, r29
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	ff 90       	pop	r15
    1658:	ef 90       	pop	r14
    165a:	bf 90       	pop	r11
    165c:	af 90       	pop	r10
    165e:	9f 90       	pop	r9
    1660:	8f 90       	pop	r8
    1662:	08 95       	ret

00001664 <FUNCftoa>:
/***ftoa***/
char* FUNCftoa(float n, char* res, uint8_t afterpoint)
{
    1664:	4f 92       	push	r4
    1666:	5f 92       	push	r5
    1668:	6f 92       	push	r6
    166a:	7f 92       	push	r7
    166c:	8f 92       	push	r8
    166e:	9f 92       	push	r9
    1670:	af 92       	push	r10
    1672:	bf 92       	push	r11
    1674:	cf 92       	push	r12
    1676:	df 92       	push	r13
    1678:	ef 92       	push	r14
    167a:	ff 92       	push	r15
    167c:	1f 93       	push	r17
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	6b 01       	movw	r12, r22
    1684:	7c 01       	movw	r14, r24
    1686:	ea 01       	movw	r28, r20
    1688:	12 2f       	mov	r17, r18
	uint8_t k=ZERO;
	int32_t ipart;
	float fpart;
	int8_t sign;
	if (n < ZERO){
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	a9 01       	movw	r20, r18
    1690:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__cmpsf2>
    1694:	88 23       	and	r24, r24
    1696:	0c f0       	brlt	.+2      	; 0x169a <FUNCftoa+0x36>
    1698:	4d c0       	rjmp	.+154    	; 0x1734 <FUNCftoa+0xd0>
		n = -n;
    169a:	f7 fa       	bst	r15, 7
    169c:	f0 94       	com	r15
    169e:	f7 f8       	bld	r15, 7
    16a0:	f0 94       	com	r15
		sign=-ONE;
	}else
		sign=ONE;
	ipart = (int32_t) n;
    16a2:	c7 01       	movw	r24, r14
    16a4:	b6 01       	movw	r22, r12
    16a6:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixsfsi>
    16aa:	4b 01       	movw	r8, r22
    16ac:	5c 01       	movw	r10, r24
	fpart = n - (float)ipart;
    16ae:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__floatsisf>
    16b2:	9b 01       	movw	r18, r22
    16b4:	ac 01       	movw	r20, r24
    16b6:	c7 01       	movw	r24, r14
    16b8:	b6 01       	movw	r22, r12
    16ba:	0e 94 76 14 	call	0x28ec	; 0x28ec <__subsf3>
    16be:	2b 01       	movw	r4, r22
    16c0:	3c 01       	movw	r6, r24
	k=FUNCintinvstr( ipart, res, ONE );
    16c2:	21 e0       	ldi	r18, 0x01	; 1
    16c4:	ae 01       	movw	r20, r28
    16c6:	c5 01       	movw	r24, r10
    16c8:	b4 01       	movw	r22, r8
    16ca:	72 df       	rcall	.-284    	; 0x15b0 <FUNCintinvstr>
	if (sign < ZERO)
		res[k++] = '-';
    16cc:	ff 24       	eor	r15, r15
    16ce:	f3 94       	inc	r15
    16d0:	f8 0e       	add	r15, r24
    16d2:	fe 01       	movw	r30, r28
    16d4:	e8 0f       	add	r30, r24
    16d6:	f1 1d       	adc	r31, r1
    16d8:	8d e2       	ldi	r24, 0x2D	; 45
    16da:	80 83       	st	Z, r24
	else
		res[k++] = ' ';
	res[k]='\0';
    16dc:	6e 01       	movw	r12, r28
    16de:	cf 0c       	add	r12, r15
    16e0:	d1 1c       	adc	r13, r1
    16e2:	f6 01       	movw	r30, r12
    16e4:	10 82       	st	Z, r1
	Reverse(res);
    16e6:	ce 01       	movw	r24, r28
    16e8:	0a dd       	rcall	.-1516   	; 0x10fe <Reverse>
	if (afterpoint > ZERO) {
    16ea:	11 23       	and	r17, r17
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <FUNCftoa+0x8c>
    16ee:	40 c0       	rjmp	.+128    	; 0x1770 <FUNCftoa+0x10c>
		res[k++] = '.';
    16f0:	8e e2       	ldi	r24, 0x2E	; 46
    16f2:	f6 01       	movw	r30, r12
    16f4:	80 83       	st	Z, r24
		FUNCintinvstr( fpart * pow(10, afterpoint), res+k, afterpoint );
    16f6:	f3 94       	inc	r15
    16f8:	ce 01       	movw	r24, r28
    16fa:	8f 0d       	add	r24, r15
    16fc:	91 1d       	adc	r25, r1
    16fe:	7c 01       	movw	r14, r24
    1700:	61 2f       	mov	r22, r17
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__floatunsisf>
    170c:	9b 01       	movw	r18, r22
    170e:	ac 01       	movw	r20, r24
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	70 e0       	ldi	r23, 0x00	; 0
    1714:	80 e2       	ldi	r24, 0x20	; 32
    1716:	91 e4       	ldi	r25, 0x41	; 65
    1718:	0e 94 91 16 	call	0x2d22	; 0x2d22 <pow>
    171c:	a3 01       	movw	r20, r6
    171e:	92 01       	movw	r18, r4
    1720:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <__mulsf3>
    1724:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixsfsi>
    1728:	21 2f       	mov	r18, r17
    172a:	a7 01       	movw	r20, r14
		Reverse(res+k);
    172c:	41 df       	rcall	.-382    	; 0x15b0 <FUNCintinvstr>
    172e:	c7 01       	movw	r24, r14
    1730:	e6 dc       	rcall	.-1588   	; 0x10fe <Reverse>
	}	
	return res;
    1732:	1e c0       	rjmp	.+60     	; 0x1770 <FUNCftoa+0x10c>
	if (n < ZERO){
		n = -n;
		sign=-ONE;
	}else
		sign=ONE;
	ipart = (int32_t) n;
    1734:	c7 01       	movw	r24, r14
    1736:	b6 01       	movw	r22, r12
    1738:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixsfsi>
    173c:	4b 01       	movw	r8, r22
    173e:	5c 01       	movw	r10, r24
	fpart = n - (float)ipart;
    1740:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__floatsisf>
    1744:	9b 01       	movw	r18, r22
    1746:	ac 01       	movw	r20, r24
    1748:	c7 01       	movw	r24, r14
    174a:	b6 01       	movw	r22, r12
    174c:	0e 94 76 14 	call	0x28ec	; 0x28ec <__subsf3>
    1750:	2b 01       	movw	r4, r22
    1752:	3c 01       	movw	r6, r24
	k=FUNCintinvstr( ipart, res, ONE );
    1754:	21 e0       	ldi	r18, 0x01	; 1
    1756:	ae 01       	movw	r20, r28
    1758:	c5 01       	movw	r24, r10
    175a:	b4 01       	movw	r22, r8
    175c:	29 df       	rcall	.-430    	; 0x15b0 <FUNCintinvstr>
	if (sign < ZERO)
		res[k++] = '-';
	else
		res[k++] = ' ';
    175e:	ff 24       	eor	r15, r15
    1760:	f3 94       	inc	r15
    1762:	f8 0e       	add	r15, r24
    1764:	fe 01       	movw	r30, r28
    1766:	e8 0f       	add	r30, r24
    1768:	f1 1d       	adc	r31, r1
    176a:	80 e2       	ldi	r24, 0x20	; 32
    176c:	80 83       	st	Z, r24
    176e:	b6 cf       	rjmp	.-148    	; 0x16dc <FUNCftoa+0x78>
		res[k++] = '.';
		FUNCintinvstr( fpart * pow(10, afterpoint), res+k, afterpoint );
		Reverse(res+k);
	}	
	return res;
}
    1770:	ce 01       	movw	r24, r28
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	1f 91       	pop	r17
    1778:	ff 90       	pop	r15
    177a:	ef 90       	pop	r14
    177c:	df 90       	pop	r13
    177e:	cf 90       	pop	r12
    1780:	bf 90       	pop	r11
    1782:	af 90       	pop	r10
    1784:	9f 90       	pop	r9
    1786:	8f 90       	pop	r8
    1788:	7f 90       	pop	r7
    178a:	6f 90       	pop	r6
    178c:	5f 90       	pop	r5
    178e:	4f 90       	pop	r4
    1790:	08 95       	ret

00001792 <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1792:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1796:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    179a:	90 81       	ld	r25, Z
    179c:	9d 7f       	andi	r25, 0xFD	; 253
    179e:	90 83       	st	Z, r25
    17a0:	67 2b       	or	r22, r23
    17a2:	41 f0       	breq	.+16     	; 0x17b4 <LCD0_write+0x22>
    17a4:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    17a8:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    17ac:	90 81       	ld	r25, Z
    17ae:	91 60       	ori	r25, 0x01	; 1
    17b0:	90 83       	st	Z, r25
    17b2:	07 c0       	rjmp	.+14     	; 0x17c2 <LCD0_write+0x30>
    17b4:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    17b8:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    17bc:	90 81       	ld	r25, Z
    17be:	9e 7f       	andi	r25, 0xFE	; 254
    17c0:	90 83       	st	Z, r25
    17c2:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <lcd0_DDR>
    17c6:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <lcd0_DDR+0x1>
    17ca:	90 81       	ld	r25, Z
    17cc:	90 6f       	ori	r25, 0xF0	; 240
    17ce:	90 83       	st	Z, r25
    17d0:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    17d4:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    17d8:	90 81       	ld	r25, Z
    17da:	94 60       	ori	r25, 0x04	; 4
    17dc:	90 83       	st	Z, r25
    17de:	88 23       	and	r24, r24
    17e0:	44 f4       	brge	.+16     	; 0x17f2 <LCD0_write+0x60>
    17e2:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    17e6:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    17ea:	90 81       	ld	r25, Z
    17ec:	90 68       	ori	r25, 0x80	; 128
    17ee:	90 83       	st	Z, r25
    17f0:	07 c0       	rjmp	.+14     	; 0x1800 <LCD0_write+0x6e>
    17f2:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    17f6:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    17fa:	90 81       	ld	r25, Z
    17fc:	9f 77       	andi	r25, 0x7F	; 127
    17fe:	90 83       	st	Z, r25
    1800:	86 ff       	sbrs	r24, 6
    1802:	08 c0       	rjmp	.+16     	; 0x1814 <LCD0_write+0x82>
    1804:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1808:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    180c:	90 81       	ld	r25, Z
    180e:	90 64       	ori	r25, 0x40	; 64
    1810:	90 83       	st	Z, r25
    1812:	07 c0       	rjmp	.+14     	; 0x1822 <LCD0_write+0x90>
    1814:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1818:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    181c:	90 81       	ld	r25, Z
    181e:	9f 7b       	andi	r25, 0xBF	; 191
    1820:	90 83       	st	Z, r25
    1822:	85 ff       	sbrs	r24, 5
    1824:	08 c0       	rjmp	.+16     	; 0x1836 <LCD0_write+0xa4>
    1826:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    182a:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    182e:	90 81       	ld	r25, Z
    1830:	90 62       	ori	r25, 0x20	; 32
    1832:	90 83       	st	Z, r25
    1834:	07 c0       	rjmp	.+14     	; 0x1844 <LCD0_write+0xb2>
    1836:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    183a:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    183e:	90 81       	ld	r25, Z
    1840:	9f 7d       	andi	r25, 0xDF	; 223
    1842:	90 83       	st	Z, r25
    1844:	84 ff       	sbrs	r24, 4
    1846:	08 c0       	rjmp	.+16     	; 0x1858 <LCD0_write+0xc6>
    1848:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    184c:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1850:	90 81       	ld	r25, Z
    1852:	90 61       	ori	r25, 0x10	; 16
    1854:	90 83       	st	Z, r25
    1856:	07 c0       	rjmp	.+14     	; 0x1866 <LCD0_write+0xd4>
    1858:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    185c:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1860:	90 81       	ld	r25, Z
    1862:	9f 7e       	andi	r25, 0xEF	; 239
    1864:	90 83       	st	Z, r25
    1866:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    186a:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    186e:	90 81       	ld	r25, Z
    1870:	9b 7f       	andi	r25, 0xFB	; 251
    1872:	90 83       	st	Z, r25
    1874:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1878:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    187c:	90 81       	ld	r25, Z
    187e:	94 60       	ori	r25, 0x04	; 4
    1880:	90 83       	st	Z, r25
    1882:	83 ff       	sbrs	r24, 3
    1884:	08 c0       	rjmp	.+16     	; 0x1896 <LCD0_write+0x104>
    1886:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    188a:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    188e:	90 81       	ld	r25, Z
    1890:	90 68       	ori	r25, 0x80	; 128
    1892:	90 83       	st	Z, r25
    1894:	07 c0       	rjmp	.+14     	; 0x18a4 <LCD0_write+0x112>
    1896:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    189a:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    189e:	90 81       	ld	r25, Z
    18a0:	9f 77       	andi	r25, 0x7F	; 127
    18a2:	90 83       	st	Z, r25
    18a4:	82 ff       	sbrs	r24, 2
    18a6:	08 c0       	rjmp	.+16     	; 0x18b8 <LCD0_write+0x126>
    18a8:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    18ac:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    18b0:	90 81       	ld	r25, Z
    18b2:	90 64       	ori	r25, 0x40	; 64
    18b4:	90 83       	st	Z, r25
    18b6:	07 c0       	rjmp	.+14     	; 0x18c6 <LCD0_write+0x134>
    18b8:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    18bc:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    18c0:	90 81       	ld	r25, Z
    18c2:	9f 7b       	andi	r25, 0xBF	; 191
    18c4:	90 83       	st	Z, r25
    18c6:	81 ff       	sbrs	r24, 1
    18c8:	08 c0       	rjmp	.+16     	; 0x18da <LCD0_write+0x148>
    18ca:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    18ce:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    18d2:	90 81       	ld	r25, Z
    18d4:	90 62       	ori	r25, 0x20	; 32
    18d6:	90 83       	st	Z, r25
    18d8:	07 c0       	rjmp	.+14     	; 0x18e8 <LCD0_write+0x156>
    18da:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    18de:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    18e2:	90 81       	ld	r25, Z
    18e4:	9f 7d       	andi	r25, 0xDF	; 223
    18e6:	90 83       	st	Z, r25
    18e8:	80 ff       	sbrs	r24, 0
    18ea:	08 c0       	rjmp	.+16     	; 0x18fc <LCD0_write+0x16a>
    18ec:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    18f0:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    18f4:	80 81       	ld	r24, Z
    18f6:	80 61       	ori	r24, 0x10	; 16
    18f8:	80 83       	st	Z, r24
    18fa:	07 c0       	rjmp	.+14     	; 0x190a <LCD0_write+0x178>
    18fc:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1900:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1904:	80 81       	ld	r24, Z
    1906:	8f 7e       	andi	r24, 0xEF	; 239
    1908:	80 83       	st	Z, r24
    190a:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    190e:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1912:	80 81       	ld	r24, Z
    1914:	8b 7f       	andi	r24, 0xFB	; 251
    1916:	80 83       	st	Z, r24
    1918:	08 95       	ret

0000191a <LCD0_read>:
    191a:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <lcd0_DDR>
    191e:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <lcd0_DDR+0x1>
    1922:	20 81       	ld	r18, Z
    1924:	2f 70       	andi	r18, 0x0F	; 15
    1926:	20 83       	st	Z, r18
    1928:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    192c:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1930:	20 81       	ld	r18, Z
    1932:	20 6f       	ori	r18, 0xF0	; 240
    1934:	20 83       	st	Z, r18
    1936:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    193a:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    193e:	20 81       	ld	r18, Z
    1940:	22 60       	ori	r18, 0x02	; 2
    1942:	20 83       	st	Z, r18
    1944:	89 2b       	or	r24, r25
    1946:	41 f0       	breq	.+16     	; 0x1958 <LCD0_read+0x3e>
    1948:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    194c:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1950:	80 81       	ld	r24, Z
    1952:	81 60       	ori	r24, 0x01	; 1
    1954:	80 83       	st	Z, r24
    1956:	07 c0       	rjmp	.+14     	; 0x1966 <LCD0_read+0x4c>
    1958:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    195c:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1960:	80 81       	ld	r24, Z
    1962:	8e 7f       	andi	r24, 0xFE	; 254
    1964:	80 83       	st	Z, r24
    1966:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    196a:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    196e:	80 81       	ld	r24, Z
    1970:	84 60       	ori	r24, 0x04	; 4
    1972:	80 83       	st	Z, r24
    1974:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <lcd0_PIN>
    1978:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <lcd0_PIN+0x1>
    197c:	80 81       	ld	r24, Z
    197e:	88 23       	and	r24, r24
    1980:	14 f0       	brlt	.+4      	; 0x1986 <LCD0_read+0x6c>
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	01 c0       	rjmp	.+2      	; 0x1988 <LCD0_read+0x6e>
    1986:	80 e8       	ldi	r24, 0x80	; 128
    1988:	90 81       	ld	r25, Z
    198a:	96 ff       	sbrs	r25, 6
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <LCD0_read+0x78>
    198e:	80 64       	ori	r24, 0x40	; 64
    1990:	01 c0       	rjmp	.+2      	; 0x1994 <LCD0_read+0x7a>
    1992:	8f 7b       	andi	r24, 0xBF	; 191
    1994:	90 81       	ld	r25, Z
    1996:	95 ff       	sbrs	r25, 5
    1998:	02 c0       	rjmp	.+4      	; 0x199e <LCD0_read+0x84>
    199a:	80 62       	ori	r24, 0x20	; 32
    199c:	01 c0       	rjmp	.+2      	; 0x19a0 <LCD0_read+0x86>
    199e:	8f 7d       	andi	r24, 0xDF	; 223
    19a0:	90 81       	ld	r25, Z
    19a2:	94 ff       	sbrs	r25, 4
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <LCD0_read+0x90>
    19a6:	80 61       	ori	r24, 0x10	; 16
    19a8:	01 c0       	rjmp	.+2      	; 0x19ac <LCD0_read+0x92>
    19aa:	8f 7e       	andi	r24, 0xEF	; 239
    19ac:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    19b0:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    19b4:	90 81       	ld	r25, Z
    19b6:	9b 7f       	andi	r25, 0xFB	; 251
    19b8:	90 83       	st	Z, r25
    19ba:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    19be:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    19c2:	90 81       	ld	r25, Z
    19c4:	94 60       	ori	r25, 0x04	; 4
    19c6:	90 83       	st	Z, r25
    19c8:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <lcd0_PIN>
    19cc:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <lcd0_PIN+0x1>
    19d0:	90 81       	ld	r25, Z
    19d2:	99 23       	and	r25, r25
    19d4:	14 f4       	brge	.+4      	; 0x19da <LCD0_read+0xc0>
    19d6:	88 60       	ori	r24, 0x08	; 8
    19d8:	01 c0       	rjmp	.+2      	; 0x19dc <LCD0_read+0xc2>
    19da:	87 7f       	andi	r24, 0xF7	; 247
    19dc:	90 81       	ld	r25, Z
    19de:	96 ff       	sbrs	r25, 6
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <LCD0_read+0xcc>
    19e2:	84 60       	ori	r24, 0x04	; 4
    19e4:	01 c0       	rjmp	.+2      	; 0x19e8 <LCD0_read+0xce>
    19e6:	8b 7f       	andi	r24, 0xFB	; 251
    19e8:	90 81       	ld	r25, Z
    19ea:	95 ff       	sbrs	r25, 5
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <LCD0_read+0xd8>
    19ee:	82 60       	ori	r24, 0x02	; 2
    19f0:	01 c0       	rjmp	.+2      	; 0x19f4 <LCD0_read+0xda>
    19f2:	8d 7f       	andi	r24, 0xFD	; 253
    19f4:	90 81       	ld	r25, Z
    19f6:	94 ff       	sbrs	r25, 4
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <LCD0_read+0xe4>
    19fa:	81 60       	ori	r24, 0x01	; 1
    19fc:	01 c0       	rjmp	.+2      	; 0x1a00 <LCD0_read+0xe6>
    19fe:	8e 7f       	andi	r24, 0xFE	; 254
    1a00:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1a04:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1a08:	90 81       	ld	r25, Z
    1a0a:	9b 7f       	andi	r25, 0xFB	; 251
    1a0c:	90 83       	st	Z, r25
    1a0e:	08 95       	ret

00001a10 <LCD0_BF>:
    1a10:	cf 93       	push	r28
    1a12:	df 93       	push	r29
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	80 df       	rcall	.-256    	; 0x191a <LCD0_read>
    1a1a:	cb e0       	ldi	r28, 0x0B	; 11
    1a1c:	d0 e0       	ldi	r29, 0x00	; 0
    1a1e:	05 c0       	rjmp	.+10     	; 0x1a2a <LCD0_BF+0x1a>
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	7a df       	rcall	.-268    	; 0x191a <LCD0_read>
    1a26:	21 97       	sbiw	r28, 0x01	; 1
    1a28:	11 f0       	breq	.+4      	; 0x1a2e <LCD0_BF+0x1e>
    1a2a:	88 23       	and	r24, r24
    1a2c:	cc f3       	brlt	.-14     	; 0x1a20 <LCD0_BF+0x10>
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	08 95       	ret

00001a34 <LCD0_putch>:
    1a34:	61 e0       	ldi	r22, 0x01	; 1
    1a36:	70 e0       	ldi	r23, 0x00	; 0
    1a38:	ac de       	rcall	.-680    	; 0x1792 <LCD0_write>
    1a3a:	ea cf       	rjmp	.-44     	; 0x1a10 <LCD0_BF>
    1a3c:	08 95       	ret

00001a3e <LCD0_getch>:
    1a3e:	cf 93       	push	r28
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	6a df       	rcall	.-300    	; 0x191a <LCD0_read>
    1a46:	c8 2f       	mov	r28, r24
    1a48:	e3 df       	rcall	.-58     	; 0x1a10 <LCD0_BF>
    1a4a:	8c 2f       	mov	r24, r28
    1a4c:	cf 91       	pop	r28
    1a4e:	08 95       	ret

00001a50 <LCD0_string>:
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	ec 01       	movw	r28, r24
    1a56:	88 81       	ld	r24, Y
    1a58:	88 23       	and	r24, r24
    1a5a:	41 f0       	breq	.+16     	; 0x1a6c <LCD0_string+0x1c>
    1a5c:	21 96       	adiw	r28, 0x01	; 1
    1a5e:	61 e0       	ldi	r22, 0x01	; 1
    1a60:	70 e0       	ldi	r23, 0x00	; 0
    1a62:	97 de       	rcall	.-722    	; 0x1792 <LCD0_write>
    1a64:	d5 df       	rcall	.-86     	; 0x1a10 <LCD0_BF>
    1a66:	89 91       	ld	r24, Y+
    1a68:	81 11       	cpse	r24, r1
    1a6a:	f9 cf       	rjmp	.-14     	; 0x1a5e <LCD0_string+0xe>
    1a6c:	df 91       	pop	r29
    1a6e:	cf 91       	pop	r28
    1a70:	08 95       	ret

00001a72 <LCD0_string_size>:
    1a72:	0f 93       	push	r16
    1a74:	1f 93       	push	r17
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	d6 2f       	mov	r29, r22
    1a7e:	80 81       	ld	r24, Z
    1a80:	88 23       	and	r24, r24
    1a82:	51 f0       	breq	.+20     	; 0x1a98 <LCD0_string_size+0x26>
    1a84:	8f 01       	movw	r16, r30
    1a86:	0f 5f       	subi	r16, 0xFF	; 255
    1a88:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8a:	61 11       	cpse	r22, r1
    1a8c:	09 c0       	rjmp	.+18     	; 0x1aa0 <LCD0_string_size+0x2e>
    1a8e:	1b c0       	rjmp	.+54     	; 0x1ac6 <LCD0_string_size+0x54>
    1a90:	cf 5f       	subi	r28, 0xFF	; 255
    1a92:	dc 17       	cp	r29, r28
    1a94:	30 f4       	brcc	.+12     	; 0x1aa2 <LCD0_string_size+0x30>
    1a96:	01 c0       	rjmp	.+2      	; 0x1a9a <LCD0_string_size+0x28>
    1a98:	c0 e0       	ldi	r28, 0x00	; 0
    1a9a:	cd 17       	cp	r28, r29
    1a9c:	60 f0       	brcs	.+24     	; 0x1ab6 <LCD0_string_size+0x44>
    1a9e:	13 c0       	rjmp	.+38     	; 0x1ac6 <LCD0_string_size+0x54>
    1aa0:	c1 e0       	ldi	r28, 0x01	; 1
    1aa2:	61 e0       	ldi	r22, 0x01	; 1
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	75 de       	rcall	.-790    	; 0x1792 <LCD0_write>
    1aa8:	b3 df       	rcall	.-154    	; 0x1a10 <LCD0_BF>
    1aaa:	f8 01       	movw	r30, r16
    1aac:	81 91       	ld	r24, Z+
    1aae:	8f 01       	movw	r16, r30
    1ab0:	81 11       	cpse	r24, r1
    1ab2:	ee cf       	rjmp	.-36     	; 0x1a90 <LCD0_string_size+0x1e>
    1ab4:	f2 cf       	rjmp	.-28     	; 0x1a9a <LCD0_string_size+0x28>
    1ab6:	cf 5f       	subi	r28, 0xFF	; 255
    1ab8:	61 e0       	ldi	r22, 0x01	; 1
    1aba:	70 e0       	ldi	r23, 0x00	; 0
    1abc:	80 e2       	ldi	r24, 0x20	; 32
    1abe:	69 de       	rcall	.-814    	; 0x1792 <LCD0_write>
    1ac0:	a7 df       	rcall	.-178    	; 0x1a10 <LCD0_BF>
    1ac2:	cd 17       	cp	r28, r29
    1ac4:	c0 f3       	brcs	.-16     	; 0x1ab6 <LCD0_string_size+0x44>
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	08 95       	ret

00001ad0 <LCD0_hspace>:
    1ad0:	cf 93       	push	r28
    1ad2:	c8 2f       	mov	r28, r24
    1ad4:	88 23       	and	r24, r24
    1ad6:	39 f0       	breq	.+14     	; 0x1ae6 <LCD0_hspace+0x16>
    1ad8:	61 e0       	ldi	r22, 0x01	; 1
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	80 e2       	ldi	r24, 0x20	; 32
    1ade:	59 de       	rcall	.-846    	; 0x1792 <LCD0_write>
    1ae0:	97 df       	rcall	.-210    	; 0x1a10 <LCD0_BF>
    1ae2:	c1 50       	subi	r28, 0x01	; 1
    1ae4:	c9 f7       	brne	.-14     	; 0x1ad8 <LCD0_hspace+0x8>
    1ae6:	cf 91       	pop	r28
    1ae8:	08 95       	ret

00001aea <LCD0_gotoxy>:
    1aea:	26 2f       	mov	r18, r22
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	91 05       	cpc	r25, r1
    1af0:	71 f0       	breq	.+28     	; 0x1b0e <LCD0_gotoxy+0x24>
    1af2:	30 f0       	brcs	.+12     	; 0x1b00 <LCD0_gotoxy+0x16>
    1af4:	82 30       	cpi	r24, 0x02	; 2
    1af6:	91 05       	cpc	r25, r1
    1af8:	89 f0       	breq	.+34     	; 0x1b1c <LCD0_gotoxy+0x32>
    1afa:	03 97       	sbiw	r24, 0x03	; 3
    1afc:	b1 f0       	breq	.+44     	; 0x1b2a <LCD0_gotoxy+0x40>
    1afe:	08 95       	ret
    1b00:	60 e0       	ldi	r22, 0x00	; 0
    1b02:	70 e0       	ldi	r23, 0x00	; 0
    1b04:	80 e8       	ldi	r24, 0x80	; 128
    1b06:	82 0f       	add	r24, r18
    1b08:	44 de       	rcall	.-888    	; 0x1792 <LCD0_write>
    1b0a:	82 cf       	rjmp	.-252    	; 0x1a10 <LCD0_BF>
    1b0c:	08 95       	ret
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	70 e0       	ldi	r23, 0x00	; 0
    1b12:	80 ec       	ldi	r24, 0xC0	; 192
    1b14:	82 0f       	add	r24, r18
    1b16:	3d de       	rcall	.-902    	; 0x1792 <LCD0_write>
    1b18:	7b cf       	rjmp	.-266    	; 0x1a10 <LCD0_BF>
    1b1a:	08 95       	ret
    1b1c:	60 e0       	ldi	r22, 0x00	; 0
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	84 e9       	ldi	r24, 0x94	; 148
    1b22:	82 0f       	add	r24, r18
    1b24:	36 de       	rcall	.-916    	; 0x1792 <LCD0_write>
    1b26:	74 cf       	rjmp	.-280    	; 0x1a10 <LCD0_BF>
    1b28:	08 95       	ret
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	70 e0       	ldi	r23, 0x00	; 0
    1b2e:	84 ed       	ldi	r24, 0xD4	; 212
    1b30:	82 0f       	add	r24, r18
    1b32:	2f de       	rcall	.-930    	; 0x1792 <LCD0_write>
    1b34:	6d cf       	rjmp	.-294    	; 0x1a10 <LCD0_BF>
    1b36:	08 95       	ret

00001b38 <LCD0_clear>:
    1b38:	60 e0       	ldi	r22, 0x00	; 0
    1b3a:	70 e0       	ldi	r23, 0x00	; 0
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	29 de       	rcall	.-942    	; 0x1792 <LCD0_write>
    1b40:	87 ee       	ldi	r24, 0xE7	; 231
    1b42:	97 e1       	ldi	r25, 0x17	; 23
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <LCD0_clear+0xc>
    1b48:	00 c0       	rjmp	.+0      	; 0x1b4a <LCD0_clear+0x12>
    1b4a:	00 00       	nop
    1b4c:	08 95       	ret

00001b4e <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    1b4e:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <lcd0_DDR>
    1b52:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <lcd0_DDR+0x1>
    1b56:	87 e0       	ldi	r24, 0x07	; 7
    1b58:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    1b5a:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1b5e:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1b62:	88 e0       	ldi	r24, 0x08	; 8
    1b64:	80 83       	st	Z, r24
    1b66:	2f ef       	ldi	r18, 0xFF	; 255
    1b68:	83 ef       	ldi	r24, 0xF3	; 243
    1b6a:	91 e0       	ldi	r25, 0x01	; 1
    1b6c:	21 50       	subi	r18, 0x01	; 1
    1b6e:	80 40       	sbci	r24, 0x00	; 0
    1b70:	90 40       	sbci	r25, 0x00	; 0
    1b72:	e1 f7       	brne	.-8      	; 0x1b6c <LCD0_inic+0x1e>
    1b74:	00 c0       	rjmp	.+0      	; 0x1b76 <LCD0_inic+0x28>
    1b76:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	83 e3       	ldi	r24, 0x33	; 51
    1b7e:	09 de       	rcall	.-1006   	; 0x1792 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b80:	20 ed       	ldi	r18, 0xD0	; 208
    1b82:	2a 95       	dec	r18
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <LCD0_inic+0x34>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    1b86:	60 e0       	ldi	r22, 0x00	; 0
    1b88:	70 e0       	ldi	r23, 0x00	; 0
    1b8a:	83 e3       	ldi	r24, 0x33	; 51
    1b8c:	02 de       	rcall	.-1020   	; 0x1792 <LCD0_write>
    1b8e:	80 ed       	ldi	r24, 0xD0	; 208
    1b90:	8a 95       	dec	r24
    1b92:	f1 f7       	brne	.-4      	; 0x1b90 <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    1b94:	60 e0       	ldi	r22, 0x00	; 0
    1b96:	70 e0       	ldi	r23, 0x00	; 0
    1b98:	8b e2       	ldi	r24, 0x2B	; 43
    1b9a:	fb dd       	rcall	.-1034   	; 0x1792 <LCD0_write>
    1b9c:	95 ec       	ldi	r25, 0xC5	; 197
    1b9e:	9a 95       	dec	r25
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <LCD0_inic+0x50>
    1ba2:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	70 e0       	ldi	r23, 0x00	; 0
    1ba8:	8c e0       	ldi	r24, 0x0C	; 12
    1baa:	f3 dd       	rcall	.-1050   	; 0x1792 <LCD0_write>
    1bac:	25 ec       	ldi	r18, 0xC5	; 197
    1bae:	2a 95       	dec	r18
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <LCD0_inic+0x60>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    1bb2:	00 00       	nop
    1bb4:	60 e0       	ldi	r22, 0x00	; 0
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	eb dd       	rcall	.-1066   	; 0x1792 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1bbc:	87 ee       	ldi	r24, 0xE7	; 231
    1bbe:	97 e1       	ldi	r25, 0x17	; 23
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <LCD0_inic+0x72>
    1bc4:	00 c0       	rjmp	.+0      	; 0x1bc6 <LCD0_inic+0x78>
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    1bc6:	00 00       	nop
    1bc8:	60 e0       	ldi	r22, 0x00	; 0
    1bca:	70 e0       	ldi	r23, 0x00	; 0
    1bcc:	86 e0       	ldi	r24, 0x06	; 6
    1bce:	e1 dd       	rcall	.-1086   	; 0x1792 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1bd0:	95 ec       	ldi	r25, 0xC5	; 197
    1bd2:	9a 95       	dec	r25
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <LCD0_inic+0x84>
    1bd6:	00 00       	nop
    1bd8:	08 95       	ret

00001bda <LCD0enable>:
void LCD1_strobe(unsigned int num);
void LCD1_reboot(void);
unsigned int LCD_ticks(unsigned int num);
/***Procedure & Function***/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1bda:	1f 93       	push	r17
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    1be2:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1be4:	8f b7       	in	r24, 0x3f	; 63
    1be6:	8f 77       	andi	r24, 0x7F	; 127
    1be8:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    1bea:	70 93 66 01 	sts	0x0166, r23	; 0x800166 <lcd0_DDR+0x1>
    1bee:	60 93 65 01 	sts	0x0165, r22	; 0x800165 <lcd0_DDR>
	lcd0_PIN=pin;
    1bf2:	50 93 5f 01 	sts	0x015F, r21	; 0x80015f <lcd0_PIN+0x1>
    1bf6:	40 93 5e 01 	sts	0x015E, r20	; 0x80015e <lcd0_PIN>
	lcd0_PORT=port;
    1bfa:	30 93 69 01 	sts	0x0169, r19	; 0x800169 <lcd0_PORT+0x1>
    1bfe:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    1c02:	fb 01       	movw	r30, r22
    1c04:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    1c06:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <lcd0_PORT>
    1c0a:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <lcd0_PORT+0x1>
    1c0e:	8f ef       	ldi	r24, 0xFF	; 255
    1c10:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    1c12:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <lcd0_PIN>
    1c16:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <lcd0_PIN+0x1>
    1c1a:	80 81       	ld	r24, Z
    1c1c:	88 70       	andi	r24, 0x08	; 8
    1c1e:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    1c22:	95 df       	rcall	.-214    	; 0x1b4e <LCD0_inic>
	SREG=tSREG;
    1c24:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    1c26:	89 ec       	ldi	r24, 0xC9	; 201
    1c28:	9b e0       	ldi	r25, 0x0B	; 11
    1c2a:	99 83       	std	Y+1, r25	; 0x01
    1c2c:	88 83       	st	Y, r24
    1c2e:	8d e8       	ldi	r24, 0x8D	; 141
    1c30:	9c e0       	ldi	r25, 0x0C	; 12
    1c32:	9b 83       	std	Y+3, r25	; 0x03
    1c34:	8a 83       	std	Y+2, r24	; 0x02
    1c36:	88 e0       	ldi	r24, 0x08	; 8
    1c38:	9d e0       	ldi	r25, 0x0D	; 13
    1c3a:	9d 83       	std	Y+5, r25	; 0x05
    1c3c:	8c 83       	std	Y+4, r24	; 0x04
    1c3e:	8a e1       	ldi	r24, 0x1A	; 26
    1c40:	9d e0       	ldi	r25, 0x0D	; 13
    1c42:	9f 83       	std	Y+7, r25	; 0x07
    1c44:	8e 83       	std	Y+6, r24	; 0x06
    1c46:	8f e1       	ldi	r24, 0x1F	; 31
    1c48:	9d e0       	ldi	r25, 0x0D	; 13
    1c4a:	99 87       	std	Y+9, r25	; 0x09
    1c4c:	88 87       	std	Y+8, r24	; 0x08
    1c4e:	88 e2       	ldi	r24, 0x28	; 40
    1c50:	9d e0       	ldi	r25, 0x0D	; 13
    1c52:	9b 87       	std	Y+11, r25	; 0x0b
    1c54:	8a 87       	std	Y+10, r24	; 0x0a
    1c56:	89 e3       	ldi	r24, 0x39	; 57
    1c58:	9d e0       	ldi	r25, 0x0D	; 13
    1c5a:	9d 87       	std	Y+13, r25	; 0x0d
    1c5c:	8c 87       	std	Y+12, r24	; 0x0c
    1c5e:	88 e6       	ldi	r24, 0x68	; 104
    1c60:	9d e0       	ldi	r25, 0x0D	; 13
    1c62:	9f 87       	std	Y+15, r25	; 0x0f
    1c64:	8e 87       	std	Y+14, r24	; 0x0e
    1c66:	8c e9       	ldi	r24, 0x9C	; 156
    1c68:	9d e0       	ldi	r25, 0x0D	; 13
    1c6a:	99 8b       	std	Y+17, r25	; 0x11
    1c6c:	88 8b       	std	Y+16, r24	; 0x10
    1c6e:	85 e7       	ldi	r24, 0x75	; 117
    1c70:	9d e0       	ldi	r25, 0x0D	; 13
    1c72:	9b 8b       	std	Y+19, r25	; 0x13
    1c74:	8a 8b       	std	Y+18, r24	; 0x12
    1c76:	84 e4       	ldi	r24, 0x44	; 68
    1c78:	9e e0       	ldi	r25, 0x0E	; 14
    1c7a:	9d 8b       	std	Y+21, r25	; 0x15
    1c7c:	8c 8b       	std	Y+20, r24	; 0x14
}
    1c7e:	ce 01       	movw	r24, r28
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	1f 91       	pop	r17
    1c86:	08 95       	ret

00001c88 <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    1c88:	cf 93       	push	r28
    1c8a:	df 93       	push	r29
	uint8_t tSREG;
	tSREG=SREG;
    1c8c:	df b7       	in	r29, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1c8e:	8f b7       	in	r24, 0x3f	; 63
    1c90:	8f 77       	andi	r24, 0x7F	; 127
    1c92:	8f bf       	out	0x3f, r24	; 63
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    1c94:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <lcd0_PIN>
    1c98:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <lcd0_PIN+0x1>
    1c9c:	c0 81       	ld	r28, Z
    1c9e:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    1ca0:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <lcd0_detect>
    1ca4:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    1ca6:	8c 23       	and	r24, r28
    1ca8:	09 f0       	breq	.+2      	; 0x1cac <LCD0_reboot+0x24>
		LCD0_inic();
    1caa:	51 df       	rcall	.-350    	; 0x1b4e <LCD0_inic>
	lcd0_detect=tmp;
    1cac:	c0 93 67 01 	sts	0x0167, r28	; 0x800167 <lcd0_detect>
	SREG=tSREG;
    1cb0:	df bf       	out	0x3f, r29	; 63
}
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	08 95       	ret

00001cb8 <HX711_read_bit>:
	self->readflag=OFF;
}
uint8_t HX711_read_bit(void)
{	
	uint16_t ibool;
	*hx711_PORT|=(ONE<<hx711_clkpin);
    1cb8:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <hx711_PORT>
    1cbc:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <hx711_PORT+0x1>
    1cc0:	20 81       	ld	r18, Z
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	00 90 73 01 	lds	r0, 0x0173	; 0x800173 <hx711_clkpin>
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <HX711_read_bit+0x18>
    1ccc:	88 0f       	add	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	0a 94       	dec	r0
    1cd2:	e2 f7       	brpl	.-8      	; 0x1ccc <HX711_read_bit+0x14>
    1cd4:	82 2b       	or	r24, r18
    1cd6:	80 83       	st	Z, r24
    1cd8:	84 e2       	ldi	r24, 0x24	; 36
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
	/**0.1us minimum**/
	for(ibool=ZERO; ibool<HX711_ticks; ibool++); //inline delay
    1cde:	f1 f7       	brne	.-4      	; 0x1cdc <HX711_read_bit+0x24>
	ibool=*hx711_PIN & (ONE<<hx711_datapin);
    1ce0:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <hx711_PIN>
    1ce4:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <hx711_PIN+0x1>
    1ce8:	40 81       	ld	r20, Z
    1cea:	21 e0       	ldi	r18, 0x01	; 1
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	c9 01       	movw	r24, r18
    1cf0:	00 90 6c 01 	lds	r0, 0x016C	; 0x80016c <hx711_datapin>
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <HX711_read_bit+0x42>
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	0a 94       	dec	r0
    1cfc:	e2 f7       	brpl	.-8      	; 0x1cf6 <HX711_read_bit+0x3e>
	*hx711_PORT &= ~(ONE<<hx711_clkpin);
    1cfe:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <hx711_PORT>
    1d02:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <hx711_PORT+0x1>
    1d06:	90 81       	ld	r25, Z
    1d08:	00 90 73 01 	lds	r0, 0x0173	; 0x800173 <hx711_clkpin>
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <HX711_read_bit+0x5a>
    1d0e:	22 0f       	add	r18, r18
    1d10:	33 1f       	adc	r19, r19
    1d12:	0a 94       	dec	r0
    1d14:	e2 f7       	brpl	.-8      	; 0x1d0e <HX711_read_bit+0x56>
    1d16:	20 95       	com	r18
    1d18:	29 23       	and	r18, r25
    1d1a:	20 83       	st	Z, r18
	return ibool;
}
    1d1c:	84 23       	and	r24, r20
    1d1e:	08 95       	ret

00001d20 <HX711_set_amplify>:
// Gain selector
// AVDD connected to 5V, channel B gain=32
void HX711_set_amplify(HX711* self, uint8_t amplify)
{
	switch(amplify){
    1d20:	60 34       	cpi	r22, 0x40	; 64
    1d22:	79 f0       	breq	.+30     	; 0x1d42 <HX711_set_amplify+0x22>
    1d24:	60 38       	cpi	r22, 0x80	; 128
    1d26:	19 f0       	breq	.+6      	; 0x1d2e <HX711_set_amplify+0xe>
    1d28:	60 32       	cpi	r22, 0x20	; 32
    1d2a:	81 f4       	brne	.+32     	; 0x1d4c <HX711_set_amplify+0x2c>
    1d2c:	05 c0       	rjmp	.+10     	; 0x1d38 <HX711_set_amplify+0x18>
		case 128:
			self->amplify = ONE; //channel A
    1d2e:	21 e0       	ldi	r18, 0x01	; 1
    1d30:	fc 01       	movw	r30, r24
    1d32:	22 83       	std	Z+2, r18	; 0x02
			self->ampcount = ONE;
    1d34:	23 83       	std	Z+3, r18	; 0x03
			break;
    1d36:	08 95       	ret
		case 32:
			self->amplify = 2; //channel B
    1d38:	22 e0       	ldi	r18, 0x02	; 2
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	22 83       	std	Z+2, r18	; 0x02
			self->ampcount = 2; 
    1d3e:	23 83       	std	Z+3, r18	; 0x03
			break;
    1d40:	08 95       	ret
		case 64:
			self->amplify = 3; //channel A
    1d42:	23 e0       	ldi	r18, 0x03	; 3
    1d44:	fc 01       	movw	r30, r24
    1d46:	22 83       	std	Z+2, r18	; 0x02
			self->ampcount = 3;
    1d48:	23 83       	std	Z+3, r18	; 0x03
			break;
    1d4a:	08 95       	ret
		default:
			self->amplify = ONE;
    1d4c:	21 e0       	ldi	r18, 0x01	; 1
    1d4e:	fc 01       	movw	r30, r24
    1d50:	22 83       	std	Z+2, r18	; 0x02
			self->ampcount = ONE;
    1d52:	23 83       	std	Z+3, r18	; 0x03
    1d54:	08 95       	ret

00001d56 <HX711_query>:
	}
}
uint8_t HX711_query(HX711* self)
{
	uint8_t flag=OFF; // one shot
	if(!self->readflag){
    1d56:	fc 01       	movw	r30, r24
    1d58:	20 81       	ld	r18, Z
    1d5a:	21 11       	cpse	r18, r1
    1d5c:	14 c0       	rjmp	.+40     	; 0x1d86 <HX711_query+0x30>
		if(!(*hx711_PIN & (ONE << hx711_datapin))){
    1d5e:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <hx711_PIN>
    1d62:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <hx711_PIN+0x1>
    1d66:	20 81       	ld	r18, Z
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	00 90 6c 01 	lds	r0, 0x016C	; 0x80016c <hx711_datapin>
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <HX711_query+0x1e>
    1d70:	35 95       	asr	r19
    1d72:	27 95       	ror	r18
    1d74:	0a 94       	dec	r0
    1d76:	e2 f7       	brpl	.-8      	; 0x1d70 <HX711_query+0x1a>
    1d78:	20 fd       	sbrc	r18, 0
    1d7a:	07 c0       	rjmp	.+14     	; 0x1d8a <HX711_query+0x34>
			self->readflag=ON;
    1d7c:	2f ef       	ldi	r18, 0xFF	; 255
    1d7e:	fc 01       	movw	r30, r24
    1d80:	20 83       	st	Z, r18
			flag=ON;
    1d82:	8f ef       	ldi	r24, 0xFF	; 255
    1d84:	08 95       	ret
			break;
	}
}
uint8_t HX711_query(HX711* self)
{
	uint8_t flag=OFF; // one shot
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	08 95       	ret
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
			self->readflag=ON;
			flag=ON;
		}
	}
	return flag;
}
    1d8c:	08 95       	ret

00001d8e <HX711_raw_average>:
		}
	}
	return self->raw_reading;
}
float HX711_raw_average(HX711* self, uint8_t n)
{
    1d8e:	0f 93       	push	r16
    1d90:	1f 93       	push	r17
    1d92:	cf 93       	push	r28
    1d94:	df 93       	push	r29
    1d96:	ec 01       	movw	r28, r24
	if(self->trigger){
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	88 23       	and	r24, r24
    1d9c:	91 f1       	breq	.+100    	; 0x1e02 <HX711_raw_average+0x74>
		if(self->av_n < n){
    1d9e:	8a 89       	ldd	r24, Y+18	; 0x12
    1da0:	86 17       	cp	r24, r22
    1da2:	98 f4       	brcc	.+38     	; 0x1dca <HX711_raw_average+0x3c>
			self->sum += self->raw_reading;
    1da4:	0e 85       	ldd	r16, Y+14	; 0x0e
    1da6:	1f 85       	ldd	r17, Y+15	; 0x0f
    1da8:	28 89       	ldd	r18, Y+16	; 0x10
    1daa:	39 89       	ldd	r19, Y+17	; 0x11
    1dac:	4a 85       	ldd	r20, Y+10	; 0x0a
    1dae:	5b 85       	ldd	r21, Y+11	; 0x0b
    1db0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1db2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1db4:	40 0f       	add	r20, r16
    1db6:	51 1f       	adc	r21, r17
    1db8:	62 1f       	adc	r22, r18
    1dba:	73 1f       	adc	r23, r19
    1dbc:	4e 87       	std	Y+14, r20	; 0x0e
    1dbe:	5f 87       	std	Y+15, r21	; 0x0f
    1dc0:	68 8b       	std	Y+16, r22	; 0x10
    1dc2:	79 8b       	std	Y+17, r23	; 0x11
			self->av_n++;
    1dc4:	8f 5f       	subi	r24, 0xFF	; 255
    1dc6:	8a 8b       	std	Y+18, r24	; 0x12
    1dc8:	1b c0       	rjmp	.+54     	; 0x1e00 <HX711_raw_average+0x72>
		}else{
			self->av_n = ZERO;
			self->raw_mean = self->sum / n;
    1dca:	26 2f       	mov	r18, r22
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	40 e0       	ldi	r20, 0x00	; 0
    1dd0:	50 e0       	ldi	r21, 0x00	; 0
    1dd2:	6e 85       	ldd	r22, Y+14	; 0x0e
    1dd4:	7f 85       	ldd	r23, Y+15	; 0x0f
    1dd6:	88 89       	ldd	r24, Y+16	; 0x10
    1dd8:	99 89       	ldd	r25, Y+17	; 0x11
    1dda:	0e 94 18 18 	call	0x3030	; 0x3030 <__divmodsi4>
    1dde:	ca 01       	movw	r24, r20
    1de0:	b9 01       	movw	r22, r18
    1de2:	88 d6       	rcall	.+3344   	; 0x2af4 <__floatsisf>
    1de4:	6b 8b       	std	Y+19, r22	; 0x13
    1de6:	7c 8b       	std	Y+20, r23	; 0x14
    1de8:	8d 8b       	std	Y+21, r24	; 0x15
    1dea:	9e 8b       	std	Y+22, r25	; 0x16
			self->sum = ZERO;
			self->sum += self->raw_reading;
    1dec:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dee:	9b 85       	ldd	r25, Y+11	; 0x0b
    1df0:	ac 85       	ldd	r26, Y+12	; 0x0c
    1df2:	bd 85       	ldd	r27, Y+13	; 0x0d
    1df4:	8e 87       	std	Y+14, r24	; 0x0e
    1df6:	9f 87       	std	Y+15, r25	; 0x0f
    1df8:	a8 8b       	std	Y+16, r26	; 0x10
    1dfa:	b9 8b       	std	Y+17, r27	; 0x11
			self->av_n++;
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	8a 8b       	std	Y+18, r24	; 0x12
		}
		self->trigger = ZERO;
    1e00:	19 82       	std	Y+1, r1	; 0x01
	}
	return self->raw_mean;
    1e02:	6b 89       	ldd	r22, Y+19	; 0x13
    1e04:	7c 89       	ldd	r23, Y+20	; 0x14
    1e06:	8d 89       	ldd	r24, Y+21	; 0x15
    1e08:	9e 89       	ldd	r25, Y+22	; 0x16
}
    1e0a:	df 91       	pop	r29
    1e0c:	cf 91       	pop	r28
    1e0e:	1f 91       	pop	r17
    1e10:	0f 91       	pop	r16
    1e12:	08 95       	ret

00001e14 <HX711_get_readflag>:
uint8_t HX711_get_readflag(HX711* self)
{
	return self->readflag;
    1e14:	fc 01       	movw	r30, r24
    1e16:	80 81       	ld	r24, Z
}
    1e18:	08 95       	ret

00001e1a <HX711_get_cal>:
struct HX711_calibration* HX711_get_cal(HX711* self)
{
	return &(self->cal_data);
}
    1e1a:	47 96       	adiw	r24, 0x17	; 23
    1e1c:	08 95       	ret

00001e1e <HX711_read_raw>:
}
/***
Function to be used in the interrupt routine with appropriate cycle period.
***/
int32_t HX711_read_raw(HX711* self)
{
    1e1e:	0f 93       	push	r16
    1e20:	1f 93       	push	r17
    1e22:	cf 93       	push	r28
    1e24:	df 93       	push	r29
    1e26:	ec 01       	movw	r28, r24
	uint8_t aindex, bindex;
	int32_t value;
	aindex = self->bufferindex-ONE;
    1e28:	09 85       	ldd	r16, Y+9	; 0x09
	bindex = self->bitcount-ONE;
    1e2a:	1c 81       	ldd	r17, Y+4	; 0x04
	ptr=(int32_t*)self->buffer;
    1e2c:	05 96       	adiw	r24, 0x05	; 5
    1e2e:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <ptr+0x1>
    1e32:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <ptr>
	/***Detect query for reading***/
	//if((!(*hx711_PIN & ONE << hx711_datapin)) && !self->readflag){
		//HX711_set_readflag(self);
	//}
	/***Interrupt 24 times sequence***/
	if(self->readflag){
    1e36:	88 81       	ld	r24, Y
    1e38:	88 23       	and	r24, r24
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <HX711_read_raw+0x20>
    1e3c:	44 c0       	rjmp	.+136    	; 0x1ec6 <HX711_read_raw+0xa8>
		if(self->bitcount){
    1e3e:	11 23       	and	r17, r17
    1e40:	29 f1       	breq	.+74     	; 0x1e8c <HX711_read_raw+0x6e>
			if (HX711_read_bit())
    1e42:	3a df       	rcall	.-396    	; 0x1cb8 <HX711_read_bit>
    1e44:	88 23       	and	r24, r24
    1e46:	a9 f0       	breq	.+42     	; 0x1e72 <HX711_read_raw+0x54>
				self->buffer[aindex] |= ONE<<(bindex-(aindex*8));
    1e48:	01 50       	subi	r16, 0x01	; 1
    1e4a:	80 2f       	mov	r24, r16
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	fe 01       	movw	r30, r28
    1e50:	e8 0f       	add	r30, r24
    1e52:	f9 1f       	adc	r31, r25
    1e54:	11 50       	subi	r17, 0x01	; 1
    1e56:	28 e0       	ldi	r18, 0x08	; 8
    1e58:	02 9f       	mul	r16, r18
    1e5a:	10 19       	sub	r17, r0
    1e5c:	11 24       	eor	r1, r1
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <HX711_read_raw+0x4a>
    1e64:	88 0f       	add	r24, r24
    1e66:	99 1f       	adc	r25, r25
    1e68:	1a 95       	dec	r17
    1e6a:	e2 f7       	brpl	.-8      	; 0x1e64 <HX711_read_raw+0x46>
    1e6c:	95 81       	ldd	r25, Z+5	; 0x05
    1e6e:	89 2b       	or	r24, r25
    1e70:	85 83       	std	Z+5, r24	; 0x05
			self->bitcount--;
    1e72:	8c 81       	ldd	r24, Y+4	; 0x04
    1e74:	81 50       	subi	r24, 0x01	; 1
    1e76:	8c 83       	std	Y+4, r24	; 0x04
			if(self->bitcount == 16)
    1e78:	80 31       	cpi	r24, 0x10	; 16
    1e7a:	19 f4       	brne	.+6      	; 0x1e82 <HX711_read_raw+0x64>
				self->bufferindex=2;
    1e7c:	82 e0       	ldi	r24, 0x02	; 2
    1e7e:	89 87       	std	Y+9, r24	; 0x09
    1e80:	22 c0       	rjmp	.+68     	; 0x1ec6 <HX711_read_raw+0xa8>
			if(self->bitcount == 8)
    1e82:	88 30       	cpi	r24, 0x08	; 8
    1e84:	01 f5       	brne	.+64     	; 0x1ec6 <HX711_read_raw+0xa8>
				self->bufferindex=ONE;
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	89 87       	std	Y+9, r24	; 0x09
    1e8a:	1d c0       	rjmp	.+58     	; 0x1ec6 <HX711_read_raw+0xa8>
		}else{
			if(self->ampcount){
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	88 23       	and	r24, r24
				HX711_read_bit();
    1e90:	29 f0       	breq	.+10     	; 0x1e9c <HX711_read_raw+0x7e>
    1e92:	12 df       	rcall	.-476    	; 0x1cb8 <HX711_read_bit>
				self->ampcount--;
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	81 50       	subi	r24, 0x01	; 1
    1e98:	8b 83       	std	Y+3, r24	; 0x03
    1e9a:	15 c0       	rjmp	.+42     	; 0x1ec6 <HX711_read_raw+0xa8>
			}else{
				value = *(ptr);
				self->raw_reading = value;
    1e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea0:	af 81       	ldd	r26, Y+7	; 0x07
    1ea2:	b8 85       	ldd	r27, Y+8	; 0x08
    1ea4:	8a 87       	std	Y+10, r24	; 0x0a
    1ea6:	9b 87       	std	Y+11, r25	; 0x0b
    1ea8:	ac 87       	std	Y+12, r26	; 0x0c
    1eaa:	bd 87       	std	Y+13, r27	; 0x0d
				self->bitcount = HX711_ADC_bits;
    1eac:	88 e1       	ldi	r24, 0x18	; 24
    1eae:	8c 83       	std	Y+4, r24	; 0x04
				self->bufferindex = HX711_VECT_SIZE-ONE;
    1eb0:	83 e0       	ldi	r24, 0x03	; 3
    1eb2:	89 87       	std	Y+9, r24	; 0x09
				self->ampcount = self->amplify;
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	8b 83       	std	Y+3, r24	; 0x03
				self->buffer[0] = ZERO;
    1eb8:	1d 82       	std	Y+5, r1	; 0x05
				self->buffer[1] = ZERO;
    1eba:	1e 82       	std	Y+6, r1	; 0x06
				self->buffer[2] = ZERO;
    1ebc:	1f 82       	std	Y+7, r1	; 0x07
				self->buffer[3] = ZERO;
    1ebe:	18 86       	std	Y+8, r1	; 0x08
				self->trigger = ONE;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	89 83       	std	Y+1, r24	; 0x01
//{
	//self->readflag=ON;
//}
void HX711_reset_readflag(HX711* self)
{
	self->readflag=OFF;
    1ec4:	18 82       	st	Y, r1
				/***Reset ready for next query***/
				HX711_reset_readflag(self);
			}
		}
	}
	return self->raw_reading;
    1ec6:	6a 85       	ldd	r22, Y+10	; 0x0a
    1ec8:	7b 85       	ldd	r23, Y+11	; 0x0b
    1eca:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ecc:	9d 85       	ldd	r25, Y+13	; 0x0d
}
    1ece:	df 91       	pop	r29
    1ed0:	cf 91       	pop	r28
    1ed2:	1f 91       	pop	r17
    1ed4:	0f 91       	pop	r16
    1ed6:	08 95       	ret

00001ed8 <HX711enable>:
float HX711_raw_average(HX711* self, uint8_t n);
uint8_t HX711_get_readflag(HX711* self);
struct HX711_calibration* HX711_get_cal(HX711* self);
/***Procedure & Function***/
HX711 HX711enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port, uint8_t datapin, uint8_t clkpin)
{
    1ed8:	ef 92       	push	r14
    1eda:	0f 93       	push	r16
    1edc:	fc 01       	movw	r30, r24
    1ede:	da 01       	movw	r26, r20
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG = STATUS_REGISTER;
    1ee0:	5f b7       	in	r21, 0x3f	; 63
	STATUS_REGISTER &= ~(1<<GLOBAL_INTERRUPT_ENABLE);
    1ee2:	8f b7       	in	r24, 0x3f	; 63
    1ee4:	8f 77       	andi	r24, 0x7F	; 127
    1ee6:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	HX711 hx711;
	//import parametros
	hx711_DDR = ddr;
    1ee8:	70 93 75 01 	sts	0x0175, r23	; 0x800175 <hx711_DDR+0x1>
    1eec:	60 93 74 01 	sts	0x0174, r22	; 0x800174 <hx711_DDR>
	hx711_PIN = pin;
    1ef0:	b0 93 6e 01 	sts	0x016E, r27	; 0x80016e <hx711_PIN+0x1>
    1ef4:	a0 93 6d 01 	sts	0x016D, r26	; 0x80016d <hx711_PIN>
	hx711_PORT = port;
    1ef8:	30 93 70 01 	sts	0x0170, r19	; 0x800170 <hx711_PORT+0x1>
    1efc:	20 93 6f 01 	sts	0x016F, r18	; 0x80016f <hx711_PORT>
	hx711_datapin = datapin;
    1f00:	00 93 6c 01 	sts	0x016C, r16	; 0x80016c <hx711_datapin>
	hx711_clkpin = clkpin;
    1f04:	e0 92 73 01 	sts	0x0173, r14	; 0x800173 <hx711_clkpin>
	//inic variables
	*hx711_DDR |= (ONE<<clkpin);
    1f08:	db 01       	movw	r26, r22
    1f0a:	4c 91       	ld	r20, X
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	9c 01       	movw	r18, r24
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <HX711enable+0x40>
    1f14:	22 0f       	add	r18, r18
    1f16:	33 1f       	adc	r19, r19
    1f18:	ea 94       	dec	r14
    1f1a:	e2 f7       	brpl	.-8      	; 0x1f14 <HX711enable+0x3c>
    1f1c:	24 2b       	or	r18, r20
    1f1e:	2c 93       	st	X, r18
	*hx711_PORT |= (ONE<<datapin);
    1f20:	a0 91 6f 01 	lds	r26, 0x016F	; 0x80016f <hx711_PORT>
    1f24:	b0 91 70 01 	lds	r27, 0x0170	; 0x800170 <hx711_PORT+0x1>
    1f28:	2c 91       	ld	r18, X
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <HX711enable+0x58>
    1f2c:	88 0f       	add	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	0a 95       	dec	r16
    1f32:	e2 f7       	brpl	.-8      	; 0x1f2c <HX711enable+0x54>
    1f34:	82 2b       	or	r24, r18
    1f36:	8c 93       	st	X, r24
	hx711.readflag = ZERO;
    1f38:	10 82       	st	Z, r1
	hx711.trigger = ZERO;
    1f3a:	11 82       	std	Z+1, r1	; 0x01
	hx711.amplify = ONE;
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	82 83       	std	Z+2, r24	; 0x02
	hx711.ampcount = ONE;
    1f40:	83 83       	std	Z+3, r24	; 0x03
	hx711.bitcount = HX711_ADC_bits;
    1f42:	88 e1       	ldi	r24, 0x18	; 24
    1f44:	84 83       	std	Z+4, r24	; 0x04
	hx711.buffer[0] = ZERO;
    1f46:	15 82       	std	Z+5, r1	; 0x05
	hx711.buffer[1] = ZERO;
    1f48:	16 82       	std	Z+6, r1	; 0x06
	hx711.buffer[2] = ZERO;
    1f4a:	17 82       	std	Z+7, r1	; 0x07
	hx711.buffer[3] = ZERO;
    1f4c:	10 86       	std	Z+8, r1	; 0x08
	hx711.bufferindex = HX711_VECT_SIZE-ONE;
    1f4e:	83 e0       	ldi	r24, 0x03	; 3
    1f50:	81 87       	std	Z+9, r24	; 0x09
	hx711.raw_reading = ZERO;
    1f52:	12 86       	std	Z+10, r1	; 0x0a
    1f54:	13 86       	std	Z+11, r1	; 0x0b
    1f56:	14 86       	std	Z+12, r1	; 0x0c
    1f58:	15 86       	std	Z+13, r1	; 0x0d
	hx711.sum = ZERO;
    1f5a:	16 86       	std	Z+14, r1	; 0x0e
    1f5c:	17 86       	std	Z+15, r1	; 0x0f
    1f5e:	10 8a       	std	Z+16, r1	; 0x10
    1f60:	11 8a       	std	Z+17, r1	; 0x11
	hx711.av_n = ZERO;
    1f62:	12 8a       	std	Z+18, r1	; 0x12
	hx711.raw_mean = ZERO;
    1f64:	13 8a       	std	Z+19, r1	; 0x13
    1f66:	14 8a       	std	Z+20, r1	; 0x14
    1f68:	15 8a       	std	Z+21, r1	; 0x15
    1f6a:	16 8a       	std	Z+22, r1	; 0x16
	// offset para mesa usada.
	hx711.cal_data.offset_32 = 36800; // to subtract B
    1f6c:	80 ec       	ldi	r24, 0xC0	; 192
    1f6e:	9f e8       	ldi	r25, 0x8F	; 143
    1f70:	a0 e0       	ldi	r26, 0x00	; 0
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	87 8b       	std	Z+23, r24	; 0x17
    1f76:	90 8f       	std	Z+24, r25	; 0x18
    1f78:	a1 8f       	std	Z+25, r26	; 0x19
    1f7a:	b2 8f       	std	Z+26, r27	; 0x1a
	hx711.cal_data.offset_64 = 72700; // to subtract A 64
    1f7c:	8c ef       	ldi	r24, 0xFC	; 252
    1f7e:	9b e1       	ldi	r25, 0x1B	; 27
    1f80:	a1 e0       	ldi	r26, 0x01	; 1
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	83 8f       	std	Z+27, r24	; 0x1b
    1f86:	94 8f       	std	Z+28, r25	; 0x1c
    1f88:	a5 8f       	std	Z+29, r26	; 0x1d
    1f8a:	b6 8f       	std	Z+30, r27	; 0x1e
	hx711.cal_data.offset_128 = 147200; // to subtract A 128
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	9f e3       	ldi	r25, 0x3F	; 63
    1f90:	a2 e0       	ldi	r26, 0x02	; 2
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	87 8f       	std	Z+31, r24	; 0x1f
    1f96:	90 a3       	std	Z+32, r25	; 0x20
    1f98:	a1 a3       	std	Z+33, r26	; 0x21
    1f9a:	b2 a3       	std	Z+34, r27	; 0x22
	//div factor
	hx711.cal_data.divfactor_32=23; // to divide
    1f9c:	87 e1       	ldi	r24, 0x17	; 23
    1f9e:	83 a3       	std	Z+35, r24	; 0x23
	hx711.cal_data.divfactor_64=46; // to divide
    1fa0:	8e e2       	ldi	r24, 0x2E	; 46
    1fa2:	84 a3       	std	Z+36, r24	; 0x24
	hx711.cal_data.divfactor_128=92; // to divide
    1fa4:	8c e5       	ldi	r24, 0x5C	; 92
    1fa6:	85 a3       	std	Z+37, r24	; 0x25
	hx711.cal_data.status=ZERO;
    1fa8:	16 a2       	std	Z+38, r1	; 0x26
	//Direccionar apontadores para PROTOTIPOS
	//hx711.set_readflag=HX711_set_readflag;
	hx711.read_bit=HX711_read_bit;
    1faa:	8c e5       	ldi	r24, 0x5C	; 92
    1fac:	9e e0       	ldi	r25, 0x0E	; 14
    1fae:	90 a7       	std	Z+40, r25	; 0x28
    1fb0:	87 a3       	std	Z+39, r24	; 0x27
	hx711.set_amplify=HX711_set_amplify;
    1fb2:	80 e9       	ldi	r24, 0x90	; 144
    1fb4:	9e e0       	ldi	r25, 0x0E	; 14
    1fb6:	92 a7       	std	Z+42, r25	; 0x2a
    1fb8:	81 a7       	std	Z+41, r24	; 0x29
	hx711.query=HX711_query;
    1fba:	8b ea       	ldi	r24, 0xAB	; 171
    1fbc:	9e e0       	ldi	r25, 0x0E	; 14
    1fbe:	94 a7       	std	Z+44, r25	; 0x2c
    1fc0:	83 a7       	std	Z+43, r24	; 0x2b
	hx711.read_raw=HX711_read_raw;
    1fc2:	8f e0       	ldi	r24, 0x0F	; 15
    1fc4:	9f e0       	ldi	r25, 0x0F	; 15
    1fc6:	96 a7       	std	Z+46, r25	; 0x2e
    1fc8:	85 a7       	std	Z+45, r24	; 0x2d
	hx711.raw_average=HX711_raw_average;
    1fca:	87 ec       	ldi	r24, 0xC7	; 199
    1fcc:	9e e0       	ldi	r25, 0x0E	; 14
    1fce:	90 ab       	std	Z+48, r25	; 0x30
    1fd0:	87 a7       	std	Z+47, r24	; 0x2f
	hx711.get_readflag=HX711_get_readflag;
    1fd2:	8a e0       	ldi	r24, 0x0A	; 10
    1fd4:	9f e0       	ldi	r25, 0x0F	; 15
    1fd6:	92 ab       	std	Z+50, r25	; 0x32
    1fd8:	81 ab       	std	Z+49, r24	; 0x31
	hx711.get_cal=HX711_get_cal;
    1fda:	8d e0       	ldi	r24, 0x0D	; 13
    1fdc:	9f e0       	ldi	r25, 0x0F	; 15
    1fde:	94 ab       	std	Z+52, r25	; 0x34
    1fe0:	83 ab       	std	Z+51, r24	; 0x33
	STATUS_REGISTER = tSREG;
    1fe2:	5f bf       	out	0x3f, r21	; 63
	// returns a copy
	return hx711;
}
    1fe4:	cf 01       	movw	r24, r30
    1fe6:	0f 91       	pop	r16
    1fe8:	ef 90       	pop	r14
    1fea:	08 95       	ret

00001fec <PORTINIT>:
** procedure and function
*/
void PORTINIT(void)
{
	//Control buttons
	PORTF |= IMASK;
    1fec:	e2 e6       	ldi	r30, 0x62	; 98
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	8f 63       	ori	r24, 0x3F	; 63
    1ff4:	80 83       	st	Z, r24
	//troubleshooting output
	DDRC = 0xFF;
    1ff6:	8f ef       	ldi	r24, 0xFF	; 255
    1ff8:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
    1ffa:	85 bb       	out	0x15, r24	; 21
    1ffc:	08 95       	ret

00001ffe <main>:
** Header
*/
void PORTINIT();
/****MAIN****/
int main(void)
{
    1ffe:	cf 93       	push	r28
    2000:	df 93       	push	r29
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	cd 5b       	subi	r28, 0xBD	; 189
    2008:	d1 09       	sbc	r29, r1
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
	PORTINIT();
    2014:	eb df       	rcall	.-42     	; 0x1fec <PORTINIT>
	
	HX711_ptr = &HX711_data; // CALIBRATION DATA BUS
    2016:	0f 2e       	mov	r0, r31
    2018:	f0 eb       	ldi	r31, 0xB0	; 176
    201a:	cf 2e       	mov	r12, r31
    201c:	f1 e0       	ldi	r31, 0x01	; 1
    201e:	df 2e       	mov	r13, r31
    2020:	f0 2d       	mov	r31, r0
    2022:	d0 92 c1 01 	sts	0x01C1, r13	; 0x8001c1 <HX711_ptr+0x1>
    2026:	c0 92 c0 01 	sts	0x01C0, r12	; 0x8001c0 <HX711_ptr>
	
	/***INICIALIZE OBJECTS***/
	F = EXPLODEenable();
    202a:	ce 01       	movw	r24, r28
    202c:	83 5a       	subi	r24, 0xA3	; 163
    202e:	9f 4f       	sbci	r25, 0xFF	; 255
    2030:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <EXPLODEenable>
    2034:	84 e1       	ldi	r24, 0x14	; 20
    2036:	fe 01       	movw	r30, r28
    2038:	e3 5a       	subi	r30, 0xA3	; 163
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	ad e2       	ldi	r26, 0x2D	; 45
    203e:	b2 e0       	ldi	r27, 0x02	; 2
    2040:	01 90       	ld	r0, Z+
    2042:	0d 92       	st	X+, r0
    2044:	8a 95       	dec	r24
    2046:	e1 f7       	brne	.-8      	; 0x2040 <main+0x42>
	FUNC function = FUNCenable();
    2048:	ce 01       	movw	r24, r28
    204a:	01 96       	adiw	r24, 0x01	; 1
    204c:	04 da       	rcall	.-3064   	; 0x1456 <FUNCenable>
    204e:	2d 96       	adiw	r28, 0x0d	; 13
    2050:	8e ad       	ldd	r24, Y+62	; 0x3e
    2052:	9f ad       	ldd	r25, Y+63	; 0x3f
    2054:	2d 97       	sbiw	r28, 0x0d	; 13
    2056:	c4 54       	subi	r28, 0x44	; 68
    2058:	df 4f       	sbci	r29, 0xFF	; 255
    205a:	99 83       	std	Y+1, r25	; 0x01
    205c:	88 83       	st	Y, r24
    205e:	cc 5b       	subi	r28, 0xBC	; 188
    2060:	d0 40       	sbci	r29, 0x00	; 0
	lcd0 = LCD0enable(&DDRA,&PINA,&PORTA);
    2062:	2b e3       	ldi	r18, 0x3B	; 59
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	49 e3       	ldi	r20, 0x39	; 57
    2068:	50 e0       	ldi	r21, 0x00	; 0
    206a:	6a e3       	ldi	r22, 0x3A	; 58
    206c:	70 e0       	ldi	r23, 0x00	; 0
    206e:	ce 01       	movw	r24, r28
    2070:	8f 58       	subi	r24, 0x8F	; 143
    2072:	9f 4f       	sbci	r25, 0xFF	; 255
    2074:	b2 dd       	rcall	.-1180   	; 0x1bda <LCD0enable>
    2076:	86 e1       	ldi	r24, 0x16	; 22
    2078:	fe 01       	movw	r30, r28
    207a:	ef 58       	subi	r30, 0x8F	; 143
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	a2 ee       	ldi	r26, 0xE2	; 226
    2080:	b1 e0       	ldi	r27, 0x01	; 1
    2082:	01 90       	ld	r0, Z+
    2084:	0d 92       	st	X+, r0
    2086:	8a 95       	dec	r24
    2088:	e1 f7       	brne	.-8      	; 0x2082 <main+0x84>
	timer0 = TIMER_COUNTER0enable(2,2); //2,2
    208a:	42 e0       	ldi	r20, 0x02	; 2
    208c:	62 e0       	ldi	r22, 0x02	; 2
    208e:	ce 01       	movw	r24, r28
    2090:	83 5a       	subi	r24, 0xA3	; 163
    2092:	9f 4f       	sbci	r25, 0xFF	; 255
    2094:	0e 94 c8 03 	call	0x790	; 0x790 <TIMER_COUNTER0enable>
    2098:	80 e1       	ldi	r24, 0x10	; 16
    209a:	fe 01       	movw	r30, r28
    209c:	e3 5a       	subi	r30, 0xA3	; 163
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	aa e7       	ldi	r26, 0x7A	; 122
    20a2:	b1 e0       	ldi	r27, 0x01	; 1
    20a4:	01 90       	ld	r0, Z+
    20a6:	0d 92       	st	X+, r0
    20a8:	8a 95       	dec	r24
    20aa:	e1 f7       	brne	.-8      	; 0x20a4 <main+0xa6>
	TIMER_COUNTER1 timer1 = TIMER_COUNTER1enable(4,2); //4,2
    20ac:	42 e0       	ldi	r20, 0x02	; 2
    20ae:	64 e0       	ldi	r22, 0x04	; 4
    20b0:	ce 01       	movw	r24, r28
    20b2:	83 5b       	subi	r24, 0xB3	; 179
    20b4:	9f 4f       	sbci	r25, 0xFF	; 255
    20b6:	0e 94 0c 04 	call	0x818	; 0x818 <TIMER_COUNTER1enable>
	hx = HX711enable(&DDRF, &PINF, &PORTF, 6, 7); //6,7
    20ba:	0f 2e       	mov	r0, r31
    20bc:	f7 e0       	ldi	r31, 0x07	; 7
    20be:	ef 2e       	mov	r14, r31
    20c0:	f0 2d       	mov	r31, r0
    20c2:	06 e0       	ldi	r16, 0x06	; 6
    20c4:	22 e6       	ldi	r18, 0x62	; 98
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e2       	ldi	r20, 0x20	; 32
    20ca:	50 e0       	ldi	r21, 0x00	; 0
    20cc:	61 e6       	ldi	r22, 0x61	; 97
    20ce:	70 e0       	ldi	r23, 0x00	; 0
    20d0:	ce 01       	movw	r24, r28
    20d2:	89 57       	subi	r24, 0x79	; 121
    20d4:	9f 4f       	sbci	r25, 0xFF	; 255
    20d6:	00 df       	rcall	.-512    	; 0x1ed8 <HX711enable>
    20d8:	85 e3       	ldi	r24, 0x35	; 53
    20da:	fe 01       	movw	r30, r28
    20dc:	e9 57       	subi	r30, 0x79	; 121
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	a8 ef       	ldi	r26, 0xF8	; 248
    20e2:	b1 e0       	ldi	r27, 0x01	; 1
    20e4:	01 90       	ld	r0, Z+
    20e6:	0d 92       	st	X+, r0
    20e8:	8a 95       	dec	r24
    20ea:	e1 f7       	brne	.-8      	; 0x20e4 <main+0xe6>
	eprom = EEPROMenable();
    20ec:	ce 01       	movw	r24, r28
    20ee:	83 5a       	subi	r24, 0xA3	; 163
    20f0:	9f 4f       	sbci	r25, 0xFF	; 255
    20f2:	0e 94 74 05 	call	0xae8	; 0xae8 <EEPROMenable>
    20f6:	8e e1       	ldi	r24, 0x1E	; 30
    20f8:	fe 01       	movw	r30, r28
    20fa:	e3 5a       	subi	r30, 0xA3	; 163
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	aa e8       	ldi	r26, 0x8A	; 138
    2100:	b1 e0       	ldi	r27, 0x01	; 1
    2102:	01 90       	ld	r0, Z+
    2104:	0d 92       	st	X+, r0
    2106:	8a 95       	dec	r24
    2108:	e1 f7       	brne	.-8      	; 0x2102 <main+0x104>
	intx = INTERRUPTenable();
    210a:	0e 94 45 02 	call	0x48a	; 0x48a <INTERRUPTenable>
    210e:	e8 ea       	ldi	r30, 0xA8	; 168
    2110:	f1 e0       	ldi	r31, 0x01	; 1
    2112:	20 83       	st	Z, r18
    2114:	31 83       	std	Z+1, r19	; 0x01
    2116:	42 83       	std	Z+2, r20	; 0x02
    2118:	53 83       	std	Z+3, r21	; 0x03
    211a:	64 83       	std	Z+4, r22	; 0x04
    211c:	75 83       	std	Z+5, r23	; 0x05
    211e:	86 83       	std	Z+6, r24	; 0x06
    2120:	97 83       	std	Z+7, r25	; 0x07
	
	float value=0;
	float publish=0;
	
	// Get default values to buss memory
	HX711_data.offset_32 = hx.get_cal(&hx)->offset_32;
    2122:	08 ef       	ldi	r16, 0xF8	; 248
    2124:	11 e0       	ldi	r17, 0x01	; 1
    2126:	d8 01       	movw	r26, r16
    2128:	d3 96       	adiw	r26, 0x33	; 51
    212a:	ed 91       	ld	r30, X+
    212c:	fc 91       	ld	r31, X
    212e:	d4 97       	sbiw	r26, 0x34	; 52
    2130:	c8 01       	movw	r24, r16
    2132:	09 95       	icall
    2134:	fc 01       	movw	r30, r24
    2136:	80 81       	ld	r24, Z
    2138:	91 81       	ldd	r25, Z+1	; 0x01
    213a:	a2 81       	ldd	r26, Z+2	; 0x02
    213c:	b3 81       	ldd	r27, Z+3	; 0x03
    213e:	f6 01       	movw	r30, r12
    2140:	80 83       	st	Z, r24
    2142:	91 83       	std	Z+1, r25	; 0x01
    2144:	a2 83       	std	Z+2, r26	; 0x02
    2146:	b3 83       	std	Z+3, r27	; 0x03
	HX711_data.offset_64 = hx.get_cal(&hx)->offset_64;
    2148:	d8 01       	movw	r26, r16
    214a:	d3 96       	adiw	r26, 0x33	; 51
    214c:	ed 91       	ld	r30, X+
    214e:	fc 91       	ld	r31, X
    2150:	d4 97       	sbiw	r26, 0x34	; 52
    2152:	c8 01       	movw	r24, r16
    2154:	09 95       	icall
    2156:	fc 01       	movw	r30, r24
    2158:	84 81       	ldd	r24, Z+4	; 0x04
    215a:	95 81       	ldd	r25, Z+5	; 0x05
    215c:	a6 81       	ldd	r26, Z+6	; 0x06
    215e:	b7 81       	ldd	r27, Z+7	; 0x07
    2160:	f6 01       	movw	r30, r12
    2162:	84 83       	std	Z+4, r24	; 0x04
    2164:	95 83       	std	Z+5, r25	; 0x05
    2166:	a6 83       	std	Z+6, r26	; 0x06
    2168:	b7 83       	std	Z+7, r27	; 0x07
	HX711_data.offset_128 = hx.get_cal(&hx)->offset_128;
    216a:	d8 01       	movw	r26, r16
    216c:	d3 96       	adiw	r26, 0x33	; 51
    216e:	ed 91       	ld	r30, X+
    2170:	fc 91       	ld	r31, X
    2172:	d4 97       	sbiw	r26, 0x34	; 52
    2174:	c8 01       	movw	r24, r16
    2176:	09 95       	icall
    2178:	fc 01       	movw	r30, r24
    217a:	80 85       	ldd	r24, Z+8	; 0x08
    217c:	91 85       	ldd	r25, Z+9	; 0x09
    217e:	a2 85       	ldd	r26, Z+10	; 0x0a
    2180:	b3 85       	ldd	r27, Z+11	; 0x0b
    2182:	f6 01       	movw	r30, r12
    2184:	80 87       	std	Z+8, r24	; 0x08
    2186:	91 87       	std	Z+9, r25	; 0x09
    2188:	a2 87       	std	Z+10, r26	; 0x0a
    218a:	b3 87       	std	Z+11, r27	; 0x0b
	HX711_data.divfactor_32 = hx.get_cal(&hx)->divfactor_32;
    218c:	d8 01       	movw	r26, r16
    218e:	d3 96       	adiw	r26, 0x33	; 51
    2190:	ed 91       	ld	r30, X+
    2192:	fc 91       	ld	r31, X
    2194:	d4 97       	sbiw	r26, 0x34	; 52
    2196:	c8 01       	movw	r24, r16
    2198:	09 95       	icall
    219a:	fc 01       	movw	r30, r24
    219c:	84 85       	ldd	r24, Z+12	; 0x0c
    219e:	d6 01       	movw	r26, r12
    21a0:	1c 96       	adiw	r26, 0x0c	; 12
    21a2:	8c 93       	st	X, r24
	HX711_data.divfactor_64 = hx.get_cal(&hx)->divfactor_64;
    21a4:	d8 01       	movw	r26, r16
    21a6:	d3 96       	adiw	r26, 0x33	; 51
    21a8:	ed 91       	ld	r30, X+
    21aa:	fc 91       	ld	r31, X
    21ac:	d4 97       	sbiw	r26, 0x34	; 52
    21ae:	c8 01       	movw	r24, r16
    21b0:	09 95       	icall
    21b2:	fc 01       	movw	r30, r24
    21b4:	85 85       	ldd	r24, Z+13	; 0x0d
    21b6:	d6 01       	movw	r26, r12
    21b8:	1d 96       	adiw	r26, 0x0d	; 13
    21ba:	8c 93       	st	X, r24
	HX711_data.divfactor_128 = hx.get_cal(&hx)->divfactor_128;
    21bc:	d8 01       	movw	r26, r16
    21be:	d3 96       	adiw	r26, 0x33	; 51
    21c0:	ed 91       	ld	r30, X+
    21c2:	fc 91       	ld	r31, X
    21c4:	d4 97       	sbiw	r26, 0x34	; 52
    21c6:	c8 01       	movw	r24, r16
    21c8:	09 95       	icall
    21ca:	fc 01       	movw	r30, r24
    21cc:	86 85       	ldd	r24, Z+14	; 0x0e
    21ce:	d6 01       	movw	r26, r12
    21d0:	1e 96       	adiw	r26, 0x0e	; 14
    21d2:	8c 93       	st	X, r24
	HX711_data.status = hx.get_cal(&hx)->status;
    21d4:	d8 01       	movw	r26, r16
    21d6:	d3 96       	adiw	r26, 0x33	; 51
    21d8:	ed 91       	ld	r30, X+
    21da:	fc 91       	ld	r31, X
    21dc:	d4 97       	sbiw	r26, 0x34	; 52
    21de:	c8 01       	movw	r24, r16
    21e0:	09 95       	icall
    21e2:	fc 01       	movw	r30, r24
    21e4:	87 85       	ldd	r24, Z+15	; 0x0f
    21e6:	d6 01       	movw	r26, r12
    21e8:	1f 96       	adiw	r26, 0x0f	; 15
    21ea:	8c 93       	st	X, r24
	
	/***Parameters timers***/
	timer0.compoutmode(1); // troubleshooting blinking PORTB 5
    21ec:	0f 2e       	mov	r0, r31
    21ee:	fa e7       	ldi	r31, 0x7A	; 122
    21f0:	ef 2e       	mov	r14, r31
    21f2:	f1 e0       	ldi	r31, 0x01	; 1
    21f4:	ff 2e       	mov	r15, r31
    21f6:	f0 2d       	mov	r31, r0
    21f8:	d7 01       	movw	r26, r14
    21fa:	ed 91       	ld	r30, X+
    21fc:	fc 91       	ld	r31, X
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	09 95       	icall
	/***79 and 8  -> 80 us***/
	timer0.compare(60); // 8 -> 79 -> 80 us, fine tunned = 8 -> 60 -> 30.4us
    2202:	d7 01       	movw	r26, r14
    2204:	16 96       	adiw	r26, 0x06	; 6
    2206:	ed 91       	ld	r30, X+
    2208:	fc 91       	ld	r31, X
    220a:	17 97       	sbiw	r26, 0x07	; 7
    220c:	8c e3       	ldi	r24, 0x3C	; 60
    220e:	09 95       	icall
	timer0.start(8); // 1 -> 32 us , 8 -> 256 us , 32 64 128 256 1024
    2210:	d7 01       	movw	r26, r14
    2212:	1c 96       	adiw	r26, 0x0c	; 12
    2214:	ed 91       	ld	r30, X+
    2216:	fc 91       	ld	r31, X
    2218:	1d 97       	sbiw	r26, 0x0d	; 13
    221a:	88 e0       	ldi	r24, 0x08	; 8
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	09 95       	icall
	
	// to be used to jump menu for calibration in progress
	timer1.compoutmodeA(1); // troubleshooting blinking PORTB 6
    2220:	2f 96       	adiw	r28, 0x0f	; 15
    2222:	ee ad       	ldd	r30, Y+62	; 0x3e
    2224:	ff ad       	ldd	r31, Y+63	; 0x3f
    2226:	2f 97       	sbiw	r28, 0x0f	; 15
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	09 95       	icall
	timer1.compareA(62800); // Freq = 256 -> 62800 -> 2 s
    222c:	65 96       	adiw	r28, 0x15	; 21
    222e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2230:	ff ad       	ldd	r31, Y+63	; 0x3f
    2232:	65 97       	sbiw	r28, 0x15	; 21
    2234:	80 e5       	ldi	r24, 0x50	; 80
    2236:	95 ef       	ldi	r25, 0xF5	; 245
    2238:	09 95       	icall
	timer1.start(256);
    223a:	6b 96       	adiw	r28, 0x1b	; 27
    223c:	ee ad       	ldd	r30, Y+62	; 0x3e
    223e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2240:	6b 97       	sbiw	r28, 0x1b	; 27
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	91 e0       	ldi	r25, 0x01	; 1
    2246:	09 95       	icall
	
	// HX711 Gain
	hx.set_amplify(&hx, 64); // 32 64 128
    2248:	d8 01       	movw	r26, r16
    224a:	99 96       	adiw	r26, 0x29	; 41
    224c:	ed 91       	ld	r30, X+
    224e:	fc 91       	ld	r31, X
    2250:	9a 97       	sbiw	r26, 0x2a	; 42
    2252:	60 e4       	ldi	r22, 0x40	; 64
    2254:	c8 01       	movw	r24, r16
    2256:	09 95       	icall
	
	//Get stored calibration values and put them to effect
	eprom.read_block(HX711_ptr, (const void*) ZERO, sizeblock);
    2258:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <eprom+0x18>
    225c:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <eprom+0x19>
    2260:	40 e1       	ldi	r20, 0x10	; 16
    2262:	50 e0       	ldi	r21, 0x00	; 0
    2264:	60 e0       	ldi	r22, 0x00	; 0
    2266:	70 e0       	ldi	r23, 0x00	; 0
    2268:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <HX711_ptr>
    226c:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    2270:	09 95       	icall
	if(HX711_ptr->status == 1){
    2272:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    2276:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    227a:	87 85       	ldd	r24, Z+15	; 0x0f
    227c:	81 30       	cpi	r24, 0x01	; 1
    227e:	09 f0       	breq	.+2      	; 0x2282 <main+0x284>
    2280:	70 c0       	rjmp	.+224    	; 0x2362 <main+0x364>
		//Load stored value 
		hx.get_cal(&hx)->offset_32 = HX711_ptr->offset_32;
    2282:	d8 01       	movw	r26, r16
    2284:	d3 96       	adiw	r26, 0x33	; 51
    2286:	ed 91       	ld	r30, X+
    2288:	fc 91       	ld	r31, X
    228a:	d4 97       	sbiw	r26, 0x34	; 52
    228c:	c8 01       	movw	r24, r16
    228e:	09 95       	icall
    2290:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    2294:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    2298:	40 81       	ld	r20, Z
    229a:	51 81       	ldd	r21, Z+1	; 0x01
    229c:	62 81       	ldd	r22, Z+2	; 0x02
    229e:	73 81       	ldd	r23, Z+3	; 0x03
    22a0:	fc 01       	movw	r30, r24
    22a2:	40 83       	st	Z, r20
    22a4:	51 83       	std	Z+1, r21	; 0x01
    22a6:	62 83       	std	Z+2, r22	; 0x02
    22a8:	73 83       	std	Z+3, r23	; 0x03
		hx.get_cal(&hx)->offset_64 = HX711_ptr->offset_64;
    22aa:	d8 01       	movw	r26, r16
    22ac:	d3 96       	adiw	r26, 0x33	; 51
    22ae:	ed 91       	ld	r30, X+
    22b0:	fc 91       	ld	r31, X
    22b2:	d4 97       	sbiw	r26, 0x34	; 52
    22b4:	c8 01       	movw	r24, r16
    22b6:	09 95       	icall
    22b8:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    22bc:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    22c0:	44 81       	ldd	r20, Z+4	; 0x04
    22c2:	55 81       	ldd	r21, Z+5	; 0x05
    22c4:	66 81       	ldd	r22, Z+6	; 0x06
    22c6:	77 81       	ldd	r23, Z+7	; 0x07
    22c8:	fc 01       	movw	r30, r24
    22ca:	44 83       	std	Z+4, r20	; 0x04
    22cc:	55 83       	std	Z+5, r21	; 0x05
    22ce:	66 83       	std	Z+6, r22	; 0x06
    22d0:	77 83       	std	Z+7, r23	; 0x07
		hx.get_cal(&hx)->offset_128 = HX711_ptr->offset_128;
    22d2:	d8 01       	movw	r26, r16
    22d4:	d3 96       	adiw	r26, 0x33	; 51
    22d6:	ed 91       	ld	r30, X+
    22d8:	fc 91       	ld	r31, X
    22da:	d4 97       	sbiw	r26, 0x34	; 52
    22dc:	c8 01       	movw	r24, r16
    22de:	09 95       	icall
    22e0:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    22e4:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    22e8:	40 85       	ldd	r20, Z+8	; 0x08
    22ea:	51 85       	ldd	r21, Z+9	; 0x09
    22ec:	62 85       	ldd	r22, Z+10	; 0x0a
    22ee:	73 85       	ldd	r23, Z+11	; 0x0b
    22f0:	fc 01       	movw	r30, r24
    22f2:	40 87       	std	Z+8, r20	; 0x08
    22f4:	51 87       	std	Z+9, r21	; 0x09
    22f6:	62 87       	std	Z+10, r22	; 0x0a
    22f8:	73 87       	std	Z+11, r23	; 0x0b
		hx.get_cal(&hx)->divfactor_32 = HX711_ptr->divfactor_32;
    22fa:	d8 01       	movw	r26, r16
    22fc:	d3 96       	adiw	r26, 0x33	; 51
    22fe:	ed 91       	ld	r30, X+
    2300:	fc 91       	ld	r31, X
    2302:	d4 97       	sbiw	r26, 0x34	; 52
    2304:	c8 01       	movw	r24, r16
    2306:	09 95       	icall
    2308:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    230c:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    2310:	24 85       	ldd	r18, Z+12	; 0x0c
    2312:	fc 01       	movw	r30, r24
    2314:	24 87       	std	Z+12, r18	; 0x0c
		hx.get_cal(&hx)->divfactor_64 = HX711_ptr->divfactor_64;
    2316:	d8 01       	movw	r26, r16
    2318:	d3 96       	adiw	r26, 0x33	; 51
    231a:	ed 91       	ld	r30, X+
    231c:	fc 91       	ld	r31, X
    231e:	d4 97       	sbiw	r26, 0x34	; 52
    2320:	c8 01       	movw	r24, r16
    2322:	09 95       	icall
    2324:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    2328:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    232c:	25 85       	ldd	r18, Z+13	; 0x0d
    232e:	fc 01       	movw	r30, r24
    2330:	25 87       	std	Z+13, r18	; 0x0d
		hx.get_cal(&hx)->divfactor_128 = HX711_ptr->divfactor_128;
    2332:	d8 01       	movw	r26, r16
    2334:	d3 96       	adiw	r26, 0x33	; 51
    2336:	ed 91       	ld	r30, X+
    2338:	fc 91       	ld	r31, X
    233a:	d4 97       	sbiw	r26, 0x34	; 52
    233c:	c8 01       	movw	r24, r16
    233e:	09 95       	icall
    2340:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    2344:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    2348:	26 85       	ldd	r18, Z+14	; 0x0e
    234a:	fc 01       	movw	r30, r24
    234c:	26 87       	std	Z+14, r18	; 0x0e
		hx.get_cal(&hx)->status=ZERO;
    234e:	d8 01       	movw	r26, r16
    2350:	d3 96       	adiw	r26, 0x33	; 51
    2352:	ed 91       	ld	r30, X+
    2354:	fc 91       	ld	r31, X
    2356:	d4 97       	sbiw	r26, 0x34	; 52
    2358:	c8 01       	movw	r24, r16
    235a:	09 95       	icall
    235c:	fc 01       	movw	r30, r24
    235e:	17 86       	std	Z+15, r1	; 0x0f
		PORTC &= ~(ONE << 5); // troubleshooting
    2360:	ad 98       	cbi	0x15, 5	; 21
	//lcd0.string_size(function.ftoa(HX711_data.status, result, ZERO), 13);
	//lcd0.string_size(function.ftoa(hx.get_cal(&hx)->offset_64, result, ZERO), 13);
	/***********************************************************************************************/
	while(TRUE){
		/******PREAMBLE******/
		lcd0.reboot();
    2362:	0f 2e       	mov	r0, r31
    2364:	f2 ee       	ldi	r31, 0xE2	; 226
    2366:	ef 2e       	mov	r14, r31
    2368:	f1 e0       	ldi	r31, 0x01	; 1
    236a:	ff 2e       	mov	r15, r31
    236c:	f0 2d       	mov	r31, r0
		F.boot(&F,PINF);
    236e:	0f 2e       	mov	r0, r31
    2370:	fd e2       	ldi	r31, 0x2D	; 45
    2372:	cf 2e       	mov	r12, r31
    2374:	f2 e0       	ldi	r31, 0x02	; 2
    2376:	df 2e       	mov	r13, r31
    2378:	f0 2d       	mov	r31, r0
		hx.query(&hx);
    237a:	08 ef       	ldi	r16, 0xF8	; 248
    237c:	11 e0       	ldi	r17, 0x01	; 1
				
				
				
				// Jump Menus signal
				if(signal == 2){
					Menu = '1';
    237e:	0f 2e       	mov	r0, r31
    2380:	f1 e3       	ldi	r31, 0x31	; 49
    2382:	3f 2e       	mov	r3, r31
    2384:	f0 2d       	mov	r31, r0
				
				//lcd0.gotoxy(1,0); // for troubleshooting
				//lcd0.string_size(function.ftoa(hx.read_raw(&hx), result, ZERO), 13);
				
				if(F.hl(&F) & ONE){ // calibrate offset by pressing button 1
					HX711_data.offset_32 = tmp;
    2386:	0f 2e       	mov	r0, r31
    2388:	f0 eb       	ldi	r31, 0xB0	; 176
    238a:	8f 2e       	mov	r8, r31
    238c:	f1 e0       	ldi	r31, 0x01	; 1
    238e:	9f 2e       	mov	r9, r31
    2390:	f0 2d       	mov	r31, r0
					HX711_data.offset_64 = tmp;
					HX711_data.offset_128 = tmp;
					HX711_data.divfactor_32 = hx.get_cal(&hx)->divfactor_32;
					HX711_data.divfactor_64 = hx.get_cal(&hx)->divfactor_64;
					HX711_data.divfactor_128 = hx.get_cal(&hx)->divfactor_128;
					HX711_data.status = ONE;
    2392:	22 24       	eor	r2, r2
    2394:	23 94       	inc	r2
	//lcd0.string_size(function.ftoa(HX711_data.status, result, ZERO), 13);
	//lcd0.string_size(function.ftoa(hx.get_cal(&hx)->offset_64, result, ZERO), 13);
	/***********************************************************************************************/
	while(TRUE){
		/******PREAMBLE******/
		lcd0.reboot();
    2396:	d7 01       	movw	r26, r14
    2398:	54 96       	adiw	r26, 0x14	; 20
    239a:	ed 91       	ld	r30, X+
    239c:	fc 91       	ld	r31, X
    239e:	55 97       	sbiw	r26, 0x15	; 21
    23a0:	09 95       	icall
		F.boot(&F,PINF);
    23a2:	60 b1       	in	r22, 0x00	; 0
    23a4:	d6 01       	movw	r26, r12
    23a6:	14 96       	adiw	r26, 0x04	; 4
    23a8:	ed 91       	ld	r30, X+
    23aa:	fc 91       	ld	r31, X
    23ac:	15 97       	sbiw	r26, 0x05	; 5
    23ae:	c6 01       	movw	r24, r12
    23b0:	09 95       	icall
		hx.query(&hx);
    23b2:	d8 01       	movw	r26, r16
    23b4:	9b 96       	adiw	r26, 0x2b	; 43
    23b6:	ed 91       	ld	r30, X+
    23b8:	fc 91       	ld	r31, X
    23ba:	9c 97       	sbiw	r26, 0x2c	; 44
    23bc:	c8 01       	movw	r24, r16
    23be:	09 95       	icall
		//if(hx.query(&hx)){ // one shot
			//timer0.start(8);
			//hx.read_raw(&hx);
		//}
		/************INPUT***********/
		tmp = hx.raw_average(&hx, average_n); // average_n  25 or 50, smaller means faster or more readings
    23c0:	d8 01       	movw	r26, r16
    23c2:	9f 96       	adiw	r26, 0x2f	; 47
    23c4:	ed 91       	ld	r30, X+
    23c6:	fc 91       	ld	r31, X
    23c8:	d0 97       	sbiw	r26, 0x30	; 48
    23ca:	68 e1       	ldi	r22, 0x18	; 24
    23cc:	c8 01       	movw	r24, r16
    23ce:	09 95       	icall
    23d0:	60 93 76 01 	sts	0x0176, r22	; 0x800176 <tmp>
    23d4:	70 93 77 01 	sts	0x0177, r23	; 0x800177 <tmp+0x1>
    23d8:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <tmp+0x2>
    23dc:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <tmp+0x3>
		/****************************/
		switch(Menu){
    23e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    23e4:	82 33       	cpi	r24, 0x32	; 50
    23e6:	09 f4       	brne	.+2      	; 0x23ea <main+0x3ec>
    23e8:	81 c1       	rjmp	.+770    	; 0x26ec <main+0x6ee>
    23ea:	83 33       	cpi	r24, 0x33	; 51
    23ec:	09 f4       	brne	.+2      	; 0x23f0 <main+0x3f2>
    23ee:	9f c1       	rjmp	.+830    	; 0x272e <main+0x730>
    23f0:	81 33       	cpi	r24, 0x31	; 49
    23f2:	09 f0       	breq	.+2      	; 0x23f6 <main+0x3f8>
    23f4:	b0 c1       	rjmp	.+864    	; 0x2756 <main+0x758>
			/***MENU 1***/
			case '1': // Main Program Menu
				lcd0.gotoxy(0,3); //TITLE
    23f6:	d7 01       	movw	r26, r14
    23f8:	52 96       	adiw	r26, 0x12	; 18
    23fa:	ed 91       	ld	r30, X+
    23fc:	fc 91       	ld	r31, X
    23fe:	53 97       	sbiw	r26, 0x13	; 19
    2400:	63 e0       	ldi	r22, 0x03	; 3
    2402:	70 e0       	ldi	r23, 0x00	; 0
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	09 95       	icall
				lcd0.string_size("Weight Scale", 12); //TITLE
    240a:	d7 01       	movw	r26, r14
    240c:	1c 96       	adiw	r26, 0x0c	; 12
    240e:	ed 91       	ld	r30, X+
    2410:	fc 91       	ld	r31, X
    2412:	1d 97       	sbiw	r26, 0x0d	; 13
    2414:	6c e0       	ldi	r22, 0x0C	; 12
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	91 e0       	ldi	r25, 0x01	; 1
    241a:	09 95       	icall
				
				//lcd0.gotoxy(1,0); // for troubleshooting
				//lcd0.string_size(function.ftoa(hx.read_raw(&hx), result, ZERO), 13);
				
				if(F.hl(&F) & ONE){ // calibrate offset by pressing button 1
    241c:	d6 01       	movw	r26, r12
    241e:	1e 96       	adiw	r26, 0x0e	; 14
    2420:	ed 91       	ld	r30, X+
    2422:	fc 91       	ld	r31, X
    2424:	1f 97       	sbiw	r26, 0x0f	; 15
    2426:	c6 01       	movw	r24, r12
    2428:	09 95       	icall
    242a:	80 ff       	sbrs	r24, 0
    242c:	b9 c0       	rjmp	.+370    	; 0x25a0 <main+0x5a2>
					HX711_data.offset_32 = tmp;
    242e:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <tmp>
    2432:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <tmp+0x1>
    2436:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <tmp+0x2>
    243a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <tmp+0x3>
    243e:	27 d3       	rcall	.+1614   	; 0x2a8e <__fixsfsi>
    2440:	f4 01       	movw	r30, r8
    2442:	60 83       	st	Z, r22
    2444:	71 83       	std	Z+1, r23	; 0x01
    2446:	82 83       	std	Z+2, r24	; 0x02
    2448:	93 83       	std	Z+3, r25	; 0x03
					HX711_data.offset_64 = tmp;
    244a:	64 83       	std	Z+4, r22	; 0x04
    244c:	75 83       	std	Z+5, r23	; 0x05
    244e:	86 83       	std	Z+6, r24	; 0x06
    2450:	97 83       	std	Z+7, r25	; 0x07
					HX711_data.offset_128 = tmp;
    2452:	60 87       	std	Z+8, r22	; 0x08
    2454:	71 87       	std	Z+9, r23	; 0x09
    2456:	82 87       	std	Z+10, r24	; 0x0a
    2458:	93 87       	std	Z+11, r25	; 0x0b
					HX711_data.divfactor_32 = hx.get_cal(&hx)->divfactor_32;
    245a:	d8 01       	movw	r26, r16
    245c:	d3 96       	adiw	r26, 0x33	; 51
    245e:	ed 91       	ld	r30, X+
    2460:	fc 91       	ld	r31, X
    2462:	d4 97       	sbiw	r26, 0x34	; 52
    2464:	c8 01       	movw	r24, r16
    2466:	09 95       	icall
    2468:	fc 01       	movw	r30, r24
    246a:	84 85       	ldd	r24, Z+12	; 0x0c
    246c:	d4 01       	movw	r26, r8
    246e:	1c 96       	adiw	r26, 0x0c	; 12
    2470:	8c 93       	st	X, r24
					HX711_data.divfactor_64 = hx.get_cal(&hx)->divfactor_64;
    2472:	d8 01       	movw	r26, r16
    2474:	d3 96       	adiw	r26, 0x33	; 51
    2476:	ed 91       	ld	r30, X+
    2478:	fc 91       	ld	r31, X
    247a:	d4 97       	sbiw	r26, 0x34	; 52
    247c:	c8 01       	movw	r24, r16
    247e:	09 95       	icall
    2480:	fc 01       	movw	r30, r24
    2482:	85 85       	ldd	r24, Z+13	; 0x0d
    2484:	d4 01       	movw	r26, r8
    2486:	1d 96       	adiw	r26, 0x0d	; 13
    2488:	8c 93       	st	X, r24
					HX711_data.divfactor_128 = hx.get_cal(&hx)->divfactor_128;
    248a:	d8 01       	movw	r26, r16
    248c:	d3 96       	adiw	r26, 0x33	; 51
    248e:	ed 91       	ld	r30, X+
    2490:	fc 91       	ld	r31, X
    2492:	d4 97       	sbiw	r26, 0x34	; 52
    2494:	c8 01       	movw	r24, r16
    2496:	09 95       	icall
    2498:	fc 01       	movw	r30, r24
    249a:	86 85       	ldd	r24, Z+14	; 0x0e
    249c:	d4 01       	movw	r26, r8
    249e:	1e 96       	adiw	r26, 0x0e	; 14
    24a0:	8c 93       	st	X, r24
    24a2:	1e 97       	sbiw	r26, 0x0e	; 14
					HX711_data.status = ONE;
    24a4:	1f 96       	adiw	r26, 0x0f	; 15
    24a6:	2c 92       	st	X, r2
					eprom.update_block(HX711_ptr, (void*) ZERO, sizeblock);
    24a8:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <eprom+0x1c>
    24ac:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <eprom+0x1d>
    24b0:	40 e1       	ldi	r20, 0x10	; 16
    24b2:	50 e0       	ldi	r21, 0x00	; 0
    24b4:	60 e0       	ldi	r22, 0x00	; 0
    24b6:	70 e0       	ldi	r23, 0x00	; 0
    24b8:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <HX711_ptr>
    24bc:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    24c0:	09 95       	icall
					hx.get_cal(&hx)->offset_32 = HX711_ptr->offset_32;
    24c2:	d8 01       	movw	r26, r16
    24c4:	d3 96       	adiw	r26, 0x33	; 51
    24c6:	ed 91       	ld	r30, X+
    24c8:	fc 91       	ld	r31, X
    24ca:	d4 97       	sbiw	r26, 0x34	; 52
    24cc:	c8 01       	movw	r24, r16
    24ce:	09 95       	icall
    24d0:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    24d4:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    24d8:	40 81       	ld	r20, Z
    24da:	51 81       	ldd	r21, Z+1	; 0x01
    24dc:	62 81       	ldd	r22, Z+2	; 0x02
    24de:	73 81       	ldd	r23, Z+3	; 0x03
    24e0:	fc 01       	movw	r30, r24
    24e2:	40 83       	st	Z, r20
    24e4:	51 83       	std	Z+1, r21	; 0x01
    24e6:	62 83       	std	Z+2, r22	; 0x02
    24e8:	73 83       	std	Z+3, r23	; 0x03
					hx.get_cal(&hx)->offset_64 = HX711_ptr->offset_64;
    24ea:	d8 01       	movw	r26, r16
    24ec:	d3 96       	adiw	r26, 0x33	; 51
    24ee:	ed 91       	ld	r30, X+
    24f0:	fc 91       	ld	r31, X
    24f2:	d4 97       	sbiw	r26, 0x34	; 52
    24f4:	c8 01       	movw	r24, r16
    24f6:	09 95       	icall
    24f8:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    24fc:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    2500:	44 81       	ldd	r20, Z+4	; 0x04
    2502:	55 81       	ldd	r21, Z+5	; 0x05
    2504:	66 81       	ldd	r22, Z+6	; 0x06
    2506:	77 81       	ldd	r23, Z+7	; 0x07
    2508:	fc 01       	movw	r30, r24
    250a:	44 83       	std	Z+4, r20	; 0x04
    250c:	55 83       	std	Z+5, r21	; 0x05
    250e:	66 83       	std	Z+6, r22	; 0x06
    2510:	77 83       	std	Z+7, r23	; 0x07
					hx.get_cal(&hx)->offset_128 = HX711_ptr->offset_128;
    2512:	d8 01       	movw	r26, r16
    2514:	d3 96       	adiw	r26, 0x33	; 51
    2516:	ed 91       	ld	r30, X+
    2518:	fc 91       	ld	r31, X
    251a:	d4 97       	sbiw	r26, 0x34	; 52
    251c:	c8 01       	movw	r24, r16
    251e:	09 95       	icall
    2520:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    2524:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    2528:	40 85       	ldd	r20, Z+8	; 0x08
    252a:	51 85       	ldd	r21, Z+9	; 0x09
    252c:	62 85       	ldd	r22, Z+10	; 0x0a
    252e:	73 85       	ldd	r23, Z+11	; 0x0b
    2530:	fc 01       	movw	r30, r24
    2532:	40 87       	std	Z+8, r20	; 0x08
    2534:	51 87       	std	Z+9, r21	; 0x09
    2536:	62 87       	std	Z+10, r22	; 0x0a
    2538:	73 87       	std	Z+11, r23	; 0x0b
					hx.get_cal(&hx)->divfactor_32 = HX711_ptr->divfactor_32;
    253a:	d8 01       	movw	r26, r16
    253c:	d3 96       	adiw	r26, 0x33	; 51
    253e:	ed 91       	ld	r30, X+
    2540:	fc 91       	ld	r31, X
    2542:	d4 97       	sbiw	r26, 0x34	; 52
    2544:	c8 01       	movw	r24, r16
    2546:	09 95       	icall
    2548:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    254c:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    2550:	24 85       	ldd	r18, Z+12	; 0x0c
    2552:	fc 01       	movw	r30, r24
    2554:	24 87       	std	Z+12, r18	; 0x0c
					hx.get_cal(&hx)->divfactor_64 = HX711_ptr->divfactor_64;
    2556:	d8 01       	movw	r26, r16
    2558:	d3 96       	adiw	r26, 0x33	; 51
    255a:	ed 91       	ld	r30, X+
    255c:	fc 91       	ld	r31, X
    255e:	d4 97       	sbiw	r26, 0x34	; 52
    2560:	c8 01       	movw	r24, r16
    2562:	09 95       	icall
    2564:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    2568:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    256c:	25 85       	ldd	r18, Z+13	; 0x0d
    256e:	fc 01       	movw	r30, r24
    2570:	25 87       	std	Z+13, r18	; 0x0d
					hx.get_cal(&hx)->divfactor_128 = HX711_ptr->divfactor_128;
    2572:	d8 01       	movw	r26, r16
    2574:	d3 96       	adiw	r26, 0x33	; 51
    2576:	ed 91       	ld	r30, X+
    2578:	fc 91       	ld	r31, X
    257a:	d4 97       	sbiw	r26, 0x34	; 52
    257c:	c8 01       	movw	r24, r16
    257e:	09 95       	icall
    2580:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <HX711_ptr>
    2584:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    2588:	26 85       	ldd	r18, Z+14	; 0x0e
    258a:	fc 01       	movw	r30, r24
    258c:	26 87       	std	Z+14, r18	; 0x0e
					hx.get_cal(&hx)->status=ZERO;
    258e:	d8 01       	movw	r26, r16
    2590:	d3 96       	adiw	r26, 0x33	; 51
    2592:	ed 91       	ld	r30, X+
    2594:	fc 91       	ld	r31, X
    2596:	d4 97       	sbiw	r26, 0x34	; 52
    2598:	c8 01       	movw	r24, r16
    259a:	09 95       	icall
    259c:	fc 01       	movw	r30, r24
    259e:	17 86       	std	Z+15, r1	; 0x0f
				}
				
				//value = (value - hx.get_cal(&hx)->offset_128) / hx.get_cal(&hx)->divfactor_128; //value to be published to LCD
				value = (tmp - hx.get_cal(&hx)->offset_64) / hx.get_cal(&hx)->divfactor_64; //value to be published to LCD
    25a0:	40 90 76 01 	lds	r4, 0x0176	; 0x800176 <tmp>
    25a4:	50 90 77 01 	lds	r5, 0x0177	; 0x800177 <tmp+0x1>
    25a8:	60 90 78 01 	lds	r6, 0x0178	; 0x800178 <tmp+0x2>
    25ac:	70 90 79 01 	lds	r7, 0x0179	; 0x800179 <tmp+0x3>
    25b0:	d8 01       	movw	r26, r16
    25b2:	d3 96       	adiw	r26, 0x33	; 51
    25b4:	ed 91       	ld	r30, X+
    25b6:	fc 91       	ld	r31, X
    25b8:	d4 97       	sbiw	r26, 0x34	; 52
    25ba:	c8 01       	movw	r24, r16
    25bc:	09 95       	icall
    25be:	fc 01       	movw	r30, r24
    25c0:	64 81       	ldd	r22, Z+4	; 0x04
    25c2:	75 81       	ldd	r23, Z+5	; 0x05
    25c4:	86 81       	ldd	r24, Z+6	; 0x06
    25c6:	97 81       	ldd	r25, Z+7	; 0x07
    25c8:	95 d2       	rcall	.+1322   	; 0x2af4 <__floatsisf>
    25ca:	9b 01       	movw	r18, r22
    25cc:	ac 01       	movw	r20, r24
    25ce:	c3 01       	movw	r24, r6
    25d0:	b2 01       	movw	r22, r4
    25d2:	8c d1       	rcall	.+792    	; 0x28ec <__subsf3>
    25d4:	2b 01       	movw	r4, r22
    25d6:	3c 01       	movw	r6, r24
    25d8:	d8 01       	movw	r26, r16
    25da:	d3 96       	adiw	r26, 0x33	; 51
    25dc:	ed 91       	ld	r30, X+
    25de:	fc 91       	ld	r31, X
    25e0:	d4 97       	sbiw	r26, 0x34	; 52
    25e2:	c8 01       	movw	r24, r16
    25e4:	09 95       	icall
    25e6:	fc 01       	movw	r30, r24
    25e8:	65 85       	ldd	r22, Z+13	; 0x0d
    25ea:	70 e0       	ldi	r23, 0x00	; 0
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	81 d2       	rcall	.+1282   	; 0x2af4 <__floatsisf>
    25f2:	9b 01       	movw	r18, r22
    25f4:	ac 01       	movw	r20, r24
    25f6:	c3 01       	movw	r24, r6
    25f8:	b2 01       	movw	r22, r4
    25fa:	e1 d1       	rcall	.+962    	; 0x29be <__divsf3>
    25fc:	2b 01       	movw	r4, r22
				
				//lcd0.gotoxy(3,0);
				//lcd0.string_size(function.ftoa(hx.get_cal(&hx)->offset_64, result, ZERO), 13);
				
				//Display
				if (value > 1000 || value < -1000){
    25fe:	3c 01       	movw	r6, r24
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	4a e7       	ldi	r20, 0x7A	; 122
    2606:	54 e4       	ldi	r21, 0x44	; 68
    2608:	25 d3       	rcall	.+1610   	; 0x2c54 <__gesf2>
    260a:	18 16       	cp	r1, r24
    260c:	4c f0       	brlt	.+18     	; 0x2620 <main+0x622>
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	4a e7       	ldi	r20, 0x7A	; 122
    2614:	54 ec       	ldi	r21, 0xC4	; 196
    2616:	c3 01       	movw	r24, r6
    2618:	b2 01       	movw	r22, r4
    261a:	cd d1       	rcall	.+922    	; 0x29b6 <__cmpsf2>
    261c:	88 23       	and	r24, r24
    261e:	5c f5       	brge	.+86     	; 0x2676 <main+0x678>
					publish = value / 1000;
					lcd0.gotoxy(2,0);
    2620:	d7 01       	movw	r26, r14
    2622:	52 96       	adiw	r26, 0x12	; 18
    2624:	ed 91       	ld	r30, X+
    2626:	fc 91       	ld	r31, X
    2628:	53 97       	sbiw	r26, 0x13	; 19
    262a:	60 e0       	ldi	r22, 0x00	; 0
    262c:	70 e0       	ldi	r23, 0x00	; 0
    262e:	82 e0       	ldi	r24, 0x02	; 2
    2630:	90 e0       	ldi	r25, 0x00	; 0
					lcd0.string_size(function.ftoa(publish, result, 3), 13); lcd0.string_size("Kg", 4);
    2632:	09 95       	icall
    2634:	f7 01       	movw	r30, r14
    2636:	a4 84       	ldd	r10, Z+12	; 0x0c
    2638:	b5 84       	ldd	r11, Z+13	; 0x0d
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	4a e7       	ldi	r20, 0x7A	; 122
    2640:	54 e4       	ldi	r21, 0x44	; 68
    2642:	c3 01       	movw	r24, r6
    2644:	b2 01       	movw	r22, r4
    2646:	bb d1       	rcall	.+886    	; 0x29be <__divsf3>
    2648:	23 e0       	ldi	r18, 0x03	; 3
    264a:	42 ec       	ldi	r20, 0xC2	; 194
    264c:	51 e0       	ldi	r21, 0x01	; 1
    264e:	c4 54       	subi	r28, 0x44	; 68
    2650:	df 4f       	sbci	r29, 0xFF	; 255
    2652:	e8 81       	ld	r30, Y
    2654:	f9 81       	ldd	r31, Y+1	; 0x01
    2656:	cc 5b       	subi	r28, 0xBC	; 188
    2658:	d0 40       	sbci	r29, 0x00	; 0
    265a:	09 95       	icall
    265c:	6d e0       	ldi	r22, 0x0D	; 13
    265e:	f5 01       	movw	r30, r10
    2660:	09 95       	icall
    2662:	d7 01       	movw	r26, r14
    2664:	1c 96       	adiw	r26, 0x0c	; 12
    2666:	ed 91       	ld	r30, X+
    2668:	fc 91       	ld	r31, X
    266a:	1d 97       	sbiw	r26, 0x0d	; 13
    266c:	64 e0       	ldi	r22, 0x04	; 4
    266e:	8e e0       	ldi	r24, 0x0E	; 14
    2670:	91 e0       	ldi	r25, 0x01	; 1
    2672:	09 95       	icall
    2674:	2c c0       	rjmp	.+88     	; 0x26ce <main+0x6d0>
				}else{
					publish = value;
					lcd0.gotoxy(2,0);
    2676:	d7 01       	movw	r26, r14
    2678:	52 96       	adiw	r26, 0x12	; 18
    267a:	ed 91       	ld	r30, X+
    267c:	fc 91       	ld	r31, X
    267e:	53 97       	sbiw	r26, 0x13	; 19
    2680:	60 e0       	ldi	r22, 0x00	; 0
    2682:	70 e0       	ldi	r23, 0x00	; 0
    2684:	82 e0       	ldi	r24, 0x02	; 2
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	09 95       	icall
					lcd0.string_size(function.ftoa(publish, result, ZERO), 13); lcd0.string_size("gram", 4);
    268a:	f7 01       	movw	r30, r14
    268c:	a4 84       	ldd	r10, Z+12	; 0x0c
    268e:	b5 84       	ldd	r11, Z+13	; 0x0d
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	42 ec       	ldi	r20, 0xC2	; 194
    2694:	51 e0       	ldi	r21, 0x01	; 1
    2696:	c3 01       	movw	r24, r6
    2698:	b2 01       	movw	r22, r4
    269a:	c4 54       	subi	r28, 0x44	; 68
    269c:	df 4f       	sbci	r29, 0xFF	; 255
    269e:	e8 81       	ld	r30, Y
    26a0:	f9 81       	ldd	r31, Y+1	; 0x01
    26a2:	cc 5b       	subi	r28, 0xBC	; 188
    26a4:	d0 40       	sbci	r29, 0x00	; 0
    26a6:	09 95       	icall
    26a8:	6d e0       	ldi	r22, 0x0D	; 13
    26aa:	f5 01       	movw	r30, r10
    26ac:	09 95       	icall
    26ae:	d7 01       	movw	r26, r14
    26b0:	1c 96       	adiw	r26, 0x0c	; 12
    26b2:	ed 91       	ld	r30, X+
    26b4:	fc 91       	ld	r31, X
    26b6:	1d 97       	sbiw	r26, 0x0d	; 13
    26b8:	64 e0       	ldi	r22, 0x04	; 4
    26ba:	81 e1       	ldi	r24, 0x11	; 17
    26bc:	91 e0       	ldi	r25, 0x01	; 1
    26be:	09 95       	icall
					hx.query(&hx);
    26c0:	d8 01       	movw	r26, r16
    26c2:	9b 96       	adiw	r26, 0x2b	; 43
    26c4:	ed 91       	ld	r30, X+
    26c6:	fc 91       	ld	r31, X
    26c8:	9c 97       	sbiw	r26, 0x2c	; 44
    26ca:	c8 01       	movw	r24, r16
    26cc:	09 95       	icall
				}
				
				// Jump Menu signal
				if(signal == 1){
    26ce:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    26d2:	81 30       	cpi	r24, 0x01	; 1
    26d4:	09 f0       	breq	.+2      	; 0x26d8 <main+0x6da>
    26d6:	5f ce       	rjmp	.-834    	; 0x2396 <main+0x398>
					Menu = '2';
    26d8:	b2 e3       	ldi	r27, 0x32	; 50
    26da:	b0 93 00 01 	sts	0x0100, r27	; 0x800100 <__DATA_REGION_ORIGIN__>
					lcd0.clear();
    26de:	d7 01       	movw	r26, r14
    26e0:	50 96       	adiw	r26, 0x10	; 16
    26e2:	ed 91       	ld	r30, X+
    26e4:	fc 91       	ld	r31, X
    26e6:	51 97       	sbiw	r26, 0x11	; 17
    26e8:	09 95       	icall
    26ea:	55 ce       	rjmp	.-854    	; 0x2396 <main+0x398>
				
				break;
			/***MENU 2***/
			case '2': //
				/**/
				lcd0.gotoxy(0,3);
    26ec:	d7 01       	movw	r26, r14
    26ee:	52 96       	adiw	r26, 0x12	; 18
    26f0:	ed 91       	ld	r30, X+
    26f2:	fc 91       	ld	r31, X
    26f4:	53 97       	sbiw	r26, 0x13	; 19
    26f6:	63 e0       	ldi	r22, 0x03	; 3
    26f8:	70 e0       	ldi	r23, 0x00	; 0
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	09 95       	icall
				lcd0.string_size("SETUP DIVFACTOR",15);
    2700:	d7 01       	movw	r26, r14
    2702:	1c 96       	adiw	r26, 0x0c	; 12
    2704:	ed 91       	ld	r30, X+
    2706:	fc 91       	ld	r31, X
    2708:	1d 97       	sbiw	r26, 0x0d	; 13
    270a:	6f e0       	ldi	r22, 0x0F	; 15
    270c:	86 e1       	ldi	r24, 0x16	; 22
    270e:	91 e0       	ldi	r25, 0x01	; 1
    2710:	09 95       	icall
				
				
				
				
				// Jump Menus signal
				if(signal == 2){
    2712:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
    2716:	82 30       	cpi	r24, 0x02	; 2
    2718:	09 f0       	breq	.+2      	; 0x271c <main+0x71e>
    271a:	3d ce       	rjmp	.-902    	; 0x2396 <main+0x398>
					Menu = '1';
    271c:	30 92 00 01 	sts	0x0100, r3	; 0x800100 <__DATA_REGION_ORIGIN__>
					lcd0.clear();
    2720:	d7 01       	movw	r26, r14
    2722:	50 96       	adiw	r26, 0x10	; 16
    2724:	ed 91       	ld	r30, X+
    2726:	fc 91       	ld	r31, X
    2728:	51 97       	sbiw	r26, 0x11	; 17
    272a:	09 95       	icall
    272c:	34 ce       	rjmp	.-920    	; 0x2396 <main+0x398>
				}
				/**/
				break;
			/***MENU 3***/
			case '3': //
				lcd0.gotoxy(0,0);
    272e:	d7 01       	movw	r26, r14
    2730:	52 96       	adiw	r26, 0x12	; 18
    2732:	ed 91       	ld	r30, X+
    2734:	fc 91       	ld	r31, X
    2736:	53 97       	sbiw	r26, 0x13	; 19
    2738:	60 e0       	ldi	r22, 0x00	; 0
    273a:	70 e0       	ldi	r23, 0x00	; 0
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	09 95       	icall
				lcd0.string_size("Not being used",19);
    2742:	d7 01       	movw	r26, r14
    2744:	1c 96       	adiw	r26, 0x0c	; 12
    2746:	ed 91       	ld	r30, X+
    2748:	fc 91       	ld	r31, X
    274a:	1d 97       	sbiw	r26, 0x0d	; 13
    274c:	63 e1       	ldi	r22, 0x13	; 19
    274e:	86 e2       	ldi	r24, 0x26	; 38
    2750:	91 e0       	ldi	r25, 0x01	; 1
    2752:	09 95       	icall
				/***Play around***/
				break;
    2754:	20 ce       	rjmp	.-960    	; 0x2396 <main+0x398>
				/********************************************************************/
			default:
				Menu = '1';
    2756:	30 92 00 01 	sts	0x0100, r3	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
    275a:	1d ce       	rjmp	.-966    	; 0x2396 <main+0x398>

0000275c <__vector_15>:
}
/*
** interrupt
*/
ISR(TIMER0_COMP_vect) // 15.4 us intervals
{
    275c:	1f 92       	push	r1
    275e:	0f 92       	push	r0
    2760:	0f b6       	in	r0, 0x3f	; 63
    2762:	0f 92       	push	r0
    2764:	11 24       	eor	r1, r1
    2766:	0b b6       	in	r0, 0x3b	; 59
    2768:	0f 92       	push	r0
    276a:	2f 93       	push	r18
    276c:	3f 93       	push	r19
    276e:	4f 93       	push	r20
    2770:	5f 93       	push	r21
    2772:	6f 93       	push	r22
    2774:	7f 93       	push	r23
    2776:	8f 93       	push	r24
    2778:	9f 93       	push	r25
    277a:	af 93       	push	r26
    277c:	bf 93       	push	r27
    277e:	cf 93       	push	r28
    2780:	ef 93       	push	r30
    2782:	ff 93       	push	r31
	/***Block other interrupts during this procedure***/
	uint8_t Sreg;
	Sreg = STATUS_REGISTER;
    2784:	cf b7       	in	r28, 0x3f	; 63
	STATUS_REGISTER &= ~(ONE << GLOBAL_INTERRUPT_ENABLE);	
    2786:	8f b7       	in	r24, 0x3f	; 63
    2788:	8f 77       	andi	r24, 0x7F	; 127
    278a:	8f bf       	out	0x3f, r24	; 63
	hx.read_raw(&hx);
    278c:	e0 91 25 02 	lds	r30, 0x0225	; 0x800225 <hx+0x2d>
    2790:	f0 91 26 02 	lds	r31, 0x0226	; 0x800226 <hx+0x2e>
    2794:	88 ef       	ldi	r24, 0xF8	; 248
    2796:	91 e0       	ldi	r25, 0x01	; 1
    2798:	09 95       	icall
	//if(!hx.get_readflag(&hx))
		//timer0.stop();
	/***enable interrupts again***/
	STATUS_REGISTER = Sreg;
    279a:	cf bf       	out	0x3f, r28	; 63
}
    279c:	ff 91       	pop	r31
    279e:	ef 91       	pop	r30
    27a0:	cf 91       	pop	r28
    27a2:	bf 91       	pop	r27
    27a4:	af 91       	pop	r26
    27a6:	9f 91       	pop	r25
    27a8:	8f 91       	pop	r24
    27aa:	7f 91       	pop	r23
    27ac:	6f 91       	pop	r22
    27ae:	5f 91       	pop	r21
    27b0:	4f 91       	pop	r20
    27b2:	3f 91       	pop	r19
    27b4:	2f 91       	pop	r18
    27b6:	0f 90       	pop	r0
    27b8:	0b be       	out	0x3b, r0	; 59
    27ba:	0f 90       	pop	r0
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	0f 90       	pop	r0
    27c0:	1f 90       	pop	r1
    27c2:	18 95       	reti

000027c4 <__vector_12>:
ISR(TIMER1_COMPA_vect) // 1 second intervals
{
    27c4:	1f 92       	push	r1
    27c6:	0f 92       	push	r0
    27c8:	0f b6       	in	r0, 0x3f	; 63
    27ca:	0f 92       	push	r0
    27cc:	11 24       	eor	r1, r1
    27ce:	0b b6       	in	r0, 0x3b	; 59
    27d0:	0f 92       	push	r0
    27d2:	2f 93       	push	r18
    27d4:	3f 93       	push	r19
    27d6:	4f 93       	push	r20
    27d8:	5f 93       	push	r21
    27da:	6f 93       	push	r22
    27dc:	7f 93       	push	r23
    27de:	8f 93       	push	r24
    27e0:	9f 93       	push	r25
    27e2:	af 93       	push	r26
    27e4:	bf 93       	push	r27
    27e6:	ef 93       	push	r30
    27e8:	ff 93       	push	r31
	/***CLEAR EEPROM OFFSET SEQUENCE START***/
	if((F.ll(&F) & IMASK) == (ONE << 3)) //button 4
    27ea:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <F+0xa>
    27ee:	f0 91 38 02 	lds	r31, 0x0238	; 0x800238 <F+0xb>
    27f2:	8d e2       	ldi	r24, 0x2D	; 45
    27f4:	92 e0       	ldi	r25, 0x02	; 2
    27f6:	09 95       	icall
    27f8:	8f 73       	andi	r24, 0x3F	; 63
    27fa:	88 30       	cpi	r24, 0x08	; 8
    27fc:	41 f4       	brne	.+16     	; 0x280e <__vector_12+0x4a>
		counter_1++;
    27fe:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <counter_1>
    2802:	8f 5f       	subi	r24, 0xFF	; 255
    2804:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <counter_1>
	else if(counter_1 < _5sec+ONE)
		counter_1=0;
		
	if(counter_1 > _5sec){
    2808:	86 30       	cpi	r24, 0x06	; 6
    280a:	58 f1       	brcs	.+86     	; 0x2862 <__vector_12+0x9e>
    280c:	07 c0       	rjmp	.+14     	; 0x281c <__vector_12+0x58>
ISR(TIMER1_COMPA_vect) // 1 second intervals
{
	/***CLEAR EEPROM OFFSET SEQUENCE START***/
	if((F.ll(&F) & IMASK) == (ONE << 3)) //button 4
		counter_1++;
	else if(counter_1 < _5sec+ONE)
    280e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <counter_1>
    2812:	86 30       	cpi	r24, 0x06	; 6
    2814:	18 f4       	brcc	.+6      	; 0x281c <__vector_12+0x58>
		counter_1=0;
    2816:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <counter_1>
    281a:	23 c0       	rjmp	.+70     	; 0x2862 <__vector_12+0x9e>
		
	if(counter_1 > _5sec){
		counter_1 = _5sec+ONE; //lock in place
    281c:	86 e0       	ldi	r24, 0x06	; 6
    281e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <counter_1>
		PORTC ^= (ONE << 6); // troubleshooting
    2822:	95 b3       	in	r25, 0x15	; 21
    2824:	80 e4       	ldi	r24, 0x40	; 64
    2826:	89 27       	eor	r24, r25
    2828:	85 bb       	out	0x15, r24	; 21
		if((F.ll(&F) & IMASK) == (ONE << 5)){ //button 6
    282a:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <F+0xa>
    282e:	f0 91 38 02 	lds	r31, 0x0238	; 0x800238 <F+0xb>
    2832:	8d e2       	ldi	r24, 0x2D	; 45
    2834:	92 e0       	ldi	r25, 0x02	; 2
    2836:	09 95       	icall
    2838:	8f 73       	andi	r24, 0x3F	; 63
    283a:	80 32       	cpi	r24, 0x20	; 32
    283c:	91 f4       	brne	.+36     	; 0x2862 <__vector_12+0x9e>
			// Delete eerpom memory ZERO
			HX711_data.status = ZERO;
    283e:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <HX711_data+0xf>
			eprom.update_block(HX711_ptr, (void*) ZERO, sizeblock);
    2842:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <eprom+0x1c>
    2846:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <eprom+0x1d>
    284a:	40 e1       	ldi	r20, 0x10	; 16
    284c:	50 e0       	ldi	r21, 0x00	; 0
    284e:	60 e0       	ldi	r22, 0x00	; 0
    2850:	70 e0       	ldi	r23, 0x00	; 0
    2852:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <HX711_ptr>
    2856:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <HX711_ptr+0x1>
    285a:	09 95       	icall
			PORTC |= (ONE << 6); // troubleshooting
    285c:	ae 9a       	sbi	0x15, 6	; 21
			counter_1 = ZERO;
    285e:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <counter_1>
		}
	}
	/***CLEAR EEPROM OFFSET SEQUENCE END***/
	
	/***CAL DIVFACTOR DEFINE START***/
	if((F.ll(&F) & IMASK) == (ONE << 4)) //button 5
    2862:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <F+0xa>
    2866:	f0 91 38 02 	lds	r31, 0x0238	; 0x800238 <F+0xb>
    286a:	8d e2       	ldi	r24, 0x2D	; 45
    286c:	92 e0       	ldi	r25, 0x02	; 2
    286e:	09 95       	icall
    2870:	8f 73       	andi	r24, 0x3F	; 63
    2872:	80 31       	cpi	r24, 0x10	; 16
    2874:	41 f4       	brne	.+16     	; 0x2886 <__vector_12+0xc2>
		counter_2++;
    2876:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <counter_2>
    287a:	8f 5f       	subi	r24, 0xFF	; 255
    287c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <counter_2>
	else if(counter_2 < _5sec+ONE)
		counter_2=0;
	
	if(counter_2 > _5sec){
    2880:	86 30       	cpi	r24, 0x06	; 6
    2882:	08 f1       	brcs	.+66     	; 0x28c6 <__vector_12+0x102>
    2884:	07 c0       	rjmp	.+14     	; 0x2894 <__vector_12+0xd0>
	/***CLEAR EEPROM OFFSET SEQUENCE END***/
	
	/***CAL DIVFACTOR DEFINE START***/
	if((F.ll(&F) & IMASK) == (ONE << 4)) //button 5
		counter_2++;
	else if(counter_2 < _5sec+ONE)
    2886:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <counter_2>
    288a:	86 30       	cpi	r24, 0x06	; 6
    288c:	18 f4       	brcc	.+6      	; 0x2894 <__vector_12+0xd0>
		counter_2=0;
    288e:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <counter_2>
    2892:	19 c0       	rjmp	.+50     	; 0x28c6 <__vector_12+0x102>
	
	if(counter_2 > _5sec){
		counter_2 = _5sec+ONE; //lock in place
    2894:	86 e0       	ldi	r24, 0x06	; 6
    2896:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <counter_2>
		signal = ONE;
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
		PORTC ^= (ONE << 7); // troubleshooting
    28a0:	85 b3       	in	r24, 0x15	; 21
    28a2:	80 58       	subi	r24, 0x80	; 128
    28a4:	85 bb       	out	0x15, r24	; 21
		if((F.ll(&F) & IMASK) == (ONE << 5)){ //button 6
    28a6:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <F+0xa>
    28aa:	f0 91 38 02 	lds	r31, 0x0238	; 0x800238 <F+0xb>
    28ae:	8d e2       	ldi	r24, 0x2D	; 45
    28b0:	92 e0       	ldi	r25, 0x02	; 2
    28b2:	09 95       	icall
    28b4:	8f 73       	andi	r24, 0x3F	; 63
    28b6:	80 32       	cpi	r24, 0x20	; 32
    28b8:	31 f4       	brne	.+12     	; 0x28c6 <__vector_12+0x102>
			signal = 2;
    28ba:	82 e0       	ldi	r24, 0x02	; 2
    28bc:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
			PORTC |= (ONE << 7); // troubleshooting
    28c0:	af 9a       	sbi	0x15, 7	; 21
			counter_2 = ZERO;
    28c2:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <counter_2>
		}
	}
	/***CAL DIVFACTOR DEFINE END***/
}
    28c6:	ff 91       	pop	r31
    28c8:	ef 91       	pop	r30
    28ca:	bf 91       	pop	r27
    28cc:	af 91       	pop	r26
    28ce:	9f 91       	pop	r25
    28d0:	8f 91       	pop	r24
    28d2:	7f 91       	pop	r23
    28d4:	6f 91       	pop	r22
    28d6:	5f 91       	pop	r21
    28d8:	4f 91       	pop	r20
    28da:	3f 91       	pop	r19
    28dc:	2f 91       	pop	r18
    28de:	0f 90       	pop	r0
    28e0:	0b be       	out	0x3b, r0	; 59
    28e2:	0f 90       	pop	r0
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	0f 90       	pop	r0
    28e8:	1f 90       	pop	r1
    28ea:	18 95       	reti

000028ec <__subsf3>:
    28ec:	50 58       	subi	r21, 0x80	; 128

000028ee <__addsf3>:
    28ee:	bb 27       	eor	r27, r27
    28f0:	aa 27       	eor	r26, r26
    28f2:	0e d0       	rcall	.+28     	; 0x2910 <__addsf3x>
    28f4:	75 c1       	rjmp	.+746    	; 0x2be0 <__fp_round>
    28f6:	66 d1       	rcall	.+716    	; 0x2bc4 <__fp_pscA>
    28f8:	30 f0       	brcs	.+12     	; 0x2906 <__addsf3+0x18>
    28fa:	6b d1       	rcall	.+726    	; 0x2bd2 <__fp_pscB>
    28fc:	20 f0       	brcs	.+8      	; 0x2906 <__addsf3+0x18>
    28fe:	31 f4       	brne	.+12     	; 0x290c <__addsf3+0x1e>
    2900:	9f 3f       	cpi	r25, 0xFF	; 255
    2902:	11 f4       	brne	.+4      	; 0x2908 <__addsf3+0x1a>
    2904:	1e f4       	brtc	.+6      	; 0x290c <__addsf3+0x1e>
    2906:	5b c1       	rjmp	.+694    	; 0x2bbe <__fp_nan>
    2908:	0e f4       	brtc	.+2      	; 0x290c <__addsf3+0x1e>
    290a:	e0 95       	com	r30
    290c:	e7 fb       	bst	r30, 7
    290e:	51 c1       	rjmp	.+674    	; 0x2bb2 <__fp_inf>

00002910 <__addsf3x>:
    2910:	e9 2f       	mov	r30, r25
    2912:	77 d1       	rcall	.+750    	; 0x2c02 <__fp_split3>
    2914:	80 f3       	brcs	.-32     	; 0x28f6 <__addsf3+0x8>
    2916:	ba 17       	cp	r27, r26
    2918:	62 07       	cpc	r22, r18
    291a:	73 07       	cpc	r23, r19
    291c:	84 07       	cpc	r24, r20
    291e:	95 07       	cpc	r25, r21
    2920:	18 f0       	brcs	.+6      	; 0x2928 <__addsf3x+0x18>
    2922:	71 f4       	brne	.+28     	; 0x2940 <__addsf3x+0x30>
    2924:	9e f5       	brtc	.+102    	; 0x298c <__addsf3x+0x7c>
    2926:	8f c1       	rjmp	.+798    	; 0x2c46 <__fp_zero>
    2928:	0e f4       	brtc	.+2      	; 0x292c <__addsf3x+0x1c>
    292a:	e0 95       	com	r30
    292c:	0b 2e       	mov	r0, r27
    292e:	ba 2f       	mov	r27, r26
    2930:	a0 2d       	mov	r26, r0
    2932:	0b 01       	movw	r0, r22
    2934:	b9 01       	movw	r22, r18
    2936:	90 01       	movw	r18, r0
    2938:	0c 01       	movw	r0, r24
    293a:	ca 01       	movw	r24, r20
    293c:	a0 01       	movw	r20, r0
    293e:	11 24       	eor	r1, r1
    2940:	ff 27       	eor	r31, r31
    2942:	59 1b       	sub	r21, r25
    2944:	99 f0       	breq	.+38     	; 0x296c <__addsf3x+0x5c>
    2946:	59 3f       	cpi	r21, 0xF9	; 249
    2948:	50 f4       	brcc	.+20     	; 0x295e <__addsf3x+0x4e>
    294a:	50 3e       	cpi	r21, 0xE0	; 224
    294c:	68 f1       	brcs	.+90     	; 0x29a8 <__addsf3x+0x98>
    294e:	1a 16       	cp	r1, r26
    2950:	f0 40       	sbci	r31, 0x00	; 0
    2952:	a2 2f       	mov	r26, r18
    2954:	23 2f       	mov	r18, r19
    2956:	34 2f       	mov	r19, r20
    2958:	44 27       	eor	r20, r20
    295a:	58 5f       	subi	r21, 0xF8	; 248
    295c:	f3 cf       	rjmp	.-26     	; 0x2944 <__addsf3x+0x34>
    295e:	46 95       	lsr	r20
    2960:	37 95       	ror	r19
    2962:	27 95       	ror	r18
    2964:	a7 95       	ror	r26
    2966:	f0 40       	sbci	r31, 0x00	; 0
    2968:	53 95       	inc	r21
    296a:	c9 f7       	brne	.-14     	; 0x295e <__addsf3x+0x4e>
    296c:	7e f4       	brtc	.+30     	; 0x298c <__addsf3x+0x7c>
    296e:	1f 16       	cp	r1, r31
    2970:	ba 0b       	sbc	r27, r26
    2972:	62 0b       	sbc	r22, r18
    2974:	73 0b       	sbc	r23, r19
    2976:	84 0b       	sbc	r24, r20
    2978:	ba f0       	brmi	.+46     	; 0x29a8 <__addsf3x+0x98>
    297a:	91 50       	subi	r25, 0x01	; 1
    297c:	a1 f0       	breq	.+40     	; 0x29a6 <__addsf3x+0x96>
    297e:	ff 0f       	add	r31, r31
    2980:	bb 1f       	adc	r27, r27
    2982:	66 1f       	adc	r22, r22
    2984:	77 1f       	adc	r23, r23
    2986:	88 1f       	adc	r24, r24
    2988:	c2 f7       	brpl	.-16     	; 0x297a <__addsf3x+0x6a>
    298a:	0e c0       	rjmp	.+28     	; 0x29a8 <__addsf3x+0x98>
    298c:	ba 0f       	add	r27, r26
    298e:	62 1f       	adc	r22, r18
    2990:	73 1f       	adc	r23, r19
    2992:	84 1f       	adc	r24, r20
    2994:	48 f4       	brcc	.+18     	; 0x29a8 <__addsf3x+0x98>
    2996:	87 95       	ror	r24
    2998:	77 95       	ror	r23
    299a:	67 95       	ror	r22
    299c:	b7 95       	ror	r27
    299e:	f7 95       	ror	r31
    29a0:	9e 3f       	cpi	r25, 0xFE	; 254
    29a2:	08 f0       	brcs	.+2      	; 0x29a6 <__addsf3x+0x96>
    29a4:	b3 cf       	rjmp	.-154    	; 0x290c <__addsf3+0x1e>
    29a6:	93 95       	inc	r25
    29a8:	88 0f       	add	r24, r24
    29aa:	08 f0       	brcs	.+2      	; 0x29ae <__addsf3x+0x9e>
    29ac:	99 27       	eor	r25, r25
    29ae:	ee 0f       	add	r30, r30
    29b0:	97 95       	ror	r25
    29b2:	87 95       	ror	r24
    29b4:	08 95       	ret

000029b6 <__cmpsf2>:
    29b6:	d9 d0       	rcall	.+434    	; 0x2b6a <__fp_cmp>
    29b8:	08 f4       	brcc	.+2      	; 0x29bc <__cmpsf2+0x6>
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	08 95       	ret

000029be <__divsf3>:
    29be:	0c d0       	rcall	.+24     	; 0x29d8 <__divsf3x>
    29c0:	0f c1       	rjmp	.+542    	; 0x2be0 <__fp_round>
    29c2:	07 d1       	rcall	.+526    	; 0x2bd2 <__fp_pscB>
    29c4:	40 f0       	brcs	.+16     	; 0x29d6 <__divsf3+0x18>
    29c6:	fe d0       	rcall	.+508    	; 0x2bc4 <__fp_pscA>
    29c8:	30 f0       	brcs	.+12     	; 0x29d6 <__divsf3+0x18>
    29ca:	21 f4       	brne	.+8      	; 0x29d4 <__divsf3+0x16>
    29cc:	5f 3f       	cpi	r21, 0xFF	; 255
    29ce:	19 f0       	breq	.+6      	; 0x29d6 <__divsf3+0x18>
    29d0:	f0 c0       	rjmp	.+480    	; 0x2bb2 <__fp_inf>
    29d2:	51 11       	cpse	r21, r1
    29d4:	39 c1       	rjmp	.+626    	; 0x2c48 <__fp_szero>
    29d6:	f3 c0       	rjmp	.+486    	; 0x2bbe <__fp_nan>

000029d8 <__divsf3x>:
    29d8:	14 d1       	rcall	.+552    	; 0x2c02 <__fp_split3>
    29da:	98 f3       	brcs	.-26     	; 0x29c2 <__divsf3+0x4>

000029dc <__divsf3_pse>:
    29dc:	99 23       	and	r25, r25
    29de:	c9 f3       	breq	.-14     	; 0x29d2 <__divsf3+0x14>
    29e0:	55 23       	and	r21, r21
    29e2:	b1 f3       	breq	.-20     	; 0x29d0 <__divsf3+0x12>
    29e4:	95 1b       	sub	r25, r21
    29e6:	55 0b       	sbc	r21, r21
    29e8:	bb 27       	eor	r27, r27
    29ea:	aa 27       	eor	r26, r26
    29ec:	62 17       	cp	r22, r18
    29ee:	73 07       	cpc	r23, r19
    29f0:	84 07       	cpc	r24, r20
    29f2:	38 f0       	brcs	.+14     	; 0x2a02 <__divsf3_pse+0x26>
    29f4:	9f 5f       	subi	r25, 0xFF	; 255
    29f6:	5f 4f       	sbci	r21, 0xFF	; 255
    29f8:	22 0f       	add	r18, r18
    29fa:	33 1f       	adc	r19, r19
    29fc:	44 1f       	adc	r20, r20
    29fe:	aa 1f       	adc	r26, r26
    2a00:	a9 f3       	breq	.-22     	; 0x29ec <__divsf3_pse+0x10>
    2a02:	33 d0       	rcall	.+102    	; 0x2a6a <__divsf3_pse+0x8e>
    2a04:	0e 2e       	mov	r0, r30
    2a06:	3a f0       	brmi	.+14     	; 0x2a16 <__divsf3_pse+0x3a>
    2a08:	e0 e8       	ldi	r30, 0x80	; 128
    2a0a:	30 d0       	rcall	.+96     	; 0x2a6c <__divsf3_pse+0x90>
    2a0c:	91 50       	subi	r25, 0x01	; 1
    2a0e:	50 40       	sbci	r21, 0x00	; 0
    2a10:	e6 95       	lsr	r30
    2a12:	00 1c       	adc	r0, r0
    2a14:	ca f7       	brpl	.-14     	; 0x2a08 <__divsf3_pse+0x2c>
    2a16:	29 d0       	rcall	.+82     	; 0x2a6a <__divsf3_pse+0x8e>
    2a18:	fe 2f       	mov	r31, r30
    2a1a:	27 d0       	rcall	.+78     	; 0x2a6a <__divsf3_pse+0x8e>
    2a1c:	66 0f       	add	r22, r22
    2a1e:	77 1f       	adc	r23, r23
    2a20:	88 1f       	adc	r24, r24
    2a22:	bb 1f       	adc	r27, r27
    2a24:	26 17       	cp	r18, r22
    2a26:	37 07       	cpc	r19, r23
    2a28:	48 07       	cpc	r20, r24
    2a2a:	ab 07       	cpc	r26, r27
    2a2c:	b0 e8       	ldi	r27, 0x80	; 128
    2a2e:	09 f0       	breq	.+2      	; 0x2a32 <__divsf3_pse+0x56>
    2a30:	bb 0b       	sbc	r27, r27
    2a32:	80 2d       	mov	r24, r0
    2a34:	bf 01       	movw	r22, r30
    2a36:	ff 27       	eor	r31, r31
    2a38:	93 58       	subi	r25, 0x83	; 131
    2a3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a3c:	2a f0       	brmi	.+10     	; 0x2a48 <__divsf3_pse+0x6c>
    2a3e:	9e 3f       	cpi	r25, 0xFE	; 254
    2a40:	51 05       	cpc	r21, r1
    2a42:	68 f0       	brcs	.+26     	; 0x2a5e <__divsf3_pse+0x82>
    2a44:	b6 c0       	rjmp	.+364    	; 0x2bb2 <__fp_inf>
    2a46:	00 c1       	rjmp	.+512    	; 0x2c48 <__fp_szero>
    2a48:	5f 3f       	cpi	r21, 0xFF	; 255
    2a4a:	ec f3       	brlt	.-6      	; 0x2a46 <__divsf3_pse+0x6a>
    2a4c:	98 3e       	cpi	r25, 0xE8	; 232
    2a4e:	dc f3       	brlt	.-10     	; 0x2a46 <__divsf3_pse+0x6a>
    2a50:	86 95       	lsr	r24
    2a52:	77 95       	ror	r23
    2a54:	67 95       	ror	r22
    2a56:	b7 95       	ror	r27
    2a58:	f7 95       	ror	r31
    2a5a:	9f 5f       	subi	r25, 0xFF	; 255
    2a5c:	c9 f7       	brne	.-14     	; 0x2a50 <__divsf3_pse+0x74>
    2a5e:	88 0f       	add	r24, r24
    2a60:	91 1d       	adc	r25, r1
    2a62:	96 95       	lsr	r25
    2a64:	87 95       	ror	r24
    2a66:	97 f9       	bld	r25, 7
    2a68:	08 95       	ret
    2a6a:	e1 e0       	ldi	r30, 0x01	; 1
    2a6c:	66 0f       	add	r22, r22
    2a6e:	77 1f       	adc	r23, r23
    2a70:	88 1f       	adc	r24, r24
    2a72:	bb 1f       	adc	r27, r27
    2a74:	62 17       	cp	r22, r18
    2a76:	73 07       	cpc	r23, r19
    2a78:	84 07       	cpc	r24, r20
    2a7a:	ba 07       	cpc	r27, r26
    2a7c:	20 f0       	brcs	.+8      	; 0x2a86 <__divsf3_pse+0xaa>
    2a7e:	62 1b       	sub	r22, r18
    2a80:	73 0b       	sbc	r23, r19
    2a82:	84 0b       	sbc	r24, r20
    2a84:	ba 0b       	sbc	r27, r26
    2a86:	ee 1f       	adc	r30, r30
    2a88:	88 f7       	brcc	.-30     	; 0x2a6c <__divsf3_pse+0x90>
    2a8a:	e0 95       	com	r30
    2a8c:	08 95       	ret

00002a8e <__fixsfsi>:
    2a8e:	04 d0       	rcall	.+8      	; 0x2a98 <__fixunssfsi>
    2a90:	68 94       	set
    2a92:	b1 11       	cpse	r27, r1
    2a94:	d9 c0       	rjmp	.+434    	; 0x2c48 <__fp_szero>
    2a96:	08 95       	ret

00002a98 <__fixunssfsi>:
    2a98:	bc d0       	rcall	.+376    	; 0x2c12 <__fp_splitA>
    2a9a:	88 f0       	brcs	.+34     	; 0x2abe <__fixunssfsi+0x26>
    2a9c:	9f 57       	subi	r25, 0x7F	; 127
    2a9e:	90 f0       	brcs	.+36     	; 0x2ac4 <__fixunssfsi+0x2c>
    2aa0:	b9 2f       	mov	r27, r25
    2aa2:	99 27       	eor	r25, r25
    2aa4:	b7 51       	subi	r27, 0x17	; 23
    2aa6:	a0 f0       	brcs	.+40     	; 0x2ad0 <__fixunssfsi+0x38>
    2aa8:	d1 f0       	breq	.+52     	; 0x2ade <__fixunssfsi+0x46>
    2aaa:	66 0f       	add	r22, r22
    2aac:	77 1f       	adc	r23, r23
    2aae:	88 1f       	adc	r24, r24
    2ab0:	99 1f       	adc	r25, r25
    2ab2:	1a f0       	brmi	.+6      	; 0x2aba <__fixunssfsi+0x22>
    2ab4:	ba 95       	dec	r27
    2ab6:	c9 f7       	brne	.-14     	; 0x2aaa <__fixunssfsi+0x12>
    2ab8:	12 c0       	rjmp	.+36     	; 0x2ade <__fixunssfsi+0x46>
    2aba:	b1 30       	cpi	r27, 0x01	; 1
    2abc:	81 f0       	breq	.+32     	; 0x2ade <__fixunssfsi+0x46>
    2abe:	c3 d0       	rcall	.+390    	; 0x2c46 <__fp_zero>
    2ac0:	b1 e0       	ldi	r27, 0x01	; 1
    2ac2:	08 95       	ret
    2ac4:	c0 c0       	rjmp	.+384    	; 0x2c46 <__fp_zero>
    2ac6:	67 2f       	mov	r22, r23
    2ac8:	78 2f       	mov	r23, r24
    2aca:	88 27       	eor	r24, r24
    2acc:	b8 5f       	subi	r27, 0xF8	; 248
    2ace:	39 f0       	breq	.+14     	; 0x2ade <__fixunssfsi+0x46>
    2ad0:	b9 3f       	cpi	r27, 0xF9	; 249
    2ad2:	cc f3       	brlt	.-14     	; 0x2ac6 <__fixunssfsi+0x2e>
    2ad4:	86 95       	lsr	r24
    2ad6:	77 95       	ror	r23
    2ad8:	67 95       	ror	r22
    2ada:	b3 95       	inc	r27
    2adc:	d9 f7       	brne	.-10     	; 0x2ad4 <__fixunssfsi+0x3c>
    2ade:	3e f4       	brtc	.+14     	; 0x2aee <__fixunssfsi+0x56>
    2ae0:	90 95       	com	r25
    2ae2:	80 95       	com	r24
    2ae4:	70 95       	com	r23
    2ae6:	61 95       	neg	r22
    2ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    2aea:	8f 4f       	sbci	r24, 0xFF	; 255
    2aec:	9f 4f       	sbci	r25, 0xFF	; 255
    2aee:	08 95       	ret

00002af0 <__floatunsisf>:
    2af0:	e8 94       	clt
    2af2:	09 c0       	rjmp	.+18     	; 0x2b06 <__floatsisf+0x12>

00002af4 <__floatsisf>:
    2af4:	97 fb       	bst	r25, 7
    2af6:	3e f4       	brtc	.+14     	; 0x2b06 <__floatsisf+0x12>
    2af8:	90 95       	com	r25
    2afa:	80 95       	com	r24
    2afc:	70 95       	com	r23
    2afe:	61 95       	neg	r22
    2b00:	7f 4f       	sbci	r23, 0xFF	; 255
    2b02:	8f 4f       	sbci	r24, 0xFF	; 255
    2b04:	9f 4f       	sbci	r25, 0xFF	; 255
    2b06:	99 23       	and	r25, r25
    2b08:	a9 f0       	breq	.+42     	; 0x2b34 <__floatsisf+0x40>
    2b0a:	f9 2f       	mov	r31, r25
    2b0c:	96 e9       	ldi	r25, 0x96	; 150
    2b0e:	bb 27       	eor	r27, r27
    2b10:	93 95       	inc	r25
    2b12:	f6 95       	lsr	r31
    2b14:	87 95       	ror	r24
    2b16:	77 95       	ror	r23
    2b18:	67 95       	ror	r22
    2b1a:	b7 95       	ror	r27
    2b1c:	f1 11       	cpse	r31, r1
    2b1e:	f8 cf       	rjmp	.-16     	; 0x2b10 <__floatsisf+0x1c>
    2b20:	fa f4       	brpl	.+62     	; 0x2b60 <__floatsisf+0x6c>
    2b22:	bb 0f       	add	r27, r27
    2b24:	11 f4       	brne	.+4      	; 0x2b2a <__floatsisf+0x36>
    2b26:	60 ff       	sbrs	r22, 0
    2b28:	1b c0       	rjmp	.+54     	; 0x2b60 <__floatsisf+0x6c>
    2b2a:	6f 5f       	subi	r22, 0xFF	; 255
    2b2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b2e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b30:	9f 4f       	sbci	r25, 0xFF	; 255
    2b32:	16 c0       	rjmp	.+44     	; 0x2b60 <__floatsisf+0x6c>
    2b34:	88 23       	and	r24, r24
    2b36:	11 f0       	breq	.+4      	; 0x2b3c <__floatsisf+0x48>
    2b38:	96 e9       	ldi	r25, 0x96	; 150
    2b3a:	11 c0       	rjmp	.+34     	; 0x2b5e <__floatsisf+0x6a>
    2b3c:	77 23       	and	r23, r23
    2b3e:	21 f0       	breq	.+8      	; 0x2b48 <__floatsisf+0x54>
    2b40:	9e e8       	ldi	r25, 0x8E	; 142
    2b42:	87 2f       	mov	r24, r23
    2b44:	76 2f       	mov	r23, r22
    2b46:	05 c0       	rjmp	.+10     	; 0x2b52 <__floatsisf+0x5e>
    2b48:	66 23       	and	r22, r22
    2b4a:	71 f0       	breq	.+28     	; 0x2b68 <__floatsisf+0x74>
    2b4c:	96 e8       	ldi	r25, 0x86	; 134
    2b4e:	86 2f       	mov	r24, r22
    2b50:	70 e0       	ldi	r23, 0x00	; 0
    2b52:	60 e0       	ldi	r22, 0x00	; 0
    2b54:	2a f0       	brmi	.+10     	; 0x2b60 <__floatsisf+0x6c>
    2b56:	9a 95       	dec	r25
    2b58:	66 0f       	add	r22, r22
    2b5a:	77 1f       	adc	r23, r23
    2b5c:	88 1f       	adc	r24, r24
    2b5e:	da f7       	brpl	.-10     	; 0x2b56 <__floatsisf+0x62>
    2b60:	88 0f       	add	r24, r24
    2b62:	96 95       	lsr	r25
    2b64:	87 95       	ror	r24
    2b66:	97 f9       	bld	r25, 7
    2b68:	08 95       	ret

00002b6a <__fp_cmp>:
    2b6a:	99 0f       	add	r25, r25
    2b6c:	00 08       	sbc	r0, r0
    2b6e:	55 0f       	add	r21, r21
    2b70:	aa 0b       	sbc	r26, r26
    2b72:	e0 e8       	ldi	r30, 0x80	; 128
    2b74:	fe ef       	ldi	r31, 0xFE	; 254
    2b76:	16 16       	cp	r1, r22
    2b78:	17 06       	cpc	r1, r23
    2b7a:	e8 07       	cpc	r30, r24
    2b7c:	f9 07       	cpc	r31, r25
    2b7e:	c0 f0       	brcs	.+48     	; 0x2bb0 <__fp_cmp+0x46>
    2b80:	12 16       	cp	r1, r18
    2b82:	13 06       	cpc	r1, r19
    2b84:	e4 07       	cpc	r30, r20
    2b86:	f5 07       	cpc	r31, r21
    2b88:	98 f0       	brcs	.+38     	; 0x2bb0 <__fp_cmp+0x46>
    2b8a:	62 1b       	sub	r22, r18
    2b8c:	73 0b       	sbc	r23, r19
    2b8e:	84 0b       	sbc	r24, r20
    2b90:	95 0b       	sbc	r25, r21
    2b92:	39 f4       	brne	.+14     	; 0x2ba2 <__fp_cmp+0x38>
    2b94:	0a 26       	eor	r0, r26
    2b96:	61 f0       	breq	.+24     	; 0x2bb0 <__fp_cmp+0x46>
    2b98:	23 2b       	or	r18, r19
    2b9a:	24 2b       	or	r18, r20
    2b9c:	25 2b       	or	r18, r21
    2b9e:	21 f4       	brne	.+8      	; 0x2ba8 <__fp_cmp+0x3e>
    2ba0:	08 95       	ret
    2ba2:	0a 26       	eor	r0, r26
    2ba4:	09 f4       	brne	.+2      	; 0x2ba8 <__fp_cmp+0x3e>
    2ba6:	a1 40       	sbci	r26, 0x01	; 1
    2ba8:	a6 95       	lsr	r26
    2baa:	8f ef       	ldi	r24, 0xFF	; 255
    2bac:	81 1d       	adc	r24, r1
    2bae:	81 1d       	adc	r24, r1
    2bb0:	08 95       	ret

00002bb2 <__fp_inf>:
    2bb2:	97 f9       	bld	r25, 7
    2bb4:	9f 67       	ori	r25, 0x7F	; 127
    2bb6:	80 e8       	ldi	r24, 0x80	; 128
    2bb8:	70 e0       	ldi	r23, 0x00	; 0
    2bba:	60 e0       	ldi	r22, 0x00	; 0
    2bbc:	08 95       	ret

00002bbe <__fp_nan>:
    2bbe:	9f ef       	ldi	r25, 0xFF	; 255
    2bc0:	80 ec       	ldi	r24, 0xC0	; 192
    2bc2:	08 95       	ret

00002bc4 <__fp_pscA>:
    2bc4:	00 24       	eor	r0, r0
    2bc6:	0a 94       	dec	r0
    2bc8:	16 16       	cp	r1, r22
    2bca:	17 06       	cpc	r1, r23
    2bcc:	18 06       	cpc	r1, r24
    2bce:	09 06       	cpc	r0, r25
    2bd0:	08 95       	ret

00002bd2 <__fp_pscB>:
    2bd2:	00 24       	eor	r0, r0
    2bd4:	0a 94       	dec	r0
    2bd6:	12 16       	cp	r1, r18
    2bd8:	13 06       	cpc	r1, r19
    2bda:	14 06       	cpc	r1, r20
    2bdc:	05 06       	cpc	r0, r21
    2bde:	08 95       	ret

00002be0 <__fp_round>:
    2be0:	09 2e       	mov	r0, r25
    2be2:	03 94       	inc	r0
    2be4:	00 0c       	add	r0, r0
    2be6:	11 f4       	brne	.+4      	; 0x2bec <__fp_round+0xc>
    2be8:	88 23       	and	r24, r24
    2bea:	52 f0       	brmi	.+20     	; 0x2c00 <__fp_round+0x20>
    2bec:	bb 0f       	add	r27, r27
    2bee:	40 f4       	brcc	.+16     	; 0x2c00 <__fp_round+0x20>
    2bf0:	bf 2b       	or	r27, r31
    2bf2:	11 f4       	brne	.+4      	; 0x2bf8 <__fp_round+0x18>
    2bf4:	60 ff       	sbrs	r22, 0
    2bf6:	04 c0       	rjmp	.+8      	; 0x2c00 <__fp_round+0x20>
    2bf8:	6f 5f       	subi	r22, 0xFF	; 255
    2bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    2bfc:	8f 4f       	sbci	r24, 0xFF	; 255
    2bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    2c00:	08 95       	ret

00002c02 <__fp_split3>:
    2c02:	57 fd       	sbrc	r21, 7
    2c04:	90 58       	subi	r25, 0x80	; 128
    2c06:	44 0f       	add	r20, r20
    2c08:	55 1f       	adc	r21, r21
    2c0a:	59 f0       	breq	.+22     	; 0x2c22 <__fp_splitA+0x10>
    2c0c:	5f 3f       	cpi	r21, 0xFF	; 255
    2c0e:	71 f0       	breq	.+28     	; 0x2c2c <__fp_splitA+0x1a>
    2c10:	47 95       	ror	r20

00002c12 <__fp_splitA>:
    2c12:	88 0f       	add	r24, r24
    2c14:	97 fb       	bst	r25, 7
    2c16:	99 1f       	adc	r25, r25
    2c18:	61 f0       	breq	.+24     	; 0x2c32 <__fp_splitA+0x20>
    2c1a:	9f 3f       	cpi	r25, 0xFF	; 255
    2c1c:	79 f0       	breq	.+30     	; 0x2c3c <__fp_splitA+0x2a>
    2c1e:	87 95       	ror	r24
    2c20:	08 95       	ret
    2c22:	12 16       	cp	r1, r18
    2c24:	13 06       	cpc	r1, r19
    2c26:	14 06       	cpc	r1, r20
    2c28:	55 1f       	adc	r21, r21
    2c2a:	f2 cf       	rjmp	.-28     	; 0x2c10 <__fp_split3+0xe>
    2c2c:	46 95       	lsr	r20
    2c2e:	f1 df       	rcall	.-30     	; 0x2c12 <__fp_splitA>
    2c30:	08 c0       	rjmp	.+16     	; 0x2c42 <__fp_splitA+0x30>
    2c32:	16 16       	cp	r1, r22
    2c34:	17 06       	cpc	r1, r23
    2c36:	18 06       	cpc	r1, r24
    2c38:	99 1f       	adc	r25, r25
    2c3a:	f1 cf       	rjmp	.-30     	; 0x2c1e <__fp_splitA+0xc>
    2c3c:	86 95       	lsr	r24
    2c3e:	71 05       	cpc	r23, r1
    2c40:	61 05       	cpc	r22, r1
    2c42:	08 94       	sec
    2c44:	08 95       	ret

00002c46 <__fp_zero>:
    2c46:	e8 94       	clt

00002c48 <__fp_szero>:
    2c48:	bb 27       	eor	r27, r27
    2c4a:	66 27       	eor	r22, r22
    2c4c:	77 27       	eor	r23, r23
    2c4e:	cb 01       	movw	r24, r22
    2c50:	97 f9       	bld	r25, 7
    2c52:	08 95       	ret

00002c54 <__gesf2>:
    2c54:	8a df       	rcall	.-236    	; 0x2b6a <__fp_cmp>
    2c56:	08 f4       	brcc	.+2      	; 0x2c5a <__gesf2+0x6>
    2c58:	8f ef       	ldi	r24, 0xFF	; 255
    2c5a:	08 95       	ret

00002c5c <__mulsf3>:
    2c5c:	0b d0       	rcall	.+22     	; 0x2c74 <__mulsf3x>
    2c5e:	c0 cf       	rjmp	.-128    	; 0x2be0 <__fp_round>
    2c60:	b1 df       	rcall	.-158    	; 0x2bc4 <__fp_pscA>
    2c62:	28 f0       	brcs	.+10     	; 0x2c6e <__mulsf3+0x12>
    2c64:	b6 df       	rcall	.-148    	; 0x2bd2 <__fp_pscB>
    2c66:	18 f0       	brcs	.+6      	; 0x2c6e <__mulsf3+0x12>
    2c68:	95 23       	and	r25, r21
    2c6a:	09 f0       	breq	.+2      	; 0x2c6e <__mulsf3+0x12>
    2c6c:	a2 cf       	rjmp	.-188    	; 0x2bb2 <__fp_inf>
    2c6e:	a7 cf       	rjmp	.-178    	; 0x2bbe <__fp_nan>
    2c70:	11 24       	eor	r1, r1
    2c72:	ea cf       	rjmp	.-44     	; 0x2c48 <__fp_szero>

00002c74 <__mulsf3x>:
    2c74:	c6 df       	rcall	.-116    	; 0x2c02 <__fp_split3>
    2c76:	a0 f3       	brcs	.-24     	; 0x2c60 <__mulsf3+0x4>

00002c78 <__mulsf3_pse>:
    2c78:	95 9f       	mul	r25, r21
    2c7a:	d1 f3       	breq	.-12     	; 0x2c70 <__mulsf3+0x14>
    2c7c:	95 0f       	add	r25, r21
    2c7e:	50 e0       	ldi	r21, 0x00	; 0
    2c80:	55 1f       	adc	r21, r21
    2c82:	62 9f       	mul	r22, r18
    2c84:	f0 01       	movw	r30, r0
    2c86:	72 9f       	mul	r23, r18
    2c88:	bb 27       	eor	r27, r27
    2c8a:	f0 0d       	add	r31, r0
    2c8c:	b1 1d       	adc	r27, r1
    2c8e:	63 9f       	mul	r22, r19
    2c90:	aa 27       	eor	r26, r26
    2c92:	f0 0d       	add	r31, r0
    2c94:	b1 1d       	adc	r27, r1
    2c96:	aa 1f       	adc	r26, r26
    2c98:	64 9f       	mul	r22, r20
    2c9a:	66 27       	eor	r22, r22
    2c9c:	b0 0d       	add	r27, r0
    2c9e:	a1 1d       	adc	r26, r1
    2ca0:	66 1f       	adc	r22, r22
    2ca2:	82 9f       	mul	r24, r18
    2ca4:	22 27       	eor	r18, r18
    2ca6:	b0 0d       	add	r27, r0
    2ca8:	a1 1d       	adc	r26, r1
    2caa:	62 1f       	adc	r22, r18
    2cac:	73 9f       	mul	r23, r19
    2cae:	b0 0d       	add	r27, r0
    2cb0:	a1 1d       	adc	r26, r1
    2cb2:	62 1f       	adc	r22, r18
    2cb4:	83 9f       	mul	r24, r19
    2cb6:	a0 0d       	add	r26, r0
    2cb8:	61 1d       	adc	r22, r1
    2cba:	22 1f       	adc	r18, r18
    2cbc:	74 9f       	mul	r23, r20
    2cbe:	33 27       	eor	r19, r19
    2cc0:	a0 0d       	add	r26, r0
    2cc2:	61 1d       	adc	r22, r1
    2cc4:	23 1f       	adc	r18, r19
    2cc6:	84 9f       	mul	r24, r20
    2cc8:	60 0d       	add	r22, r0
    2cca:	21 1d       	adc	r18, r1
    2ccc:	82 2f       	mov	r24, r18
    2cce:	76 2f       	mov	r23, r22
    2cd0:	6a 2f       	mov	r22, r26
    2cd2:	11 24       	eor	r1, r1
    2cd4:	9f 57       	subi	r25, 0x7F	; 127
    2cd6:	50 40       	sbci	r21, 0x00	; 0
    2cd8:	8a f0       	brmi	.+34     	; 0x2cfc <__mulsf3_pse+0x84>
    2cda:	e1 f0       	breq	.+56     	; 0x2d14 <__mulsf3_pse+0x9c>
    2cdc:	88 23       	and	r24, r24
    2cde:	4a f0       	brmi	.+18     	; 0x2cf2 <__mulsf3_pse+0x7a>
    2ce0:	ee 0f       	add	r30, r30
    2ce2:	ff 1f       	adc	r31, r31
    2ce4:	bb 1f       	adc	r27, r27
    2ce6:	66 1f       	adc	r22, r22
    2ce8:	77 1f       	adc	r23, r23
    2cea:	88 1f       	adc	r24, r24
    2cec:	91 50       	subi	r25, 0x01	; 1
    2cee:	50 40       	sbci	r21, 0x00	; 0
    2cf0:	a9 f7       	brne	.-22     	; 0x2cdc <__mulsf3_pse+0x64>
    2cf2:	9e 3f       	cpi	r25, 0xFE	; 254
    2cf4:	51 05       	cpc	r21, r1
    2cf6:	70 f0       	brcs	.+28     	; 0x2d14 <__mulsf3_pse+0x9c>
    2cf8:	5c cf       	rjmp	.-328    	; 0x2bb2 <__fp_inf>
    2cfa:	a6 cf       	rjmp	.-180    	; 0x2c48 <__fp_szero>
    2cfc:	5f 3f       	cpi	r21, 0xFF	; 255
    2cfe:	ec f3       	brlt	.-6      	; 0x2cfa <__mulsf3_pse+0x82>
    2d00:	98 3e       	cpi	r25, 0xE8	; 232
    2d02:	dc f3       	brlt	.-10     	; 0x2cfa <__mulsf3_pse+0x82>
    2d04:	86 95       	lsr	r24
    2d06:	77 95       	ror	r23
    2d08:	67 95       	ror	r22
    2d0a:	b7 95       	ror	r27
    2d0c:	f7 95       	ror	r31
    2d0e:	e7 95       	ror	r30
    2d10:	9f 5f       	subi	r25, 0xFF	; 255
    2d12:	c1 f7       	brne	.-16     	; 0x2d04 <__mulsf3_pse+0x8c>
    2d14:	fe 2b       	or	r31, r30
    2d16:	88 0f       	add	r24, r24
    2d18:	91 1d       	adc	r25, r1
    2d1a:	96 95       	lsr	r25
    2d1c:	87 95       	ror	r24
    2d1e:	97 f9       	bld	r25, 7
    2d20:	08 95       	ret

00002d22 <pow>:
    2d22:	fa 01       	movw	r30, r20
    2d24:	ee 0f       	add	r30, r30
    2d26:	ff 1f       	adc	r31, r31
    2d28:	30 96       	adiw	r30, 0x00	; 0
    2d2a:	21 05       	cpc	r18, r1
    2d2c:	31 05       	cpc	r19, r1
    2d2e:	99 f1       	breq	.+102    	; 0x2d96 <pow+0x74>
    2d30:	61 15       	cp	r22, r1
    2d32:	71 05       	cpc	r23, r1
    2d34:	61 f4       	brne	.+24     	; 0x2d4e <pow+0x2c>
    2d36:	80 38       	cpi	r24, 0x80	; 128
    2d38:	bf e3       	ldi	r27, 0x3F	; 63
    2d3a:	9b 07       	cpc	r25, r27
    2d3c:	49 f1       	breq	.+82     	; 0x2d90 <pow+0x6e>
    2d3e:	68 94       	set
    2d40:	90 38       	cpi	r25, 0x80	; 128
    2d42:	81 05       	cpc	r24, r1
    2d44:	61 f0       	breq	.+24     	; 0x2d5e <pow+0x3c>
    2d46:	80 38       	cpi	r24, 0x80	; 128
    2d48:	bf ef       	ldi	r27, 0xFF	; 255
    2d4a:	9b 07       	cpc	r25, r27
    2d4c:	41 f0       	breq	.+16     	; 0x2d5e <pow+0x3c>
    2d4e:	99 23       	and	r25, r25
    2d50:	42 f5       	brpl	.+80     	; 0x2da2 <pow+0x80>
    2d52:	ff 3f       	cpi	r31, 0xFF	; 255
    2d54:	e1 05       	cpc	r30, r1
    2d56:	31 05       	cpc	r19, r1
    2d58:	21 05       	cpc	r18, r1
    2d5a:	11 f1       	breq	.+68     	; 0x2da0 <pow+0x7e>
    2d5c:	e8 94       	clt
    2d5e:	08 94       	sec
    2d60:	e7 95       	ror	r30
    2d62:	d9 01       	movw	r26, r18
    2d64:	aa 23       	and	r26, r26
    2d66:	29 f4       	brne	.+10     	; 0x2d72 <pow+0x50>
    2d68:	ab 2f       	mov	r26, r27
    2d6a:	be 2f       	mov	r27, r30
    2d6c:	f8 5f       	subi	r31, 0xF8	; 248
    2d6e:	d0 f3       	brcs	.-12     	; 0x2d64 <pow+0x42>
    2d70:	10 c0       	rjmp	.+32     	; 0x2d92 <pow+0x70>
    2d72:	ff 5f       	subi	r31, 0xFF	; 255
    2d74:	70 f4       	brcc	.+28     	; 0x2d92 <pow+0x70>
    2d76:	a6 95       	lsr	r26
    2d78:	e0 f7       	brcc	.-8      	; 0x2d72 <pow+0x50>
    2d7a:	f7 39       	cpi	r31, 0x97	; 151
    2d7c:	50 f0       	brcs	.+20     	; 0x2d92 <pow+0x70>
    2d7e:	19 f0       	breq	.+6      	; 0x2d86 <pow+0x64>
    2d80:	ff 3a       	cpi	r31, 0xAF	; 175
    2d82:	38 f4       	brcc	.+14     	; 0x2d92 <pow+0x70>
    2d84:	9f 77       	andi	r25, 0x7F	; 127
    2d86:	9f 93       	push	r25
    2d88:	0c d0       	rcall	.+24     	; 0x2da2 <pow+0x80>
    2d8a:	0f 90       	pop	r0
    2d8c:	07 fc       	sbrc	r0, 7
    2d8e:	90 58       	subi	r25, 0x80	; 128
    2d90:	08 95       	ret
    2d92:	3e f0       	brts	.+14     	; 0x2da2 <pow+0x80>
    2d94:	14 cf       	rjmp	.-472    	; 0x2bbe <__fp_nan>
    2d96:	60 e0       	ldi	r22, 0x00	; 0
    2d98:	70 e0       	ldi	r23, 0x00	; 0
    2d9a:	80 e8       	ldi	r24, 0x80	; 128
    2d9c:	9f e3       	ldi	r25, 0x3F	; 63
    2d9e:	08 95       	ret
    2da0:	4f e7       	ldi	r20, 0x7F	; 127
    2da2:	9f 77       	andi	r25, 0x7F	; 127
    2da4:	5f 93       	push	r21
    2da6:	4f 93       	push	r20
    2da8:	3f 93       	push	r19
    2daa:	2f 93       	push	r18
    2dac:	9e d0       	rcall	.+316    	; 0x2eea <log>
    2dae:	2f 91       	pop	r18
    2db0:	3f 91       	pop	r19
    2db2:	4f 91       	pop	r20
    2db4:	5f 91       	pop	r21
    2db6:	52 df       	rcall	.-348    	; 0x2c5c <__mulsf3>
    2db8:	05 c0       	rjmp	.+10     	; 0x2dc4 <exp>
    2dba:	19 f4       	brne	.+6      	; 0x2dc2 <pow+0xa0>
    2dbc:	0e f0       	brts	.+2      	; 0x2dc0 <pow+0x9e>
    2dbe:	f9 ce       	rjmp	.-526    	; 0x2bb2 <__fp_inf>
    2dc0:	42 cf       	rjmp	.-380    	; 0x2c46 <__fp_zero>
    2dc2:	fd ce       	rjmp	.-518    	; 0x2bbe <__fp_nan>

00002dc4 <exp>:
    2dc4:	26 df       	rcall	.-436    	; 0x2c12 <__fp_splitA>
    2dc6:	c8 f3       	brcs	.-14     	; 0x2dba <pow+0x98>
    2dc8:	96 38       	cpi	r25, 0x86	; 134
    2dca:	c0 f7       	brcc	.-16     	; 0x2dbc <pow+0x9a>
    2dcc:	07 f8       	bld	r0, 7
    2dce:	0f 92       	push	r0
    2dd0:	e8 94       	clt
    2dd2:	2b e3       	ldi	r18, 0x3B	; 59
    2dd4:	3a ea       	ldi	r19, 0xAA	; 170
    2dd6:	48 eb       	ldi	r20, 0xB8	; 184
    2dd8:	5f e7       	ldi	r21, 0x7F	; 127
    2dda:	4e df       	rcall	.-356    	; 0x2c78 <__mulsf3_pse>
    2ddc:	0f 92       	push	r0
    2dde:	0f 92       	push	r0
    2de0:	0f 92       	push	r0
    2de2:	4d b7       	in	r20, 0x3d	; 61
    2de4:	5e b7       	in	r21, 0x3e	; 62
    2de6:	0f 92       	push	r0
    2de8:	c0 d0       	rcall	.+384    	; 0x2f6a <modf>
    2dea:	e2 ef       	ldi	r30, 0xF2	; 242
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	16 d0       	rcall	.+44     	; 0x2e1c <__fp_powser>
    2df0:	4f 91       	pop	r20
    2df2:	5f 91       	pop	r21
    2df4:	ef 91       	pop	r30
    2df6:	ff 91       	pop	r31
    2df8:	e5 95       	asr	r30
    2dfa:	ee 1f       	adc	r30, r30
    2dfc:	ff 1f       	adc	r31, r31
    2dfe:	49 f0       	breq	.+18     	; 0x2e12 <exp+0x4e>
    2e00:	fe 57       	subi	r31, 0x7E	; 126
    2e02:	e0 68       	ori	r30, 0x80	; 128
    2e04:	44 27       	eor	r20, r20
    2e06:	ee 0f       	add	r30, r30
    2e08:	44 1f       	adc	r20, r20
    2e0a:	fa 95       	dec	r31
    2e0c:	e1 f7       	brne	.-8      	; 0x2e06 <exp+0x42>
    2e0e:	41 95       	neg	r20
    2e10:	55 0b       	sbc	r21, r21
    2e12:	32 d0       	rcall	.+100    	; 0x2e78 <ldexp>
    2e14:	0f 90       	pop	r0
    2e16:	07 fe       	sbrs	r0, 7
    2e18:	26 c0       	rjmp	.+76     	; 0x2e66 <inverse>
    2e1a:	08 95       	ret

00002e1c <__fp_powser>:
    2e1c:	df 93       	push	r29
    2e1e:	cf 93       	push	r28
    2e20:	1f 93       	push	r17
    2e22:	0f 93       	push	r16
    2e24:	ff 92       	push	r15
    2e26:	ef 92       	push	r14
    2e28:	df 92       	push	r13
    2e2a:	7b 01       	movw	r14, r22
    2e2c:	8c 01       	movw	r16, r24
    2e2e:	68 94       	set
    2e30:	05 c0       	rjmp	.+10     	; 0x2e3c <__fp_powser+0x20>
    2e32:	da 2e       	mov	r13, r26
    2e34:	ef 01       	movw	r28, r30
    2e36:	1e df       	rcall	.-452    	; 0x2c74 <__mulsf3x>
    2e38:	fe 01       	movw	r30, r28
    2e3a:	e8 94       	clt
    2e3c:	a5 91       	lpm	r26, Z+
    2e3e:	25 91       	lpm	r18, Z+
    2e40:	35 91       	lpm	r19, Z+
    2e42:	45 91       	lpm	r20, Z+
    2e44:	55 91       	lpm	r21, Z+
    2e46:	ae f3       	brts	.-22     	; 0x2e32 <__fp_powser+0x16>
    2e48:	ef 01       	movw	r28, r30
    2e4a:	62 dd       	rcall	.-1340   	; 0x2910 <__addsf3x>
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	97 01       	movw	r18, r14
    2e50:	a8 01       	movw	r20, r16
    2e52:	da 94       	dec	r13
    2e54:	79 f7       	brne	.-34     	; 0x2e34 <__fp_powser+0x18>
    2e56:	df 90       	pop	r13
    2e58:	ef 90       	pop	r14
    2e5a:	ff 90       	pop	r15
    2e5c:	0f 91       	pop	r16
    2e5e:	1f 91       	pop	r17
    2e60:	cf 91       	pop	r28
    2e62:	df 91       	pop	r29
    2e64:	08 95       	ret

00002e66 <inverse>:
    2e66:	9b 01       	movw	r18, r22
    2e68:	ac 01       	movw	r20, r24
    2e6a:	60 e0       	ldi	r22, 0x00	; 0
    2e6c:	70 e0       	ldi	r23, 0x00	; 0
    2e6e:	80 e8       	ldi	r24, 0x80	; 128
    2e70:	9f e3       	ldi	r25, 0x3F	; 63
    2e72:	a5 cd       	rjmp	.-1206   	; 0x29be <__divsf3>
    2e74:	9e ce       	rjmp	.-708    	; 0x2bb2 <__fp_inf>
    2e76:	ac c0       	rjmp	.+344    	; 0x2fd0 <__fp_mpack>

00002e78 <ldexp>:
    2e78:	cc de       	rcall	.-616    	; 0x2c12 <__fp_splitA>
    2e7a:	e8 f3       	brcs	.-6      	; 0x2e76 <inverse+0x10>
    2e7c:	99 23       	and	r25, r25
    2e7e:	d9 f3       	breq	.-10     	; 0x2e76 <inverse+0x10>
    2e80:	94 0f       	add	r25, r20
    2e82:	51 1d       	adc	r21, r1
    2e84:	bb f3       	brvs	.-18     	; 0x2e74 <inverse+0xe>
    2e86:	91 50       	subi	r25, 0x01	; 1
    2e88:	50 40       	sbci	r21, 0x00	; 0
    2e8a:	94 f0       	brlt	.+36     	; 0x2eb0 <ldexp+0x38>
    2e8c:	59 f0       	breq	.+22     	; 0x2ea4 <ldexp+0x2c>
    2e8e:	88 23       	and	r24, r24
    2e90:	32 f0       	brmi	.+12     	; 0x2e9e <ldexp+0x26>
    2e92:	66 0f       	add	r22, r22
    2e94:	77 1f       	adc	r23, r23
    2e96:	88 1f       	adc	r24, r24
    2e98:	91 50       	subi	r25, 0x01	; 1
    2e9a:	50 40       	sbci	r21, 0x00	; 0
    2e9c:	c1 f7       	brne	.-16     	; 0x2e8e <ldexp+0x16>
    2e9e:	9e 3f       	cpi	r25, 0xFE	; 254
    2ea0:	51 05       	cpc	r21, r1
    2ea2:	44 f7       	brge	.-48     	; 0x2e74 <inverse+0xe>
    2ea4:	88 0f       	add	r24, r24
    2ea6:	91 1d       	adc	r25, r1
    2ea8:	96 95       	lsr	r25
    2eaa:	87 95       	ror	r24
    2eac:	97 f9       	bld	r25, 7
    2eae:	08 95       	ret
    2eb0:	5f 3f       	cpi	r21, 0xFF	; 255
    2eb2:	ac f0       	brlt	.+42     	; 0x2ede <ldexp+0x66>
    2eb4:	98 3e       	cpi	r25, 0xE8	; 232
    2eb6:	9c f0       	brlt	.+38     	; 0x2ede <ldexp+0x66>
    2eb8:	bb 27       	eor	r27, r27
    2eba:	86 95       	lsr	r24
    2ebc:	77 95       	ror	r23
    2ebe:	67 95       	ror	r22
    2ec0:	b7 95       	ror	r27
    2ec2:	08 f4       	brcc	.+2      	; 0x2ec6 <ldexp+0x4e>
    2ec4:	b1 60       	ori	r27, 0x01	; 1
    2ec6:	93 95       	inc	r25
    2ec8:	c1 f7       	brne	.-16     	; 0x2eba <ldexp+0x42>
    2eca:	bb 0f       	add	r27, r27
    2ecc:	58 f7       	brcc	.-42     	; 0x2ea4 <ldexp+0x2c>
    2ece:	11 f4       	brne	.+4      	; 0x2ed4 <ldexp+0x5c>
    2ed0:	60 ff       	sbrs	r22, 0
    2ed2:	e8 cf       	rjmp	.-48     	; 0x2ea4 <ldexp+0x2c>
    2ed4:	6f 5f       	subi	r22, 0xFF	; 255
    2ed6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed8:	8f 4f       	sbci	r24, 0xFF	; 255
    2eda:	9f 4f       	sbci	r25, 0xFF	; 255
    2edc:	e3 cf       	rjmp	.-58     	; 0x2ea4 <ldexp+0x2c>
    2ede:	b4 ce       	rjmp	.-664    	; 0x2c48 <__fp_szero>
    2ee0:	0e f0       	brts	.+2      	; 0x2ee4 <ldexp+0x6c>
    2ee2:	76 c0       	rjmp	.+236    	; 0x2fd0 <__fp_mpack>
    2ee4:	6c ce       	rjmp	.-808    	; 0x2bbe <__fp_nan>
    2ee6:	68 94       	set
    2ee8:	64 ce       	rjmp	.-824    	; 0x2bb2 <__fp_inf>

00002eea <log>:
    2eea:	93 de       	rcall	.-730    	; 0x2c12 <__fp_splitA>
    2eec:	c8 f3       	brcs	.-14     	; 0x2ee0 <ldexp+0x68>
    2eee:	99 23       	and	r25, r25
    2ef0:	d1 f3       	breq	.-12     	; 0x2ee6 <ldexp+0x6e>
    2ef2:	c6 f3       	brts	.-16     	; 0x2ee4 <ldexp+0x6c>
    2ef4:	df 93       	push	r29
    2ef6:	cf 93       	push	r28
    2ef8:	1f 93       	push	r17
    2efa:	0f 93       	push	r16
    2efc:	ff 92       	push	r15
    2efe:	c9 2f       	mov	r28, r25
    2f00:	dd 27       	eor	r29, r29
    2f02:	88 23       	and	r24, r24
    2f04:	2a f0       	brmi	.+10     	; 0x2f10 <log+0x26>
    2f06:	21 97       	sbiw	r28, 0x01	; 1
    2f08:	66 0f       	add	r22, r22
    2f0a:	77 1f       	adc	r23, r23
    2f0c:	88 1f       	adc	r24, r24
    2f0e:	da f7       	brpl	.-10     	; 0x2f06 <log+0x1c>
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	40 e8       	ldi	r20, 0x80	; 128
    2f16:	5f eb       	ldi	r21, 0xBF	; 191
    2f18:	9f e3       	ldi	r25, 0x3F	; 63
    2f1a:	88 39       	cpi	r24, 0x98	; 152
    2f1c:	20 f0       	brcs	.+8      	; 0x2f26 <log+0x3c>
    2f1e:	80 3e       	cpi	r24, 0xE0	; 224
    2f20:	30 f0       	brcs	.+12     	; 0x2f2e <log+0x44>
    2f22:	21 96       	adiw	r28, 0x01	; 1
    2f24:	8f 77       	andi	r24, 0x7F	; 127
    2f26:	e3 dc       	rcall	.-1594   	; 0x28ee <__addsf3>
    2f28:	ea e1       	ldi	r30, 0x1A	; 26
    2f2a:	f1 e0       	ldi	r31, 0x01	; 1
    2f2c:	03 c0       	rjmp	.+6      	; 0x2f34 <log+0x4a>
    2f2e:	df dc       	rcall	.-1602   	; 0x28ee <__addsf3>
    2f30:	e7 e4       	ldi	r30, 0x47	; 71
    2f32:	f1 e0       	ldi	r31, 0x01	; 1
    2f34:	73 df       	rcall	.-282    	; 0x2e1c <__fp_powser>
    2f36:	8b 01       	movw	r16, r22
    2f38:	be 01       	movw	r22, r28
    2f3a:	ec 01       	movw	r28, r24
    2f3c:	fb 2e       	mov	r15, r27
    2f3e:	6f 57       	subi	r22, 0x7F	; 127
    2f40:	71 09       	sbc	r23, r1
    2f42:	75 95       	asr	r23
    2f44:	77 1f       	adc	r23, r23
    2f46:	88 0b       	sbc	r24, r24
    2f48:	99 0b       	sbc	r25, r25
    2f4a:	d4 dd       	rcall	.-1112   	; 0x2af4 <__floatsisf>
    2f4c:	28 e1       	ldi	r18, 0x18	; 24
    2f4e:	32 e7       	ldi	r19, 0x72	; 114
    2f50:	41 e3       	ldi	r20, 0x31	; 49
    2f52:	5f e3       	ldi	r21, 0x3F	; 63
    2f54:	8f de       	rcall	.-738    	; 0x2c74 <__mulsf3x>
    2f56:	af 2d       	mov	r26, r15
    2f58:	98 01       	movw	r18, r16
    2f5a:	ae 01       	movw	r20, r28
    2f5c:	ff 90       	pop	r15
    2f5e:	0f 91       	pop	r16
    2f60:	1f 91       	pop	r17
    2f62:	cf 91       	pop	r28
    2f64:	df 91       	pop	r29
    2f66:	d4 dc       	rcall	.-1624   	; 0x2910 <__addsf3x>
    2f68:	3b ce       	rjmp	.-906    	; 0x2be0 <__fp_round>

00002f6a <modf>:
    2f6a:	fa 01       	movw	r30, r20
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	aa 0f       	add	r26, r26
    2f70:	bb 1f       	adc	r27, r27
    2f72:	9b 01       	movw	r18, r22
    2f74:	ac 01       	movw	r20, r24
    2f76:	bf 57       	subi	r27, 0x7F	; 127
    2f78:	28 f4       	brcc	.+10     	; 0x2f84 <modf+0x1a>
    2f7a:	22 27       	eor	r18, r18
    2f7c:	33 27       	eor	r19, r19
    2f7e:	44 27       	eor	r20, r20
    2f80:	50 78       	andi	r21, 0x80	; 128
    2f82:	1f c0       	rjmp	.+62     	; 0x2fc2 <modf+0x58>
    2f84:	b7 51       	subi	r27, 0x17	; 23
    2f86:	88 f4       	brcc	.+34     	; 0x2faa <modf+0x40>
    2f88:	ab 2f       	mov	r26, r27
    2f8a:	00 24       	eor	r0, r0
    2f8c:	46 95       	lsr	r20
    2f8e:	37 95       	ror	r19
    2f90:	27 95       	ror	r18
    2f92:	01 1c       	adc	r0, r1
    2f94:	a3 95       	inc	r26
    2f96:	d2 f3       	brmi	.-12     	; 0x2f8c <modf+0x22>
    2f98:	00 20       	and	r0, r0
    2f9a:	69 f0       	breq	.+26     	; 0x2fb6 <modf+0x4c>
    2f9c:	22 0f       	add	r18, r18
    2f9e:	33 1f       	adc	r19, r19
    2fa0:	44 1f       	adc	r20, r20
    2fa2:	b3 95       	inc	r27
    2fa4:	da f3       	brmi	.-10     	; 0x2f9c <modf+0x32>
    2fa6:	0d d0       	rcall	.+26     	; 0x2fc2 <modf+0x58>
    2fa8:	a1 cc       	rjmp	.-1726   	; 0x28ec <__subsf3>
    2faa:	61 30       	cpi	r22, 0x01	; 1
    2fac:	71 05       	cpc	r23, r1
    2fae:	a0 e8       	ldi	r26, 0x80	; 128
    2fb0:	8a 07       	cpc	r24, r26
    2fb2:	b9 46       	sbci	r27, 0x69	; 105
    2fb4:	30 f4       	brcc	.+12     	; 0x2fc2 <modf+0x58>
    2fb6:	9b 01       	movw	r18, r22
    2fb8:	ac 01       	movw	r20, r24
    2fba:	66 27       	eor	r22, r22
    2fbc:	77 27       	eor	r23, r23
    2fbe:	88 27       	eor	r24, r24
    2fc0:	90 78       	andi	r25, 0x80	; 128
    2fc2:	30 96       	adiw	r30, 0x00	; 0
    2fc4:	21 f0       	breq	.+8      	; 0x2fce <modf+0x64>
    2fc6:	20 83       	st	Z, r18
    2fc8:	31 83       	std	Z+1, r19	; 0x01
    2fca:	42 83       	std	Z+2, r20	; 0x02
    2fcc:	53 83       	std	Z+3, r21	; 0x03
    2fce:	08 95       	ret

00002fd0 <__fp_mpack>:
    2fd0:	9f 3f       	cpi	r25, 0xFF	; 255
    2fd2:	31 f0       	breq	.+12     	; 0x2fe0 <__fp_mpack_finite+0xc>

00002fd4 <__fp_mpack_finite>:
    2fd4:	91 50       	subi	r25, 0x01	; 1
    2fd6:	20 f4       	brcc	.+8      	; 0x2fe0 <__fp_mpack_finite+0xc>
    2fd8:	87 95       	ror	r24
    2fda:	77 95       	ror	r23
    2fdc:	67 95       	ror	r22
    2fde:	b7 95       	ror	r27
    2fe0:	88 0f       	add	r24, r24
    2fe2:	91 1d       	adc	r25, r1
    2fe4:	96 95       	lsr	r25
    2fe6:	87 95       	ror	r24
    2fe8:	97 f9       	bld	r25, 7
    2fea:	08 95       	ret

00002fec <__mulsi3>:
    2fec:	db 01       	movw	r26, r22
    2fee:	8f 93       	push	r24
    2ff0:	9f 93       	push	r25
    2ff2:	52 d0       	rcall	.+164    	; 0x3098 <__muluhisi3>
    2ff4:	bf 91       	pop	r27
    2ff6:	af 91       	pop	r26
    2ff8:	a2 9f       	mul	r26, r18
    2ffa:	80 0d       	add	r24, r0
    2ffc:	91 1d       	adc	r25, r1
    2ffe:	a3 9f       	mul	r26, r19
    3000:	90 0d       	add	r25, r0
    3002:	b2 9f       	mul	r27, r18
    3004:	90 0d       	add	r25, r0
    3006:	11 24       	eor	r1, r1
    3008:	08 95       	ret

0000300a <__divmodhi4>:
    300a:	97 fb       	bst	r25, 7
    300c:	07 2e       	mov	r0, r23
    300e:	16 f4       	brtc	.+4      	; 0x3014 <__divmodhi4+0xa>
    3010:	00 94       	com	r0
    3012:	06 d0       	rcall	.+12     	; 0x3020 <__divmodhi4_neg1>
    3014:	77 fd       	sbrc	r23, 7
    3016:	08 d0       	rcall	.+16     	; 0x3028 <__divmodhi4_neg2>
    3018:	49 d0       	rcall	.+146    	; 0x30ac <__udivmodhi4>
    301a:	07 fc       	sbrc	r0, 7
    301c:	05 d0       	rcall	.+10     	; 0x3028 <__divmodhi4_neg2>
    301e:	3e f4       	brtc	.+14     	; 0x302e <__divmodhi4_exit>

00003020 <__divmodhi4_neg1>:
    3020:	90 95       	com	r25
    3022:	81 95       	neg	r24
    3024:	9f 4f       	sbci	r25, 0xFF	; 255
    3026:	08 95       	ret

00003028 <__divmodhi4_neg2>:
    3028:	70 95       	com	r23
    302a:	61 95       	neg	r22
    302c:	7f 4f       	sbci	r23, 0xFF	; 255

0000302e <__divmodhi4_exit>:
    302e:	08 95       	ret

00003030 <__divmodsi4>:
    3030:	05 2e       	mov	r0, r21
    3032:	97 fb       	bst	r25, 7
    3034:	16 f4       	brtc	.+4      	; 0x303a <__divmodsi4+0xa>
    3036:	00 94       	com	r0
    3038:	0f d0       	rcall	.+30     	; 0x3058 <__negsi2>
    303a:	57 fd       	sbrc	r21, 7
    303c:	05 d0       	rcall	.+10     	; 0x3048 <__divmodsi4_neg2>
    303e:	4a d0       	rcall	.+148    	; 0x30d4 <__udivmodsi4>
    3040:	07 fc       	sbrc	r0, 7
    3042:	02 d0       	rcall	.+4      	; 0x3048 <__divmodsi4_neg2>
    3044:	46 f4       	brtc	.+16     	; 0x3056 <__divmodsi4_exit>
    3046:	08 c0       	rjmp	.+16     	; 0x3058 <__negsi2>

00003048 <__divmodsi4_neg2>:
    3048:	50 95       	com	r21
    304a:	40 95       	com	r20
    304c:	30 95       	com	r19
    304e:	21 95       	neg	r18
    3050:	3f 4f       	sbci	r19, 0xFF	; 255
    3052:	4f 4f       	sbci	r20, 0xFF	; 255
    3054:	5f 4f       	sbci	r21, 0xFF	; 255

00003056 <__divmodsi4_exit>:
    3056:	08 95       	ret

00003058 <__negsi2>:
    3058:	90 95       	com	r25
    305a:	80 95       	com	r24
    305c:	70 95       	com	r23
    305e:	61 95       	neg	r22
    3060:	7f 4f       	sbci	r23, 0xFF	; 255
    3062:	8f 4f       	sbci	r24, 0xFF	; 255
    3064:	9f 4f       	sbci	r25, 0xFF	; 255
    3066:	08 95       	ret

00003068 <__tablejump2__>:
    3068:	ee 0f       	add	r30, r30
    306a:	ff 1f       	adc	r31, r31
    306c:	00 24       	eor	r0, r0
    306e:	00 1c       	adc	r0, r0
    3070:	0b be       	out	0x3b, r0	; 59
    3072:	07 90       	elpm	r0, Z+
    3074:	f6 91       	elpm	r31, Z
    3076:	e0 2d       	mov	r30, r0
    3078:	09 94       	ijmp

0000307a <__umulhisi3>:
    307a:	a2 9f       	mul	r26, r18
    307c:	b0 01       	movw	r22, r0
    307e:	b3 9f       	mul	r27, r19
    3080:	c0 01       	movw	r24, r0
    3082:	a3 9f       	mul	r26, r19
    3084:	70 0d       	add	r23, r0
    3086:	81 1d       	adc	r24, r1
    3088:	11 24       	eor	r1, r1
    308a:	91 1d       	adc	r25, r1
    308c:	b2 9f       	mul	r27, r18
    308e:	70 0d       	add	r23, r0
    3090:	81 1d       	adc	r24, r1
    3092:	11 24       	eor	r1, r1
    3094:	91 1d       	adc	r25, r1
    3096:	08 95       	ret

00003098 <__muluhisi3>:
    3098:	f0 df       	rcall	.-32     	; 0x307a <__umulhisi3>
    309a:	a5 9f       	mul	r26, r21
    309c:	90 0d       	add	r25, r0
    309e:	b4 9f       	mul	r27, r20
    30a0:	90 0d       	add	r25, r0
    30a2:	a4 9f       	mul	r26, r20
    30a4:	80 0d       	add	r24, r0
    30a6:	91 1d       	adc	r25, r1
    30a8:	11 24       	eor	r1, r1
    30aa:	08 95       	ret

000030ac <__udivmodhi4>:
    30ac:	aa 1b       	sub	r26, r26
    30ae:	bb 1b       	sub	r27, r27
    30b0:	51 e1       	ldi	r21, 0x11	; 17
    30b2:	07 c0       	rjmp	.+14     	; 0x30c2 <__udivmodhi4_ep>

000030b4 <__udivmodhi4_loop>:
    30b4:	aa 1f       	adc	r26, r26
    30b6:	bb 1f       	adc	r27, r27
    30b8:	a6 17       	cp	r26, r22
    30ba:	b7 07       	cpc	r27, r23
    30bc:	10 f0       	brcs	.+4      	; 0x30c2 <__udivmodhi4_ep>
    30be:	a6 1b       	sub	r26, r22
    30c0:	b7 0b       	sbc	r27, r23

000030c2 <__udivmodhi4_ep>:
    30c2:	88 1f       	adc	r24, r24
    30c4:	99 1f       	adc	r25, r25
    30c6:	5a 95       	dec	r21
    30c8:	a9 f7       	brne	.-22     	; 0x30b4 <__udivmodhi4_loop>
    30ca:	80 95       	com	r24
    30cc:	90 95       	com	r25
    30ce:	bc 01       	movw	r22, r24
    30d0:	cd 01       	movw	r24, r26
    30d2:	08 95       	ret

000030d4 <__udivmodsi4>:
    30d4:	a1 e2       	ldi	r26, 0x21	; 33
    30d6:	1a 2e       	mov	r1, r26
    30d8:	aa 1b       	sub	r26, r26
    30da:	bb 1b       	sub	r27, r27
    30dc:	fd 01       	movw	r30, r26
    30de:	0d c0       	rjmp	.+26     	; 0x30fa <__udivmodsi4_ep>

000030e0 <__udivmodsi4_loop>:
    30e0:	aa 1f       	adc	r26, r26
    30e2:	bb 1f       	adc	r27, r27
    30e4:	ee 1f       	adc	r30, r30
    30e6:	ff 1f       	adc	r31, r31
    30e8:	a2 17       	cp	r26, r18
    30ea:	b3 07       	cpc	r27, r19
    30ec:	e4 07       	cpc	r30, r20
    30ee:	f5 07       	cpc	r31, r21
    30f0:	20 f0       	brcs	.+8      	; 0x30fa <__udivmodsi4_ep>
    30f2:	a2 1b       	sub	r26, r18
    30f4:	b3 0b       	sbc	r27, r19
    30f6:	e4 0b       	sbc	r30, r20
    30f8:	f5 0b       	sbc	r31, r21

000030fa <__udivmodsi4_ep>:
    30fa:	66 1f       	adc	r22, r22
    30fc:	77 1f       	adc	r23, r23
    30fe:	88 1f       	adc	r24, r24
    3100:	99 1f       	adc	r25, r25
    3102:	1a 94       	dec	r1
    3104:	69 f7       	brne	.-38     	; 0x30e0 <__udivmodsi4_loop>
    3106:	60 95       	com	r22
    3108:	70 95       	com	r23
    310a:	80 95       	com	r24
    310c:	90 95       	com	r25
    310e:	9b 01       	movw	r18, r22
    3110:	ac 01       	movw	r20, r24
    3112:	bd 01       	movw	r22, r26
    3114:	cf 01       	movw	r24, r30
    3116:	08 95       	ret

00003118 <eeprom_read_block>:
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22

0000311c <eeprom_read_blraw>:
    311c:	fc 01       	movw	r30, r24
    311e:	e1 99       	sbic	0x1c, 1	; 28
    3120:	fe cf       	rjmp	.-4      	; 0x311e <eeprom_read_blraw+0x2>
    3122:	06 c0       	rjmp	.+12     	; 0x3130 <eeprom_read_blraw+0x14>
    3124:	ff bb       	out	0x1f, r31	; 31
    3126:	ee bb       	out	0x1e, r30	; 30
    3128:	e0 9a       	sbi	0x1c, 0	; 28
    312a:	31 96       	adiw	r30, 0x01	; 1
    312c:	0d b2       	in	r0, 0x1d	; 29
    312e:	0d 92       	st	X+, r0
    3130:	41 50       	subi	r20, 0x01	; 1
    3132:	50 40       	sbci	r21, 0x00	; 0
    3134:	b8 f7       	brcc	.-18     	; 0x3124 <eeprom_read_blraw+0x8>
    3136:	08 95       	ret

00003138 <eeprom_read_byte>:
    3138:	e1 99       	sbic	0x1c, 1	; 28
    313a:	fe cf       	rjmp	.-4      	; 0x3138 <eeprom_read_byte>
    313c:	9f bb       	out	0x1f, r25	; 31
    313e:	8e bb       	out	0x1e, r24	; 30
    3140:	e0 9a       	sbi	0x1c, 0	; 28
    3142:	99 27       	eor	r25, r25
    3144:	8d b3       	in	r24, 0x1d	; 29
    3146:	08 95       	ret

00003148 <eeprom_read_word>:
    3148:	a8 e1       	ldi	r26, 0x18	; 24
    314a:	b0 e0       	ldi	r27, 0x00	; 0
    314c:	42 e0       	ldi	r20, 0x02	; 2
    314e:	50 e0       	ldi	r21, 0x00	; 0
    3150:	e5 cf       	rjmp	.-54     	; 0x311c <eeprom_read_blraw>

00003152 <eeprom_update_block>:
    3152:	dc 01       	movw	r26, r24
    3154:	a4 0f       	add	r26, r20
    3156:	b5 1f       	adc	r27, r21
    3158:	41 50       	subi	r20, 0x01	; 1
    315a:	50 40       	sbci	r21, 0x00	; 0
    315c:	40 f0       	brcs	.+16     	; 0x316e <eeprom_update_block+0x1c>
    315e:	cb 01       	movw	r24, r22
    3160:	84 0f       	add	r24, r20
    3162:	95 1f       	adc	r25, r21
    3164:	2e 91       	ld	r18, -X
    3166:	05 d0       	rcall	.+10     	; 0x3172 <eeprom_update_r18>
    3168:	41 50       	subi	r20, 0x01	; 1
    316a:	50 40       	sbci	r21, 0x00	; 0
    316c:	d8 f7       	brcc	.-10     	; 0x3164 <eeprom_update_block+0x12>
    316e:	08 95       	ret

00003170 <eeprom_update_byte>:
    3170:	26 2f       	mov	r18, r22

00003172 <eeprom_update_r18>:
    3172:	e1 99       	sbic	0x1c, 1	; 28
    3174:	fe cf       	rjmp	.-4      	; 0x3172 <eeprom_update_r18>
    3176:	9f bb       	out	0x1f, r25	; 31
    3178:	8e bb       	out	0x1e, r24	; 30
    317a:	e0 9a       	sbi	0x1c, 0	; 28
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	0d b2       	in	r0, 0x1d	; 29
    3180:	02 16       	cp	r0, r18
    3182:	31 f0       	breq	.+12     	; 0x3190 <eeprom_update_r18+0x1e>
    3184:	2d bb       	out	0x1d, r18	; 29
    3186:	0f b6       	in	r0, 0x3f	; 63
    3188:	f8 94       	cli
    318a:	e2 9a       	sbi	0x1c, 2	; 28
    318c:	e1 9a       	sbi	0x1c, 1	; 28
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	08 95       	ret

00003192 <eeprom_update_dword>:
    3192:	03 96       	adiw	r24, 0x03	; 3
    3194:	27 2f       	mov	r18, r23
    3196:	ed df       	rcall	.-38     	; 0x3172 <eeprom_update_r18>
    3198:	eb df       	rcall	.-42     	; 0x3170 <eeprom_update_byte>
    319a:	25 2f       	mov	r18, r21
    319c:	ea df       	rcall	.-44     	; 0x3172 <eeprom_update_r18>
    319e:	24 2f       	mov	r18, r20
    31a0:	e8 cf       	rjmp	.-48     	; 0x3172 <eeprom_update_r18>

000031a2 <eeprom_update_word>:
    31a2:	01 96       	adiw	r24, 0x01	; 1
    31a4:	27 2f       	mov	r18, r23
    31a6:	e5 df       	rcall	.-54     	; 0x3172 <eeprom_update_r18>
    31a8:	e3 cf       	rjmp	.-58     	; 0x3170 <eeprom_update_byte>

000031aa <eeprom_write_block>:
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	02 c0       	rjmp	.+4      	; 0x31b4 <eeprom_write_block+0xa>
    31b0:	2d 91       	ld	r18, X+
    31b2:	05 d0       	rcall	.+10     	; 0x31be <eeprom_write_r18>
    31b4:	41 50       	subi	r20, 0x01	; 1
    31b6:	50 40       	sbci	r21, 0x00	; 0
    31b8:	d8 f7       	brcc	.-10     	; 0x31b0 <eeprom_write_block+0x6>
    31ba:	08 95       	ret

000031bc <eeprom_write_byte>:
    31bc:	26 2f       	mov	r18, r22

000031be <eeprom_write_r18>:
    31be:	e1 99       	sbic	0x1c, 1	; 28
    31c0:	fe cf       	rjmp	.-4      	; 0x31be <eeprom_write_r18>
    31c2:	9f bb       	out	0x1f, r25	; 31
    31c4:	8e bb       	out	0x1e, r24	; 30
    31c6:	2d bb       	out	0x1d, r18	; 29
    31c8:	0f b6       	in	r0, 0x3f	; 63
    31ca:	f8 94       	cli
    31cc:	e2 9a       	sbi	0x1c, 2	; 28
    31ce:	e1 9a       	sbi	0x1c, 1	; 28
    31d0:	0f be       	out	0x3f, r0	; 63
    31d2:	01 96       	adiw	r24, 0x01	; 1
    31d4:	08 95       	ret

000031d6 <eeprom_write_dword>:
    31d6:	24 2f       	mov	r18, r20
    31d8:	f2 df       	rcall	.-28     	; 0x31be <eeprom_write_r18>
    31da:	25 2f       	mov	r18, r21
    31dc:	f0 df       	rcall	.-32     	; 0x31be <eeprom_write_r18>
    31de:	00 c0       	rjmp	.+0      	; 0x31e0 <eeprom_write_word>

000031e0 <eeprom_write_word>:
    31e0:	ed df       	rcall	.-38     	; 0x31bc <eeprom_write_byte>
    31e2:	27 2f       	mov	r18, r23
    31e4:	ec cf       	rjmp	.-40     	; 0x31be <eeprom_write_r18>

000031e6 <_exit>:
    31e6:	f8 94       	cli

000031e8 <__stop_program>:
    31e8:	ff cf       	rjmp	.-2      	; 0x31e8 <__stop_program>
