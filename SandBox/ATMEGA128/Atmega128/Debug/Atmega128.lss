
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00002fc8  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002fc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002f8  00800154  00800154  000030b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000030b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000030e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000658  00000000  00000000  0000311c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000073a7  00000000  00000000  00003774  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c9d  00000000  00000000  0000ab1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003f41  00000000  00000000  0000c7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001284  00000000  00000000  000106fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001539  00000000  00000000  00011980  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000064c7  00000000  00000000  00012eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005b8  00000000  00000000  00019380  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	60 c0       	rjmp	.+192    	; 0xc2 <__ctors_end>
       2:	00 00       	nop
       4:	7d c0       	rjmp	.+250    	; 0x100 <__bad_interrupt>
       6:	00 00       	nop
       8:	7b c0       	rjmp	.+246    	; 0x100 <__bad_interrupt>
       a:	00 00       	nop
       c:	79 c0       	rjmp	.+242    	; 0x100 <__bad_interrupt>
       e:	00 00       	nop
      10:	77 c0       	rjmp	.+238    	; 0x100 <__bad_interrupt>
      12:	00 00       	nop
      14:	75 c0       	rjmp	.+234    	; 0x100 <__bad_interrupt>
      16:	00 00       	nop
      18:	73 c0       	rjmp	.+230    	; 0x100 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	71 c0       	rjmp	.+226    	; 0x100 <__bad_interrupt>
      1e:	00 00       	nop
      20:	6f c0       	rjmp	.+222    	; 0x100 <__bad_interrupt>
      22:	00 00       	nop
      24:	6d c0       	rjmp	.+218    	; 0x100 <__bad_interrupt>
      26:	00 00       	nop
      28:	e7 c4       	rjmp	.+2510   	; 0x9f8 <__vector_10>
      2a:	00 00       	nop
      2c:	b3 c4       	rjmp	.+2406   	; 0x994 <__vector_11>
      2e:	00 00       	nop
      30:	bb c4       	rjmp	.+2422   	; 0x9a8 <__vector_12>
      32:	00 00       	nop
      34:	c3 c4       	rjmp	.+2438   	; 0x9bc <__vector_13>
      36:	00 00       	nop
      38:	d5 c4       	rjmp	.+2474   	; 0x9e4 <__vector_14>
      3a:	00 00       	nop
      3c:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <__vector_15>
      40:	9f c4       	rjmp	.+2366   	; 0x980 <__vector_16>
      42:	00 00       	nop
      44:	5d c0       	rjmp	.+186    	; 0x100 <__bad_interrupt>
      46:	00 00       	nop
      48:	13 c5       	rjmp	.+2598   	; 0xa70 <__vector_18>
      4a:	00 00       	nop
      4c:	47 c5       	rjmp	.+2702   	; 0xadc <__vector_19>
      4e:	00 00       	nop
      50:	57 c0       	rjmp	.+174    	; 0x100 <__bad_interrupt>
      52:	00 00       	nop
      54:	d3 c1       	rjmp	.+934    	; 0x3fc <__vector_21>
      56:	00 00       	nop
      58:	53 c0       	rjmp	.+166    	; 0x100 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	51 c0       	rjmp	.+162    	; 0x100 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b7 c4       	rjmp	.+2414   	; 0x9d0 <__vector_24>
      62:	00 00       	nop
      64:	d3 c4       	rjmp	.+2470   	; 0xa0c <__vector_25>
      66:	00 00       	nop
      68:	db c4       	rjmp	.+2486   	; 0xa20 <__vector_26>
      6a:	00 00       	nop
      6c:	e3 c4       	rjmp	.+2502   	; 0xa34 <__vector_27>
      6e:	00 00       	nop
      70:	eb c4       	rjmp	.+2518   	; 0xa48 <__vector_28>
      72:	00 00       	nop
      74:	f3 c4       	rjmp	.+2534   	; 0xa5c <__vector_29>
      76:	00 00       	nop
      78:	5a c5       	rjmp	.+2740   	; 0xb2e <__vector_30>
      7a:	00 00       	nop
      7c:	91 c5       	rjmp	.+2850   	; 0xba0 <__vector_31>
      7e:	00 00       	nop
      80:	3f c0       	rjmp	.+126    	; 0x100 <__bad_interrupt>
      82:	00 00       	nop
      84:	3d c0       	rjmp	.+122    	; 0x100 <__bad_interrupt>
      86:	00 00       	nop
      88:	3b c0       	rjmp	.+118    	; 0x100 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e1 03       	fmuls	r22, r17
      8e:	e5 03       	fmuls	r22, r21
      90:	e9 03       	fmulsu	r22, r17
      92:	ed 03       	fmulsu	r22, r21
      94:	f1 03       	fmuls	r23, r17
      96:	f8 03       	fmulsu	r23, r16
      98:	ff 03       	fmulsu	r23, r23
      9a:	06 04       	cpc	r0, r6
      9c:	0a 04       	cpc	r0, r10
      9e:	11 04       	cpc	r1, r1
      a0:	18 04       	cpc	r1, r8
      a2:	1f 04       	cpc	r1, r15
      a4:	23 04       	cpc	r2, r3
      a6:	2a 04       	cpc	r2, r10
      a8:	31 04       	cpc	r3, r1
      aa:	4d 04       	cpc	r4, r13
      ac:	51 04       	cpc	r5, r1
      ae:	55 04       	cpc	r5, r5
      b0:	59 04       	cpc	r5, r9
      b2:	5f 04       	cpc	r5, r15
      b4:	63 04       	cpc	r6, r3
      b6:	67 04       	cpc	r6, r7
      b8:	6b 04       	cpc	r6, r11
      ba:	74 04       	cpc	r7, r4
      bc:	78 04       	cpc	r7, r8
      be:	7c 04       	cpc	r7, r12
      c0:	85 04       	cpc	r8, r5

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d0 e1       	ldi	r29, 0x10	; 16
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	11 e0       	ldi	r17, 0x01	; 1
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	e8 ec       	ldi	r30, 0xC8	; 200
      d6:	ff e2       	ldi	r31, 0x2F	; 47
      d8:	00 e0       	ldi	r16, 0x00	; 0
      da:	0b bf       	out	0x3b, r16	; 59
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x14>
      de:	07 90       	elpm	r0, Z+
      e0:	0d 92       	st	X+, r0
      e2:	a4 35       	cpi	r26, 0x54	; 84
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0x10>

000000e8 <__do_clear_bss>:
      e8:	24 e0       	ldi	r18, 0x04	; 4
      ea:	a4 e5       	ldi	r26, 0x54	; 84
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	ac 34       	cpi	r26, 0x4C	; 76
      f4:	b2 07       	cpc	r27, r18
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>
      f8:	0e 94 08 11 	call	0x2210	; 0x2210 <main>
      fc:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <_exit>

00000100 <__bad_interrupt>:
     100:	7f cf       	rjmp	.-258    	; 0x0 <__vectors>

00000102 <HC595_shift_bit>:
	//
	return hc595;
}
void HC595_shift_bit(uint8_t bool)
{
	if (bool)
     102:	88 23       	and	r24, r24
     104:	89 f0       	breq	.+34     	; 0x128 <HC595_shift_bit+0x26>
		*hc595_PORT |= (1<<HC595_datapin); //Data bit HIGH
     106:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <hc595_PORT>
     10a:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <hc595_PORT+0x1>
     10e:	20 81       	ld	r18, Z
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	00 90 85 01 	lds	r0, 0x0185	; 0x800185 <HC595_datapin>
     118:	02 c0       	rjmp	.+4      	; 0x11e <HC595_shift_bit+0x1c>
     11a:	88 0f       	add	r24, r24
     11c:	99 1f       	adc	r25, r25
     11e:	0a 94       	dec	r0
     120:	e2 f7       	brpl	.-8      	; 0x11a <HC595_shift_bit+0x18>
     122:	82 2b       	or	r24, r18
     124:	80 83       	st	Z, r24
     126:	11 c0       	rjmp	.+34     	; 0x14a <HC595_shift_bit+0x48>
	else
		*hc595_PORT &= ~(1<<HC595_datapin); //Data bit LOW
     128:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <hc595_PORT>
     12c:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <hc595_PORT+0x1>
     130:	20 81       	ld	r18, Z
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	00 90 85 01 	lds	r0, 0x0185	; 0x800185 <HC595_datapin>
     13a:	02 c0       	rjmp	.+4      	; 0x140 <HC595_shift_bit+0x3e>
     13c:	88 0f       	add	r24, r24
     13e:	99 1f       	adc	r25, r25
     140:	0a 94       	dec	r0
     142:	e2 f7       	brpl	.-8      	; 0x13c <HC595_shift_bit+0x3a>
     144:	80 95       	com	r24
     146:	82 23       	and	r24, r18
     148:	80 83       	st	Z, r24
	*hc595_PORT |= (1<<HC595_clkpin); // Shift bit
     14a:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <hc595_PORT>
     14e:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <hc595_PORT+0x1>
     152:	40 81       	ld	r20, Z
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	9c 01       	movw	r18, r24
     15a:	00 90 87 01 	lds	r0, 0x0187	; 0x800187 <HC595_clkpin>
     15e:	02 c0       	rjmp	.+4      	; 0x164 <HC595_shift_bit+0x62>
     160:	22 0f       	add	r18, r18
     162:	33 1f       	adc	r19, r19
     164:	0a 94       	dec	r0
     166:	e2 f7       	brpl	.-8      	; 0x160 <HC595_shift_bit+0x5e>
     168:	24 2b       	or	r18, r20
     16a:	20 83       	st	Z, r18
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
     16c:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <hc595_PORT>
     170:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <hc595_PORT+0x1>
     174:	20 81       	ld	r18, Z
     176:	00 90 87 01 	lds	r0, 0x0187	; 0x800187 <HC595_clkpin>
     17a:	02 c0       	rjmp	.+4      	; 0x180 <HC595_shift_bit+0x7e>
     17c:	88 0f       	add	r24, r24
     17e:	99 1f       	adc	r25, r25
     180:	0a 94       	dec	r0
     182:	e2 f7       	brpl	.-8      	; 0x17c <HC595_shift_bit+0x7a>
     184:	80 95       	com	r24
     186:	82 23       	and	r24, r18
     188:	80 83       	st	Z, r24
     18a:	08 95       	ret

0000018c <HC595_shift_out>:
		HC595_shift_bit(byte & (1<<i));
	HC595_shift_out();
}
void HC595_shift_out(void)
{
	*hc595_PORT |= (1<<HC595_outpin); //Output enable
     18c:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <hc595_PORT>
     190:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <hc595_PORT+0x1>
     194:	40 81       	ld	r20, Z
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	9c 01       	movw	r18, r24
     19c:	00 90 86 01 	lds	r0, 0x0186	; 0x800186 <HC595_outpin>
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <HC595_shift_out+0x1a>
     1a2:	22 0f       	add	r18, r18
     1a4:	33 1f       	adc	r19, r19
     1a6:	0a 94       	dec	r0
     1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <HC595_shift_out+0x16>
     1aa:	24 2b       	or	r18, r20
     1ac:	20 83       	st	Z, r18
	*hc595_PORT &= ~(1<<HC595_outpin); //Output disable
     1ae:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <hc595_PORT>
     1b2:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <hc595_PORT+0x1>
     1b6:	20 81       	ld	r18, Z
     1b8:	00 90 86 01 	lds	r0, 0x0186	; 0x800186 <HC595_outpin>
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <HC595_shift_out+0x36>
     1be:	88 0f       	add	r24, r24
     1c0:	99 1f       	adc	r25, r25
     1c2:	0a 94       	dec	r0
     1c4:	e2 f7       	brpl	.-8      	; 0x1be <HC595_shift_out+0x32>
     1c6:	80 95       	com	r24
     1c8:	82 23       	and	r24, r18
     1ca:	80 83       	st	Z, r24
     1cc:	08 95       	ret

000001ce <HC595_shift_byte>:
		*hc595_PORT &= ~(1<<HC595_datapin); //Data bit LOW
	*hc595_PORT |= (1<<HC595_clkpin); // Shift bit
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
}
void HC595_shift_byte(uint8_t byte)
{
     1ce:	ff 92       	push	r15
     1d0:	0f 93       	push	r16
     1d2:	1f 93       	push	r17
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	f8 2e       	mov	r15, r24
     1da:	c0 e0       	ldi	r28, 0x00	; 0
     1dc:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for(i=0;i<8;i++)
		HC595_shift_bit(byte & (1<<i));
     1de:	01 e0       	ldi	r16, 0x01	; 1
     1e0:	10 e0       	ldi	r17, 0x00	; 0
     1e2:	c8 01       	movw	r24, r16
     1e4:	0c 2e       	mov	r0, r28
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <HC595_shift_byte+0x1e>
     1e8:	88 0f       	add	r24, r24
     1ea:	99 1f       	adc	r25, r25
     1ec:	0a 94       	dec	r0
     1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <HC595_shift_byte+0x1a>
     1f0:	8f 21       	and	r24, r15
     1f2:	87 df       	rcall	.-242    	; 0x102 <HC595_shift_bit>
     1f4:	21 96       	adiw	r28, 0x01	; 1
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
}
void HC595_shift_byte(uint8_t byte)
{
	uint8_t i;
	for(i=0;i<8;i++)
     1f6:	c8 30       	cpi	r28, 0x08	; 8
     1f8:	d1 05       	cpc	r29, r1
		HC595_shift_bit(byte & (1<<i));
	HC595_shift_out();
     1fa:	99 f7       	brne	.-26     	; 0x1e2 <HC595_shift_byte+0x14>
     1fc:	c7 df       	rcall	.-114    	; 0x18c <HC595_shift_out>
}
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	1f 91       	pop	r17
     204:	0f 91       	pop	r16
     206:	ff 90       	pop	r15
     208:	08 95       	ret

0000020a <HC595enable>:
void HC595_shift_bit(uint8_t bool);
void HC595_shift_byte(uint8_t byte);
void HC595_shift_out(void);
/***Procedure & Function***/
HC595 HC595enable(volatile uint8_t *ddr, volatile uint8_t *port, uint8_t datapin, uint8_t clkpin, uint8_t outpin)
{
     20a:	0f 93       	push	r16
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	00 d0       	rcall	.+0      	; 0x212 <HC595enable+0x8>
     212:	00 d0       	rcall	.+0      	; 0x214 <HC595enable+0xa>
     214:	00 d0       	rcall	.+0      	; 0x216 <HC595enable+0xc>
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
     21a:	5f b7       	in	r21, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     21c:	3f b7       	in	r19, 0x3f	; 63
     21e:	3f 77       	andi	r19, 0x7F	; 127
     220:	3f bf       	out	0x3f, r19	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	HC595 hc595;
	//import parametros
	hc595_DDR=ddr;
     222:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <hc595_DDR+0x1>
     226:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <hc595_DDR>
	hc595_PORT=port;
     22a:	70 93 84 01 	sts	0x0184, r23	; 0x800184 <hc595_PORT+0x1>
     22e:	60 93 83 01 	sts	0x0183, r22	; 0x800183 <hc595_PORT>
	HC595_datapin=datapin;
     232:	40 93 85 01 	sts	0x0185, r20	; 0x800185 <HC595_datapin>
	HC595_clkpin=clkpin;
     236:	20 93 87 01 	sts	0x0187, r18	; 0x800187 <HC595_clkpin>
	HC595_outpin=outpin;
     23a:	00 93 86 01 	sts	0x0186, r16	; 0x800186 <HC595_outpin>
	//inic variables
    *hc595_DDR |= (1<<datapin) | (1<<clkpin) | (1<<outpin);
     23e:	fc 01       	movw	r30, r24
     240:	30 81       	ld	r19, Z
     242:	61 e0       	ldi	r22, 0x01	; 1
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	db 01       	movw	r26, r22
     248:	02 c0       	rjmp	.+4      	; 0x24e <HC595enable+0x44>
     24a:	aa 0f       	add	r26, r26
     24c:	bb 1f       	adc	r27, r27
     24e:	2a 95       	dec	r18
     250:	e2 f7       	brpl	.-8      	; 0x24a <HC595enable+0x40>
     252:	fb 01       	movw	r30, r22
     254:	02 c0       	rjmp	.+4      	; 0x25a <HC595enable+0x50>
     256:	ee 0f       	add	r30, r30
     258:	ff 1f       	adc	r31, r31
     25a:	0a 95       	dec	r16
     25c:	e2 f7       	brpl	.-8      	; 0x256 <HC595enable+0x4c>
     25e:	ea 2b       	or	r30, r26
     260:	02 c0       	rjmp	.+4      	; 0x266 <HC595enable+0x5c>
     262:	66 0f       	add	r22, r22
     264:	77 1f       	adc	r23, r23
     266:	4a 95       	dec	r20
     268:	e2 f7       	brpl	.-8      	; 0x262 <HC595enable+0x58>
     26a:	6e 2b       	or	r22, r30
     26c:	23 2f       	mov	r18, r19
     26e:	26 2b       	or	r18, r22
     270:	fc 01       	movw	r30, r24
     272:	20 83       	st	Z, r18
	*hc595_PORT &= ~((1<<datapin) | (1<<clkpin) | (1<<outpin));
     274:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <hc595_PORT>
     278:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <hc595_PORT+0x1>
     27c:	80 81       	ld	r24, Z
     27e:	60 95       	com	r22
     280:	68 23       	and	r22, r24
     282:	60 83       	st	Z, r22
	//Direccionar apontadores para PROTOTIPOS
	hc595.bit=HC595_shift_bit;
	hc595.byte=HC595_shift_byte;
	hc595.out=HC595_shift_out;
	SREG=tSREG;
     284:	5f bf       	out	0x3f, r21	; 63
	//
	return hc595;
     286:	21 e8       	ldi	r18, 0x81	; 129
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	3a 83       	std	Y+2, r19	; 0x02
     28c:	29 83       	std	Y+1, r18	; 0x01
     28e:	47 ee       	ldi	r20, 0xE7	; 231
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	5c 83       	std	Y+4, r21	; 0x04
     294:	4b 83       	std	Y+3, r20	; 0x03
     296:	66 ec       	ldi	r22, 0xC6	; 198
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	7e 83       	std	Y+6, r23	; 0x06
     29c:	6d 83       	std	Y+5, r22	; 0x05
     29e:	3a 81       	ldd	r19, Y+2	; 0x02
     2a0:	5c 81       	ldd	r21, Y+4	; 0x04
     2a2:	7e 81       	ldd	r23, Y+6	; 0x06
}
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	26 96       	adiw	r28, 0x06	; 6
     2aa:	0f b6       	in	r0, 0x3f	; 63
     2ac:	f8 94       	cli
     2ae:	de bf       	out	0x3e, r29	; 62
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	cd bf       	out	0x3d, r28	; 61
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	0f 91       	pop	r16
     2ba:	08 95       	ret

000002bc <ANALOG_read>:
Returns selected Channel ADC_VALUE
***/
{
	uint8_t ADSC_FLAG;
	ADSC_FLAG=(1<<ADSC);
	if( !(ADC_CONTROL & ADSC_FLAG) ){
     2bc:	36 9b       	sbis	0x06, 6	; 6
		//ADC_SELECT
		/***/
		ADC_CONTROL|=(1<<ADSC);
     2be:	36 9a       	sbi	0x06, 6	; 6
	}	
	return ADC_VALUE[selection];
     2c0:	fc 01       	movw	r30, r24
     2c2:	ee 0f       	add	r30, r30
     2c4:	ff 1f       	adc	r31, r31
     2c6:	e3 59       	subi	r30, 0x93	; 147
     2c8:	fe 4f       	sbci	r31, 0xFE	; 254
     2ca:	80 81       	ld	r24, Z
     2cc:	91 81       	ldd	r25, Z+1	; 0x01
}
     2ce:	08 95       	ret

000002d0 <ANALOGenable>:
ANALOG ANALOGenable( uint8_t Vreff, uint8_t Divfactor, int n_channel, ... )
/***
Interrupt running mode setup
setup, and list of channels to be probed
***/
{
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	cd b7       	in	r28, 0x3d	; 61
     2da:	de b7       	in	r29, 0x3e	; 62
     2dc:	9f 81       	ldd	r25, Y+7	; 0x07
     2de:	68 85       	ldd	r22, Y+8	; 0x08
     2e0:	49 85       	ldd	r20, Y+9	; 0x09
     2e2:	5a 85       	ldd	r21, Y+10	; 0x0a
	/***LOCAL VARIABLES***/
	uint8_t tSREG;
	va_list list;
	int i;
	//inic variables
	tSREG=STATUS_REGISTER;
     2e4:	1f b7       	in	r17, 0x3f	; 63
	STATUS_REGISTER&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     2e6:	8f b7       	in	r24, 0x3f	; 63
     2e8:	8f 77       	andi	r24, 0x7F	; 127
     2ea:	8f bf       	out	0x3f, r24	; 63
	/***GLOBAL VARIABLES INICIALIZE***/
	ADC_N_CHANNEL=n_channel;
     2ec:	50 93 5c 01 	sts	0x015C, r21	; 0x80015c <ADC_N_CHANNEL+0x1>
     2f0:	40 93 5b 01 	sts	0x015B, r20	; 0x80015b <ADC_N_CHANNEL>
	ADC_SELECTOR=0;
     2f4:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <ADC_SELECTOR+0x1>
     2f8:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <ADC_SELECTOR>
	adc_n_sample=0;
     2fc:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__data_end>
	//import parametros
	//inic parameters
	//Direccionar apontadores para PROTOTIPOS
	analog.read=ANALOG_read;
		/******/
		ADC_SELECT&=~(3<<REFS0);
     300:	87 b1       	in	r24, 0x07	; 7
     302:	8f 73       	andi	r24, 0x3F	; 63
     304:	87 b9       	out	0x07, r24	; 7
		switch( Vreff ){
     306:	91 30       	cpi	r25, 0x01	; 1
     308:	19 f0       	breq	.+6      	; 0x310 <ANALOGenable+0x40>
     30a:	93 30       	cpi	r25, 0x03	; 3
     30c:	21 f0       	breq	.+8      	; 0x316 <ANALOGenable+0x46>
     30e:	08 c0       	rjmp	.+16     	; 0x320 <ANALOGenable+0x50>
			case 0:
				analog.VREFF=0;
				break;
			case 1:
				ADC_SELECT|=(1<<REFS0);
     310:	3e 9a       	sbi	0x07, 6	; 7
				analog.VREFF=1;
     312:	01 e0       	ldi	r16, 0x01	; 1
				break;
     314:	06 c0       	rjmp	.+12     	; 0x322 <ANALOGenable+0x52>
			case 3:
				ADC_SELECT|=(3<<REFS0);
     316:	87 b1       	in	r24, 0x07	; 7
     318:	80 6c       	ori	r24, 0xC0	; 192
     31a:	87 b9       	out	0x07, r24	; 7
				analog.VREFF=3;
     31c:	03 e0       	ldi	r16, 0x03	; 3
				break;
     31e:	01 c0       	rjmp	.+2      	; 0x322 <ANALOGenable+0x52>
	analog.read=ANALOG_read;
		/******/
		ADC_SELECT&=~(3<<REFS0);
		switch( Vreff ){
			case 0:
				analog.VREFF=0;
     320:	00 e0       	ldi	r16, 0x00	; 0
			default:
				analog.VREFF=0;
				break;
		}
		//
		ADC_SELECT&=~(1<<ADLAR);
     322:	3d 98       	cbi	0x07, 5	; 7
		/******/
		va_start(list, n_channel);
		for(i=0;i<n_channel;i++){
     324:	14 16       	cp	r1, r20
     326:	15 06       	cpc	r1, r21
     328:	8c f4       	brge	.+34     	; 0x34c <ANALOGenable+0x7c>
     32a:	de 01       	movw	r26, r28
     32c:	1b 96       	adiw	r26, 0x0b	; 11
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
     332:	2d 91       	ld	r18, X+
     334:	3d 91       	ld	r19, X+
     336:	fc 01       	movw	r30, r24
     338:	ee 0f       	add	r30, r30
     33a:	ff 1f       	adc	r31, r31
     33c:	e3 5a       	subi	r30, 0xA3	; 163
     33e:	fe 4f       	sbci	r31, 0xFE	; 254
     340:	31 83       	std	Z+1, r19	; 0x01
     342:	20 83       	st	Z, r18
		}
		//
		ADC_SELECT&=~(1<<ADLAR);
		/******/
		va_start(list, n_channel);
		for(i=0;i<n_channel;i++){
     344:	01 96       	adiw	r24, 0x01	; 1
     346:	48 17       	cp	r20, r24
     348:	59 07       	cpc	r21, r25
     34a:	99 f7       	brne	.-26     	; 0x332 <ANALOGenable+0x62>
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
		}
		va_end(list);
		ADC_SELECT&=~MUX_MASK;
     34c:	87 b1       	in	r24, 0x07	; 7
     34e:	80 7e       	andi	r24, 0xE0	; 224
     350:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT|=(MUX_MASK & ADC_CHANNEL_GAIN[ADC_SELECTOR]);
     352:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <ADC_SELECTOR>
     356:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <ADC_SELECTOR+0x1>
     35a:	ee 0f       	add	r30, r30
     35c:	ff 1f       	adc	r31, r31
     35e:	e3 5a       	subi	r30, 0xA3	; 163
     360:	fe 4f       	sbci	r31, 0xFE	; 254
     362:	80 81       	ld	r24, Z
     364:	91 81       	ldd	r25, Z+1	; 0x01
     366:	27 b1       	in	r18, 0x07	; 7
     368:	8f 71       	andi	r24, 0x1F	; 31
     36a:	99 27       	eor	r25, r25
     36c:	82 2b       	or	r24, r18
     36e:	87 b9       	out	0x07, r24	; 7
		/******/
		ADC_CONTROL|=(1<<ADEN);
     370:	37 9a       	sbi	0x06, 7	; 6
		ADC_CONTROL|=(1<<ADSC);
     372:	36 9a       	sbi	0x06, 6	; 6
		ADC_CONTROL&=~(1<<ADFR);
     374:	35 98       	cbi	0x06, 5	; 6
		ADC_CONTROL|=(1<<ADIE);
     376:	33 9a       	sbi	0x06, 3	; 6
		/******/
		ADC_CONTROL&=~(7<<ADPS0);
     378:	86 b1       	in	r24, 0x06	; 6
     37a:	88 7f       	andi	r24, 0xF8	; 248
     37c:	86 b9       	out	0x06, r24	; 6
		switch( Divfactor ){
     37e:	60 31       	cpi	r22, 0x10	; 16
     380:	d1 f0       	breq	.+52     	; 0x3b6 <ANALOGenable+0xe6>
     382:	38 f4       	brcc	.+14     	; 0x392 <ANALOGenable+0xc2>
     384:	64 30       	cpi	r22, 0x04	; 4
     386:	79 f0       	breq	.+30     	; 0x3a6 <ANALOGenable+0xd6>
     388:	68 30       	cpi	r22, 0x08	; 8
     38a:	81 f0       	breq	.+32     	; 0x3ac <ANALOGenable+0xdc>
     38c:	62 30       	cpi	r22, 0x02	; 2
     38e:	29 f5       	brne	.+74     	; 0x3da <ANALOGenable+0x10a>
     390:	07 c0       	rjmp	.+14     	; 0x3a0 <ANALOGenable+0xd0>
     392:	60 34       	cpi	r22, 0x40	; 64
     394:	c1 f0       	breq	.+48     	; 0x3c6 <ANALOGenable+0xf6>
     396:	60 38       	cpi	r22, 0x80	; 128
     398:	d9 f0       	breq	.+54     	; 0x3d0 <ANALOGenable+0x100>
     39a:	60 32       	cpi	r22, 0x20	; 32
     39c:	f1 f4       	brne	.+60     	; 0x3da <ANALOGenable+0x10a>
     39e:	0e c0       	rjmp	.+28     	; 0x3bc <ANALOGenable+0xec>
			case 2://1
				ADC_CONTROL|=(1<<ADPS0);
     3a0:	30 9a       	sbi	0x06, 0	; 6
				analog.DIVISION_FACTOR=2;
     3a2:	22 e0       	ldi	r18, 0x02	; 2
				break;
     3a4:	1e c0       	rjmp	.+60     	; 0x3e2 <ANALOGenable+0x112>
			case 4://2
				ADC_CONTROL|=(1<<ADPS1);
     3a6:	31 9a       	sbi	0x06, 1	; 6
				analog.DIVISION_FACTOR=4;
     3a8:	24 e0       	ldi	r18, 0x04	; 4
				break;
     3aa:	1b c0       	rjmp	.+54     	; 0x3e2 <ANALOGenable+0x112>
			case 8://3
				ADC_CONTROL|=(3<<ADPS0);
     3ac:	86 b1       	in	r24, 0x06	; 6
     3ae:	83 60       	ori	r24, 0x03	; 3
     3b0:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=8;
     3b2:	28 e0       	ldi	r18, 0x08	; 8
				break;
     3b4:	16 c0       	rjmp	.+44     	; 0x3e2 <ANALOGenable+0x112>
			case 16://4
				ADC_CONTROL|=(1<<ADPS2);
     3b6:	32 9a       	sbi	0x06, 2	; 6
				analog.DIVISION_FACTOR=16;
     3b8:	20 e1       	ldi	r18, 0x10	; 16
				break;
     3ba:	13 c0       	rjmp	.+38     	; 0x3e2 <ANALOGenable+0x112>
			case 32://5
				ADC_CONTROL|=(5<<ADPS0);
     3bc:	86 b1       	in	r24, 0x06	; 6
     3be:	85 60       	ori	r24, 0x05	; 5
     3c0:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=32;
     3c2:	20 e2       	ldi	r18, 0x20	; 32
				break;
     3c4:	0e c0       	rjmp	.+28     	; 0x3e2 <ANALOGenable+0x112>
			case 64://6
				ADC_CONTROL|=(6<<ADPS0);
     3c6:	86 b1       	in	r24, 0x06	; 6
     3c8:	86 60       	ori	r24, 0x06	; 6
     3ca:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=64;
     3cc:	20 e4       	ldi	r18, 0x40	; 64
				break;
     3ce:	09 c0       	rjmp	.+18     	; 0x3e2 <ANALOGenable+0x112>
			case 128://7
				ADC_CONTROL|=(7<<ADPS0);
     3d0:	86 b1       	in	r24, 0x06	; 6
     3d2:	87 60       	ori	r24, 0x07	; 7
     3d4:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=128;
     3d6:	20 e8       	ldi	r18, 0x80	; 128
				break;
     3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <ANALOGenable+0x112>
			default:
				ADC_CONTROL|=(7<<ADPS0);
     3da:	86 b1       	in	r24, 0x06	; 6
     3dc:	87 60       	ori	r24, 0x07	; 7
     3de:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=128;
     3e0:	20 e8       	ldi	r18, 0x80	; 128
				break;
		}
	
	STATUS_REGISTER=tSREG;
     3e2:	1f bf       	out	0x3f, r17	; 63
	STATUS_REGISTER|=(1<<GLOBAL_INTERRUPT_ENABLE);
     3e4:	8f b7       	in	r24, 0x3f	; 63
     3e6:	80 68       	ori	r24, 0x80	; 128
     3e8:	8f bf       	out	0x3f, r24	; 63
	/******/
	return analog;
     3ea:	60 2f       	mov	r22, r16
     3ec:	72 2f       	mov	r23, r18
     3ee:	8e e5       	ldi	r24, 0x5E	; 94
     3f0:	91 e0       	ldi	r25, 0x01	; 1
}
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	1f 91       	pop	r17
     3f8:	0f 91       	pop	r16
     3fa:	08 95       	ret

000003fc <__vector_21>:
ISR(ANALOG_INTERRUPT)
/*************************************************************************
Function: ANALOG interrupt
Purpose:  Read Analog Input
**************************************************************************/
{
     3fc:	1f 92       	push	r1
     3fe:	0f 92       	push	r0
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	0f 92       	push	r0
     404:	11 24       	eor	r1, r1
     406:	0b b6       	in	r0, 0x3b	; 59
     408:	0f 92       	push	r0
     40a:	2f 93       	push	r18
     40c:	3f 93       	push	r19
     40e:	4f 93       	push	r20
     410:	5f 93       	push	r21
     412:	8f 93       	push	r24
     414:	9f 93       	push	r25
     416:	ef 93       	push	r30
     418:	ff 93       	push	r31
	uint8_t Sreg;
	Sreg=STATUS_REGISTER;
     41a:	2f b7       	in	r18, 0x3f	; 63
	STATUS_REGISTER&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     41c:	8f b7       	in	r24, 0x3f	; 63
     41e:	8f 77       	andi	r24, 0x7F	; 127
     420:	8f bf       	out	0x3f, r24	; 63
	adc_tmp=ADCL;
     422:	84 b1       	in	r24, 0x04	; 4
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <adc_tmp+0x1>
     42a:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <adc_tmp>
	adc_tmp|=(ADCH<<8);
     42e:	35 b1       	in	r19, 0x05	; 5
     430:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <adc_tmp>
     434:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <adc_tmp+0x1>
     438:	93 2b       	or	r25, r19
     43a:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <adc_tmp+0x1>
     43e:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <adc_tmp>
	if(adc_n_sample < (1<<ADC_NUMBER_SAMPLE)){
     442:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
     446:	84 30       	cpi	r24, 0x04	; 4
     448:	a0 f4       	brcc	.+40     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
		adc_n_sample++;
     44a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
     44e:	8f 5f       	subi	r24, 0xFF	; 255
     450:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end>
		adc_sample+=adc_tmp;
     454:	40 91 55 01 	lds	r20, 0x0155	; 0x800155 <adc_tmp>
     458:	50 91 56 01 	lds	r21, 0x0156	; 0x800156 <adc_tmp+0x1>
     45c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <adc_sample>
     460:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <adc_sample+0x1>
     464:	84 0f       	add	r24, r20
     466:	95 1f       	adc	r25, r21
     468:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <adc_sample+0x1>
     46c:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <adc_sample>
     470:	43 c0       	rjmp	.+134    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
	}else{
		ADC_VALUE[ADC_SELECTOR]=adc_sample>>ADC_NUMBER_SAMPLE;
     472:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <ADC_SELECTOR>
     476:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <ADC_SELECTOR+0x1>
     47a:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <adc_sample>
     47e:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <adc_sample+0x1>
     482:	95 95       	asr	r25
     484:	87 95       	ror	r24
     486:	95 95       	asr	r25
     488:	87 95       	ror	r24
     48a:	ee 0f       	add	r30, r30
     48c:	ff 1f       	adc	r31, r31
     48e:	e3 59       	subi	r30, 0x93	; 147
     490:	fe 4f       	sbci	r31, 0xFE	; 254
     492:	91 83       	std	Z+1, r25	; 0x01
     494:	80 83       	st	Z, r24
		adc_n_sample=adc_sample=0;
     496:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <adc_sample+0x1>
     49a:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <adc_sample>
     49e:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__data_end>
		/******/
		if(ADC_SELECTOR < ADC_N_CHANNEL)
     4a2:	40 91 59 01 	lds	r20, 0x0159	; 0x800159 <ADC_SELECTOR>
     4a6:	50 91 5a 01 	lds	r21, 0x015A	; 0x80015a <ADC_SELECTOR+0x1>
     4aa:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <ADC_N_CHANNEL>
     4ae:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <ADC_N_CHANNEL+0x1>
     4b2:	48 17       	cp	r20, r24
     4b4:	59 07       	cpc	r21, r25
     4b6:	54 f4       	brge	.+20     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
			ADC_SELECTOR++;
     4b8:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <ADC_SELECTOR>
     4bc:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <ADC_SELECTOR+0x1>
     4c0:	01 96       	adiw	r24, 0x01	; 1
     4c2:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <ADC_SELECTOR+0x1>
     4c6:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <ADC_SELECTOR>
     4ca:	04 c0       	rjmp	.+8      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
		else
			ADC_SELECTOR=0;
     4cc:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <ADC_SELECTOR+0x1>
     4d0:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <ADC_SELECTOR>
		ADC_SELECT &= ~MUX_MASK;
     4d4:	87 b1       	in	r24, 0x07	; 7
     4d6:	80 7e       	andi	r24, 0xE0	; 224
     4d8:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
     4da:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <ADC_SELECTOR>
     4de:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <ADC_SELECTOR+0x1>
     4e2:	ee 0f       	add	r30, r30
     4e4:	ff 1f       	adc	r31, r31
     4e6:	e3 5a       	subi	r30, 0xA3	; 163
     4e8:	fe 4f       	sbci	r31, 0xFE	; 254
     4ea:	80 81       	ld	r24, Z
     4ec:	91 81       	ldd	r25, Z+1	; 0x01
     4ee:	37 b1       	in	r19, 0x07	; 7
     4f0:	8f 71       	andi	r24, 0x1F	; 31
     4f2:	99 27       	eor	r25, r25
     4f4:	83 2b       	or	r24, r19
     4f6:	87 b9       	out	0x07, r24	; 7
	}
	STATUS_REGISTER=Sreg;
     4f8:	2f bf       	out	0x3f, r18	; 63
}
     4fa:	ff 91       	pop	r31
     4fc:	ef 91       	pop	r30
     4fe:	9f 91       	pop	r25
     500:	8f 91       	pop	r24
     502:	5f 91       	pop	r21
     504:	4f 91       	pop	r20
     506:	3f 91       	pop	r19
     508:	2f 91       	pop	r18
     50a:	0f 90       	pop	r0
     50c:	0b be       	out	0x3b, r0	; 59
     50e:	0f 90       	pop	r0
     510:	0f be       	out	0x3f, r0	; 63
     512:	0f 90       	pop	r0
     514:	1f 90       	pop	r1
     516:	18 95       	reti

00000518 <TIMER_COUNTER0_start>:
	timer3.compareB=TIMER_COUNTER3_compareB;
	timer3.compareC=TIMER_COUNTER3_compareC;
	timer3.start=TIMER_COUNTER3_start;
	timer3.stop=TIMER_COUNTER3_stop;
	return timer3;
}
     518:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <timer0_state>
     51c:	21 11       	cpse	r18, r1
     51e:	40 c0       	rjmp	.+128    	; 0x5a0 <TIMER_COUNTER0_start+0x88>
     520:	2f ef       	ldi	r18, 0xFF	; 255
     522:	21 bf       	out	0x31, r18	; 49
     524:	23 b7       	in	r18, 0x33	; 51
     526:	28 7f       	andi	r18, 0xF8	; 248
     528:	23 bf       	out	0x33, r18	; 51
     52a:	80 34       	cpi	r24, 0x40	; 64
     52c:	91 05       	cpc	r25, r1
     52e:	11 f1       	breq	.+68     	; 0x574 <TIMER_COUNTER0_start+0x5c>
     530:	48 f4       	brcc	.+18     	; 0x544 <TIMER_COUNTER0_start+0x2c>
     532:	88 30       	cpi	r24, 0x08	; 8
     534:	91 05       	cpc	r25, r1
     536:	b1 f0       	breq	.+44     	; 0x564 <TIMER_COUNTER0_start+0x4c>
     538:	80 32       	cpi	r24, 0x20	; 32
     53a:	91 05       	cpc	r25, r1
     53c:	b9 f0       	breq	.+46     	; 0x56c <TIMER_COUNTER0_start+0x54>
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	49 f5       	brne	.+82     	; 0x594 <TIMER_COUNTER0_start+0x7c>
     542:	0c c0       	rjmp	.+24     	; 0x55c <TIMER_COUNTER0_start+0x44>
     544:	81 15       	cp	r24, r1
     546:	21 e0       	ldi	r18, 0x01	; 1
     548:	92 07       	cpc	r25, r18
     54a:	e1 f0       	breq	.+56     	; 0x584 <TIMER_COUNTER0_start+0x6c>
     54c:	81 15       	cp	r24, r1
     54e:	24 e0       	ldi	r18, 0x04	; 4
     550:	92 07       	cpc	r25, r18
     552:	e1 f0       	breq	.+56     	; 0x58c <TIMER_COUNTER0_start+0x74>
     554:	80 38       	cpi	r24, 0x80	; 128
     556:	91 05       	cpc	r25, r1
     558:	e9 f4       	brne	.+58     	; 0x594 <TIMER_COUNTER0_start+0x7c>
     55a:	10 c0       	rjmp	.+32     	; 0x57c <TIMER_COUNTER0_start+0x64>
     55c:	83 b7       	in	r24, 0x33	; 51
     55e:	81 60       	ori	r24, 0x01	; 1
     560:	83 bf       	out	0x33, r24	; 51
     562:	1b c0       	rjmp	.+54     	; 0x59a <TIMER_COUNTER0_start+0x82>
     564:	83 b7       	in	r24, 0x33	; 51
     566:	82 60       	ori	r24, 0x02	; 2
     568:	83 bf       	out	0x33, r24	; 51
     56a:	17 c0       	rjmp	.+46     	; 0x59a <TIMER_COUNTER0_start+0x82>
     56c:	83 b7       	in	r24, 0x33	; 51
     56e:	83 60       	ori	r24, 0x03	; 3
     570:	83 bf       	out	0x33, r24	; 51
     572:	13 c0       	rjmp	.+38     	; 0x59a <TIMER_COUNTER0_start+0x82>
     574:	83 b7       	in	r24, 0x33	; 51
     576:	84 60       	ori	r24, 0x04	; 4
     578:	83 bf       	out	0x33, r24	; 51
     57a:	0f c0       	rjmp	.+30     	; 0x59a <TIMER_COUNTER0_start+0x82>
     57c:	83 b7       	in	r24, 0x33	; 51
     57e:	85 60       	ori	r24, 0x05	; 5
     580:	83 bf       	out	0x33, r24	; 51
     582:	0b c0       	rjmp	.+22     	; 0x59a <TIMER_COUNTER0_start+0x82>
     584:	83 b7       	in	r24, 0x33	; 51
     586:	86 60       	ori	r24, 0x06	; 6
     588:	83 bf       	out	0x33, r24	; 51
     58a:	07 c0       	rjmp	.+14     	; 0x59a <TIMER_COUNTER0_start+0x82>
     58c:	83 b7       	in	r24, 0x33	; 51
     58e:	87 60       	ori	r24, 0x07	; 7
     590:	83 bf       	out	0x33, r24	; 51
     592:	03 c0       	rjmp	.+6      	; 0x59a <TIMER_COUNTER0_start+0x82>
     594:	83 b7       	in	r24, 0x33	; 51
     596:	87 60       	ori	r24, 0x07	; 7
     598:	83 bf       	out	0x33, r24	; 51
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <timer0_state>
     5a0:	08 95       	ret

000005a2 <TIMER_COUNTER0_compoutmode>:
     5a2:	93 b7       	in	r25, 0x33	; 51
     5a4:	9f 7c       	andi	r25, 0xCF	; 207
     5a6:	93 bf       	out	0x33, r25	; 51
     5a8:	82 30       	cpi	r24, 0x02	; 2
     5aa:	41 f0       	breq	.+16     	; 0x5bc <TIMER_COUNTER0_compoutmode+0x1a>
     5ac:	83 30       	cpi	r24, 0x03	; 3
     5ae:	51 f0       	breq	.+20     	; 0x5c4 <TIMER_COUNTER0_compoutmode+0x22>
     5b0:	81 30       	cpi	r24, 0x01	; 1
     5b2:	59 f4       	brne	.+22     	; 0x5ca <TIMER_COUNTER0_compoutmode+0x28>
     5b4:	83 b7       	in	r24, 0x33	; 51
     5b6:	80 61       	ori	r24, 0x10	; 16
     5b8:	83 bf       	out	0x33, r24	; 51
     5ba:	08 95       	ret
     5bc:	83 b7       	in	r24, 0x33	; 51
     5be:	80 62       	ori	r24, 0x20	; 32
     5c0:	83 bf       	out	0x33, r24	; 51
     5c2:	08 95       	ret
     5c4:	83 b7       	in	r24, 0x33	; 51
     5c6:	80 63       	ori	r24, 0x30	; 48
     5c8:	83 bf       	out	0x33, r24	; 51
     5ca:	08 95       	ret

000005cc <TIMER_COUNTER0_compare>:
     5cc:	81 bf       	out	0x31, r24	; 49
     5ce:	08 95       	ret

000005d0 <TIMER_COUNTER0_stop>:
     5d0:	83 b7       	in	r24, 0x33	; 51
     5d2:	88 7f       	andi	r24, 0xF8	; 248
     5d4:	83 bf       	out	0x33, r24	; 51
     5d6:	12 be       	out	0x32, r1	; 50
     5d8:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <timer0_state>
     5dc:	08 95       	ret

000005de <TIMER_COUNTER1_start>:
     5de:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <timer1_state>
     5e2:	21 11       	cpse	r18, r1
     5e4:	42 c0       	rjmp	.+132    	; 0x66a <TIMER_COUNTER1_start+0x8c>
     5e6:	2f ef       	ldi	r18, 0xFF	; 255
     5e8:	3f ef       	ldi	r19, 0xFF	; 255
     5ea:	3b bd       	out	0x2b, r19	; 43
     5ec:	2a bd       	out	0x2a, r18	; 42
     5ee:	2e b5       	in	r18, 0x2e	; 46
     5f0:	28 7f       	andi	r18, 0xF8	; 248
     5f2:	2e bd       	out	0x2e, r18	; 46
     5f4:	88 30       	cpi	r24, 0x08	; 8
     5f6:	91 05       	cpc	r25, r1
     5f8:	d1 f0       	breq	.+52     	; 0x62e <TIMER_COUNTER1_start+0x50>
     5fa:	48 f4       	brcc	.+18     	; 0x60e <TIMER_COUNTER1_start+0x30>
     5fc:	83 30       	cpi	r24, 0x03	; 3
     5fe:	91 05       	cpc	r25, r1
     600:	31 f1       	breq	.+76     	; 0x64e <TIMER_COUNTER1_start+0x70>
     602:	85 30       	cpi	r24, 0x05	; 5
     604:	91 05       	cpc	r25, r1
     606:	39 f1       	breq	.+78     	; 0x656 <TIMER_COUNTER1_start+0x78>
     608:	01 97       	sbiw	r24, 0x01	; 1
     60a:	49 f5       	brne	.+82     	; 0x65e <TIMER_COUNTER1_start+0x80>
     60c:	0c c0       	rjmp	.+24     	; 0x626 <TIMER_COUNTER1_start+0x48>
     60e:	81 15       	cp	r24, r1
     610:	21 e0       	ldi	r18, 0x01	; 1
     612:	92 07       	cpc	r25, r18
     614:	a1 f0       	breq	.+40     	; 0x63e <TIMER_COUNTER1_start+0x60>
     616:	81 15       	cp	r24, r1
     618:	24 e0       	ldi	r18, 0x04	; 4
     61a:	92 07       	cpc	r25, r18
     61c:	a1 f0       	breq	.+40     	; 0x646 <TIMER_COUNTER1_start+0x68>
     61e:	80 34       	cpi	r24, 0x40	; 64
     620:	91 05       	cpc	r25, r1
     622:	e9 f4       	brne	.+58     	; 0x65e <TIMER_COUNTER1_start+0x80>
     624:	08 c0       	rjmp	.+16     	; 0x636 <TIMER_COUNTER1_start+0x58>
     626:	8e b5       	in	r24, 0x2e	; 46
     628:	81 60       	ori	r24, 0x01	; 1
     62a:	8e bd       	out	0x2e, r24	; 46
     62c:	1b c0       	rjmp	.+54     	; 0x664 <TIMER_COUNTER1_start+0x86>
     62e:	8e b5       	in	r24, 0x2e	; 46
     630:	82 60       	ori	r24, 0x02	; 2
     632:	8e bd       	out	0x2e, r24	; 46
     634:	17 c0       	rjmp	.+46     	; 0x664 <TIMER_COUNTER1_start+0x86>
     636:	8e b5       	in	r24, 0x2e	; 46
     638:	83 60       	ori	r24, 0x03	; 3
     63a:	8e bd       	out	0x2e, r24	; 46
     63c:	13 c0       	rjmp	.+38     	; 0x664 <TIMER_COUNTER1_start+0x86>
     63e:	8e b5       	in	r24, 0x2e	; 46
     640:	84 60       	ori	r24, 0x04	; 4
     642:	8e bd       	out	0x2e, r24	; 46
     644:	0f c0       	rjmp	.+30     	; 0x664 <TIMER_COUNTER1_start+0x86>
     646:	8e b5       	in	r24, 0x2e	; 46
     648:	85 60       	ori	r24, 0x05	; 5
     64a:	8e bd       	out	0x2e, r24	; 46
     64c:	0b c0       	rjmp	.+22     	; 0x664 <TIMER_COUNTER1_start+0x86>
     64e:	8e b5       	in	r24, 0x2e	; 46
     650:	86 60       	ori	r24, 0x06	; 6
     652:	8e bd       	out	0x2e, r24	; 46
     654:	07 c0       	rjmp	.+14     	; 0x664 <TIMER_COUNTER1_start+0x86>
     656:	8e b5       	in	r24, 0x2e	; 46
     658:	87 60       	ori	r24, 0x07	; 7
     65a:	8e bd       	out	0x2e, r24	; 46
     65c:	03 c0       	rjmp	.+6      	; 0x664 <TIMER_COUNTER1_start+0x86>
     65e:	8e b5       	in	r24, 0x2e	; 46
     660:	85 60       	ori	r24, 0x05	; 5
     662:	8e bd       	out	0x2e, r24	; 46
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <timer1_state>
     66a:	08 95       	ret

0000066c <TIMER_COUNTER1_compoutmodeA>:
     66c:	9f b5       	in	r25, 0x2f	; 47
     66e:	9f 73       	andi	r25, 0x3F	; 63
     670:	9f bd       	out	0x2f, r25	; 47
     672:	82 30       	cpi	r24, 0x02	; 2
     674:	41 f0       	breq	.+16     	; 0x686 <TIMER_COUNTER1_compoutmodeA+0x1a>
     676:	83 30       	cpi	r24, 0x03	; 3
     678:	51 f0       	breq	.+20     	; 0x68e <TIMER_COUNTER1_compoutmodeA+0x22>
     67a:	81 30       	cpi	r24, 0x01	; 1
     67c:	59 f4       	brne	.+22     	; 0x694 <TIMER_COUNTER1_compoutmodeA+0x28>
     67e:	8f b5       	in	r24, 0x2f	; 47
     680:	80 64       	ori	r24, 0x40	; 64
     682:	8f bd       	out	0x2f, r24	; 47
     684:	08 95       	ret
     686:	8f b5       	in	r24, 0x2f	; 47
     688:	80 68       	ori	r24, 0x80	; 128
     68a:	8f bd       	out	0x2f, r24	; 47
     68c:	08 95       	ret
     68e:	8f b5       	in	r24, 0x2f	; 47
     690:	80 6c       	ori	r24, 0xC0	; 192
     692:	8f bd       	out	0x2f, r24	; 47
     694:	08 95       	ret

00000696 <TIMER_COUNTER1_compoutmodeB>:
     696:	9f b5       	in	r25, 0x2f	; 47
     698:	9f 7c       	andi	r25, 0xCF	; 207
     69a:	9f bd       	out	0x2f, r25	; 47
     69c:	82 30       	cpi	r24, 0x02	; 2
     69e:	41 f0       	breq	.+16     	; 0x6b0 <TIMER_COUNTER1_compoutmodeB+0x1a>
     6a0:	83 30       	cpi	r24, 0x03	; 3
     6a2:	51 f0       	breq	.+20     	; 0x6b8 <TIMER_COUNTER1_compoutmodeB+0x22>
     6a4:	81 30       	cpi	r24, 0x01	; 1
     6a6:	59 f4       	brne	.+22     	; 0x6be <TIMER_COUNTER1_compoutmodeB+0x28>
     6a8:	8f b5       	in	r24, 0x2f	; 47
     6aa:	80 61       	ori	r24, 0x10	; 16
     6ac:	8f bd       	out	0x2f, r24	; 47
     6ae:	08 95       	ret
     6b0:	8f b5       	in	r24, 0x2f	; 47
     6b2:	80 62       	ori	r24, 0x20	; 32
     6b4:	8f bd       	out	0x2f, r24	; 47
     6b6:	08 95       	ret
     6b8:	8f b5       	in	r24, 0x2f	; 47
     6ba:	80 63       	ori	r24, 0x30	; 48
     6bc:	8f bd       	out	0x2f, r24	; 47
     6be:	08 95       	ret

000006c0 <TIMER_COUNTER1_compoutmodeC>:
     6c0:	9f b5       	in	r25, 0x2f	; 47
     6c2:	93 7f       	andi	r25, 0xF3	; 243
     6c4:	9f bd       	out	0x2f, r25	; 47
     6c6:	82 30       	cpi	r24, 0x02	; 2
     6c8:	41 f0       	breq	.+16     	; 0x6da <TIMER_COUNTER1_compoutmodeC+0x1a>
     6ca:	83 30       	cpi	r24, 0x03	; 3
     6cc:	51 f0       	breq	.+20     	; 0x6e2 <TIMER_COUNTER1_compoutmodeC+0x22>
     6ce:	81 30       	cpi	r24, 0x01	; 1
     6d0:	59 f4       	brne	.+22     	; 0x6e8 <TIMER_COUNTER1_compoutmodeC+0x28>
     6d2:	8f b5       	in	r24, 0x2f	; 47
     6d4:	84 60       	ori	r24, 0x04	; 4
     6d6:	8f bd       	out	0x2f, r24	; 47
     6d8:	08 95       	ret
     6da:	8f b5       	in	r24, 0x2f	; 47
     6dc:	88 60       	ori	r24, 0x08	; 8
     6de:	8f bd       	out	0x2f, r24	; 47
     6e0:	08 95       	ret
     6e2:	8f b5       	in	r24, 0x2f	; 47
     6e4:	8c 60       	ori	r24, 0x0C	; 12
     6e6:	8f bd       	out	0x2f, r24	; 47
     6e8:	08 95       	ret

000006ea <TIMER_COUNTER1_compareA>:
     6ea:	9b bd       	out	0x2b, r25	; 43
     6ec:	8a bd       	out	0x2a, r24	; 42
     6ee:	08 95       	ret

000006f0 <TIMER_COUNTER1_compareB>:
     6f0:	99 bd       	out	0x29, r25	; 41
     6f2:	88 bd       	out	0x28, r24	; 40
     6f4:	08 95       	ret

000006f6 <TIMER_COUNTER1_compareC>:
     6f6:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     6fa:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     6fe:	08 95       	ret

00000700 <TIMER_COUNTER1_stop>:
     700:	8e b5       	in	r24, 0x2e	; 46
     702:	88 7f       	andi	r24, 0xF8	; 248
     704:	8e bd       	out	0x2e, r24	; 46
     706:	1d bc       	out	0x2d, r1	; 45
     708:	1c bc       	out	0x2c, r1	; 44
     70a:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <timer1_state>
     70e:	08 95       	ret

00000710 <TIMER_COUNTER0enable>:
     710:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <timer0_state>
     714:	23 b7       	in	r18, 0x33	; 51
     716:	27 7b       	andi	r18, 0xB7	; 183
     718:	23 bf       	out	0x33, r18	; 51
     71a:	62 30       	cpi	r22, 0x02	; 2
     71c:	41 f0       	breq	.+16     	; 0x72e <TIMER_COUNTER0enable+0x1e>
     71e:	63 30       	cpi	r22, 0x03	; 3
     720:	51 f0       	breq	.+20     	; 0x736 <TIMER_COUNTER0enable+0x26>
     722:	61 30       	cpi	r22, 0x01	; 1
     724:	59 f4       	brne	.+22     	; 0x73c <TIMER_COUNTER0enable+0x2c>
     726:	23 b7       	in	r18, 0x33	; 51
     728:	20 64       	ori	r18, 0x40	; 64
     72a:	23 bf       	out	0x33, r18	; 51
     72c:	07 c0       	rjmp	.+14     	; 0x73c <TIMER_COUNTER0enable+0x2c>
     72e:	23 b7       	in	r18, 0x33	; 51
     730:	28 60       	ori	r18, 0x08	; 8
     732:	23 bf       	out	0x33, r18	; 51
     734:	03 c0       	rjmp	.+6      	; 0x73c <TIMER_COUNTER0enable+0x2c>
     736:	23 b7       	in	r18, 0x33	; 51
     738:	28 64       	ori	r18, 0x48	; 72
     73a:	23 bf       	out	0x33, r18	; 51
     73c:	27 b7       	in	r18, 0x37	; 55
     73e:	2e 7f       	andi	r18, 0xFE	; 254
     740:	27 bf       	out	0x37, r18	; 55
     742:	27 b7       	in	r18, 0x37	; 55
     744:	2d 7f       	andi	r18, 0xFD	; 253
     746:	27 bf       	out	0x37, r18	; 55
     748:	42 30       	cpi	r20, 0x02	; 2
     74a:	41 f0       	breq	.+16     	; 0x75c <TIMER_COUNTER0enable+0x4c>
     74c:	43 30       	cpi	r20, 0x03	; 3
     74e:	51 f0       	breq	.+20     	; 0x764 <TIMER_COUNTER0enable+0x54>
     750:	41 30       	cpi	r20, 0x01	; 1
     752:	71 f4       	brne	.+28     	; 0x770 <TIMER_COUNTER0enable+0x60>
     754:	27 b7       	in	r18, 0x37	; 55
     756:	21 60       	ori	r18, 0x01	; 1
     758:	27 bf       	out	0x37, r18	; 55
     75a:	0a c0       	rjmp	.+20     	; 0x770 <TIMER_COUNTER0enable+0x60>
     75c:	27 b7       	in	r18, 0x37	; 55
     75e:	22 60       	ori	r18, 0x02	; 2
     760:	27 bf       	out	0x37, r18	; 55
     762:	06 c0       	rjmp	.+12     	; 0x770 <TIMER_COUNTER0enable+0x60>
     764:	27 b7       	in	r18, 0x37	; 55
     766:	21 60       	ori	r18, 0x01	; 1
     768:	27 bf       	out	0x37, r18	; 55
     76a:	27 b7       	in	r18, 0x37	; 55
     76c:	22 60       	ori	r18, 0x02	; 2
     76e:	27 bf       	out	0x37, r18	; 55
     770:	21 ed       	ldi	r18, 0xD1	; 209
     772:	32 e0       	ldi	r19, 0x02	; 2
     774:	fc 01       	movw	r30, r24
     776:	31 83       	std	Z+1, r19	; 0x01
     778:	20 83       	st	Z, r18
     77a:	26 ee       	ldi	r18, 0xE6	; 230
     77c:	32 e0       	ldi	r19, 0x02	; 2
     77e:	37 83       	std	Z+7, r19	; 0x07
     780:	26 83       	std	Z+6, r18	; 0x06
     782:	2c e8       	ldi	r18, 0x8C	; 140
     784:	32 e0       	ldi	r19, 0x02	; 2
     786:	35 87       	std	Z+13, r19	; 0x0d
     788:	24 87       	std	Z+12, r18	; 0x0c
     78a:	28 ee       	ldi	r18, 0xE8	; 232
     78c:	32 e0       	ldi	r19, 0x02	; 2
     78e:	37 87       	std	Z+15, r19	; 0x0f
     790:	26 87       	std	Z+14, r18	; 0x0e
     792:	08 95       	ret

00000794 <TIMER_COUNTER1enable>:
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	dc 01       	movw	r26, r24
     79a:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <timer1_state>
     79e:	8f b5       	in	r24, 0x2f	; 47
     7a0:	8c 7f       	andi	r24, 0xFC	; 252
     7a2:	8f bd       	out	0x2f, r24	; 47
     7a4:	8e b5       	in	r24, 0x2e	; 46
     7a6:	87 7e       	andi	r24, 0xE7	; 231
     7a8:	8e bd       	out	0x2e, r24	; 46
     7aa:	06 2f       	mov	r16, r22
     7ac:	10 e0       	ldi	r17, 0x00	; 0
     7ae:	f8 01       	movw	r30, r16
     7b0:	31 97       	sbiw	r30, 0x01	; 1
     7b2:	ef 30       	cpi	r30, 0x0F	; 15
     7b4:	f1 05       	cpc	r31, r1
     7b6:	08 f0       	brcs	.+2      	; 0x7ba <TIMER_COUNTER1enable+0x26>
     7b8:	5a c0       	rjmp	.+180    	; 0x86e <TIMER_COUNTER1enable+0xda>
     7ba:	ea 5b       	subi	r30, 0xBA	; 186
     7bc:	ff 4f       	sbci	r31, 0xFF	; 255
     7be:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <__tablejump2__>
     7c2:	8f b5       	in	r24, 0x2f	; 47
     7c4:	81 60       	ori	r24, 0x01	; 1
     7c6:	8f bd       	out	0x2f, r24	; 47
     7c8:	52 c0       	rjmp	.+164    	; 0x86e <TIMER_COUNTER1enable+0xda>
     7ca:	8f b5       	in	r24, 0x2f	; 47
     7cc:	82 60       	ori	r24, 0x02	; 2
     7ce:	8f bd       	out	0x2f, r24	; 47
     7d0:	4e c0       	rjmp	.+156    	; 0x86e <TIMER_COUNTER1enable+0xda>
     7d2:	8f b5       	in	r24, 0x2f	; 47
     7d4:	83 60       	ori	r24, 0x03	; 3
     7d6:	8f bd       	out	0x2f, r24	; 47
     7d8:	4a c0       	rjmp	.+148    	; 0x86e <TIMER_COUNTER1enable+0xda>
     7da:	8e b5       	in	r24, 0x2e	; 46
     7dc:	88 60       	ori	r24, 0x08	; 8
     7de:	8e bd       	out	0x2e, r24	; 46
     7e0:	46 c0       	rjmp	.+140    	; 0x86e <TIMER_COUNTER1enable+0xda>
     7e2:	8f b5       	in	r24, 0x2f	; 47
     7e4:	81 60       	ori	r24, 0x01	; 1
     7e6:	8f bd       	out	0x2f, r24	; 47
     7e8:	8e b5       	in	r24, 0x2e	; 46
     7ea:	88 60       	ori	r24, 0x08	; 8
     7ec:	8e bd       	out	0x2e, r24	; 46
     7ee:	3f c0       	rjmp	.+126    	; 0x86e <TIMER_COUNTER1enable+0xda>
     7f0:	8f b5       	in	r24, 0x2f	; 47
     7f2:	82 60       	ori	r24, 0x02	; 2
     7f4:	8f bd       	out	0x2f, r24	; 47
     7f6:	8e b5       	in	r24, 0x2e	; 46
     7f8:	88 60       	ori	r24, 0x08	; 8
     7fa:	8e bd       	out	0x2e, r24	; 46
     7fc:	38 c0       	rjmp	.+112    	; 0x86e <TIMER_COUNTER1enable+0xda>
     7fe:	8f b5       	in	r24, 0x2f	; 47
     800:	83 60       	ori	r24, 0x03	; 3
     802:	8f bd       	out	0x2f, r24	; 47
     804:	8e b5       	in	r24, 0x2e	; 46
     806:	88 60       	ori	r24, 0x08	; 8
     808:	8e bd       	out	0x2e, r24	; 46
     80a:	31 c0       	rjmp	.+98     	; 0x86e <TIMER_COUNTER1enable+0xda>
     80c:	8e b5       	in	r24, 0x2e	; 46
     80e:	80 61       	ori	r24, 0x10	; 16
     810:	8e bd       	out	0x2e, r24	; 46
     812:	2d c0       	rjmp	.+90     	; 0x86e <TIMER_COUNTER1enable+0xda>
     814:	8f b5       	in	r24, 0x2f	; 47
     816:	81 60       	ori	r24, 0x01	; 1
     818:	8f bd       	out	0x2f, r24	; 47
     81a:	8e b5       	in	r24, 0x2e	; 46
     81c:	80 61       	ori	r24, 0x10	; 16
     81e:	8e bd       	out	0x2e, r24	; 46
     820:	26 c0       	rjmp	.+76     	; 0x86e <TIMER_COUNTER1enable+0xda>
     822:	8f b5       	in	r24, 0x2f	; 47
     824:	82 60       	ori	r24, 0x02	; 2
     826:	8f bd       	out	0x2f, r24	; 47
     828:	8e b5       	in	r24, 0x2e	; 46
     82a:	80 61       	ori	r24, 0x10	; 16
     82c:	8e bd       	out	0x2e, r24	; 46
     82e:	1f c0       	rjmp	.+62     	; 0x86e <TIMER_COUNTER1enable+0xda>
     830:	8f b5       	in	r24, 0x2f	; 47
     832:	83 60       	ori	r24, 0x03	; 3
     834:	8f bd       	out	0x2f, r24	; 47
     836:	8e b5       	in	r24, 0x2e	; 46
     838:	80 61       	ori	r24, 0x10	; 16
     83a:	8e bd       	out	0x2e, r24	; 46
     83c:	18 c0       	rjmp	.+48     	; 0x86e <TIMER_COUNTER1enable+0xda>
     83e:	8e b5       	in	r24, 0x2e	; 46
     840:	88 61       	ori	r24, 0x18	; 24
     842:	8e bd       	out	0x2e, r24	; 46
     844:	14 c0       	rjmp	.+40     	; 0x86e <TIMER_COUNTER1enable+0xda>
     846:	8f b5       	in	r24, 0x2f	; 47
     848:	81 60       	ori	r24, 0x01	; 1
     84a:	8f bd       	out	0x2f, r24	; 47
     84c:	8e b5       	in	r24, 0x2e	; 46
     84e:	88 61       	ori	r24, 0x18	; 24
     850:	8e bd       	out	0x2e, r24	; 46
     852:	0d c0       	rjmp	.+26     	; 0x86e <TIMER_COUNTER1enable+0xda>
     854:	8f b5       	in	r24, 0x2f	; 47
     856:	82 60       	ori	r24, 0x02	; 2
     858:	8f bd       	out	0x2f, r24	; 47
     85a:	8e b5       	in	r24, 0x2e	; 46
     85c:	88 61       	ori	r24, 0x18	; 24
     85e:	8e bd       	out	0x2e, r24	; 46
     860:	06 c0       	rjmp	.+12     	; 0x86e <TIMER_COUNTER1enable+0xda>
     862:	8f b5       	in	r24, 0x2f	; 47
     864:	83 60       	ori	r24, 0x03	; 3
     866:	8f bd       	out	0x2f, r24	; 47
     868:	8e b5       	in	r24, 0x2e	; 46
     86a:	88 61       	ori	r24, 0x18	; 24
     86c:	8e bd       	out	0x2e, r24	; 46
     86e:	8f b5       	in	r24, 0x2f	; 47
     870:	83 70       	andi	r24, 0x03	; 3
     872:	8f bd       	out	0x2f, r24	; 47
     874:	87 b7       	in	r24, 0x37	; 55
     876:	83 7c       	andi	r24, 0xC3	; 195
     878:	87 bf       	out	0x37, r24	; 55
     87a:	ed e7       	ldi	r30, 0x7D	; 125
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	80 81       	ld	r24, Z
     880:	8e 7f       	andi	r24, 0xFE	; 254
     882:	80 83       	st	Z, r24
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	fa 01       	movw	r30, r20
     888:	31 97       	sbiw	r30, 0x01	; 1
     88a:	ec 30       	cpi	r30, 0x0C	; 12
     88c:	f1 05       	cpc	r31, r1
     88e:	08 f0       	brcs	.+2      	; 0x892 <TIMER_COUNTER1enable+0xfe>
     890:	44 c0       	rjmp	.+136    	; 0x91a <TIMER_COUNTER1enable+0x186>
     892:	eb 5a       	subi	r30, 0xAB	; 171
     894:	ff 4f       	sbci	r31, 0xFF	; 255
     896:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <__tablejump2__>
     89a:	87 b7       	in	r24, 0x37	; 55
     89c:	84 60       	ori	r24, 0x04	; 4
     89e:	87 bf       	out	0x37, r24	; 55
     8a0:	3c c0       	rjmp	.+120    	; 0x91a <TIMER_COUNTER1enable+0x186>
     8a2:	87 b7       	in	r24, 0x37	; 55
     8a4:	80 61       	ori	r24, 0x10	; 16
     8a6:	87 bf       	out	0x37, r24	; 55
     8a8:	38 c0       	rjmp	.+112    	; 0x91a <TIMER_COUNTER1enable+0x186>
     8aa:	87 b7       	in	r24, 0x37	; 55
     8ac:	88 60       	ori	r24, 0x08	; 8
     8ae:	87 bf       	out	0x37, r24	; 55
     8b0:	34 c0       	rjmp	.+104    	; 0x91a <TIMER_COUNTER1enable+0x186>
     8b2:	ed e7       	ldi	r30, 0x7D	; 125
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	80 81       	ld	r24, Z
     8b8:	81 60       	ori	r24, 0x01	; 1
     8ba:	80 83       	st	Z, r24
     8bc:	2e c0       	rjmp	.+92     	; 0x91a <TIMER_COUNTER1enable+0x186>
     8be:	87 b7       	in	r24, 0x37	; 55
     8c0:	80 62       	ori	r24, 0x20	; 32
     8c2:	87 bf       	out	0x37, r24	; 55
     8c4:	2a c0       	rjmp	.+84     	; 0x91a <TIMER_COUNTER1enable+0x186>
     8c6:	87 b7       	in	r24, 0x37	; 55
     8c8:	84 61       	ori	r24, 0x14	; 20
     8ca:	87 bf       	out	0x37, r24	; 55
     8cc:	26 c0       	rjmp	.+76     	; 0x91a <TIMER_COUNTER1enable+0x186>
     8ce:	87 b7       	in	r24, 0x37	; 55
     8d0:	8c 60       	ori	r24, 0x0C	; 12
     8d2:	87 bf       	out	0x37, r24	; 55
     8d4:	22 c0       	rjmp	.+68     	; 0x91a <TIMER_COUNTER1enable+0x186>
     8d6:	87 b7       	in	r24, 0x37	; 55
     8d8:	84 60       	ori	r24, 0x04	; 4
     8da:	87 bf       	out	0x37, r24	; 55
     8dc:	ed e7       	ldi	r30, 0x7D	; 125
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	80 81       	ld	r24, Z
     8e2:	81 60       	ori	r24, 0x01	; 1
     8e4:	80 83       	st	Z, r24
     8e6:	19 c0       	rjmp	.+50     	; 0x91a <TIMER_COUNTER1enable+0x186>
     8e8:	87 b7       	in	r24, 0x37	; 55
     8ea:	84 62       	ori	r24, 0x24	; 36
     8ec:	87 bf       	out	0x37, r24	; 55
     8ee:	15 c0       	rjmp	.+42     	; 0x91a <TIMER_COUNTER1enable+0x186>
     8f0:	87 b7       	in	r24, 0x37	; 55
     8f2:	8c 61       	ori	r24, 0x1C	; 28
     8f4:	87 bf       	out	0x37, r24	; 55
     8f6:	11 c0       	rjmp	.+34     	; 0x91a <TIMER_COUNTER1enable+0x186>
     8f8:	87 b7       	in	r24, 0x37	; 55
     8fa:	8c 61       	ori	r24, 0x1C	; 28
     8fc:	87 bf       	out	0x37, r24	; 55
     8fe:	ed e7       	ldi	r30, 0x7D	; 125
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	81 60       	ori	r24, 0x01	; 1
     906:	80 83       	st	Z, r24
     908:	08 c0       	rjmp	.+16     	; 0x91a <TIMER_COUNTER1enable+0x186>
     90a:	87 b7       	in	r24, 0x37	; 55
     90c:	88 61       	ori	r24, 0x18	; 24
     90e:	87 bf       	out	0x37, r24	; 55
     910:	ed e7       	ldi	r30, 0x7D	; 125
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	80 81       	ld	r24, Z
     916:	81 60       	ori	r24, 0x01	; 1
     918:	80 83       	st	Z, r24
     91a:	86 e3       	ldi	r24, 0x36	; 54
     91c:	93 e0       	ldi	r25, 0x03	; 3
     91e:	11 96       	adiw	r26, 0x01	; 1
     920:	9c 93       	st	X, r25
     922:	8e 93       	st	-X, r24
     924:	8b e4       	ldi	r24, 0x4B	; 75
     926:	93 e0       	ldi	r25, 0x03	; 3
     928:	13 96       	adiw	r26, 0x03	; 3
     92a:	9c 93       	st	X, r25
     92c:	8e 93       	st	-X, r24
     92e:	12 97       	sbiw	r26, 0x02	; 2
     930:	80 e6       	ldi	r24, 0x60	; 96
     932:	93 e0       	ldi	r25, 0x03	; 3
     934:	15 96       	adiw	r26, 0x05	; 5
     936:	9c 93       	st	X, r25
     938:	8e 93       	st	-X, r24
     93a:	14 97       	sbiw	r26, 0x04	; 4
     93c:	85 e7       	ldi	r24, 0x75	; 117
     93e:	93 e0       	ldi	r25, 0x03	; 3
     940:	17 96       	adiw	r26, 0x07	; 7
     942:	9c 93       	st	X, r25
     944:	8e 93       	st	-X, r24
     946:	16 97       	sbiw	r26, 0x06	; 6
     948:	88 e7       	ldi	r24, 0x78	; 120
     94a:	93 e0       	ldi	r25, 0x03	; 3
     94c:	19 96       	adiw	r26, 0x09	; 9
     94e:	9c 93       	st	X, r25
     950:	8e 93       	st	-X, r24
     952:	18 97       	sbiw	r26, 0x08	; 8
     954:	8b e7       	ldi	r24, 0x7B	; 123
     956:	93 e0       	ldi	r25, 0x03	; 3
     958:	1b 96       	adiw	r26, 0x0b	; 11
     95a:	9c 93       	st	X, r25
     95c:	8e 93       	st	-X, r24
     95e:	1a 97       	sbiw	r26, 0x0a	; 10
     960:	8f ee       	ldi	r24, 0xEF	; 239
     962:	92 e0       	ldi	r25, 0x02	; 2
     964:	1d 96       	adiw	r26, 0x0d	; 13
     966:	9c 93       	st	X, r25
     968:	8e 93       	st	-X, r24
     96a:	1c 97       	sbiw	r26, 0x0c	; 12
     96c:	80 e8       	ldi	r24, 0x80	; 128
     96e:	93 e0       	ldi	r25, 0x03	; 3
     970:	1f 96       	adiw	r26, 0x0f	; 15
     972:	9c 93       	st	X, r25
     974:	8e 93       	st	-X, r24
     976:	1e 97       	sbiw	r26, 0x0e	; 14
     978:	cd 01       	movw	r24, r26
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	08 95       	ret

00000980 <__vector_16>:
	timer3_state=0;
}
/***Interrupt***/
// So that main will not freeze when not defined, therefore exclude here! before use.
//ISR(TIMER0_COMP_vect){ }
ISR(TIMER0_OVF_vect){ }
     980:	1f 92       	push	r1
     982:	0f 92       	push	r0
     984:	0f b6       	in	r0, 0x3f	; 63
     986:	0f 92       	push	r0
     988:	11 24       	eor	r1, r1
     98a:	0f 90       	pop	r0
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	0f 90       	pop	r0
     990:	1f 90       	pop	r1
     992:	18 95       	reti

00000994 <__vector_11>:
ISR(TIMER1_CAPT_vect){ }
     994:	1f 92       	push	r1
     996:	0f 92       	push	r0
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	0f 92       	push	r0
     99c:	11 24       	eor	r1, r1
     99e:	0f 90       	pop	r0
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	0f 90       	pop	r0
     9a4:	1f 90       	pop	r1
     9a6:	18 95       	reti

000009a8 <__vector_12>:
ISR(TIMER1_COMPA_vect){ }
     9a8:	1f 92       	push	r1
     9aa:	0f 92       	push	r0
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	0f 92       	push	r0
     9b0:	11 24       	eor	r1, r1
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	0f 90       	pop	r0
     9b8:	1f 90       	pop	r1
     9ba:	18 95       	reti

000009bc <__vector_13>:
ISR(TIMER1_COMPB_vect){ }
     9bc:	1f 92       	push	r1
     9be:	0f 92       	push	r0
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	0f 92       	push	r0
     9c4:	11 24       	eor	r1, r1
     9c6:	0f 90       	pop	r0
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	0f 90       	pop	r0
     9cc:	1f 90       	pop	r1
     9ce:	18 95       	reti

000009d0 <__vector_24>:
ISR(TIMER1_COMPC_vect){ }
     9d0:	1f 92       	push	r1
     9d2:	0f 92       	push	r0
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	0f 92       	push	r0
     9d8:	11 24       	eor	r1, r1
     9da:	0f 90       	pop	r0
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	0f 90       	pop	r0
     9e0:	1f 90       	pop	r1
     9e2:	18 95       	reti

000009e4 <__vector_14>:
ISR(TIMER1_OVF_vect){ }
     9e4:	1f 92       	push	r1
     9e6:	0f 92       	push	r0
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	0f 92       	push	r0
     9ec:	11 24       	eor	r1, r1
     9ee:	0f 90       	pop	r0
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	0f 90       	pop	r0
     9f4:	1f 90       	pop	r1
     9f6:	18 95       	reti

000009f8 <__vector_10>:
ISR(TIMER2_OVF_vect){ }
     9f8:	1f 92       	push	r1
     9fa:	0f 92       	push	r0
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	0f 92       	push	r0
     a00:	11 24       	eor	r1, r1
     a02:	0f 90       	pop	r0
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	0f 90       	pop	r0
     a08:	1f 90       	pop	r1
     a0a:	18 95       	reti

00000a0c <__vector_25>:
ISR(TIMER3_CAPT_vect){ }
     a0c:	1f 92       	push	r1
     a0e:	0f 92       	push	r0
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	0f 92       	push	r0
     a14:	11 24       	eor	r1, r1
     a16:	0f 90       	pop	r0
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	0f 90       	pop	r0
     a1c:	1f 90       	pop	r1
     a1e:	18 95       	reti

00000a20 <__vector_26>:
ISR(TIMER3_COMPA_vect){ }
     a20:	1f 92       	push	r1
     a22:	0f 92       	push	r0
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	0f 92       	push	r0
     a28:	11 24       	eor	r1, r1
     a2a:	0f 90       	pop	r0
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	0f 90       	pop	r0
     a30:	1f 90       	pop	r1
     a32:	18 95       	reti

00000a34 <__vector_27>:
ISR(TIMER3_COMPB_vect){ }
     a34:	1f 92       	push	r1
     a36:	0f 92       	push	r0
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	0f 92       	push	r0
     a3c:	11 24       	eor	r1, r1
     a3e:	0f 90       	pop	r0
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	0f 90       	pop	r0
     a44:	1f 90       	pop	r1
     a46:	18 95       	reti

00000a48 <__vector_28>:
ISR(TIMER3_COMPC_vect){ }
     a48:	1f 92       	push	r1
     a4a:	0f 92       	push	r0
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	0f 92       	push	r0
     a50:	11 24       	eor	r1, r1
     a52:	0f 90       	pop	r0
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	0f 90       	pop	r0
     a58:	1f 90       	pop	r1
     a5a:	18 95       	reti

00000a5c <__vector_29>:
ISR(TIMER3_OVF_vect){ }
     a5c:	1f 92       	push	r1
     a5e:	0f 92       	push	r0
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	0f 92       	push	r0
     a64:	11 24       	eor	r1, r1
     a66:	0f 90       	pop	r0
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	0f 90       	pop	r0
     a6c:	1f 90       	pop	r1
     a6e:	18 95       	reti

00000a70 <__vector_18>:
	}else{
		uart1_index=0;
		ret=uart1_msg;
	}
	return ret;
}
     a70:	1f 92       	push	r1
     a72:	0f 92       	push	r0
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	0f 92       	push	r0
     a78:	11 24       	eor	r1, r1
     a7a:	0b b6       	in	r0, 0x3b	; 59
     a7c:	0f 92       	push	r0
     a7e:	8f 93       	push	r24
     a80:	9f 93       	push	r25
     a82:	ef 93       	push	r30
     a84:	ff 93       	push	r31
     a86:	8b b1       	in	r24, 0x0b	; 11
     a88:	9a b1       	in	r25, 0x0a	; 10
     a8a:	88 71       	andi	r24, 0x18	; 24
     a8c:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <UART_LastRxError>
     a90:	e0 91 d6 02 	lds	r30, 0x02D6	; 0x8002d6 <UART_RxHead>
     a94:	ef 5f       	subi	r30, 0xFF	; 255
     a96:	ef 73       	andi	r30, 0x3F	; 63
     a98:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <UART_RxTail>
     a9c:	e9 13       	cpse	r30, r25
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__vector_18+0x38>
     aa0:	82 e0       	ldi	r24, 0x02	; 2
     aa2:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <UART_LastRxError>
     aa6:	0f c0       	rjmp	.+30     	; 0xac6 <__vector_18+0x56>
     aa8:	9c b1       	in	r25, 0x0c	; 12
     aaa:	e0 93 d6 02 	sts	0x02D6, r30	; 0x8002d6 <UART_RxHead>
     aae:	88 23       	and	r24, r24
     ab0:	31 f0       	breq	.+12     	; 0xabe <__vector_18+0x4e>
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	e7 52       	subi	r30, 0x27	; 39
     ab6:	fd 4f       	sbci	r31, 0xFD	; 253
     ab8:	88 e5       	ldi	r24, 0x58	; 88
     aba:	80 83       	st	Z, r24
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__vector_18+0x56>
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	e7 52       	subi	r30, 0x27	; 39
     ac2:	fd 4f       	sbci	r31, 0xFD	; 253
     ac4:	90 83       	st	Z, r25
     ac6:	ff 91       	pop	r31
     ac8:	ef 91       	pop	r30
     aca:	9f 91       	pop	r25
     acc:	8f 91       	pop	r24
     ace:	0f 90       	pop	r0
     ad0:	0b be       	out	0x3b, r0	; 59
     ad2:	0f 90       	pop	r0
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	0f 90       	pop	r0
     ad8:	1f 90       	pop	r1
     ada:	18 95       	reti

00000adc <__vector_19>:
     adc:	1f 92       	push	r1
     ade:	0f 92       	push	r0
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	0f 92       	push	r0
     ae4:	11 24       	eor	r1, r1
     ae6:	0b b6       	in	r0, 0x3b	; 59
     ae8:	0f 92       	push	r0
     aea:	8f 93       	push	r24
     aec:	9f 93       	push	r25
     aee:	ef 93       	push	r30
     af0:	ff 93       	push	r31
     af2:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <UART_TxTail>
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	ea 56       	subi	r30, 0x6A	; 106
     afa:	fd 4f       	sbci	r31, 0xFD	; 253
     afc:	80 81       	ld	r24, Z
     afe:	8c b9       	out	0x0c, r24	; 12
     b00:	10 82       	st	Z, r1
     b02:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <UART_TxTail>
     b06:	8f 5f       	subi	r24, 0xFF	; 255
     b08:	8f 73       	andi	r24, 0x3F	; 63
     b0a:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <UART_TxTail>
     b0e:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <UART_TxHead>
     b12:	89 13       	cpse	r24, r25
     b14:	01 c0       	rjmp	.+2      	; 0xb18 <__vector_19+0x3c>
     b16:	55 98       	cbi	0x0a, 5	; 10
     b18:	ff 91       	pop	r31
     b1a:	ef 91       	pop	r30
     b1c:	9f 91       	pop	r25
     b1e:	8f 91       	pop	r24
     b20:	0f 90       	pop	r0
     b22:	0b be       	out	0x3b, r0	; 59
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	0f 90       	pop	r0
     b2a:	1f 90       	pop	r1
     b2c:	18 95       	reti

00000b2e <__vector_30>:
	UART1_TxHead = UART1_TxTail;
}
/***Interrupt***/
/***SIGNAL(UART1_RECEIVE_INTERRUPT)***/
SIGNAL(UART1_RECEIVE_INTERRUPT)
{
     b2e:	1f 92       	push	r1
     b30:	0f 92       	push	r0
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	0f 92       	push	r0
     b36:	11 24       	eor	r1, r1
     b38:	0b b6       	in	r0, 0x3b	; 59
     b3a:	0f 92       	push	r0
     b3c:	8f 93       	push	r24
     b3e:	9f 93       	push	r25
     b40:	ef 93       	push	r30
     b42:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /***read UART status register and UART data register***/
	usr  = UART1_STATUS;
     b44:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    bit9 = UART1_CONTROL;
     b48:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    bit9 = 0x01 & (bit9>>1);
    /***/
    UART1_LastRxError = (usr & (_BV(FE1)|_BV(DOR1)));
     b4c:	88 71       	andi	r24, 0x18	; 24
     b4e:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <UART1_LastRxError>
	/***calculate buffer index***/
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
     b52:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <UART1_RxHead>
     b56:	ef 5f       	subi	r30, 0xFF	; 255
     b58:	ef 73       	andi	r30, 0x3F	; 63
    if ( tmphead == UART1_RxTail ) {	
     b5a:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <UART1_RxTail>
     b5e:	e9 13       	cpse	r30, r25
     b60:	04 c0       	rjmp	.+8      	; 0xb6a <__vector_30+0x3c>
        /***error: receive buffer overflow, caracter is lost***/
        UART1_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <UART1_LastRxError>
     b68:	10 c0       	rjmp	.+32     	; 0xb8a <__vector_30+0x5c>
	}else{
		data = UART1_DATA;
     b6a:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
        /***store new index***/
        UART1_RxHead = tmphead;
     b6e:	e0 93 12 02 	sts	0x0212, r30	; 0x800212 <UART1_RxHead>
		if(UART1_LastRxError){
     b72:	88 23       	and	r24, r24
     b74:	31 f0       	breq	.+12     	; 0xb82 <__vector_30+0x54>
			/***store indication data error in buffer***/
			UART1_RxBuf[tmphead] = 'X';
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	e1 53       	subi	r30, 0x31	; 49
     b7a:	fe 4f       	sbci	r31, 0xFE	; 254
     b7c:	88 e5       	ldi	r24, 0x58	; 88
     b7e:	80 83       	st	Z, r24
     b80:	04 c0       	rjmp	.+8      	; 0xb8a <__vector_30+0x5c>
		}else{
			/***store received data in buffer***/
			UART1_RxBuf[tmphead] = data;
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	e1 53       	subi	r30, 0x31	; 49
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	90 83       	st	Z, r25
		}
    }
}
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	9f 91       	pop	r25
     b90:	8f 91       	pop	r24
     b92:	0f 90       	pop	r0
     b94:	0b be       	out	0x3b, r0	; 59
     b96:	0f 90       	pop	r0
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	0f 90       	pop	r0
     b9c:	1f 90       	pop	r1
     b9e:	18 95       	reti

00000ba0 <__vector_31>:
/***SIGNAL(UART1_TRANSMIT_INTERRUPT)***/
SIGNAL(UART1_TRANSMIT_INTERRUPT)
{
     ba0:	1f 92       	push	r1
     ba2:	0f 92       	push	r0
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	0f 92       	push	r0
     ba8:	11 24       	eor	r1, r1
     baa:	0b b6       	in	r0, 0x3b	; 59
     bac:	0f 92       	push	r0
     bae:	8f 93       	push	r24
     bb0:	9f 93       	push	r25
     bb2:	ef 93       	push	r30
     bb4:	ff 93       	push	r31
	uint8_t tail = UART1_TxTail;
	UART1_DATA = UART1_TxBuf[tail];
     bb6:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <UART1_TxTail>
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	ea 5a       	subi	r30, 0xAA	; 170
     bbe:	fd 4f       	sbci	r31, 0xFD	; 253
     bc0:	80 81       	ld	r24, Z
     bc2:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	UART1_TxBuf[tail]='\0';
     bc6:	10 82       	st	Z, r1
	UART1_TxTail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
     bc8:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <UART1_TxTail>
     bcc:	8f 5f       	subi	r24, 0xFF	; 255
     bce:	8f 73       	andi	r24, 0x3F	; 63
     bd0:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <UART1_TxTail>
	if ( UART1_TxTail != UART1_TxHead )
     bd4:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <UART1_TxHead>
     bd8:	89 13       	cpse	r24, r25
     bda:	05 c0       	rjmp	.+10     	; 0xbe6 <__vector_31+0x46>
        ;
    else
		UART1_CONTROL &= ~_BV(UART1_UDRIE);
     bdc:	ea e9       	ldi	r30, 0x9A	; 154
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	8f 7d       	andi	r24, 0xDF	; 223
     be4:	80 83       	st	Z, r24
}
     be6:	ff 91       	pop	r31
     be8:	ef 91       	pop	r30
     bea:	9f 91       	pop	r25
     bec:	8f 91       	pop	r24
     bee:	0f 90       	pop	r0
     bf0:	0b be       	out	0x3b, r0	; 59
     bf2:	0f 90       	pop	r0
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	0f 90       	pop	r0
     bf8:	1f 90       	pop	r1
     bfa:	18 95       	reti

00000bfc <FUNCpinmatch>:
}
//pinmatch
uint8_t FUNCpinmatch(uint8_t match, uint8_t pin, uint8_t HL)
{
	uint8_t result;
	result=match&pin;
     bfc:	68 23       	and	r22, r24
	if(HL){
     bfe:	44 23       	and	r20, r20
     c00:	21 f0       	breq	.+8      	; 0xc0a <FUNCpinmatch+0xe>
		if(result==match);
     c02:	86 17       	cp	r24, r22
     c04:	21 f0       	breq	.+8      	; 0xc0e <FUNCpinmatch+0x12>
		else
			result=0;
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	08 95       	ret
	}else{
		if(result)
     c0a:	61 11       	cpse	r22, r1
			result=0;
     c0c:	80 e0       	ldi	r24, 0x00	; 0
		else
			result=match;
	}
	return result;
}
     c0e:	08 95       	ret

00000c10 <FUNChmerge>:
// hmerge
uint8_t FUNChmerge(uint8_t X, uint8_t Y)
{
	return (X | Y);
}
     c10:	86 2b       	or	r24, r22
     c12:	08 95       	ret

00000c14 <FUNClmerge>:
// lmerge
uint8_t FUNClmerge(uint8_t X, uint8_t Y)
{
	return (X & Y);
}
     c14:	86 23       	and	r24, r22
     c16:	08 95       	ret

00000c18 <FUNChh>:
uint8_t FUNChh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi&xf;
	return i;
}
     c18:	86 23       	and	r24, r22
     c1a:	08 95       	ret

00000c1c <FUNCll>:
// ll
uint8_t FUNCll(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi|xf;
	return ~i;
     c1c:	86 2b       	or	r24, r22
}
     c1e:	80 95       	com	r24
     c20:	08 95       	ret

00000c22 <FUNClh>:
// lh
uint8_t FUNClh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi^xf;
     c22:	86 27       	eor	r24, r22
	i&=xf;
	return i;
}
     c24:	86 23       	and	r24, r22
     c26:	08 95       	ret

00000c28 <FUNChl>:
// hl
uint8_t FUNChl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
     c28:	60 95       	com	r22
	i&=xi;
	return i;
}
     c2a:	86 23       	and	r24, r22
     c2c:	08 95       	ret

00000c2e <FUNCdiff>:
// diff
uint8_t FUNCdiff(uint8_t xi, uint8_t xf)
{
	return xf^xi;
}
     c2e:	86 27       	eor	r24, r22
     c30:	08 95       	ret

00000c32 <FUNCswap>:
// interchange *px and *py
void FUNCswap(long *px, long *py)
{
     c32:	cf 92       	push	r12
     c34:	df 92       	push	r13
     c36:	ef 92       	push	r14
     c38:	ff 92       	push	r15
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
	long temp;
	temp = *px;
     c3e:	fc 01       	movw	r30, r24
     c40:	00 81       	ld	r16, Z
     c42:	11 81       	ldd	r17, Z+1	; 0x01
     c44:	22 81       	ldd	r18, Z+2	; 0x02
     c46:	33 81       	ldd	r19, Z+3	; 0x03
	*px = *py;
     c48:	fb 01       	movw	r30, r22
     c4a:	c0 80       	ld	r12, Z
     c4c:	d1 80       	ldd	r13, Z+1	; 0x01
     c4e:	e2 80       	ldd	r14, Z+2	; 0x02
     c50:	f3 80       	ldd	r15, Z+3	; 0x03
     c52:	fc 01       	movw	r30, r24
     c54:	c0 82       	st	Z, r12
     c56:	d1 82       	std	Z+1, r13	; 0x01
     c58:	e2 82       	std	Z+2, r14	; 0x02
     c5a:	f3 82       	std	Z+3, r15	; 0x03
	*py = temp;
     c5c:	fb 01       	movw	r30, r22
     c5e:	00 83       	st	Z, r16
     c60:	11 83       	std	Z+1, r17	; 0x01
     c62:	22 83       	std	Z+2, r18	; 0x02
     c64:	33 83       	std	Z+3, r19	; 0x03
}
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	ff 90       	pop	r15
     c6c:	ef 90       	pop	r14
     c6e:	df 90       	pop	r13
     c70:	cf 90       	pop	r12
     c72:	08 95       	ret

00000c74 <FUNCcopy>:
// copy: copy 'from' into 'to'; assume to is big enough
void FUNCcopy(char to[], char from[])
{
	int i;
	i = 0;
	while ((to[i] = from[i]) != '\0')
     c74:	fb 01       	movw	r30, r22
     c76:	20 81       	ld	r18, Z
     c78:	fc 01       	movw	r30, r24
     c7a:	20 83       	st	Z, r18
     c7c:	22 23       	and	r18, r18
     c7e:	39 f0       	breq	.+14     	; 0xc8e <FUNCcopy+0x1a>
     c80:	db 01       	movw	r26, r22
     c82:	11 96       	adiw	r26, 0x01	; 1
     c84:	31 96       	adiw	r30, 0x01	; 1
     c86:	9d 91       	ld	r25, X+
     c88:	91 93       	st	Z+, r25
     c8a:	91 11       	cpse	r25, r1
     c8c:	fc cf       	rjmp	.-8      	; 0xc86 <FUNCcopy+0x12>
     c8e:	08 95       	ret

00000c90 <FUNCsqueeze>:
		++i;
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	ec 01       	movw	r28, r24
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     c96:	98 81       	ld	r25, Y
     c98:	99 23       	and	r25, r25
     c9a:	99 f0       	breq	.+38     	; 0xcc2 <FUNCsqueeze+0x32>
     c9c:	fe 01       	movw	r30, r28
     c9e:	31 96       	adiw	r30, 0x01	; 1
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
     ca4:	49 2f       	mov	r20, r25
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	46 17       	cp	r20, r22
     caa:	57 07       	cpc	r21, r23
     cac:	31 f0       	breq	.+12     	; 0xcba <FUNCsqueeze+0x2a>
			s[j++] = s[i];
     cae:	de 01       	movw	r26, r28
     cb0:	a2 0f       	add	r26, r18
     cb2:	b3 1f       	adc	r27, r19
     cb4:	9c 93       	st	X, r25
     cb6:	2f 5f       	subi	r18, 0xFF	; 255
     cb8:	3f 4f       	sbci	r19, 0xFF	; 255
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     cba:	91 91       	ld	r25, Z+
     cbc:	91 11       	cpse	r25, r1
     cbe:	f2 cf       	rjmp	.-28     	; 0xca4 <FUNCsqueeze+0x14>
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <FUNCsqueeze+0x36>
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
			s[j++] = s[i];
		s[j] = '\0';
     cc6:	fe 01       	movw	r30, r28
     cc8:	e2 0f       	add	r30, r18
     cca:	f3 1f       	adc	r31, r19
     ccc:	10 82       	st	Z, r1
}
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	08 95       	ret

00000cd4 <FUNCshellsort>:
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
     cd4:	2f 92       	push	r2
     cd6:	3f 92       	push	r3
     cd8:	4f 92       	push	r4
     cda:	5f 92       	push	r5
     cdc:	6f 92       	push	r6
     cde:	7f 92       	push	r7
     ce0:	8f 92       	push	r8
     ce2:	9f 92       	push	r9
     ce4:	af 92       	push	r10
     ce6:	bf 92       	push	r11
     ce8:	cf 92       	push	r12
     cea:	df 92       	push	r13
     cec:	ef 92       	push	r14
     cee:	ff 92       	push	r15
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <FUNCshellsort+0x26>
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <FUNCshellsort+0x28>
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	2c 01       	movw	r4, r24
     d02:	1b 01       	movw	r2, r22
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     d04:	4b 01       	movw	r8, r22
     d06:	77 23       	and	r23, r23
     d08:	1c f4       	brge	.+6      	; 0xd10 <FUNCshellsort+0x3c>
     d0a:	2f ef       	ldi	r18, 0xFF	; 255
     d0c:	82 1a       	sub	r8, r18
     d0e:	92 0a       	sbc	r9, r18
     d10:	95 94       	asr	r9
     d12:	87 94       	ror	r8
     d14:	18 14       	cp	r1, r8
     d16:	19 04       	cpc	r1, r9
     d18:	0c f4       	brge	.+2      	; 0xd1c <FUNCshellsort+0x48>
     d1a:	51 c0       	rjmp	.+162    	; 0xdbe <FUNCshellsort+0xea>
     d1c:	6a c0       	rjmp	.+212    	; 0xdf2 <FUNCshellsort+0x11e>
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     d1e:	96 01       	movw	r18, r12
     d20:	dd 20       	and	r13, r13
     d22:	9c f1       	brlt	.+102    	; 0xd8a <FUNCshellsort+0xb6>
     d24:	f5 01       	movw	r30, r10
     d26:	40 81       	ld	r20, Z
     d28:	51 81       	ldd	r21, Z+1	; 0x01
     d2a:	f4 01       	movw	r30, r8
     d2c:	60 81       	ld	r22, Z
     d2e:	71 81       	ldd	r23, Z+1	; 0x01
     d30:	64 17       	cp	r22, r20
     d32:	75 07       	cpc	r23, r21
     d34:	54 f5       	brge	.+84     	; 0xd8a <FUNCshellsort+0xb6>
     d36:	8c 01       	movw	r16, r24
     d38:	0a 0d       	add	r16, r10
     d3a:	1b 1d       	adc	r17, r11
     d3c:	d4 01       	movw	r26, r8
     d3e:	bc 82       	std	Y+4, r11	; 0x04
     d40:	ab 82       	std	Y+3, r10	; 0x03
     d42:	ba 82       	std	Y+2, r11	; 0x02
     d44:	a9 82       	std	Y+1, r10	; 0x01
				temp = v[j];
				v[j] = v[j+gap];
     d46:	eb 81       	ldd	r30, Y+3	; 0x03
     d48:	fc 81       	ldd	r31, Y+4	; 0x04
     d4a:	71 83       	std	Z+1, r23	; 0x01
     d4c:	60 83       	st	Z, r22
				v[j+gap] = temp;
     d4e:	11 96       	adiw	r26, 0x01	; 1
     d50:	5c 93       	st	X, r21
     d52:	4e 93       	st	-X, r20
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     d54:	2e 19       	sub	r18, r14
     d56:	3f 09       	sbc	r19, r15
     d58:	c2 f0       	brmi	.+48     	; 0xd8a <FUNCshellsort+0xb6>
     d5a:	f8 01       	movw	r30, r16
     d5c:	40 81       	ld	r20, Z
     d5e:	51 81       	ldd	r21, Z+1	; 0x01
     d60:	e9 81       	ldd	r30, Y+1	; 0x01
     d62:	fa 81       	ldd	r31, Y+2	; 0x02
     d64:	60 81       	ld	r22, Z
     d66:	71 81       	ldd	r23, Z+1	; 0x01
     d68:	08 0f       	add	r16, r24
     d6a:	19 1f       	adc	r17, r25
     d6c:	e8 0f       	add	r30, r24
     d6e:	f9 1f       	adc	r31, r25
     d70:	fa 83       	std	Y+2, r31	; 0x02
     d72:	e9 83       	std	Y+1, r30	; 0x01
     d74:	eb 81       	ldd	r30, Y+3	; 0x03
     d76:	fc 81       	ldd	r31, Y+4	; 0x04
     d78:	e8 0f       	add	r30, r24
     d7a:	f9 1f       	adc	r31, r25
     d7c:	fc 83       	std	Y+4, r31	; 0x04
     d7e:	eb 83       	std	Y+3, r30	; 0x03
     d80:	a8 0f       	add	r26, r24
     d82:	b9 1f       	adc	r27, r25
     d84:	64 17       	cp	r22, r20
     d86:	75 07       	cpc	r23, r21
     d88:	f4 f2       	brlt	.-68     	; 0xd46 <FUNCshellsort+0x72>
     d8a:	ff ef       	ldi	r31, 0xFF	; 255
     d8c:	cf 1a       	sub	r12, r31
     d8e:	df 0a       	sbc	r13, r31
     d90:	22 e0       	ldi	r18, 0x02	; 2
     d92:	a2 0e       	add	r10, r18
     d94:	b1 1c       	adc	r11, r1
     d96:	e2 e0       	ldi	r30, 0x02	; 2
     d98:	8e 0e       	add	r8, r30
     d9a:	91 1c       	adc	r9, r1
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
     d9c:	c6 14       	cp	r12, r6
     d9e:	d7 04       	cpc	r13, r7
     da0:	09 f0       	breq	.+2      	; 0xda4 <FUNCshellsort+0xd0>
     da2:	bd cf       	rjmp	.-134    	; 0xd1e <FUNCshellsort+0x4a>
}
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     da4:	47 01       	movw	r8, r14
     da6:	ff 20       	and	r15, r15
     da8:	1c f4       	brge	.+6      	; 0xdb0 <FUNCshellsort+0xdc>
     daa:	ff ef       	ldi	r31, 0xFF	; 255
     dac:	8f 1a       	sub	r8, r31
     dae:	9f 0a       	sbc	r9, r31
     db0:	95 94       	asr	r9
     db2:	87 94       	ror	r8
     db4:	18 14       	cp	r1, r8
     db6:	19 04       	cpc	r1, r9
     db8:	e4 f4       	brge	.+56     	; 0xdf2 <FUNCshellsort+0x11e>
     dba:	74 01       	movw	r14, r8
     dbc:	01 c0       	rjmp	.+2      	; 0xdc0 <FUNCshellsort+0xec>
     dbe:	74 01       	movw	r14, r8
		for (i = gap; i < n; i++)
     dc0:	82 14       	cp	r8, r2
     dc2:	93 04       	cpc	r9, r3
     dc4:	7c f7       	brge	.-34     	; 0xda4 <FUNCshellsort+0xd0>
     dc6:	64 01       	movw	r12, r8
     dc8:	ce 18       	sub	r12, r14
     dca:	df 08       	sbc	r13, r15
     dcc:	56 01       	movw	r10, r12
     dce:	aa 0c       	add	r10, r10
     dd0:	bb 1c       	adc	r11, r11
     dd2:	a4 0c       	add	r10, r4
     dd4:	b5 1c       	adc	r11, r5
     dd6:	88 0c       	add	r8, r8
     dd8:	99 1c       	adc	r9, r9
     dda:	84 0c       	add	r8, r4
     ddc:	95 1c       	adc	r9, r5
     dde:	31 01       	movw	r6, r2
     de0:	6e 18       	sub	r6, r14
     de2:	7f 08       	sbc	r7, r15
     de4:	c7 01       	movw	r24, r14
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	91 95       	neg	r25
     dec:	81 95       	neg	r24
     dee:	91 09       	sbc	r25, r1
     df0:	96 cf       	rjmp	.-212    	; 0xd1e <FUNCshellsort+0x4a>
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
				temp = v[j];
				v[j] = v[j+gap];
				v[j+gap] = temp;
			}
}
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	ef 90       	pop	r14
     e06:	df 90       	pop	r13
     e08:	cf 90       	pop	r12
     e0a:	bf 90       	pop	r11
     e0c:	af 90       	pop	r10
     e0e:	9f 90       	pop	r9
     e10:	8f 90       	pop	r8
     e12:	7f 90       	pop	r7
     e14:	6f 90       	pop	r6
     e16:	5f 90       	pop	r5
     e18:	4f 90       	pop	r4
     e1a:	3f 90       	pop	r3
     e1c:	2f 90       	pop	r2
     e1e:	08 95       	ret

00000e20 <FUNCpmax>:
	if(a1 > a2){
		biggest = a1;
	}else{
		biggest = a2;
	}
	return biggest;
     e20:	86 17       	cp	r24, r22
     e22:	97 07       	cpc	r25, r23
     e24:	0c f4       	brge	.+2      	; 0xe28 <FUNCpmax+0x8>
     e26:	cb 01       	movw	r24, r22
}
     e28:	08 95       	ret

00000e2a <FUNCgcd>:
// common divisor
int FUNCgcd (int u, int v)
{
     e2a:	9b 01       	movw	r18, r22
	int temp;
	while ( v != 0 ) {
     e2c:	67 2b       	or	r22, r23
     e2e:	11 f4       	brne	.+4      	; 0xe34 <FUNCgcd+0xa>
     e30:	08 95       	ret
		temp = u % v;
		u = v;
		v = temp;
     e32:	9a 01       	movw	r18, r20
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
		temp = u % v;
     e34:	b9 01       	movw	r22, r18
     e36:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__divmodhi4>
     e3a:	ac 01       	movw	r20, r24
     e3c:	82 2f       	mov	r24, r18
     e3e:	93 2f       	mov	r25, r19
}
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
     e40:	41 15       	cp	r20, r1
     e42:	51 05       	cpc	r21, r1
     e44:	b1 f7       	brne	.-20     	; 0xe32 <FUNCgcd+0x8>
		temp = u % v;
		u = v;
		v = temp;
	}
	return u;
}
     e46:	08 95       	ret

00000e48 <FUNCstrToInt>:
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
     e48:	fc 01       	movw	r30, r24
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     e4a:	90 81       	ld	r25, Z
     e4c:	80 ed       	ldi	r24, 0xD0	; 208
     e4e:	89 0f       	add	r24, r25
     e50:	8a 30       	cpi	r24, 0x0A	; 10
     e52:	d0 f4       	brcc	.+52     	; 0xe88 <FUNCstrToInt+0x40>
     e54:	31 96       	adiw	r30, 0x01	; 1
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
		intValue = string[i] - '0';
		result = result * 10 + intValue;
     e5a:	a9 01       	movw	r20, r18
     e5c:	44 0f       	add	r20, r20
     e5e:	55 1f       	adc	r21, r21
     e60:	22 0f       	add	r18, r18
     e62:	33 1f       	adc	r19, r19
     e64:	22 0f       	add	r18, r18
     e66:	33 1f       	adc	r19, r19
     e68:	22 0f       	add	r18, r18
     e6a:	33 1f       	adc	r19, r19
     e6c:	42 0f       	add	r20, r18
     e6e:	53 1f       	adc	r21, r19
     e70:	29 2f       	mov	r18, r25
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	20 53       	subi	r18, 0x30	; 48
     e76:	31 09       	sbc	r19, r1
     e78:	24 0f       	add	r18, r20
     e7a:	35 1f       	adc	r19, r21
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     e7c:	91 91       	ld	r25, Z+
     e7e:	80 ed       	ldi	r24, 0xD0	; 208
     e80:	89 0f       	add	r24, r25
     e82:	8a 30       	cpi	r24, 0x0A	; 10
     e84:	50 f3       	brcs	.-44     	; 0xe5a <FUNCstrToInt+0x12>
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <FUNCstrToInt+0x44>
	return u;
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
		intValue = string[i] - '0';
		result = result * 10 + intValue;
	}
	return result;
}
     e8c:	c9 01       	movw	r24, r18
     e8e:	08 95       	ret

00000e90 <FUNCfilter>:
uint8_t FUNCfilter(uint8_t mask, uint8_t data)
{
	uint8_t Z;
	Z=mask & data;
	return Z;
}
     e90:	86 23       	and	r24, r22
     e92:	08 95       	ret

00000e94 <FUNCticks>:
// ticks
unsigned int FUNCticks(unsigned int num)
{
	unsigned int count;
	for(count=0;count<num;count++)
     e94:	00 97       	sbiw	r24, 0x00	; 0
     e96:	39 f0       	breq	.+14     	; 0xea6 <FUNCticks+0x12>
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	2f 5f       	subi	r18, 0xFF	; 255
     e9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ea0:	82 17       	cp	r24, r18
     ea2:	93 07       	cpc	r25, r19
     ea4:	d9 f7       	brne	.-10     	; 0xe9c <FUNCticks+0x8>
		;
	return count;
}
     ea6:	08 95       	ret

00000ea8 <FUNCtwocomptoint8bit>:
// Two's Complement function
int FUNCtwocomptoint8bit(int twoscomp){
  
  //Let's see if the byte is negative
  if (twoscomp & 0B10000000){
     ea8:	87 ff       	sbrs	r24, 7
     eaa:	08 c0       	rjmp	.+16     	; 0xebc <FUNCtwocomptoint8bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     eac:	91 95       	neg	r25
     eae:	81 95       	neg	r24
     eb0:	91 09       	sbc	r25, r1
	twoscomp = (twoscomp & 0B11111111);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     eb2:	99 27       	eor	r25, r25
     eb4:	91 95       	neg	r25
     eb6:	81 95       	neg	r24
     eb8:	91 09       	sbc	r25, r1
    return value;
     eba:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    //Make sure we are never over 1279
    twoscomp = (twoscomp & 0B01111111);
    //Cast as int and return
    int value = (int)(twoscomp);
    return value;
     ebc:	8f 77       	andi	r24, 0x7F	; 127
     ebe:	99 27       	eor	r25, r25
  }
}
     ec0:	08 95       	ret

00000ec2 <FUNCtwocomptoint10bit>:
// Two's Complement function, shifts 10 bit binary to signed integers (-512 to 512)
int FUNCtwocomptoint10bit(int twoscomp){
	
  //Let's see if the byte is negative
  if (twoscomp & 0x200){
     ec2:	91 ff       	sbrs	r25, 1
     ec4:	08 c0       	rjmp	.+16     	; 0xed6 <FUNCtwocomptoint10bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
     ec6:	91 95       	neg	r25
     ec8:	81 95       	neg	r24
     eca:	91 09       	sbc	r25, r1
    twoscomp = (twoscomp & 0x3FF);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
     ecc:	93 70       	andi	r25, 0x03	; 3
     ece:	91 95       	neg	r25
     ed0:	81 95       	neg	r24
     ed2:	91 09       	sbc	r25, r1
    return value;
     ed4:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    twoscomp = (twoscomp & 0x1FF);
    //Cast as int and return
    //Serial.println(twoscomp);
    int value = (int)(twoscomp);
    return value;
     ed6:	91 70       	andi	r25, 0x01	; 1
  }
}
     ed8:	08 95       	ret

00000eda <FUNCtwocomptointnbit>:
// Two's Complement function, nbits
int FUNCtwocomptointnbit(int twoscomp, uint8_t nbits){
  unsigned int signmask;
  unsigned int mask;
  signmask = (1<<(nbits-1));
     eda:	61 50       	subi	r22, 0x01	; 1
     edc:	21 e0       	ldi	r18, 0x01	; 1
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <FUNCtwocomptointnbit+0xc>
     ee2:	22 0f       	add	r18, r18
     ee4:	33 1f       	adc	r19, r19
     ee6:	6a 95       	dec	r22
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <FUNCtwocomptointnbit+0x8>
  mask=signmask-1;
     eea:	a9 01       	movw	r20, r18
     eec:	41 50       	subi	r20, 0x01	; 1
     eee:	51 09       	sbc	r21, r1
  //Let's see if the number is negative
  if (twoscomp & signmask){
     ef0:	b9 01       	movw	r22, r18
     ef2:	68 23       	and	r22, r24
     ef4:	79 23       	and	r23, r25
     ef6:	67 2b       	or	r22, r23
     ef8:	29 f0       	breq	.+10     	; 0xf04 <FUNCtwocomptointnbit+0x2a>
	twoscomp &= mask;
    twoscomp -= signmask;
     efa:	84 23       	and	r24, r20
     efc:	95 23       	and	r25, r21
     efe:	82 1b       	sub	r24, r18
     f00:	93 0b       	sbc	r25, r19
     f02:	08 95       	ret
  }else{
	  twoscomp &= mask;
     f04:	84 23       	and	r24, r20
     f06:	95 23       	and	r25, r21
  }
  return twoscomp;
}
     f08:	08 95       	ret

00000f0a <FUNCdec2bcd>:
// Convert Decimal to Binary Coded Decimal (BCD)
char FUNCdec2bcd(char num)
{
	return ((num/10 * 16) + (num % 10));
     f0a:	9d ec       	ldi	r25, 0xCD	; 205
     f0c:	89 9f       	mul	r24, r25
     f0e:	91 2d       	mov	r25, r1
     f10:	11 24       	eor	r1, r1
     f12:	96 95       	lsr	r25
     f14:	96 95       	lsr	r25
     f16:	96 95       	lsr	r25
     f18:	39 2f       	mov	r19, r25
     f1a:	33 0f       	add	r19, r19
     f1c:	23 2f       	mov	r18, r19
     f1e:	22 0f       	add	r18, r18
     f20:	22 0f       	add	r18, r18
     f22:	23 0f       	add	r18, r19
     f24:	82 1b       	sub	r24, r18
}
     f26:	20 e1       	ldi	r18, 0x10	; 16
     f28:	92 9f       	mul	r25, r18
     f2a:	80 0d       	add	r24, r0
     f2c:	11 24       	eor	r1, r1
     f2e:	08 95       	ret

00000f30 <FUNCbcd2dec>:
// Convert Binary Coded Decimal (BCD) to Decimal
char FUNCbcd2dec(char num)
{
	return ((num/16 * 10) + (num % 16));
     f30:	98 2f       	mov	r25, r24
     f32:	92 95       	swap	r25
     f34:	9f 70       	andi	r25, 0x0F	; 15
     f36:	99 0f       	add	r25, r25
     f38:	29 2f       	mov	r18, r25
     f3a:	22 0f       	add	r18, r18
     f3c:	22 0f       	add	r18, r18
     f3e:	92 0f       	add	r25, r18
     f40:	8f 70       	andi	r24, 0x0F	; 15
}
     f42:	89 0f       	add	r24, r25
     f44:	08 95       	ret

00000f46 <FUNCresizestr>:
char* FUNCresizestr(char *string, int size)
{
     f46:	fc 01       	movw	r30, r24
	int i;
	FUNCstr[size]='\0';
     f48:	db 01       	movw	r26, r22
     f4a:	a7 5e       	subi	r26, 0xE7	; 231
     f4c:	bc 4f       	sbci	r27, 0xFC	; 252
     f4e:	1c 92       	st	X, r1
	for(i=0;i<size;i++){
     f50:	16 16       	cp	r1, r22
     f52:	17 06       	cpc	r1, r23
     f54:	14 f5       	brge	.+68     	; 0xf9a <FUNCresizestr+0x54>
		if(*(string+i)=='\0'){
     f56:	90 81       	ld	r25, Z
     f58:	91 11       	cpse	r25, r1
     f5a:	0c c0       	rjmp	.+24     	; 0xf74 <FUNCresizestr+0x2e>
     f5c:	17 c0       	rjmp	.+46     	; 0xf8c <FUNCresizestr+0x46>
     f5e:	91 91       	ld	r25, Z+
     f60:	91 11       	cpse	r25, r1
     f62:	0d c0       	rjmp	.+26     	; 0xf7e <FUNCresizestr+0x38>
     f64:	15 c0       	rjmp	.+42     	; 0xf90 <FUNCresizestr+0x4a>
			for(;i<size;i++){
				FUNCstr[i]=' ';
     f66:	81 93       	st	Z+, r24
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
			for(;i<size;i++){
     f68:	2f 5f       	subi	r18, 0xFF	; 255
     f6a:	3f 4f       	sbci	r19, 0xFF	; 255
     f6c:	26 17       	cp	r18, r22
     f6e:	37 07       	cpc	r19, r23
     f70:	d4 f3       	brlt	.-12     	; 0xf66 <FUNCresizestr+0x20>
     f72:	13 c0       	rjmp	.+38     	; 0xf9a <FUNCresizestr+0x54>
     f74:	a9 e1       	ldi	r26, 0x19	; 25
     f76:	b3 e0       	ldi	r27, 0x03	; 3
     f78:	31 96       	adiw	r30, 0x01	; 1
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
			for(;i<size;i++){
				FUNCstr[i]=' ';
			}
			break;
		}
		FUNCstr[i]=*(string+i);
     f7e:	9d 93       	st	X+, r25
}
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
     f80:	2f 5f       	subi	r18, 0xFF	; 255
     f82:	3f 4f       	sbci	r19, 0xFF	; 255
     f84:	62 17       	cp	r22, r18
     f86:	73 07       	cpc	r23, r19
     f88:	51 f7       	brne	.-44     	; 0xf5e <FUNCresizestr+0x18>
     f8a:	07 c0       	rjmp	.+14     	; 0xf9a <FUNCresizestr+0x54>
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	f9 01       	movw	r30, r18
     f92:	e7 5e       	subi	r30, 0xE7	; 231
     f94:	fc 4f       	sbci	r31, 0xFC	; 252
		if(*(string+i)=='\0'){
			for(;i<size;i++){
				FUNCstr[i]=' ';
     f96:	80 e2       	ldi	r24, 0x20	; 32
     f98:	e6 cf       	rjmp	.-52     	; 0xf66 <FUNCresizestr+0x20>
			break;
		}
		FUNCstr[i]=*(string+i);
	}
	return FUNCstr;
}
     f9a:	89 e1       	ldi	r24, 0x19	; 25
     f9c:	93 e0       	ldi	r25, 0x03	; 3
     f9e:	08 95       	ret

00000fa0 <FUNCtrimmer>:
long FUNCtrimmer(long x, long in_min, long in_max, long out_min, long out_max)
/***
same as arduino map function.
***/
{
     fa0:	4f 92       	push	r4
     fa2:	5f 92       	push	r5
     fa4:	6f 92       	push	r6
     fa6:	7f 92       	push	r7
     fa8:	af 92       	push	r10
     faa:	bf 92       	push	r11
     fac:	cf 92       	push	r12
     fae:	df 92       	push	r13
     fb0:	ef 92       	push	r14
     fb2:	ff 92       	push	r15
     fb4:	0f 93       	push	r16
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	29 01       	movw	r4, r18
     fc2:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     fc4:	9b 01       	movw	r18, r22
     fc6:	ac 01       	movw	r20, r24
     fc8:	24 19       	sub	r18, r4
     fca:	35 09       	sbc	r19, r5
     fcc:	46 09       	sbc	r20, r6
     fce:	57 09       	sbc	r21, r7
     fd0:	89 89       	ldd	r24, Y+17	; 0x11
     fd2:	9a 89       	ldd	r25, Y+18	; 0x12
     fd4:	ab 89       	ldd	r26, Y+19	; 0x13
     fd6:	bc 89       	ldd	r27, Y+20	; 0x14
     fd8:	bc 01       	movw	r22, r24
     fda:	cd 01       	movw	r24, r26
     fdc:	6a 19       	sub	r22, r10
     fde:	7b 09       	sbc	r23, r11
     fe0:	8c 09       	sbc	r24, r12
     fe2:	9d 09       	sbc	r25, r13
     fe4:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__mulsi3>
     fe8:	a8 01       	movw	r20, r16
     fea:	97 01       	movw	r18, r14
     fec:	24 19       	sub	r18, r4
     fee:	35 09       	sbc	r19, r5
     ff0:	46 09       	sbc	r20, r6
     ff2:	57 09       	sbc	r21, r7
     ff4:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__divmodsi4>
     ff8:	ca 01       	movw	r24, r20
     ffa:	b9 01       	movw	r22, r18
     ffc:	6a 0d       	add	r22, r10
     ffe:	7b 1d       	adc	r23, r11
    1000:	8c 1d       	adc	r24, r12
    1002:	9d 1d       	adc	r25, r13
}
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	ff 90       	pop	r15
    100e:	ef 90       	pop	r14
    1010:	df 90       	pop	r13
    1012:	cf 90       	pop	r12
    1014:	bf 90       	pop	r11
    1016:	af 90       	pop	r10
    1018:	7f 90       	pop	r7
    101a:	6f 90       	pop	r6
    101c:	5f 90       	pop	r5
    101e:	4f 90       	pop	r4
    1020:	08 95       	ret

00001022 <Pwr>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	61 15       	cp	r22, r1
    1026:	71 05       	cpc	r23, r1
    1028:	99 f0       	breq	.+38     	; 0x1050 <Pwr+0x2e>
    102a:	41 e0       	ldi	r20, 0x01	; 1
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	21 e0       	ldi	r18, 0x01	; 1
    1030:	30 e0       	ldi	r19, 0x00	; 0
        p = p * bs;
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	fa 01       	movw	r30, r20
    1036:	e8 9f       	mul	r30, r24
    1038:	a0 01       	movw	r20, r0
    103a:	e9 9f       	mul	r30, r25
    103c:	50 0d       	add	r21, r0
    103e:	f8 9f       	mul	r31, r24
    1040:	50 0d       	add	r21, r0
    1042:	11 24       	eor	r1, r1
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    1044:	2f 5f       	subi	r18, 0xFF	; 255
    1046:	3f 4f       	sbci	r19, 0xFF	; 255
    1048:	62 17       	cp	r22, r18
    104a:	73 07       	cpc	r23, r19
    104c:	98 f7       	brcc	.-26     	; 0x1034 <Pwr+0x12>
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <Pwr+0x32>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    1050:	41 e0       	ldi	r20, 0x01	; 1
    1052:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 1; i <= n; ++i)
        p = p * bs;
    return p;
}
    1054:	ca 01       	movw	r24, r20
    1056:	08 95       	ret

00001058 <StringLength>:
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
    1058:	fc 01       	movw	r30, r24
    105a:	20 81       	ld	r18, Z
    105c:	22 23       	and	r18, r18
    105e:	41 f0       	breq	.+16     	; 0x1070 <StringLength+0x18>
    1060:	31 96       	adiw	r30, 0x01	; 1
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
		++count;
    1066:	01 96       	adiw	r24, 0x01	; 1
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
    1068:	21 91       	ld	r18, Z+
    106a:	21 11       	cpse	r18, r1
    106c:	fc cf       	rjmp	.-8      	; 0x1066 <StringLength+0xe>
    106e:	08 95       	ret
    return p;
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	90 e0       	ldi	r25, 0x00	; 0
	while ( string[count] != '\0' )
		++count;
	return count;
}
    1074:	08 95       	ret

00001076 <FUNCtrim>:
	Reverse(FUNCstr);
	return FUNCstr;
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	ec 01       	movw	r28, r24
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
    107c:	ed df       	rcall	.-38     	; 0x1058 <StringLength>
    107e:	9c 01       	movw	r18, r24
    1080:	21 50       	subi	r18, 0x01	; 1
    1082:	31 09       	sbc	r19, r1
    1084:	62 f0       	brmi	.+24     	; 0x109e <FUNCtrim+0x28>
    1086:	fe 01       	movw	r30, r28
    1088:	e8 0f       	add	r30, r24
    108a:	f9 1f       	adc	r31, r25
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
    108c:	92 91       	ld	r25, -Z
    108e:	90 32       	cpi	r25, 0x20	; 32
    1090:	19 f0       	breq	.+6      	; 0x1098 <FUNCtrim+0x22>
    1092:	99 50       	subi	r25, 0x09	; 9
    1094:	92 30       	cpi	r25, 0x02	; 2
    1096:	18 f4       	brcc	.+6      	; 0x109e <FUNCtrim+0x28>
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
    1098:	21 50       	subi	r18, 0x01	; 1
    109a:	31 09       	sbc	r19, r1
    109c:	b8 f7       	brcc	.-18     	; 0x108c <FUNCtrim+0x16>
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
			break;
	s[n+1] = '\0';
    109e:	c2 0f       	add	r28, r18
    10a0:	d3 1f       	adc	r29, r19
    10a2:	19 82       	std	Y+1, r1	; 0x01
	return n;
}
    10a4:	c9 01       	movw	r24, r18
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	08 95       	ret

000010ac <Reverse>:
		++count;
	return count;
}
// reverse: reverse string s in place
void Reverse(char s[])
{
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	ec 01       	movw	r28, r24
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
    10b2:	d2 df       	rcall	.-92     	; 0x1058 <StringLength>
    10b4:	9c 01       	movw	r18, r24
    10b6:	21 50       	subi	r18, 0x01	; 1
    10b8:	31 09       	sbc	r19, r1
    10ba:	12 16       	cp	r1, r18
    10bc:	13 06       	cpc	r1, r19
    10be:	84 f4       	brge	.+32     	; 0x10e0 <Reverse+0x34>
    10c0:	de 01       	movw	r26, r28
    10c2:	a8 0f       	add	r26, r24
    10c4:	b9 1f       	adc	r27, r25
    10c6:	fe 01       	movw	r30, r28
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
		c = s[i];
    10cc:	40 81       	ld	r20, Z
		s[i] = s[j];
    10ce:	5e 91       	ld	r21, -X
    10d0:	51 93       	st	Z+, r21
		s[j] = c;
    10d2:	4c 93       	st	X, r20
}
// reverse: reverse string s in place
void Reverse(char s[])
{
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
    10d4:	01 96       	adiw	r24, 0x01	; 1
    10d6:	21 50       	subi	r18, 0x01	; 1
    10d8:	31 09       	sbc	r19, r1
    10da:	82 17       	cp	r24, r18
    10dc:	93 07       	cpc	r25, r19
    10de:	b4 f3       	brlt	.-20     	; 0x10cc <Reverse+0x20>
		c = s[i];
		s[i] = s[j];
		s[j] = c;
	}
}
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	08 95       	ret

000010e6 <FUNCi32toa>:
				v[j+gap] = temp;
			}
}
// i32toa: convert n to characters in s
char* FUNCi32toa(int32_t n)
{
    10e6:	8f 92       	push	r8
    10e8:	9f 92       	push	r9
    10ea:	af 92       	push	r10
    10ec:	bf 92       	push	r11
    10ee:	cf 92       	push	r12
    10f0:	df 92       	push	r13
    10f2:	ef 92       	push	r14
    10f4:	ff 92       	push	r15
    10f6:	0f 93       	push	r16
    10f8:	1f 93       	push	r17
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	6b 01       	movw	r12, r22
    1100:	7c 01       	movw	r14, r24
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	ff 20       	and	r15, r15
    1108:	3c f4       	brge	.+14     	; 0x1118 <__stack+0x19>
    110a:	88 27       	eor	r24, r24
    110c:	99 27       	eor	r25, r25
    110e:	dc 01       	movw	r26, r24
    1110:	8c 19       	sub	r24, r12
    1112:	9d 09       	sbc	r25, r13
    1114:	ae 09       	sbc	r26, r14
    1116:	bf 09       	sbc	r27, r15
    1118:	bc 01       	movw	r22, r24
    111a:	cd 01       	movw	r24, r26
    111c:	10 e0       	ldi	r17, 0x00	; 0
	int32_t sign;
	if ((sign = n) < 0) // record sign
	n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
    111e:	0f 2e       	mov	r0, r31
    1120:	fa e0       	ldi	r31, 0x0A	; 10
    1122:	8f 2e       	mov	r8, r31
    1124:	91 2c       	mov	r9, r1
    1126:	a1 2c       	mov	r10, r1
    1128:	b1 2c       	mov	r11, r1
    112a:	f0 2d       	mov	r31, r0
    112c:	01 c0       	rjmp	.+2      	; 0x1130 <__stack+0x31>
    112e:	10 2f       	mov	r17, r16
    1130:	01 e0       	ldi	r16, 0x01	; 1
    1132:	01 0f       	add	r16, r17
    1134:	c1 2f       	mov	r28, r17
    1136:	d0 e0       	ldi	r29, 0x00	; 0
    1138:	c7 5e       	subi	r28, 0xE7	; 231
    113a:	dc 4f       	sbci	r29, 0xFC	; 252
    113c:	a5 01       	movw	r20, r10
    113e:	94 01       	movw	r18, r8
    1140:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__divmodsi4>
    1144:	60 5d       	subi	r22, 0xD0	; 208
    1146:	68 83       	st	Y, r22
	}while ((n /= 10) > 0); // delete it
    1148:	62 2f       	mov	r22, r18
    114a:	73 2f       	mov	r23, r19
    114c:	84 2f       	mov	r24, r20
    114e:	95 2f       	mov	r25, r21
    1150:	16 16       	cp	r1, r22
    1152:	17 06       	cpc	r1, r23
    1154:	18 06       	cpc	r1, r24
    1156:	19 06       	cpc	r1, r25
    1158:	54 f3       	brlt	.-44     	; 0x112e <__stack+0x2f>
	if (sign < 0)
    115a:	ff 20       	and	r15, r15
    115c:	44 f4       	brge	.+16     	; 0x116e <__stack+0x6f>
	FUNCstr[i++] = '-';
    115e:	e0 2f       	mov	r30, r16
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	e7 5e       	subi	r30, 0xE7	; 231
    1164:	fc 4f       	sbci	r31, 0xFC	; 252
    1166:	8d e2       	ldi	r24, 0x2D	; 45
    1168:	80 83       	st	Z, r24
    116a:	02 e0       	ldi	r16, 0x02	; 2
    116c:	01 0f       	add	r16, r17
	FUNCstr[i] = '\0';
    116e:	e0 2f       	mov	r30, r16
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	e7 5e       	subi	r30, 0xE7	; 231
    1174:	fc 4f       	sbci	r31, 0xFC	; 252
    1176:	10 82       	st	Z, r1
	Reverse(FUNCstr);
    1178:	89 e1       	ldi	r24, 0x19	; 25
    117a:	93 e0       	ldi	r25, 0x03	; 3
    117c:	97 df       	rcall	.-210    	; 0x10ac <Reverse>
	return FUNCstr;
}
    117e:	89 e1       	ldi	r24, 0x19	; 25
    1180:	93 e0       	ldi	r25, 0x03	; 3
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	ff 90       	pop	r15
    118c:	ef 90       	pop	r14
    118e:	df 90       	pop	r13
    1190:	cf 90       	pop	r12
    1192:	bf 90       	pop	r11
    1194:	af 90       	pop	r10
    1196:	9f 90       	pop	r9
    1198:	8f 90       	pop	r8
    119a:	08 95       	ret

0000119c <FUNCi16toa>:
// i16toa: convert n to characters in s
char* FUNCi16toa(int16_t n)
{
    119c:	0f 93       	push	r16
    119e:	1f 93       	push	r17
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	ec 01       	movw	r28, r24
    11a6:	99 23       	and	r25, r25
    11a8:	24 f4       	brge	.+8      	; 0x11b2 <FUNCi16toa+0x16>
    11aa:	88 27       	eor	r24, r24
    11ac:	99 27       	eor	r25, r25
    11ae:	8c 1b       	sub	r24, r28
    11b0:	9d 0b       	sbc	r25, r29
    11b2:	20 e0       	ldi	r18, 0x00	; 0
	int16_t sign;
	if ((sign = n) < 0) // record sign
		n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
    11b4:	0a e0       	ldi	r16, 0x0A	; 10
    11b6:	10 e0       	ldi	r17, 0x00	; 0
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <FUNCi16toa+0x20>
    11ba:	23 2f       	mov	r18, r19
    11bc:	31 e0       	ldi	r19, 0x01	; 1
    11be:	32 0f       	add	r19, r18
    11c0:	e2 2f       	mov	r30, r18
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	e7 5e       	subi	r30, 0xE7	; 231
    11c6:	fc 4f       	sbci	r31, 0xFC	; 252
    11c8:	b8 01       	movw	r22, r16
    11ca:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__divmodhi4>
    11ce:	80 5d       	subi	r24, 0xD0	; 208
    11d0:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
    11d2:	86 2f       	mov	r24, r22
    11d4:	97 2f       	mov	r25, r23
    11d6:	18 16       	cp	r1, r24
    11d8:	19 06       	cpc	r1, r25
    11da:	7c f3       	brlt	.-34     	; 0x11ba <FUNCi16toa+0x1e>
	if (sign < 0)
    11dc:	dd 23       	and	r29, r29
    11de:	44 f4       	brge	.+16     	; 0x11f0 <FUNCi16toa+0x54>
		FUNCstr[i++] = '-';
    11e0:	e3 2f       	mov	r30, r19
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	e7 5e       	subi	r30, 0xE7	; 231
    11e6:	fc 4f       	sbci	r31, 0xFC	; 252
    11e8:	8d e2       	ldi	r24, 0x2D	; 45
    11ea:	80 83       	st	Z, r24
    11ec:	32 e0       	ldi	r19, 0x02	; 2
    11ee:	32 0f       	add	r19, r18
	FUNCstr[i] = '\0';
    11f0:	e3 2f       	mov	r30, r19
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	e7 5e       	subi	r30, 0xE7	; 231
    11f6:	fc 4f       	sbci	r31, 0xFC	; 252
    11f8:	10 82       	st	Z, r1
	Reverse(FUNCstr);
    11fa:	89 e1       	ldi	r24, 0x19	; 25
    11fc:	93 e0       	ldi	r25, 0x03	; 3
    11fe:	56 df       	rcall	.-340    	; 0x10ac <Reverse>
	return FUNCstr;
}
    1200:	89 e1       	ldi	r24, 0x19	; 25
    1202:	93 e0       	ldi	r25, 0x03	; 3
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	08 95       	ret

0000120e <FUNCui16toa>:
// ui16toa: convert n to characters in s
char* FUNCui16toa(uint16_t n)
{
    120e:	cf 93       	push	r28
    1210:	ac 01       	movw	r20, r24
	uint8_t i;
	i = 0;
    1212:	e0 e0       	ldi	r30, 0x00	; 0
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
    1214:	c1 e0       	ldi	r28, 0x01	; 1
    1216:	ce 0f       	add	r28, r30
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	e7 5e       	subi	r30, 0xE7	; 231
    121c:	fc 4f       	sbci	r31, 0xFC	; 252
    121e:	9a 01       	movw	r18, r20
    1220:	ad ec       	ldi	r26, 0xCD	; 205
    1222:	bc ec       	ldi	r27, 0xCC	; 204
    1224:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__umulhisi3>
    1228:	96 95       	lsr	r25
    122a:	87 95       	ror	r24
    122c:	96 95       	lsr	r25
    122e:	87 95       	ror	r24
    1230:	96 95       	lsr	r25
    1232:	87 95       	ror	r24
    1234:	9c 01       	movw	r18, r24
    1236:	22 0f       	add	r18, r18
    1238:	33 1f       	adc	r19, r19
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	82 0f       	add	r24, r18
    1248:	93 1f       	adc	r25, r19
    124a:	9a 01       	movw	r18, r20
    124c:	28 1b       	sub	r18, r24
    124e:	39 0b       	sbc	r19, r25
    1250:	c9 01       	movw	r24, r18
    1252:	80 5d       	subi	r24, 0xD0	; 208
    1254:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
    1256:	9a 01       	movw	r18, r20
    1258:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__umulhisi3>
    125c:	ac 01       	movw	r20, r24
    125e:	56 95       	lsr	r21
    1260:	47 95       	ror	r20
    1262:	56 95       	lsr	r21
    1264:	47 95       	ror	r20
    1266:	56 95       	lsr	r21
    1268:	47 95       	ror	r20
char* FUNCui16toa(uint16_t n)
{
	uint8_t i;
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
    126a:	ec 2f       	mov	r30, r28
	}while ((n /= 10) > 0); // delete it
    126c:	41 15       	cp	r20, r1
    126e:	51 05       	cpc	r21, r1
    1270:	89 f6       	brne	.-94     	; 0x1214 <FUNCui16toa+0x6>
	FUNCstr[i] = '\0';
    1272:	ec 2f       	mov	r30, r28
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	e7 5e       	subi	r30, 0xE7	; 231
    1278:	fc 4f       	sbci	r31, 0xFC	; 252
    127a:	10 82       	st	Z, r1
	Reverse(FUNCstr);
    127c:	89 e1       	ldi	r24, 0x19	; 25
    127e:	93 e0       	ldi	r25, 0x03	; 3
    1280:	15 df       	rcall	.-470    	; 0x10ac <Reverse>
	return FUNCstr;
}
    1282:	89 e1       	ldi	r24, 0x19	; 25
    1284:	93 e0       	ldi	r25, 0x03	; 3
    1286:	cf 91       	pop	r28
    1288:	08 95       	ret

0000128a <FUNCbcd2bin>:
		s[j] = c;
	}
}
unsigned char FUNCbcd2bin(unsigned char val)
{
	return (val & 0x0f) + (val >> 4) * 10;
    128a:	98 2f       	mov	r25, r24
    128c:	92 95       	swap	r25
    128e:	9f 70       	andi	r25, 0x0F	; 15
    1290:	99 0f       	add	r25, r25
    1292:	29 2f       	mov	r18, r25
    1294:	22 0f       	add	r18, r18
    1296:	22 0f       	add	r18, r18
    1298:	92 0f       	add	r25, r18
    129a:	8f 70       	andi	r24, 0x0F	; 15
}
    129c:	89 0f       	add	r24, r25
    129e:	08 95       	ret

000012a0 <FUNCbin2bcd>:
unsigned char FUNCbin2bcd(unsigned val)
{
    12a0:	ac 01       	movw	r20, r24
	return ((val / 10) << 4) + val % 10;
    12a2:	9c 01       	movw	r18, r24
    12a4:	ad ec       	ldi	r26, 0xCD	; 205
    12a6:	bc ec       	ldi	r27, 0xCC	; 204
    12a8:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__umulhisi3>
    12ac:	96 95       	lsr	r25
    12ae:	87 95       	ror	r24
    12b0:	96 95       	lsr	r25
    12b2:	87 95       	ror	r24
    12b4:	96 95       	lsr	r25
    12b6:	87 95       	ror	r24
    12b8:	bc 01       	movw	r22, r24
    12ba:	66 0f       	add	r22, r22
    12bc:	77 1f       	adc	r23, r23
    12be:	9c 01       	movw	r18, r24
    12c0:	22 0f       	add	r18, r18
    12c2:	33 1f       	adc	r19, r19
    12c4:	22 0f       	add	r18, r18
    12c6:	33 1f       	adc	r19, r19
    12c8:	22 0f       	add	r18, r18
    12ca:	33 1f       	adc	r19, r19
    12cc:	26 0f       	add	r18, r22
    12ce:	37 1f       	adc	r19, r23
    12d0:	42 1b       	sub	r20, r18
    12d2:	53 0b       	sbc	r21, r19
}
    12d4:	34 2f       	mov	r19, r20
    12d6:	20 e1       	ldi	r18, 0x10	; 16
    12d8:	82 9f       	mul	r24, r18
    12da:	30 0d       	add	r19, r0
    12dc:	11 24       	eor	r1, r1
    12de:	83 2f       	mov	r24, r19
    12e0:	08 95       	ret

000012e2 <FUNCgcd1>:
long FUNCgcd1(long a, long b)
{
    12e2:	cf 92       	push	r12
    12e4:	df 92       	push	r13
    12e6:	ef 92       	push	r14
    12e8:	ff 92       	push	r15
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	28 97       	sbiw	r28, 0x08	; 8
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	6b 01       	movw	r12, r22
    1300:	7c 01       	movw	r14, r24
    1302:	69 83       	std	Y+1, r22	; 0x01
    1304:	7a 83       	std	Y+2, r23	; 0x02
    1306:	8b 83       	std	Y+3, r24	; 0x03
    1308:	9c 83       	std	Y+4, r25	; 0x04
    130a:	2d 83       	std	Y+5, r18	; 0x05
    130c:	3e 83       	std	Y+6, r19	; 0x06
    130e:	4f 83       	std	Y+7, r20	; 0x07
    1310:	58 87       	std	Y+8, r21	; 0x08
	long r;
	if (a < b)
    1312:	c2 16       	cp	r12, r18
    1314:	d3 06       	cpc	r13, r19
    1316:	e4 06       	cpc	r14, r20
    1318:	f5 06       	cpc	r15, r21
    131a:	34 f4       	brge	.+12     	; 0x1328 <FUNCgcd1+0x46>
		FUNCswap(&a, &b);
    131c:	be 01       	movw	r22, r28
    131e:	6b 5f       	subi	r22, 0xFB	; 251
    1320:	7f 4f       	sbci	r23, 0xFF	; 255
    1322:	ce 01       	movw	r24, r28
    1324:	01 96       	adiw	r24, 0x01	; 1
    1326:	85 dc       	rcall	.-1782   	; 0xc32 <FUNCswap>
	if (!b){
    1328:	8d 81       	ldd	r24, Y+5	; 0x05
    132a:	9e 81       	ldd	r25, Y+6	; 0x06
    132c:	af 81       	ldd	r26, Y+7	; 0x07
    132e:	b8 85       	ldd	r27, Y+8	; 0x08
    1330:	89 2b       	or	r24, r25
    1332:	8a 2b       	or	r24, r26
    1334:	8b 2b       	or	r24, r27
    1336:	71 f4       	brne	.+28     	; 0x1354 <FUNCgcd1+0x72>
		while ((r = a % b) != 0) {
    1338:	69 81       	ldd	r22, Y+1	; 0x01
    133a:	7a 81       	ldd	r23, Y+2	; 0x02
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	9c 81       	ldd	r25, Y+4	; 0x04
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	a9 01       	movw	r20, r18
    1346:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__divmodsi4>
    134a:	61 15       	cp	r22, r1
    134c:	71 05       	cpc	r23, r1
    134e:	81 05       	cpc	r24, r1
    1350:	91 05       	cpc	r25, r1
    1352:	29 f4       	brne	.+10     	; 0x135e <FUNCgcd1+0x7c>
			a = b;
			b = r;
		}
	}	
	return b;
    1354:	6d 81       	ldd	r22, Y+5	; 0x05
    1356:	7e 81       	ldd	r23, Y+6	; 0x06
    1358:	8f 81       	ldd	r24, Y+7	; 0x07
    135a:	98 85       	ldd	r25, Y+8	; 0x08
    135c:	05 c0       	rjmp	.+10     	; 0x1368 <FUNCgcd1+0x86>
	if (a < b)
		FUNCswap(&a, &b);
	if (!b){
		while ((r = a % b) != 0) {
			a = b;
			b = r;
    135e:	6d 83       	std	Y+5, r22	; 0x05
    1360:	7e 83       	std	Y+6, r23	; 0x06
    1362:	8f 83       	std	Y+7, r24	; 0x07
    1364:	98 87       	std	Y+8, r25	; 0x08
    1366:	f6 cf       	rjmp	.-20     	; 0x1354 <FUNCgcd1+0x72>
		}
	}	
	return b;
}
    1368:	28 96       	adiw	r28, 0x08	; 8
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	ff 90       	pop	r15
    137a:	ef 90       	pop	r14
    137c:	df 90       	pop	r13
    137e:	cf 90       	pop	r12
    1380:	08 95       	ret

00001382 <FUNCpincheck>:
	uint8_t lh;
	if(port & (1<<pin))
		lh=1;
	else
		lh=0;
	return lh;
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	02 c0       	rjmp	.+4      	; 0x138a <FUNCpincheck+0x8>
    1386:	95 95       	asr	r25
    1388:	87 95       	ror	r24
    138a:	6a 95       	dec	r22
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <FUNCpincheck+0x4>
}
    138e:	81 70       	andi	r24, 0x01	; 1
    1390:	08 95       	ret

00001392 <FUNCprint_binary>:
char* FUNCprint_binary(uint8_t number)
{
    1392:	e9 e1       	ldi	r30, 0x19	; 25
    1394:	f3 e0       	ldi	r31, 0x03	; 3
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	20 e8       	ldi	r18, 0x80	; 128
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
    139a:	50 e3       	ldi	r21, 0x30	; 48
    139c:	41 e3       	ldi	r20, 0x31	; 49
    139e:	38 2f       	mov	r19, r24
    13a0:	32 23       	and	r19, r18
    13a2:	11 f0       	breq	.+4      	; 0x13a8 <FUNCprint_binary+0x16>
    13a4:	40 83       	st	Z, r20
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <FUNCprint_binary+0x18>
    13a8:	50 83       	st	Z, r21
	return lh;
}
char* FUNCprint_binary(uint8_t number)
{
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
    13aa:	26 95       	lsr	r18
    13ac:	9f 5f       	subi	r25, 0xFF	; 255
    13ae:	31 96       	adiw	r30, 0x01	; 1
    13b0:	98 30       	cpi	r25, 0x08	; 8
    13b2:	a9 f7       	brne	.-22     	; 0x139e <FUNCprint_binary+0xc>
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
	}
	FUNCstr[c]='\0';
    13b4:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <FUNCstr+0x8>
	return FUNCstr;
}
    13b8:	89 e1       	ldi	r24, 0x19	; 25
    13ba:	93 e0       	ldi	r25, 0x03	; 3
    13bc:	08 95       	ret

000013be <FUNCmayia>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    13be:	a4 2f       	mov	r26, r20
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	10 97       	sbiw	r26, 0x00	; 0
    13c4:	61 f0       	breq	.+24     	; 0x13de <FUNCmayia+0x20>
    13c6:	21 e0       	ldi	r18, 0x01	; 1
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	e1 e0       	ldi	r30, 0x01	; 1
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
        p = p * bs;
    13ce:	ee 0f       	add	r30, r30
    13d0:	ff 1f       	adc	r31, r31
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    13d2:	2f 5f       	subi	r18, 0xFF	; 255
    13d4:	3f 4f       	sbci	r19, 0xFF	; 255
    13d6:	a2 17       	cp	r26, r18
    13d8:	b3 07       	cpc	r27, r19
    13da:	c8 f7       	brcc	.-14     	; 0x13ce <FUNCmayia+0x10>
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <FUNCmayia+0x24>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    13de:	e1 e0       	ldi	r30, 0x01	; 1
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
unsigned int FUNCmayia(unsigned int xi, unsigned int xf, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask=Pwr(2,nbits)-1;
    13e2:	31 97       	sbiw	r30, 0x01	; 1
	xi&=mask;
	xf&=mask;
    13e4:	6e 23       	and	r22, r30
    13e6:	7f 23       	and	r23, r31
	diff=xf^xi;
    13e8:	8e 23       	and	r24, r30
    13ea:	9f 23       	and	r25, r31
    13ec:	86 27       	eor	r24, r22
    13ee:	97 27       	eor	r25, r23
	trans=diff&xf;
	return (trans<<nbits)|diff;
    13f0:	68 23       	and	r22, r24
    13f2:	79 23       	and	r23, r25
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <FUNCmayia+0x3c>
    13f6:	66 0f       	add	r22, r22
    13f8:	77 1f       	adc	r23, r23
    13fa:	4a 95       	dec	r20
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <FUNCmayia+0x38>
}
    13fe:	86 2b       	or	r24, r22
    1400:	97 2b       	or	r25, r23
    1402:	08 95       	ret

00001404 <FUNCenable>:
int FUNCreadint(int nmin, int nmax);
***/
// uint8_t TRANupdate(struct TRAN *tr, uint8_t idata);
/***Procedure & Function***/
FUNC FUNCenable( void )
{
    1404:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG=SREG;
    1406:	9f b7       	in	r25, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1408:	8f b7       	in	r24, 0x3f	; 63
    140a:	8f 77       	andi	r24, 0x7F	; 127
    140c:	8f bf       	out	0x3f, r24	; 63
	func.putstr=FUNCputstr;
	func.getnum=FUNCgetnum;
	func.getnumv2=FUNCgetnumv2;
	func.readint=FUNCreadint;
	*/
	SREG=tSREG;
    140e:	9f bf       	out	0x3f, r25	; 63
	/******/
	return func;
    1410:	81 e1       	ldi	r24, 0x11	; 17
    1412:	98 e0       	ldi	r25, 0x08	; 8
    1414:	91 83       	std	Z+1, r25	; 0x01
    1416:	80 83       	st	Z, r24
    1418:	8c e2       	ldi	r24, 0x2C	; 44
    141a:	98 e0       	ldi	r25, 0x08	; 8
    141c:	93 83       	std	Z+3, r25	; 0x03
    141e:	82 83       	std	Z+2, r24	; 0x02
    1420:	86 e5       	ldi	r24, 0x56	; 86
    1422:	98 e0       	ldi	r25, 0x08	; 8
    1424:	95 83       	std	Z+5, r25	; 0x05
    1426:	84 83       	std	Z+4, r24	; 0x04
    1428:	8f ed       	ldi	r24, 0xDF	; 223
    142a:	99 e0       	ldi	r25, 0x09	; 9
    142c:	97 83       	std	Z+7, r25	; 0x07
    142e:	86 83       	std	Z+6, r24	; 0x06
    1430:	8e ef       	ldi	r24, 0xFE	; 254
    1432:	95 e0       	ldi	r25, 0x05	; 5
    1434:	91 87       	std	Z+9, r25	; 0x09
    1436:	80 87       	std	Z+8, r24	; 0x08
    1438:	8c e0       	ldi	r24, 0x0C	; 12
    143a:	96 e0       	ldi	r25, 0x06	; 6
    143c:	93 87       	std	Z+11, r25	; 0x0b
    143e:	82 87       	std	Z+10, r24	; 0x0a
    1440:	8e e0       	ldi	r24, 0x0E	; 14
    1442:	96 e0       	ldi	r25, 0x06	; 6
    1444:	95 87       	std	Z+13, r25	; 0x0d
    1446:	84 87       	std	Z+12, r24	; 0x0c
    1448:	81 e1       	ldi	r24, 0x11	; 17
    144a:	96 e0       	ldi	r25, 0x06	; 6
    144c:	97 87       	std	Z+15, r25	; 0x0f
    144e:	86 87       	std	Z+14, r24	; 0x0e
    1450:	84 e1       	ldi	r24, 0x14	; 20
    1452:	96 e0       	ldi	r25, 0x06	; 6
    1454:	91 8b       	std	Z+17, r25	; 0x11
    1456:	80 8b       	std	Z+16, r24	; 0x10
    1458:	87 e1       	ldi	r24, 0x17	; 23
    145a:	96 e0       	ldi	r25, 0x06	; 6
    145c:	93 8b       	std	Z+19, r25	; 0x13
    145e:	82 8b       	std	Z+18, r24	; 0x12
    1460:	88 e0       	ldi	r24, 0x08	; 8
    1462:	96 e0       	ldi	r25, 0x06	; 6
    1464:	95 8b       	std	Z+21, r25	; 0x15
    1466:	84 8b       	std	Z+20, r24	; 0x14
    1468:	8a e0       	ldi	r24, 0x0A	; 10
    146a:	96 e0       	ldi	r25, 0x06	; 6
    146c:	97 8b       	std	Z+23, r25	; 0x17
    146e:	86 8b       	std	Z+22, r24	; 0x16
    1470:	89 e1       	ldi	r24, 0x19	; 25
    1472:	96 e0       	ldi	r25, 0x06	; 6
    1474:	91 8f       	std	Z+25, r25	; 0x19
    1476:	80 8f       	std	Z+24, r24	; 0x18
    1478:	8a e3       	ldi	r24, 0x3A	; 58
    147a:	96 e0       	ldi	r25, 0x06	; 6
    147c:	93 8f       	std	Z+27, r25	; 0x1b
    147e:	82 8f       	std	Z+26, r24	; 0x1a
    1480:	88 e4       	ldi	r24, 0x48	; 72
    1482:	96 e0       	ldi	r25, 0x06	; 6
    1484:	95 8f       	std	Z+29, r25	; 0x1d
    1486:	84 8f       	std	Z+28, r24	; 0x1c
    1488:	8a e6       	ldi	r24, 0x6A	; 106
    148a:	96 e0       	ldi	r25, 0x06	; 6
    148c:	97 8f       	std	Z+31, r25	; 0x1f
    148e:	86 8f       	std	Z+30, r24	; 0x1e
    1490:	8e ec       	ldi	r24, 0xCE	; 206
    1492:	98 e0       	ldi	r25, 0x08	; 8
    1494:	91 a3       	std	Z+33, r25	; 0x21
    1496:	80 a3       	std	Z+32, r24	; 0x20
    1498:	87 e0       	ldi	r24, 0x07	; 7
    149a:	99 e0       	ldi	r25, 0x09	; 9
    149c:	93 a3       	std	Z+35, r25	; 0x23
    149e:	82 a3       	std	Z+34, r24	; 0x22
    14a0:	83 e7       	ldi	r24, 0x73	; 115
    14a2:	98 e0       	ldi	r25, 0x08	; 8
    14a4:	95 a3       	std	Z+37, r25	; 0x25
    14a6:	84 a3       	std	Z+36, r24	; 0x24
    14a8:	8b e3       	ldi	r24, 0x3B	; 59
    14aa:	98 e0       	ldi	r25, 0x08	; 8
    14ac:	97 a3       	std	Z+39, r25	; 0x27
    14ae:	86 a3       	std	Z+38, r24	; 0x26
    14b0:	80 e1       	ldi	r24, 0x10	; 16
    14b2:	97 e0       	ldi	r25, 0x07	; 7
    14b4:	91 a7       	std	Z+41, r25	; 0x29
    14b6:	80 a7       	std	Z+40, r24	; 0x28
    14b8:	85 e1       	ldi	r24, 0x15	; 21
    14ba:	97 e0       	ldi	r25, 0x07	; 7
    14bc:	93 a7       	std	Z+43, r25	; 0x2b
    14be:	82 a7       	std	Z+42, r24	; 0x2a
    14c0:	84 e2       	ldi	r24, 0x24	; 36
    14c2:	97 e0       	ldi	r25, 0x07	; 7
    14c4:	95 a7       	std	Z+45, r25	; 0x2d
    14c6:	84 a7       	std	Z+44, r24	; 0x2c
    14c8:	88 e4       	ldi	r24, 0x48	; 72
    14ca:	97 e0       	ldi	r25, 0x07	; 7
    14cc:	97 a7       	std	Z+47, r25	; 0x2f
    14ce:	86 a7       	std	Z+46, r24	; 0x2e
    14d0:	8a e4       	ldi	r24, 0x4A	; 74
    14d2:	97 e0       	ldi	r25, 0x07	; 7
    14d4:	91 ab       	std	Z+49, r25	; 0x31
    14d6:	80 ab       	std	Z+48, r24	; 0x30
    14d8:	84 e5       	ldi	r24, 0x54	; 84
    14da:	97 e0       	ldi	r25, 0x07	; 7
    14dc:	93 ab       	std	Z+51, r25	; 0x33
    14de:	82 ab       	std	Z+50, r24	; 0x32
    14e0:	81 e6       	ldi	r24, 0x61	; 97
    14e2:	97 e0       	ldi	r25, 0x07	; 7
    14e4:	95 ab       	std	Z+53, r25	; 0x35
    14e6:	84 ab       	std	Z+52, r24	; 0x34
    14e8:	8d e6       	ldi	r24, 0x6D	; 109
    14ea:	97 e0       	ldi	r25, 0x07	; 7
    14ec:	97 ab       	std	Z+55, r25	; 0x37
    14ee:	86 ab       	std	Z+54, r24	; 0x36
    14f0:	85 e8       	ldi	r24, 0x85	; 133
    14f2:	97 e0       	ldi	r25, 0x07	; 7
    14f4:	91 af       	std	Z+57, r25	; 0x39
    14f6:	80 af       	std	Z+56, r24	; 0x38
    14f8:	88 e9       	ldi	r24, 0x98	; 152
    14fa:	97 e0       	ldi	r25, 0x07	; 7
    14fc:	93 af       	std	Z+59, r25	; 0x3b
    14fe:	82 af       	std	Z+58, r24	; 0x3a
    1500:	83 ea       	ldi	r24, 0xA3	; 163
    1502:	97 e0       	ldi	r25, 0x07	; 7
    1504:	95 af       	std	Z+61, r25	; 0x3d
    1506:	84 af       	std	Z+60, r24	; 0x3c
    1508:	80 ed       	ldi	r24, 0xD0	; 208
    150a:	97 e0       	ldi	r25, 0x07	; 7
    150c:	97 af       	std	Z+63, r25	; 0x3f
    150e:	86 af       	std	Z+62, r24	; 0x3e
    1510:	df 01       	movw	r26, r30
    1512:	a0 5c       	subi	r26, 0xC0	; 192
    1514:	bf 4f       	sbci	r27, 0xFF	; 255
    1516:	85 e4       	ldi	r24, 0x45	; 69
    1518:	99 e0       	ldi	r25, 0x09	; 9
    151a:	11 96       	adiw	r26, 0x01	; 1
    151c:	9c 93       	st	X, r25
    151e:	8e 93       	st	-X, r24
    1520:	12 96       	adiw	r26, 0x02	; 2
    1522:	80 e5       	ldi	r24, 0x50	; 80
    1524:	99 e0       	ldi	r25, 0x09	; 9
    1526:	11 96       	adiw	r26, 0x01	; 1
    1528:	9c 93       	st	X, r25
    152a:	8e 93       	st	-X, r24
    152c:	12 96       	adiw	r26, 0x02	; 2
    152e:	81 e7       	ldi	r24, 0x71	; 113
    1530:	99 e0       	ldi	r25, 0x09	; 9
    1532:	11 96       	adiw	r26, 0x01	; 1
    1534:	9c 93       	st	X, r25
    1536:	8e 93       	st	-X, r24
    1538:	12 96       	adiw	r26, 0x02	; 2
    153a:	81 ec       	ldi	r24, 0xC1	; 193
    153c:	99 e0       	ldi	r25, 0x09	; 9
    153e:	11 96       	adiw	r26, 0x01	; 1
    1540:	9c 93       	st	X, r25
    1542:	8e 93       	st	-X, r24
    1544:	12 96       	adiw	r26, 0x02	; 2
    1546:	89 ec       	ldi	r24, 0xC9	; 201
    1548:	99 e0       	ldi	r25, 0x09	; 9
    154a:	8d 93       	st	X+, r24
    154c:	9c 93       	st	X, r25
}
    154e:	cf 01       	movw	r24, r30
    1550:	08 95       	ret

00001552 <KEYPAD_get>:
	}
	return data;
}
/***read***/
struct keypadata KEYPAD_get(void)
{
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	00 d0       	rcall	.+0      	; 0x1558 <KEYPAD_get+0x6>
    1558:	00 d0       	rcall	.+0      	; 0x155a <KEYPAD_get+0x8>
    155a:	1f 92       	push	r1
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
	return data;
    1560:	85 e0       	ldi	r24, 0x05	; 5
    1562:	ec e6       	ldi	r30, 0x6C	; 108
    1564:	f3 e0       	ldi	r31, 0x03	; 3
    1566:	de 01       	movw	r26, r28
    1568:	11 96       	adiw	r26, 0x01	; 1
    156a:	01 90       	ld	r0, Z+
    156c:	0d 92       	st	X+, r0
    156e:	8a 95       	dec	r24
    1570:	e1 f7       	brne	.-8      	; 0x156a <KEYPAD_get+0x18>
    1572:	29 81       	ldd	r18, Y+1	; 0x01
    1574:	3a 81       	ldd	r19, Y+2	; 0x02
    1576:	4b 81       	ldd	r20, Y+3	; 0x03
    1578:	5c 81       	ldd	r21, Y+4	; 0x04
    157a:	6d 81       	ldd	r22, Y+5	; 0x05
}
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	08 95       	ret

00001592 <KEYPAD_flush>:
/***flush***/
void KEYPAD_flush(void)
{
	KEYPADSTRINGINDEX=0;
    1592:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <KEYPADSTRINGINDEX>
	data.character=' ';
    1596:	ec e6       	ldi	r30, 0x6C	; 108
    1598:	f3 e0       	ldi	r31, 0x03	; 3
    159a:	80 e2       	ldi	r24, 0x20	; 32
    159c:	80 83       	st	Z, r24
	data.printstring="\0";
    159e:	80 e1       	ldi	r24, 0x10	; 16
    15a0:	91 e0       	ldi	r25, 0x01	; 1
    15a2:	92 83       	std	Z+2, r25	; 0x02
    15a4:	81 83       	std	Z+1, r24	; 0x01
	data.string="\0";
    15a6:	94 83       	std	Z+4, r25	; 0x04
    15a8:	83 83       	std	Z+3, r24	; 0x03
    15aa:	08 95       	ret

000015ac <KEYPAD_getkey>:
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
	//Going to use pull down method.
	return keypad;
}
char KEYPAD_getkey(void)
{
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	21 e0       	ldi	r18, 0x01	; 1
	uint8_t HL;
	char c='\0';
    15b2:	80 e0       	ldi	r24, 0x00	; 0
				*keypad_PORT|=(1<<KEYPADLINE_1);
				break;
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    15b4:	a1 e3       	ldi	r26, 0x31	; 49
    15b6:	b3 e0       	ldi	r27, 0x03	; 3
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    15b8:	e5 e3       	ldi	r30, 0x35	; 53
    15ba:	f3 e0       	ldi	r31, 0x03	; 3
					if(HL == (1<<KEYPADDATA_2))
						c=keypadvalue[1][1];
					if(HL == (1<<KEYPADDATA_3))
						c=keypadvalue[1][2];
					if(HL == (1<<KEYPADDATA_4))
						c=keypadvalue[1][3];
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	71 e0       	ldi	r23, 0x01	; 1
    15c0:	01 c0       	rjmp	.+2      	; 0x15c4 <KEYPAD_getkey+0x18>
    15c2:	2f 5f       	subi	r18, 0xFF	; 255
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
		switch (keypad_option)
    15c4:	9f ef       	ldi	r25, 0xFF	; 255
    15c6:	92 0f       	add	r25, r18
    15c8:	91 30       	cpi	r25, 0x01	; 1
    15ca:	09 f4       	brne	.+2      	; 0x15ce <KEYPAD_getkey+0x22>
    15cc:	4b c0       	rjmp	.+150    	; 0x1664 <KEYPAD_getkey+0xb8>
    15ce:	38 f0       	brcs	.+14     	; 0x15de <KEYPAD_getkey+0x32>
    15d0:	92 30       	cpi	r25, 0x02	; 2
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <KEYPAD_getkey+0x2a>
    15d4:	8c c0       	rjmp	.+280    	; 0x16ee <KEYPAD_getkey+0x142>
    15d6:	93 30       	cpi	r25, 0x03	; 3
    15d8:	09 f4       	brne	.+2      	; 0x15dc <KEYPAD_getkey+0x30>
    15da:	ce c0       	rjmp	.+412    	; 0x1778 <KEYPAD_getkey+0x1cc>
    15dc:	0e c1       	rjmp	.+540    	; 0x17fa <KEYPAD_getkey+0x24e>
		{
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
    15de:	40 91 3c 03 	lds	r20, 0x033C	; 0x80033c <keypad_DDR>
    15e2:	50 91 3d 03 	lds	r21, 0x033D	; 0x80033d <keypad_DDR+0x1>
    15e6:	ea 01       	movw	r28, r20
    15e8:	98 81       	ld	r25, Y
    15ea:	90 68       	ori	r25, 0x80	; 128
    15ec:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_1);
    15ee:	40 91 2e 03 	lds	r20, 0x032E	; 0x80032e <keypad_PORT>
    15f2:	50 91 2f 03 	lds	r21, 0x032F	; 0x80032f <keypad_PORT+0x1>
    15f6:	ea 01       	movw	r28, r20
    15f8:	98 81       	ld	r25, Y
    15fa:	9f 77       	andi	r25, 0x7F	; 127
    15fc:	98 83       	st	Y, r25
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    15fe:	40 91 3a 03 	lds	r20, 0x033A	; 0x80033a <keypad_PIN>
    1602:	50 91 3b 03 	lds	r21, 0x033B	; 0x80033b <keypad_PIN+0x1>
    1606:	ea 01       	movw	r28, r20
    1608:	38 81       	ld	r19, Y
    160a:	34 77       	andi	r19, 0x74	; 116
    160c:	3c 93       	st	X, r19
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
    160e:	90 81       	ld	r25, Z
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1610:	43 2f       	mov	r20, r19
    1612:	49 27       	eor	r20, r25
    1614:	94 23       	and	r25, r20
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
				*keypad_PORT&=~(1<<KEYPADLINE_1);
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
				keypad_datai.line_1=keypad_dataf.line_1;
    1616:	30 83       	st	Z, r19
				if(HL){
    1618:	99 23       	and	r25, r25
    161a:	99 f0       	breq	.+38     	; 0x1642 <KEYPAD_getkey+0x96>
					//decode index line one column what ?
					if(HL == (1<<KEYPADDATA_1))
    161c:	94 30       	cpi	r25, 0x04	; 4
    161e:	19 f4       	brne	.+6      	; 0x1626 <KEYPAD_getkey+0x7a>
						c=keypadvalue[0][0];
    1620:	eb 01       	movw	r28, r22
    1622:	88 81       	ld	r24, Y
    1624:	0a c0       	rjmp	.+20     	; 0x163a <KEYPAD_getkey+0x8e>
					if(HL == (1<<KEYPADDATA_2))
    1626:	90 31       	cpi	r25, 0x10	; 16
    1628:	19 f4       	brne	.+6      	; 0x1630 <KEYPAD_getkey+0x84>
						c=keypadvalue[0][1];
    162a:	eb 01       	movw	r28, r22
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	09 c0       	rjmp	.+18     	; 0x1642 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_3))
    1630:	90 32       	cpi	r25, 0x20	; 32
    1632:	19 f4       	brne	.+6      	; 0x163a <KEYPAD_getkey+0x8e>
						c=keypadvalue[0][2];
    1634:	eb 01       	movw	r28, r22
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	04 c0       	rjmp	.+8      	; 0x1642 <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_4))
    163a:	90 34       	cpi	r25, 0x40	; 64
    163c:	11 f4       	brne	.+4      	; 0x1642 <KEYPAD_getkey+0x96>
						c=keypadvalue[0][3];
    163e:	eb 01       	movw	r28, r22
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
				}
				*keypad_DDR&=~(1<<KEYPADLINE_1);
    1642:	40 91 3c 03 	lds	r20, 0x033C	; 0x80033c <keypad_DDR>
    1646:	50 91 3d 03 	lds	r21, 0x033D	; 0x80033d <keypad_DDR+0x1>
    164a:	ea 01       	movw	r28, r20
    164c:	98 81       	ld	r25, Y
    164e:	9f 77       	andi	r25, 0x7F	; 127
    1650:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_1);
    1652:	40 91 2e 03 	lds	r20, 0x032E	; 0x80032e <keypad_PORT>
    1656:	50 91 2f 03 	lds	r21, 0x032F	; 0x80032f <keypad_PORT+0x1>
    165a:	ea 01       	movw	r28, r20
    165c:	98 81       	ld	r25, Y
    165e:	90 68       	ori	r25, 0x80	; 128
    1660:	98 83       	st	Y, r25
				break;
    1662:	af cf       	rjmp	.-162    	; 0x15c2 <KEYPAD_getkey+0x16>
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
    1664:	40 91 3c 03 	lds	r20, 0x033C	; 0x80033c <keypad_DDR>
    1668:	50 91 3d 03 	lds	r21, 0x033D	; 0x80033d <keypad_DDR+0x1>
    166c:	ea 01       	movw	r28, r20
    166e:	98 81       	ld	r25, Y
    1670:	91 60       	ori	r25, 0x01	; 1
    1672:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_2);
    1674:	40 91 2e 03 	lds	r20, 0x032E	; 0x80032e <keypad_PORT>
    1678:	50 91 2f 03 	lds	r21, 0x032F	; 0x80032f <keypad_PORT+0x1>
    167c:	ea 01       	movw	r28, r20
    167e:	98 81       	ld	r25, Y
    1680:	9e 7f       	andi	r25, 0xFE	; 254
    1682:	98 83       	st	Y, r25
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1684:	40 91 3a 03 	lds	r20, 0x033A	; 0x80033a <keypad_PIN>
    1688:	50 91 3b 03 	lds	r21, 0x033B	; 0x80033b <keypad_PIN+0x1>
    168c:	ea 01       	movw	r28, r20
    168e:	38 81       	ld	r19, Y
    1690:	34 77       	andi	r19, 0x74	; 116
    1692:	11 96       	adiw	r26, 0x01	; 1
    1694:	3c 93       	st	X, r19
    1696:	11 97       	sbiw	r26, 0x01	; 1
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    1698:	91 81       	ldd	r25, Z+1	; 0x01
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    169a:	43 2f       	mov	r20, r19
    169c:	49 27       	eor	r20, r25
    169e:	94 23       	and	r25, r20
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
				keypad_datai.line_2=keypad_dataf.line_2;
    16a0:	31 83       	std	Z+1, r19	; 0x01
				if(HL){
    16a2:	99 23       	and	r25, r25
    16a4:	99 f0       	breq	.+38     	; 0x16cc <KEYPAD_getkey+0x120>
					//decode index line two column what ?
					if(HL == (1<<KEYPADDATA_1))
    16a6:	94 30       	cpi	r25, 0x04	; 4
    16a8:	19 f4       	brne	.+6      	; 0x16b0 <KEYPAD_getkey+0x104>
						c=keypadvalue[1][0];
    16aa:	eb 01       	movw	r28, r22
    16ac:	8c 81       	ldd	r24, Y+4	; 0x04
    16ae:	0a c0       	rjmp	.+20     	; 0x16c4 <KEYPAD_getkey+0x118>
					if(HL == (1<<KEYPADDATA_2))
    16b0:	90 31       	cpi	r25, 0x10	; 16
    16b2:	19 f4       	brne	.+6      	; 0x16ba <KEYPAD_getkey+0x10e>
						c=keypadvalue[1][1];
    16b4:	eb 01       	movw	r28, r22
    16b6:	8d 81       	ldd	r24, Y+5	; 0x05
    16b8:	09 c0       	rjmp	.+18     	; 0x16cc <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_3))
    16ba:	90 32       	cpi	r25, 0x20	; 32
    16bc:	19 f4       	brne	.+6      	; 0x16c4 <KEYPAD_getkey+0x118>
						c=keypadvalue[1][2];
    16be:	eb 01       	movw	r28, r22
    16c0:	8e 81       	ldd	r24, Y+6	; 0x06
    16c2:	04 c0       	rjmp	.+8      	; 0x16cc <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_4))
    16c4:	90 34       	cpi	r25, 0x40	; 64
    16c6:	11 f4       	brne	.+4      	; 0x16cc <KEYPAD_getkey+0x120>
						c=keypadvalue[1][3];
    16c8:	eb 01       	movw	r28, r22
    16ca:	8f 81       	ldd	r24, Y+7	; 0x07
				}
				*keypad_DDR&=~(1<<KEYPADLINE_2);
    16cc:	40 91 3c 03 	lds	r20, 0x033C	; 0x80033c <keypad_DDR>
    16d0:	50 91 3d 03 	lds	r21, 0x033D	; 0x80033d <keypad_DDR+0x1>
    16d4:	ea 01       	movw	r28, r20
    16d6:	98 81       	ld	r25, Y
    16d8:	9e 7f       	andi	r25, 0xFE	; 254
    16da:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_2);
    16dc:	40 91 2e 03 	lds	r20, 0x032E	; 0x80032e <keypad_PORT>
    16e0:	50 91 2f 03 	lds	r21, 0x032F	; 0x80032f <keypad_PORT+0x1>
    16e4:	ea 01       	movw	r28, r20
    16e6:	98 81       	ld	r25, Y
    16e8:	91 60       	ori	r25, 0x01	; 1
    16ea:	98 83       	st	Y, r25
				break;
    16ec:	6a cf       	rjmp	.-300    	; 0x15c2 <KEYPAD_getkey+0x16>
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
    16ee:	40 91 3c 03 	lds	r20, 0x033C	; 0x80033c <keypad_DDR>
    16f2:	50 91 3d 03 	lds	r21, 0x033D	; 0x80033d <keypad_DDR+0x1>
    16f6:	ea 01       	movw	r28, r20
    16f8:	98 81       	ld	r25, Y
    16fa:	92 60       	ori	r25, 0x02	; 2
    16fc:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_3);
    16fe:	40 91 2e 03 	lds	r20, 0x032E	; 0x80032e <keypad_PORT>
    1702:	50 91 2f 03 	lds	r21, 0x032F	; 0x80032f <keypad_PORT+0x1>
    1706:	ea 01       	movw	r28, r20
    1708:	98 81       	ld	r25, Y
    170a:	9d 7f       	andi	r25, 0xFD	; 253
    170c:	98 83       	st	Y, r25
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    170e:	40 91 3a 03 	lds	r20, 0x033A	; 0x80033a <keypad_PIN>
    1712:	50 91 3b 03 	lds	r21, 0x033B	; 0x80033b <keypad_PIN+0x1>
    1716:	ea 01       	movw	r28, r20
    1718:	38 81       	ld	r19, Y
    171a:	34 77       	andi	r19, 0x74	; 116
    171c:	12 96       	adiw	r26, 0x02	; 2
    171e:	3c 93       	st	X, r19
    1720:	12 97       	sbiw	r26, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
    1722:	92 81       	ldd	r25, Z+2	; 0x02
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1724:	43 2f       	mov	r20, r19
    1726:	49 27       	eor	r20, r25
    1728:	94 23       	and	r25, r20
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
				*keypad_PORT&=~(1<<KEYPADLINE_3);
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
				keypad_datai.line_3=keypad_dataf.line_3;
    172a:	32 83       	std	Z+2, r19	; 0x02
				if(HL){
    172c:	99 23       	and	r25, r25
    172e:	99 f0       	breq	.+38     	; 0x1756 <KEYPAD_getkey+0x1aa>
					//decode index line three column what ?
					if(HL == (1<<KEYPADDATA_1))
    1730:	94 30       	cpi	r25, 0x04	; 4
    1732:	19 f4       	brne	.+6      	; 0x173a <KEYPAD_getkey+0x18e>
						c=keypadvalue[2][0];
    1734:	eb 01       	movw	r28, r22
    1736:	88 85       	ldd	r24, Y+8	; 0x08
    1738:	0a c0       	rjmp	.+20     	; 0x174e <KEYPAD_getkey+0x1a2>
					if(HL == (1<<KEYPADDATA_2))
    173a:	90 31       	cpi	r25, 0x10	; 16
    173c:	19 f4       	brne	.+6      	; 0x1744 <KEYPAD_getkey+0x198>
						c=keypadvalue[2][1];
    173e:	eb 01       	movw	r28, r22
    1740:	89 85       	ldd	r24, Y+9	; 0x09
    1742:	09 c0       	rjmp	.+18     	; 0x1756 <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_3))
    1744:	90 32       	cpi	r25, 0x20	; 32
    1746:	19 f4       	brne	.+6      	; 0x174e <KEYPAD_getkey+0x1a2>
						c=keypadvalue[2][2];
    1748:	eb 01       	movw	r28, r22
    174a:	8a 85       	ldd	r24, Y+10	; 0x0a
    174c:	04 c0       	rjmp	.+8      	; 0x1756 <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_4))
    174e:	90 34       	cpi	r25, 0x40	; 64
    1750:	11 f4       	brne	.+4      	; 0x1756 <KEYPAD_getkey+0x1aa>
						c=keypadvalue[2][3];
    1752:	eb 01       	movw	r28, r22
    1754:	8b 85       	ldd	r24, Y+11	; 0x0b
				}
				*keypad_DDR&=~(1<<KEYPADLINE_3);
    1756:	40 91 3c 03 	lds	r20, 0x033C	; 0x80033c <keypad_DDR>
    175a:	50 91 3d 03 	lds	r21, 0x033D	; 0x80033d <keypad_DDR+0x1>
    175e:	ea 01       	movw	r28, r20
    1760:	98 81       	ld	r25, Y
    1762:	9d 7f       	andi	r25, 0xFD	; 253
    1764:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_3);
    1766:	40 91 2e 03 	lds	r20, 0x032E	; 0x80032e <keypad_PORT>
    176a:	50 91 2f 03 	lds	r21, 0x032F	; 0x80032f <keypad_PORT+0x1>
    176e:	ea 01       	movw	r28, r20
    1770:	98 81       	ld	r25, Y
    1772:	92 60       	ori	r25, 0x02	; 2
    1774:	98 83       	st	Y, r25
				break;
    1776:	25 cf       	rjmp	.-438    	; 0x15c2 <KEYPAD_getkey+0x16>
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
    1778:	e0 91 3c 03 	lds	r30, 0x033C	; 0x80033c <keypad_DDR>
    177c:	f0 91 3d 03 	lds	r31, 0x033D	; 0x80033d <keypad_DDR+0x1>
    1780:	90 81       	ld	r25, Z
    1782:	98 60       	ori	r25, 0x08	; 8
    1784:	90 83       	st	Z, r25
				*keypad_PORT&=~(1<<KEYPADLINE_4);
    1786:	e0 91 2e 03 	lds	r30, 0x032E	; 0x80032e <keypad_PORT>
    178a:	f0 91 2f 03 	lds	r31, 0x032F	; 0x80032f <keypad_PORT+0x1>
    178e:	90 81       	ld	r25, Z
    1790:	97 7f       	andi	r25, 0xF7	; 247
    1792:	90 83       	st	Z, r25
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1794:	e0 91 3a 03 	lds	r30, 0x033A	; 0x80033a <keypad_PIN>
    1798:	f0 91 3b 03 	lds	r31, 0x033B	; 0x80033b <keypad_PIN+0x1>
    179c:	20 81       	ld	r18, Z
    179e:	24 77       	andi	r18, 0x74	; 116
    17a0:	20 93 34 03 	sts	0x0334, r18	; 0x800334 <keypad_dataf+0x3>
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
    17a4:	e5 e3       	ldi	r30, 0x35	; 53
    17a6:	f3 e0       	ldi	r31, 0x03	; 3
    17a8:	93 81       	ldd	r25, Z+3	; 0x03
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    17aa:	32 2f       	mov	r19, r18
    17ac:	39 27       	eor	r19, r25
    17ae:	93 23       	and	r25, r19
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
				*keypad_PORT&=~(1<<KEYPADLINE_4);
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
				keypad_datai.line_4=keypad_dataf.line_4;
    17b0:	23 83       	std	Z+3, r18	; 0x03
				if(HL){
    17b2:	99 23       	and	r25, r25
    17b4:	99 f0       	breq	.+38     	; 0x17dc <KEYPAD_getkey+0x230>
					//decode index line four column what ?
					if(HL == (1<<KEYPADDATA_1))
    17b6:	94 30       	cpi	r25, 0x04	; 4
    17b8:	19 f4       	brne	.+6      	; 0x17c0 <KEYPAD_getkey+0x214>
						c=keypadvalue[3][0];
    17ba:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
    17be:	0a c0       	rjmp	.+20     	; 0x17d4 <KEYPAD_getkey+0x228>
					if(HL == (1<<KEYPADDATA_2))
    17c0:	90 31       	cpi	r25, 0x10	; 16
    17c2:	19 f4       	brne	.+6      	; 0x17ca <KEYPAD_getkey+0x21e>
						c=keypadvalue[3][1];
    17c4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
    17c8:	09 c0       	rjmp	.+18     	; 0x17dc <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_3))
    17ca:	90 32       	cpi	r25, 0x20	; 32
    17cc:	19 f4       	brne	.+6      	; 0x17d4 <KEYPAD_getkey+0x228>
						c=keypadvalue[3][2];
    17ce:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    17d2:	04 c0       	rjmp	.+8      	; 0x17dc <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_4))
    17d4:	90 34       	cpi	r25, 0x40	; 64
    17d6:	11 f4       	brne	.+4      	; 0x17dc <KEYPAD_getkey+0x230>
						c=keypadvalue[3][3];
    17d8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
				}
				*keypad_DDR&=~(1<<KEYPADLINE_4);
    17dc:	e0 91 3c 03 	lds	r30, 0x033C	; 0x80033c <keypad_DDR>
    17e0:	f0 91 3d 03 	lds	r31, 0x033D	; 0x80033d <keypad_DDR+0x1>
    17e4:	90 81       	ld	r25, Z
    17e6:	97 7f       	andi	r25, 0xF7	; 247
    17e8:	90 83       	st	Z, r25
				*keypad_PORT|=(1<<KEYPADLINE_4);
    17ea:	e0 91 2e 03 	lds	r30, 0x032E	; 0x80032e <keypad_PORT>
    17ee:	f0 91 2f 03 	lds	r31, 0x032F	; 0x80032f <keypad_PORT+0x1>
    17f2:	90 81       	ld	r25, Z
    17f4:	98 60       	ori	r25, 0x08	; 8
    17f6:	90 83       	st	Z, r25
    17f8:	03 c0       	rjmp	.+6      	; 0x1800 <KEYPAD_getkey+0x254>
char KEYPAD_getkey(void)
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
    17fa:	24 30       	cpi	r18, 0x04	; 4
    17fc:	08 f4       	brcc	.+2      	; 0x1800 <KEYPAD_getkey+0x254>
    17fe:	e1 ce       	rjmp	.-574    	; 0x15c2 <KEYPAD_getkey+0x16>
			default:
				break;
		}
	}
	return c;
}
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	08 95       	ret

00001806 <KEYPAD_read>:
/***read***/
struct keypadata KEYPAD_read(void)
{
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	00 d0       	rcall	.+0      	; 0x180c <KEYPAD_read+0x6>
    180c:	00 d0       	rcall	.+0      	; 0x180e <KEYPAD_read+0x8>
    180e:	1f 92       	push	r1
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
	char c;
	c=KEYPAD_getkey(); //returns null all the time when no entry
    1814:	cb de       	rcall	.-618    	; 0x15ac <KEYPAD_getkey>
	if(c){
    1816:	88 23       	and	r24, r24
    1818:	b1 f1       	breq	.+108    	; 0x1886 <KEYPAD_read+0x80>
		data.character=c;
    181a:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <data>
		if(KEYPADSTRINGINDEX<(KEYPADSTRINGSIZE)){
    181e:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <KEYPADSTRINGINDEX>
    1822:	94 31       	cpi	r25, 0x14	; 20
    1824:	88 f4       	brcc	.+34     	; 0x1848 <KEYPAD_read+0x42>
			KEYPAD_string[KEYPADSTRINGINDEX]=c;
    1826:	e0 91 39 03 	lds	r30, 0x0339	; 0x800339 <KEYPADSTRINGINDEX>
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	e2 5c       	subi	r30, 0xC2	; 194
    182e:	fc 4f       	sbci	r31, 0xFC	; 252
    1830:	80 83       	st	Z, r24
			KEYPADSTRINGINDEX++;
    1832:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <KEYPADSTRINGINDEX>
    1836:	9f 5f       	subi	r25, 0xFF	; 255
    1838:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <KEYPADSTRINGINDEX>
			KEYPAD_string[KEYPADSTRINGINDEX]='\0';
    183c:	e0 91 39 03 	lds	r30, 0x0339	; 0x800339 <KEYPADSTRINGINDEX>
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	e2 5c       	subi	r30, 0xC2	; 194
    1844:	fc 4f       	sbci	r31, 0xFC	; 252
    1846:	10 82       	st	Z, r1
		}
		if(c==KEYPADENTERKEY){
    1848:	84 34       	cpi	r24, 0x44	; 68
    184a:	99 f4       	brne	.+38     	; 0x1872 <KEYPAD_read+0x6c>
			KEYPAD_string[KEYPADSTRINGINDEX-1]='\0';
    184c:	e0 91 39 03 	lds	r30, 0x0339	; 0x800339 <KEYPADSTRINGINDEX>
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	e3 5c       	subi	r30, 0xC3	; 195
    1854:	fc 4f       	sbci	r31, 0xFC	; 252
    1856:	10 82       	st	Z, r1
			KEYPADSTRINGINDEX=0;
    1858:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <KEYPADSTRINGINDEX>
			data.printstring="\0";
    185c:	ec e6       	ldi	r30, 0x6C	; 108
    185e:	f3 e0       	ldi	r31, 0x03	; 3
    1860:	80 e1       	ldi	r24, 0x10	; 16
    1862:	91 e0       	ldi	r25, 0x01	; 1
    1864:	92 83       	std	Z+2, r25	; 0x02
    1866:	81 83       	std	Z+1, r24	; 0x01
			data.string=KEYPAD_string; // shift output
    1868:	8e e3       	ldi	r24, 0x3E	; 62
    186a:	93 e0       	ldi	r25, 0x03	; 3
    186c:	94 83       	std	Z+4, r25	; 0x04
    186e:	83 83       	std	Z+3, r24	; 0x03
    1870:	0a c0       	rjmp	.+20     	; 0x1886 <KEYPAD_read+0x80>
		}else{
			data.printstring=KEYPAD_string;
    1872:	ec e6       	ldi	r30, 0x6C	; 108
    1874:	f3 e0       	ldi	r31, 0x03	; 3
    1876:	8e e3       	ldi	r24, 0x3E	; 62
    1878:	93 e0       	ldi	r25, 0x03	; 3
    187a:	92 83       	std	Z+2, r25	; 0x02
    187c:	81 83       	std	Z+1, r24	; 0x01
			data.string="\0"; // clear output
    187e:	80 e1       	ldi	r24, 0x10	; 16
    1880:	91 e0       	ldi	r25, 0x01	; 1
    1882:	94 83       	std	Z+4, r25	; 0x04
    1884:	83 83       	std	Z+3, r24	; 0x03
		}
	}
	return data;
    1886:	85 e0       	ldi	r24, 0x05	; 5
    1888:	ec e6       	ldi	r30, 0x6C	; 108
    188a:	f3 e0       	ldi	r31, 0x03	; 3
    188c:	de 01       	movw	r26, r28
    188e:	11 96       	adiw	r26, 0x01	; 1
    1890:	01 90       	ld	r0, Z+
    1892:	0d 92       	st	X+, r0
    1894:	8a 95       	dec	r24
    1896:	e1 f7       	brne	.-8      	; 0x1890 <KEYPAD_read+0x8a>
    1898:	29 81       	ldd	r18, Y+1	; 0x01
    189a:	3a 81       	ldd	r19, Y+2	; 0x02
    189c:	4b 81       	ldd	r20, Y+3	; 0x03
    189e:	5c 81       	ldd	r21, Y+4	; 0x04
    18a0:	6d 81       	ldd	r22, Y+5	; 0x05
}
    18a2:	70 e0       	ldi	r23, 0x00	; 0
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	08 95       	ret

000018b8 <KEYPADenable>:
uint8_t KEYPADlh(uint8_t xi, uint8_t xf);
/***hl***/
uint8_t KEYPADhl(uint8_t xi, uint8_t xf);
/***Procedure & Function***/
KEYPAD KEYPADenable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	28 97       	sbiw	r28, 0x08	; 8
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
	//LOCAL VARIABLE
	uint8_t tSREG;
	tSREG=SREG;
    18cc:	2f b7       	in	r18, 0x3f	; 63
	data.character=' ';
    18ce:	30 e2       	ldi	r19, 0x20	; 32
    18d0:	30 93 6c 03 	sts	0x036C, r19	; 0x80036c <data>
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	KEYPAD keypad;
	//import parametros
	keypad_DDR=ddr;
    18d4:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <keypad_DDR+0x1>
    18d8:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <keypad_DDR>
	keypad_PIN=pin;
    18dc:	70 93 3b 03 	sts	0x033B, r23	; 0x80033b <keypad_PIN+0x1>
    18e0:	60 93 3a 03 	sts	0x033A, r22	; 0x80033a <keypad_PIN>
	keypad_PORT=port;
    18e4:	50 93 2f 03 	sts	0x032F, r21	; 0x80032f <keypad_PORT+0x1>
    18e8:	40 93 2e 03 	sts	0x032E, r20	; 0x80032e <keypad_PORT>
	//inic variables
	*keypad_DDR=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    18ec:	3b e8       	ldi	r19, 0x8B	; 139
    18ee:	fc 01       	movw	r30, r24
    18f0:	30 83       	st	Z, r19
	*keypad_PORT=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    18f2:	e0 91 2e 03 	lds	r30, 0x032E	; 0x80032e <keypad_PORT>
    18f6:	f0 91 2f 03 	lds	r31, 0x032F	; 0x80032f <keypad_PORT+0x1>
    18fa:	84 e7       	ldi	r24, 0x74	; 116
    18fc:	80 83       	st	Z, r24
	keypad_datai.line_1=keypad_dataf.line_1=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    18fe:	a1 e3       	ldi	r26, 0x31	; 49
    1900:	b3 e0       	ldi	r27, 0x03	; 3
    1902:	8c 93       	st	X, r24
    1904:	e5 e3       	ldi	r30, 0x35	; 53
    1906:	f3 e0       	ldi	r31, 0x03	; 3
    1908:	80 83       	st	Z, r24
	keypad_datai.line_2=keypad_dataf.line_2=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    190a:	11 96       	adiw	r26, 0x01	; 1
    190c:	8c 93       	st	X, r24
    190e:	11 97       	sbiw	r26, 0x01	; 1
    1910:	81 83       	std	Z+1, r24	; 0x01
	keypad_datai.line_3=keypad_dataf.line_3=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1912:	12 96       	adiw	r26, 0x02	; 2
    1914:	8c 93       	st	X, r24
    1916:	12 97       	sbiw	r26, 0x02	; 2
    1918:	82 83       	std	Z+2, r24	; 0x02
	keypad_datai.line_4=keypad_dataf.line_4=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    191a:	13 96       	adiw	r26, 0x03	; 3
    191c:	8c 93       	st	X, r24
    191e:	83 83       	std	Z+3, r24	; 0x03
	KEYPADSTRINGINDEX=0;
    1920:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <KEYPADSTRINGINDEX>
	//Vtable
	keypad.getkey=KEYPAD_getkey;
	keypad.read=KEYPAD_read;
	keypad.get=KEYPAD_get;
	keypad.flush=KEYPAD_flush;
	SREG=tSREG;
    1924:	2f bf       	out	0x3f, r18	; 63
	//
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    1926:	e0 91 2e 03 	lds	r30, 0x032E	; 0x80032e <keypad_PORT>
    192a:	f0 91 2f 03 	lds	r31, 0x032F	; 0x80032f <keypad_PORT+0x1>
    192e:	80 81       	ld	r24, Z
    1930:	8b 68       	ori	r24, 0x8B	; 139
    1932:	80 83       	st	Z, r24
	//Going to use pull down method.
	return keypad;
    1934:	26 ed       	ldi	r18, 0xD6	; 214
    1936:	3a e0       	ldi	r19, 0x0A	; 10
    1938:	3a 83       	std	Y+2, r19	; 0x02
    193a:	29 83       	std	Y+1, r18	; 0x01
    193c:	43 e0       	ldi	r20, 0x03	; 3
    193e:	5c e0       	ldi	r21, 0x0C	; 12
    1940:	5c 83       	std	Y+4, r21	; 0x04
    1942:	4b 83       	std	Y+3, r20	; 0x03
    1944:	69 ea       	ldi	r22, 0xA9	; 169
    1946:	7a e0       	ldi	r23, 0x0A	; 10
    1948:	7e 83       	std	Y+6, r23	; 0x06
    194a:	6d 83       	std	Y+5, r22	; 0x05
    194c:	89 ec       	ldi	r24, 0xC9	; 201
    194e:	9a e0       	ldi	r25, 0x0A	; 10
    1950:	98 87       	std	Y+8, r25	; 0x08
    1952:	8f 83       	std	Y+7, r24	; 0x07
    1954:	3a 81       	ldd	r19, Y+2	; 0x02
    1956:	5c 81       	ldd	r21, Y+4	; 0x04
    1958:	7e 81       	ldd	r23, Y+6	; 0x06
}
    195a:	98 85       	ldd	r25, Y+8	; 0x08
    195c:	28 96       	adiw	r28, 0x08	; 8
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	08 95       	ret

0000196e <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    196e:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1972:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1976:	90 81       	ld	r25, Z
    1978:	9d 7f       	andi	r25, 0xFD	; 253
    197a:	90 83       	st	Z, r25
    197c:	67 2b       	or	r22, r23
    197e:	41 f0       	breq	.+16     	; 0x1990 <LCD0_write+0x22>
    1980:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1984:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1988:	90 81       	ld	r25, Z
    198a:	91 60       	ori	r25, 0x01	; 1
    198c:	90 83       	st	Z, r25
    198e:	07 c0       	rjmp	.+14     	; 0x199e <LCD0_write+0x30>
    1990:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1994:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1998:	90 81       	ld	r25, Z
    199a:	9e 7f       	andi	r25, 0xFE	; 254
    199c:	90 83       	st	Z, r25
    199e:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <lcd0_DDR>
    19a2:	f0 91 5b 03 	lds	r31, 0x035B	; 0x80035b <lcd0_DDR+0x1>
    19a6:	90 81       	ld	r25, Z
    19a8:	90 6f       	ori	r25, 0xF0	; 240
    19aa:	90 83       	st	Z, r25
    19ac:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    19b0:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    19b4:	90 81       	ld	r25, Z
    19b6:	94 60       	ori	r25, 0x04	; 4
    19b8:	90 83       	st	Z, r25
    19ba:	88 23       	and	r24, r24
    19bc:	44 f4       	brge	.+16     	; 0x19ce <LCD0_write+0x60>
    19be:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    19c2:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    19c6:	90 81       	ld	r25, Z
    19c8:	90 68       	ori	r25, 0x80	; 128
    19ca:	90 83       	st	Z, r25
    19cc:	07 c0       	rjmp	.+14     	; 0x19dc <LCD0_write+0x6e>
    19ce:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    19d2:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    19d6:	90 81       	ld	r25, Z
    19d8:	9f 77       	andi	r25, 0x7F	; 127
    19da:	90 83       	st	Z, r25
    19dc:	86 ff       	sbrs	r24, 6
    19de:	08 c0       	rjmp	.+16     	; 0x19f0 <LCD0_write+0x82>
    19e0:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    19e4:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    19e8:	90 81       	ld	r25, Z
    19ea:	90 64       	ori	r25, 0x40	; 64
    19ec:	90 83       	st	Z, r25
    19ee:	07 c0       	rjmp	.+14     	; 0x19fe <LCD0_write+0x90>
    19f0:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    19f4:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    19f8:	90 81       	ld	r25, Z
    19fa:	9f 7b       	andi	r25, 0xBF	; 191
    19fc:	90 83       	st	Z, r25
    19fe:	85 ff       	sbrs	r24, 5
    1a00:	08 c0       	rjmp	.+16     	; 0x1a12 <LCD0_write+0xa4>
    1a02:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1a06:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1a0a:	90 81       	ld	r25, Z
    1a0c:	90 62       	ori	r25, 0x20	; 32
    1a0e:	90 83       	st	Z, r25
    1a10:	07 c0       	rjmp	.+14     	; 0x1a20 <LCD0_write+0xb2>
    1a12:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1a16:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1a1a:	90 81       	ld	r25, Z
    1a1c:	9f 7d       	andi	r25, 0xDF	; 223
    1a1e:	90 83       	st	Z, r25
    1a20:	84 ff       	sbrs	r24, 4
    1a22:	08 c0       	rjmp	.+16     	; 0x1a34 <LCD0_write+0xc6>
    1a24:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1a28:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1a2c:	90 81       	ld	r25, Z
    1a2e:	90 61       	ori	r25, 0x10	; 16
    1a30:	90 83       	st	Z, r25
    1a32:	07 c0       	rjmp	.+14     	; 0x1a42 <LCD0_write+0xd4>
    1a34:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1a38:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1a3c:	90 81       	ld	r25, Z
    1a3e:	9f 7e       	andi	r25, 0xEF	; 239
    1a40:	90 83       	st	Z, r25
    1a42:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1a46:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1a4a:	90 81       	ld	r25, Z
    1a4c:	9b 7f       	andi	r25, 0xFB	; 251
    1a4e:	90 83       	st	Z, r25
    1a50:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1a54:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1a58:	90 81       	ld	r25, Z
    1a5a:	94 60       	ori	r25, 0x04	; 4
    1a5c:	90 83       	st	Z, r25
    1a5e:	83 ff       	sbrs	r24, 3
    1a60:	08 c0       	rjmp	.+16     	; 0x1a72 <LCD0_write+0x104>
    1a62:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1a66:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1a6a:	90 81       	ld	r25, Z
    1a6c:	90 68       	ori	r25, 0x80	; 128
    1a6e:	90 83       	st	Z, r25
    1a70:	07 c0       	rjmp	.+14     	; 0x1a80 <LCD0_write+0x112>
    1a72:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1a76:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1a7a:	90 81       	ld	r25, Z
    1a7c:	9f 77       	andi	r25, 0x7F	; 127
    1a7e:	90 83       	st	Z, r25
    1a80:	82 ff       	sbrs	r24, 2
    1a82:	08 c0       	rjmp	.+16     	; 0x1a94 <LCD0_write+0x126>
    1a84:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1a88:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1a8c:	90 81       	ld	r25, Z
    1a8e:	90 64       	ori	r25, 0x40	; 64
    1a90:	90 83       	st	Z, r25
    1a92:	07 c0       	rjmp	.+14     	; 0x1aa2 <LCD0_write+0x134>
    1a94:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1a98:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1a9c:	90 81       	ld	r25, Z
    1a9e:	9f 7b       	andi	r25, 0xBF	; 191
    1aa0:	90 83       	st	Z, r25
    1aa2:	81 ff       	sbrs	r24, 1
    1aa4:	08 c0       	rjmp	.+16     	; 0x1ab6 <LCD0_write+0x148>
    1aa6:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1aaa:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1aae:	90 81       	ld	r25, Z
    1ab0:	90 62       	ori	r25, 0x20	; 32
    1ab2:	90 83       	st	Z, r25
    1ab4:	07 c0       	rjmp	.+14     	; 0x1ac4 <LCD0_write+0x156>
    1ab6:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1aba:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1abe:	90 81       	ld	r25, Z
    1ac0:	9f 7d       	andi	r25, 0xDF	; 223
    1ac2:	90 83       	st	Z, r25
    1ac4:	80 ff       	sbrs	r24, 0
    1ac6:	08 c0       	rjmp	.+16     	; 0x1ad8 <LCD0_write+0x16a>
    1ac8:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1acc:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1ad0:	80 81       	ld	r24, Z
    1ad2:	80 61       	ori	r24, 0x10	; 16
    1ad4:	80 83       	st	Z, r24
    1ad6:	07 c0       	rjmp	.+14     	; 0x1ae6 <LCD0_write+0x178>
    1ad8:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1adc:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1ae0:	80 81       	ld	r24, Z
    1ae2:	8f 7e       	andi	r24, 0xEF	; 239
    1ae4:	80 83       	st	Z, r24
    1ae6:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1aea:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1aee:	80 81       	ld	r24, Z
    1af0:	8b 7f       	andi	r24, 0xFB	; 251
    1af2:	80 83       	st	Z, r24
    1af4:	08 95       	ret

00001af6 <LCD0_read>:
    1af6:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <lcd0_DDR>
    1afa:	f0 91 5b 03 	lds	r31, 0x035B	; 0x80035b <lcd0_DDR+0x1>
    1afe:	20 81       	ld	r18, Z
    1b00:	2f 70       	andi	r18, 0x0F	; 15
    1b02:	20 83       	st	Z, r18
    1b04:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1b08:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1b0c:	20 81       	ld	r18, Z
    1b0e:	20 6f       	ori	r18, 0xF0	; 240
    1b10:	20 83       	st	Z, r18
    1b12:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1b16:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1b1a:	20 81       	ld	r18, Z
    1b1c:	22 60       	ori	r18, 0x02	; 2
    1b1e:	20 83       	st	Z, r18
    1b20:	89 2b       	or	r24, r25
    1b22:	41 f0       	breq	.+16     	; 0x1b34 <LCD0_read+0x3e>
    1b24:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1b28:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1b2c:	80 81       	ld	r24, Z
    1b2e:	81 60       	ori	r24, 0x01	; 1
    1b30:	80 83       	st	Z, r24
    1b32:	07 c0       	rjmp	.+14     	; 0x1b42 <LCD0_read+0x4c>
    1b34:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1b38:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1b3c:	80 81       	ld	r24, Z
    1b3e:	8e 7f       	andi	r24, 0xFE	; 254
    1b40:	80 83       	st	Z, r24
    1b42:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1b46:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1b4a:	80 81       	ld	r24, Z
    1b4c:	84 60       	ori	r24, 0x04	; 4
    1b4e:	80 83       	st	Z, r24
    1b50:	e0 91 53 03 	lds	r30, 0x0353	; 0x800353 <lcd0_PIN>
    1b54:	f0 91 54 03 	lds	r31, 0x0354	; 0x800354 <lcd0_PIN+0x1>
    1b58:	80 81       	ld	r24, Z
    1b5a:	88 23       	and	r24, r24
    1b5c:	14 f0       	brlt	.+4      	; 0x1b62 <LCD0_read+0x6c>
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	01 c0       	rjmp	.+2      	; 0x1b64 <LCD0_read+0x6e>
    1b62:	80 e8       	ldi	r24, 0x80	; 128
    1b64:	90 81       	ld	r25, Z
    1b66:	96 ff       	sbrs	r25, 6
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <LCD0_read+0x78>
    1b6a:	80 64       	ori	r24, 0x40	; 64
    1b6c:	01 c0       	rjmp	.+2      	; 0x1b70 <LCD0_read+0x7a>
    1b6e:	8f 7b       	andi	r24, 0xBF	; 191
    1b70:	90 81       	ld	r25, Z
    1b72:	95 ff       	sbrs	r25, 5
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <LCD0_read+0x84>
    1b76:	80 62       	ori	r24, 0x20	; 32
    1b78:	01 c0       	rjmp	.+2      	; 0x1b7c <LCD0_read+0x86>
    1b7a:	8f 7d       	andi	r24, 0xDF	; 223
    1b7c:	90 81       	ld	r25, Z
    1b7e:	94 ff       	sbrs	r25, 4
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <LCD0_read+0x90>
    1b82:	80 61       	ori	r24, 0x10	; 16
    1b84:	01 c0       	rjmp	.+2      	; 0x1b88 <LCD0_read+0x92>
    1b86:	8f 7e       	andi	r24, 0xEF	; 239
    1b88:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1b8c:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1b90:	90 81       	ld	r25, Z
    1b92:	9b 7f       	andi	r25, 0xFB	; 251
    1b94:	90 83       	st	Z, r25
    1b96:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1b9a:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1b9e:	90 81       	ld	r25, Z
    1ba0:	94 60       	ori	r25, 0x04	; 4
    1ba2:	90 83       	st	Z, r25
    1ba4:	e0 91 53 03 	lds	r30, 0x0353	; 0x800353 <lcd0_PIN>
    1ba8:	f0 91 54 03 	lds	r31, 0x0354	; 0x800354 <lcd0_PIN+0x1>
    1bac:	90 81       	ld	r25, Z
    1bae:	99 23       	and	r25, r25
    1bb0:	14 f4       	brge	.+4      	; 0x1bb6 <LCD0_read+0xc0>
    1bb2:	88 60       	ori	r24, 0x08	; 8
    1bb4:	01 c0       	rjmp	.+2      	; 0x1bb8 <LCD0_read+0xc2>
    1bb6:	87 7f       	andi	r24, 0xF7	; 247
    1bb8:	90 81       	ld	r25, Z
    1bba:	96 ff       	sbrs	r25, 6
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <LCD0_read+0xcc>
    1bbe:	84 60       	ori	r24, 0x04	; 4
    1bc0:	01 c0       	rjmp	.+2      	; 0x1bc4 <LCD0_read+0xce>
    1bc2:	8b 7f       	andi	r24, 0xFB	; 251
    1bc4:	90 81       	ld	r25, Z
    1bc6:	95 ff       	sbrs	r25, 5
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <LCD0_read+0xd8>
    1bca:	82 60       	ori	r24, 0x02	; 2
    1bcc:	01 c0       	rjmp	.+2      	; 0x1bd0 <LCD0_read+0xda>
    1bce:	8d 7f       	andi	r24, 0xFD	; 253
    1bd0:	90 81       	ld	r25, Z
    1bd2:	94 ff       	sbrs	r25, 4
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <LCD0_read+0xe4>
    1bd6:	81 60       	ori	r24, 0x01	; 1
    1bd8:	01 c0       	rjmp	.+2      	; 0x1bdc <LCD0_read+0xe6>
    1bda:	8e 7f       	andi	r24, 0xFE	; 254
    1bdc:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1be0:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1be4:	90 81       	ld	r25, Z
    1be6:	9b 7f       	andi	r25, 0xFB	; 251
    1be8:	90 83       	st	Z, r25
    1bea:	08 95       	ret

00001bec <LCD0_BF>:
    1bec:	cf 93       	push	r28
    1bee:	df 93       	push	r29
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	80 df       	rcall	.-256    	; 0x1af6 <LCD0_read>
    1bf6:	cb e0       	ldi	r28, 0x0B	; 11
    1bf8:	d0 e0       	ldi	r29, 0x00	; 0
    1bfa:	05 c0       	rjmp	.+10     	; 0x1c06 <LCD0_BF+0x1a>
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	7a df       	rcall	.-268    	; 0x1af6 <LCD0_read>
    1c02:	21 97       	sbiw	r28, 0x01	; 1
    1c04:	11 f0       	breq	.+4      	; 0x1c0a <LCD0_BF+0x1e>
    1c06:	88 23       	and	r24, r24
    1c08:	cc f3       	brlt	.-14     	; 0x1bfc <LCD0_BF+0x10>
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	08 95       	ret

00001c10 <LCD0_putch>:
    1c10:	61 e0       	ldi	r22, 0x01	; 1
    1c12:	70 e0       	ldi	r23, 0x00	; 0
    1c14:	ac de       	rcall	.-680    	; 0x196e <LCD0_write>
    1c16:	ea cf       	rjmp	.-44     	; 0x1bec <LCD0_BF>
    1c18:	08 95       	ret

00001c1a <LCD0_getch>:
    1c1a:	cf 93       	push	r28
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	6a df       	rcall	.-300    	; 0x1af6 <LCD0_read>
    1c22:	c8 2f       	mov	r28, r24
    1c24:	e3 df       	rcall	.-58     	; 0x1bec <LCD0_BF>
    1c26:	8c 2f       	mov	r24, r28
    1c28:	cf 91       	pop	r28
    1c2a:	08 95       	ret

00001c2c <LCD0_string>:
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
    1c30:	ec 01       	movw	r28, r24
    1c32:	88 81       	ld	r24, Y
    1c34:	88 23       	and	r24, r24
    1c36:	41 f0       	breq	.+16     	; 0x1c48 <LCD0_string+0x1c>
    1c38:	21 96       	adiw	r28, 0x01	; 1
    1c3a:	61 e0       	ldi	r22, 0x01	; 1
    1c3c:	70 e0       	ldi	r23, 0x00	; 0
    1c3e:	97 de       	rcall	.-722    	; 0x196e <LCD0_write>
    1c40:	d5 df       	rcall	.-86     	; 0x1bec <LCD0_BF>
    1c42:	89 91       	ld	r24, Y+
    1c44:	81 11       	cpse	r24, r1
    1c46:	f9 cf       	rjmp	.-14     	; 0x1c3a <LCD0_string+0xe>
    1c48:	df 91       	pop	r29
    1c4a:	cf 91       	pop	r28
    1c4c:	08 95       	ret

00001c4e <LCD0_string_size>:
    1c4e:	0f 93       	push	r16
    1c50:	1f 93       	push	r17
    1c52:	cf 93       	push	r28
    1c54:	df 93       	push	r29
    1c56:	fc 01       	movw	r30, r24
    1c58:	d6 2f       	mov	r29, r22
    1c5a:	80 81       	ld	r24, Z
    1c5c:	88 23       	and	r24, r24
    1c5e:	51 f0       	breq	.+20     	; 0x1c74 <LCD0_string_size+0x26>
    1c60:	8f 01       	movw	r16, r30
    1c62:	0f 5f       	subi	r16, 0xFF	; 255
    1c64:	1f 4f       	sbci	r17, 0xFF	; 255
    1c66:	61 11       	cpse	r22, r1
    1c68:	09 c0       	rjmp	.+18     	; 0x1c7c <LCD0_string_size+0x2e>
    1c6a:	1b c0       	rjmp	.+54     	; 0x1ca2 <LCD0_string_size+0x54>
    1c6c:	cf 5f       	subi	r28, 0xFF	; 255
    1c6e:	dc 17       	cp	r29, r28
    1c70:	30 f4       	brcc	.+12     	; 0x1c7e <LCD0_string_size+0x30>
    1c72:	01 c0       	rjmp	.+2      	; 0x1c76 <LCD0_string_size+0x28>
    1c74:	c0 e0       	ldi	r28, 0x00	; 0
    1c76:	cd 17       	cp	r28, r29
    1c78:	60 f0       	brcs	.+24     	; 0x1c92 <LCD0_string_size+0x44>
    1c7a:	13 c0       	rjmp	.+38     	; 0x1ca2 <LCD0_string_size+0x54>
    1c7c:	c1 e0       	ldi	r28, 0x01	; 1
    1c7e:	61 e0       	ldi	r22, 0x01	; 1
    1c80:	70 e0       	ldi	r23, 0x00	; 0
    1c82:	75 de       	rcall	.-790    	; 0x196e <LCD0_write>
    1c84:	b3 df       	rcall	.-154    	; 0x1bec <LCD0_BF>
    1c86:	f8 01       	movw	r30, r16
    1c88:	81 91       	ld	r24, Z+
    1c8a:	8f 01       	movw	r16, r30
    1c8c:	81 11       	cpse	r24, r1
    1c8e:	ee cf       	rjmp	.-36     	; 0x1c6c <LCD0_string_size+0x1e>
    1c90:	f2 cf       	rjmp	.-28     	; 0x1c76 <LCD0_string_size+0x28>
    1c92:	cf 5f       	subi	r28, 0xFF	; 255
    1c94:	61 e0       	ldi	r22, 0x01	; 1
    1c96:	70 e0       	ldi	r23, 0x00	; 0
    1c98:	80 e2       	ldi	r24, 0x20	; 32
    1c9a:	69 de       	rcall	.-814    	; 0x196e <LCD0_write>
    1c9c:	a7 df       	rcall	.-178    	; 0x1bec <LCD0_BF>
    1c9e:	cd 17       	cp	r28, r29
    1ca0:	c0 f3       	brcs	.-16     	; 0x1c92 <LCD0_string_size+0x44>
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	1f 91       	pop	r17
    1ca8:	0f 91       	pop	r16
    1caa:	08 95       	ret

00001cac <LCD0_hspace>:
    1cac:	cf 93       	push	r28
    1cae:	c8 2f       	mov	r28, r24
    1cb0:	88 23       	and	r24, r24
    1cb2:	39 f0       	breq	.+14     	; 0x1cc2 <LCD0_hspace+0x16>
    1cb4:	61 e0       	ldi	r22, 0x01	; 1
    1cb6:	70 e0       	ldi	r23, 0x00	; 0
    1cb8:	80 e2       	ldi	r24, 0x20	; 32
    1cba:	59 de       	rcall	.-846    	; 0x196e <LCD0_write>
    1cbc:	97 df       	rcall	.-210    	; 0x1bec <LCD0_BF>
    1cbe:	c1 50       	subi	r28, 0x01	; 1
    1cc0:	c9 f7       	brne	.-14     	; 0x1cb4 <LCD0_hspace+0x8>
    1cc2:	cf 91       	pop	r28
    1cc4:	08 95       	ret

00001cc6 <LCD0_gotoxy>:
    1cc6:	26 2f       	mov	r18, r22
    1cc8:	81 30       	cpi	r24, 0x01	; 1
    1cca:	91 05       	cpc	r25, r1
    1ccc:	71 f0       	breq	.+28     	; 0x1cea <LCD0_gotoxy+0x24>
    1cce:	30 f0       	brcs	.+12     	; 0x1cdc <LCD0_gotoxy+0x16>
    1cd0:	82 30       	cpi	r24, 0x02	; 2
    1cd2:	91 05       	cpc	r25, r1
    1cd4:	89 f0       	breq	.+34     	; 0x1cf8 <LCD0_gotoxy+0x32>
    1cd6:	03 97       	sbiw	r24, 0x03	; 3
    1cd8:	b1 f0       	breq	.+44     	; 0x1d06 <LCD0_gotoxy+0x40>
    1cda:	08 95       	ret
    1cdc:	60 e0       	ldi	r22, 0x00	; 0
    1cde:	70 e0       	ldi	r23, 0x00	; 0
    1ce0:	80 e8       	ldi	r24, 0x80	; 128
    1ce2:	82 0f       	add	r24, r18
    1ce4:	44 de       	rcall	.-888    	; 0x196e <LCD0_write>
    1ce6:	82 cf       	rjmp	.-252    	; 0x1bec <LCD0_BF>
    1ce8:	08 95       	ret
    1cea:	60 e0       	ldi	r22, 0x00	; 0
    1cec:	70 e0       	ldi	r23, 0x00	; 0
    1cee:	80 ec       	ldi	r24, 0xC0	; 192
    1cf0:	82 0f       	add	r24, r18
    1cf2:	3d de       	rcall	.-902    	; 0x196e <LCD0_write>
    1cf4:	7b cf       	rjmp	.-266    	; 0x1bec <LCD0_BF>
    1cf6:	08 95       	ret
    1cf8:	60 e0       	ldi	r22, 0x00	; 0
    1cfa:	70 e0       	ldi	r23, 0x00	; 0
    1cfc:	84 e9       	ldi	r24, 0x94	; 148
    1cfe:	82 0f       	add	r24, r18
    1d00:	36 de       	rcall	.-916    	; 0x196e <LCD0_write>
    1d02:	74 cf       	rjmp	.-280    	; 0x1bec <LCD0_BF>
    1d04:	08 95       	ret
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	84 ed       	ldi	r24, 0xD4	; 212
    1d0c:	82 0f       	add	r24, r18
    1d0e:	2f de       	rcall	.-930    	; 0x196e <LCD0_write>
    1d10:	6d cf       	rjmp	.-294    	; 0x1bec <LCD0_BF>
    1d12:	08 95       	ret

00001d14 <LCD0_clear>:
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	70 e0       	ldi	r23, 0x00	; 0
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	29 de       	rcall	.-942    	; 0x196e <LCD0_write>
    1d1c:	87 ee       	ldi	r24, 0xE7	; 231
    1d1e:	97 e1       	ldi	r25, 0x17	; 23
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <LCD0_clear+0xc>
    1d24:	00 c0       	rjmp	.+0      	; 0x1d26 <LCD0_clear+0x12>
    1d26:	00 00       	nop
    1d28:	08 95       	ret

00001d2a <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    1d2a:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <lcd0_DDR>
    1d2e:	f0 91 5b 03 	lds	r31, 0x035B	; 0x80035b <lcd0_DDR+0x1>
    1d32:	87 e0       	ldi	r24, 0x07	; 7
    1d34:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    1d36:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1d3a:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1d3e:	88 e0       	ldi	r24, 0x08	; 8
    1d40:	80 83       	st	Z, r24
    1d42:	2f ef       	ldi	r18, 0xFF	; 255
    1d44:	83 ef       	ldi	r24, 0xF3	; 243
    1d46:	91 e0       	ldi	r25, 0x01	; 1
    1d48:	21 50       	subi	r18, 0x01	; 1
    1d4a:	80 40       	sbci	r24, 0x00	; 0
    1d4c:	90 40       	sbci	r25, 0x00	; 0
    1d4e:	e1 f7       	brne	.-8      	; 0x1d48 <LCD0_inic+0x1e>
    1d50:	00 c0       	rjmp	.+0      	; 0x1d52 <LCD0_inic+0x28>
    1d52:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    1d54:	60 e0       	ldi	r22, 0x00	; 0
    1d56:	70 e0       	ldi	r23, 0x00	; 0
    1d58:	83 e3       	ldi	r24, 0x33	; 51
    1d5a:	09 de       	rcall	.-1006   	; 0x196e <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d5c:	20 ed       	ldi	r18, 0xD0	; 208
    1d5e:	2a 95       	dec	r18
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <LCD0_inic+0x34>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    1d62:	60 e0       	ldi	r22, 0x00	; 0
    1d64:	70 e0       	ldi	r23, 0x00	; 0
    1d66:	83 e3       	ldi	r24, 0x33	; 51
    1d68:	02 de       	rcall	.-1020   	; 0x196e <LCD0_write>
    1d6a:	80 ed       	ldi	r24, 0xD0	; 208
    1d6c:	8a 95       	dec	r24
    1d6e:	f1 f7       	brne	.-4      	; 0x1d6c <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    1d70:	60 e0       	ldi	r22, 0x00	; 0
    1d72:	70 e0       	ldi	r23, 0x00	; 0
    1d74:	8b e2       	ldi	r24, 0x2B	; 43
    1d76:	fb dd       	rcall	.-1034   	; 0x196e <LCD0_write>
    1d78:	95 ec       	ldi	r25, 0xC5	; 197
    1d7a:	9a 95       	dec	r25
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <LCD0_inic+0x50>
    1d7e:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    1d80:	60 e0       	ldi	r22, 0x00	; 0
    1d82:	70 e0       	ldi	r23, 0x00	; 0
    1d84:	8c e0       	ldi	r24, 0x0C	; 12
    1d86:	f3 dd       	rcall	.-1050   	; 0x196e <LCD0_write>
    1d88:	25 ec       	ldi	r18, 0xC5	; 197
    1d8a:	2a 95       	dec	r18
    1d8c:	f1 f7       	brne	.-4      	; 0x1d8a <LCD0_inic+0x60>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    1d8e:	00 00       	nop
    1d90:	60 e0       	ldi	r22, 0x00	; 0
    1d92:	70 e0       	ldi	r23, 0x00	; 0
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	eb dd       	rcall	.-1066   	; 0x196e <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d98:	87 ee       	ldi	r24, 0xE7	; 231
    1d9a:	97 e1       	ldi	r25, 0x17	; 23
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	f1 f7       	brne	.-4      	; 0x1d9c <LCD0_inic+0x72>
    1da0:	00 c0       	rjmp	.+0      	; 0x1da2 <LCD0_inic+0x78>
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    1da2:	00 00       	nop
    1da4:	60 e0       	ldi	r22, 0x00	; 0
    1da6:	70 e0       	ldi	r23, 0x00	; 0
    1da8:	86 e0       	ldi	r24, 0x06	; 6
    1daa:	e1 dd       	rcall	.-1086   	; 0x196e <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1dac:	95 ec       	ldi	r25, 0xC5	; 197
    1dae:	9a 95       	dec	r25
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <LCD0_inic+0x84>
    1db2:	00 00       	nop
    1db4:	08 95       	ret

00001db6 <LCD0enable>:
void LCD1_strobe(unsigned int num);
void LCD1_reboot(void);
unsigned int LCD_ticks(unsigned int num);
/***Procedure & Function***/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1db6:	1f 93       	push	r17
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    1dbe:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1dc0:	8f b7       	in	r24, 0x3f	; 63
    1dc2:	8f 77       	andi	r24, 0x7F	; 127
    1dc4:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    1dc6:	70 93 5b 03 	sts	0x035B, r23	; 0x80035b <lcd0_DDR+0x1>
    1dca:	60 93 5a 03 	sts	0x035A, r22	; 0x80035a <lcd0_DDR>
	lcd0_PIN=pin;
    1dce:	50 93 54 03 	sts	0x0354, r21	; 0x800354 <lcd0_PIN+0x1>
    1dd2:	40 93 53 03 	sts	0x0353, r20	; 0x800353 <lcd0_PIN>
	lcd0_PORT=port;
    1dd6:	30 93 5e 03 	sts	0x035E, r19	; 0x80035e <lcd0_PORT+0x1>
    1dda:	20 93 5d 03 	sts	0x035D, r18	; 0x80035d <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    1dde:	fb 01       	movw	r30, r22
    1de0:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    1de2:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <lcd0_PORT>
    1de6:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <lcd0_PORT+0x1>
    1dea:	8f ef       	ldi	r24, 0xFF	; 255
    1dec:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    1dee:	e0 91 53 03 	lds	r30, 0x0353	; 0x800353 <lcd0_PIN>
    1df2:	f0 91 54 03 	lds	r31, 0x0354	; 0x800354 <lcd0_PIN+0x1>
    1df6:	80 81       	ld	r24, Z
    1df8:	88 70       	andi	r24, 0x08	; 8
    1dfa:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    1dfe:	95 df       	rcall	.-214    	; 0x1d2a <LCD0_inic>
	SREG=tSREG;
    1e00:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    1e02:	87 eb       	ldi	r24, 0xB7	; 183
    1e04:	9c e0       	ldi	r25, 0x0C	; 12
    1e06:	99 83       	std	Y+1, r25	; 0x01
    1e08:	88 83       	st	Y, r24
    1e0a:	8b e7       	ldi	r24, 0x7B	; 123
    1e0c:	9d e0       	ldi	r25, 0x0D	; 13
    1e0e:	9b 83       	std	Y+3, r25	; 0x03
    1e10:	8a 83       	std	Y+2, r24	; 0x02
    1e12:	86 ef       	ldi	r24, 0xF6	; 246
    1e14:	9d e0       	ldi	r25, 0x0D	; 13
    1e16:	9d 83       	std	Y+5, r25	; 0x05
    1e18:	8c 83       	std	Y+4, r24	; 0x04
    1e1a:	88 e0       	ldi	r24, 0x08	; 8
    1e1c:	9e e0       	ldi	r25, 0x0E	; 14
    1e1e:	9f 83       	std	Y+7, r25	; 0x07
    1e20:	8e 83       	std	Y+6, r24	; 0x06
    1e22:	8d e0       	ldi	r24, 0x0D	; 13
    1e24:	9e e0       	ldi	r25, 0x0E	; 14
    1e26:	99 87       	std	Y+9, r25	; 0x09
    1e28:	88 87       	std	Y+8, r24	; 0x08
    1e2a:	86 e1       	ldi	r24, 0x16	; 22
    1e2c:	9e e0       	ldi	r25, 0x0E	; 14
    1e2e:	9b 87       	std	Y+11, r25	; 0x0b
    1e30:	8a 87       	std	Y+10, r24	; 0x0a
    1e32:	87 e2       	ldi	r24, 0x27	; 39
    1e34:	9e e0       	ldi	r25, 0x0E	; 14
    1e36:	9d 87       	std	Y+13, r25	; 0x0d
    1e38:	8c 87       	std	Y+12, r24	; 0x0c
    1e3a:	86 e5       	ldi	r24, 0x56	; 86
    1e3c:	9e e0       	ldi	r25, 0x0E	; 14
    1e3e:	9f 87       	std	Y+15, r25	; 0x0f
    1e40:	8e 87       	std	Y+14, r24	; 0x0e
    1e42:	8a e8       	ldi	r24, 0x8A	; 138
    1e44:	9e e0       	ldi	r25, 0x0E	; 14
    1e46:	99 8b       	std	Y+17, r25	; 0x11
    1e48:	88 8b       	std	Y+16, r24	; 0x10
    1e4a:	83 e6       	ldi	r24, 0x63	; 99
    1e4c:	9e e0       	ldi	r25, 0x0E	; 14
    1e4e:	9b 8b       	std	Y+19, r25	; 0x13
    1e50:	8a 8b       	std	Y+18, r24	; 0x12
    1e52:	82 e3       	ldi	r24, 0x32	; 50
    1e54:	9f e0       	ldi	r25, 0x0F	; 15
    1e56:	9d 8b       	std	Y+21, r25	; 0x15
    1e58:	8c 8b       	std	Y+20, r24	; 0x14
}
    1e5a:	ce 01       	movw	r24, r28
    1e5c:	df 91       	pop	r29
    1e5e:	cf 91       	pop	r28
    1e60:	1f 91       	pop	r17
    1e62:	08 95       	ret

00001e64 <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    1e64:	cf 93       	push	r28
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    1e66:	e0 91 53 03 	lds	r30, 0x0353	; 0x800353 <lcd0_PIN>
    1e6a:	f0 91 54 03 	lds	r31, 0x0354	; 0x800354 <lcd0_PIN+0x1>
    1e6e:	c0 81       	ld	r28, Z
    1e70:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    1e72:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <lcd0_detect>
    1e76:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    1e78:	8c 23       	and	r24, r28
    1e7a:	09 f0       	breq	.+2      	; 0x1e7e <LCD0_reboot+0x1a>
		LCD0_inic();
    1e7c:	56 df       	rcall	.-340    	; 0x1d2a <LCD0_inic>
	lcd0_detect=tmp;
    1e7e:	c0 93 5c 03 	sts	0x035C, r28	; 0x80035c <lcd0_detect>
}
    1e82:	cf 91       	pop	r28
    1e84:	08 95       	ret

00001e86 <ZNPID_set_kc>:
	return (value_1 + value_2);
}
float product(float value_1, float value_2)
{
	return (value_1 * value_2);
}
    1e86:	fc 01       	movw	r30, r24
    1e88:	40 83       	st	Z, r20
    1e8a:	51 83       	std	Z+1, r21	; 0x01
    1e8c:	62 83       	std	Z+2, r22	; 0x02
    1e8e:	73 83       	std	Z+3, r23	; 0x03
    1e90:	08 95       	ret

00001e92 <ZNPID_set_ki>:
    1e92:	fc 01       	movw	r30, r24
    1e94:	44 83       	std	Z+4, r20	; 0x04
    1e96:	55 83       	std	Z+5, r21	; 0x05
    1e98:	66 83       	std	Z+6, r22	; 0x06
    1e9a:	77 83       	std	Z+7, r23	; 0x07
    1e9c:	08 95       	ret

00001e9e <ZNPID_set_kd>:
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	40 87       	std	Z+8, r20	; 0x08
    1ea2:	51 87       	std	Z+9, r21	; 0x09
    1ea4:	62 87       	std	Z+10, r22	; 0x0a
    1ea6:	73 87       	std	Z+11, r23	; 0x0b
    1ea8:	08 95       	ret

00001eaa <ZNPID_set_SP>:
    1eaa:	fc 01       	movw	r30, r24
    1eac:	40 a3       	std	Z+32, r20	; 0x20
    1eae:	51 a3       	std	Z+33, r21	; 0x21
    1eb0:	62 a3       	std	Z+34, r22	; 0x22
    1eb2:	73 a3       	std	Z+35, r23	; 0x23
    1eb4:	08 95       	ret

00001eb6 <ZNPIDenable>:
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	9f b7       	in	r25, 0x3f	; 63
    1eba:	8f b7       	in	r24, 0x3f	; 63
    1ebc:	8f 77       	andi	r24, 0x7F	; 127
    1ebe:	8f bf       	out	0x3f, r24	; 63
    1ec0:	9f bf       	out	0x3f, r25	; 63
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	a0 e8       	ldi	r26, 0x80	; 128
    1ec8:	bf e3       	ldi	r27, 0x3F	; 63
    1eca:	80 83       	st	Z, r24
    1ecc:	91 83       	std	Z+1, r25	; 0x01
    1ece:	a2 83       	std	Z+2, r26	; 0x02
    1ed0:	b3 83       	std	Z+3, r27	; 0x03
    1ed2:	14 82       	std	Z+4, r1	; 0x04
    1ed4:	15 82       	std	Z+5, r1	; 0x05
    1ed6:	16 82       	std	Z+6, r1	; 0x06
    1ed8:	17 82       	std	Z+7, r1	; 0x07
    1eda:	10 86       	std	Z+8, r1	; 0x08
    1edc:	11 86       	std	Z+9, r1	; 0x09
    1ede:	12 86       	std	Z+10, r1	; 0x0a
    1ee0:	13 86       	std	Z+11, r1	; 0x0b
    1ee2:	14 86       	std	Z+12, r1	; 0x0c
    1ee4:	15 86       	std	Z+13, r1	; 0x0d
    1ee6:	16 86       	std	Z+14, r1	; 0x0e
    1ee8:	17 86       	std	Z+15, r1	; 0x0f
    1eea:	10 8e       	std	Z+24, r1	; 0x18
    1eec:	11 8e       	std	Z+25, r1	; 0x19
    1eee:	12 8e       	std	Z+26, r1	; 0x1a
    1ef0:	13 8e       	std	Z+27, r1	; 0x1b
    1ef2:	14 8e       	std	Z+28, r1	; 0x1c
    1ef4:	15 8e       	std	Z+29, r1	; 0x1d
    1ef6:	16 8e       	std	Z+30, r1	; 0x1e
    1ef8:	17 8e       	std	Z+31, r1	; 0x1f
    1efa:	10 a6       	std	Z+40, r1	; 0x28
    1efc:	11 a6       	std	Z+41, r1	; 0x29
    1efe:	12 a6       	std	Z+42, r1	; 0x2a
    1f00:	13 a6       	std	Z+43, r1	; 0x2b
    1f02:	83 e4       	ldi	r24, 0x43	; 67
    1f04:	9f e0       	ldi	r25, 0x0F	; 15
    1f06:	95 a7       	std	Z+45, r25	; 0x2d
    1f08:	84 a7       	std	Z+44, r24	; 0x2c
    1f0a:	89 e4       	ldi	r24, 0x49	; 73
    1f0c:	9f e0       	ldi	r25, 0x0F	; 15
    1f0e:	97 a7       	std	Z+47, r25	; 0x2f
    1f10:	86 a7       	std	Z+46, r24	; 0x2e
    1f12:	8f e4       	ldi	r24, 0x4F	; 79
    1f14:	9f e0       	ldi	r25, 0x0F	; 15
    1f16:	91 ab       	std	Z+49, r25	; 0x31
    1f18:	80 ab       	std	Z+48, r24	; 0x30
    1f1a:	85 e5       	ldi	r24, 0x55	; 85
    1f1c:	9f e0       	ldi	r25, 0x0F	; 15
    1f1e:	93 ab       	std	Z+51, r25	; 0x33
    1f20:	82 ab       	std	Z+50, r24	; 0x32
    1f22:	83 e0       	ldi	r24, 0x03	; 3
    1f24:	90 e1       	ldi	r25, 0x10	; 16
    1f26:	95 ab       	std	Z+53, r25	; 0x35
    1f28:	84 ab       	std	Z+52, r24	; 0x34
    1f2a:	cf 01       	movw	r24, r30
    1f2c:	08 95       	ret

00001f2e <integral>:
float integral(ZNPID* self, float PV, float timelapse)
{
    1f2e:	cf 92       	push	r12
    1f30:	df 92       	push	r13
    1f32:	ef 92       	push	r14
    1f34:	ff 92       	push	r15
    1f36:	0f 93       	push	r16
    1f38:	1f 93       	push	r17
    1f3a:	cf 93       	push	r28
    1f3c:	df 93       	push	r29
    1f3e:	ec 01       	movw	r28, r24
    1f40:	68 01       	movw	r12, r16
    1f42:	79 01       	movw	r14, r18
	tmp=product(sum(delta(self->SetPoint, PV), self->Err_past), timelapse);
	tmp/=2;
    1f44:	9a 01       	movw	r18, r20
    1f46:	ab 01       	movw	r20, r22
    1f48:	68 a1       	ldd	r22, Y+32	; 0x20
    1f4a:	79 a1       	ldd	r23, Y+33	; 0x21
    1f4c:	8a a1       	ldd	r24, Y+34	; 0x22
    1f4e:	9b a1       	ldd	r25, Y+35	; 0x23
    1f50:	69 d5       	rcall	.+2770   	; 0x2a24 <__subsf3>
    1f52:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f54:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f56:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f58:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f5a:	65 d5       	rcall	.+2762   	; 0x2a26 <__addsf3>
    1f5c:	a7 01       	movw	r20, r14
    1f5e:	96 01       	movw	r18, r12
    1f60:	19 d7       	rcall	.+3634   	; 0x2d94 <__mulsf3>
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	5f e3       	ldi	r21, 0x3F	; 63
    1f6a:	14 d7       	rcall	.+3624   	; 0x2d94 <__mulsf3>
    1f6c:	60 93 82 03 	sts	0x0382, r22	; 0x800382 <tmp>
    1f70:	70 93 83 03 	sts	0x0383, r23	; 0x800383 <tmp+0x1>
    1f74:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <tmp+0x2>
    1f78:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <tmp+0x3>
	return (self->integral += tmp);
    1f7c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1f7e:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1f80:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1f82:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1f84:	50 d5       	rcall	.+2720   	; 0x2a26 <__addsf3>
    1f86:	6c 8f       	std	Y+28, r22	; 0x1c
    1f88:	7d 8f       	std	Y+29, r23	; 0x1d
    1f8a:	8e 8f       	std	Y+30, r24	; 0x1e
    1f8c:	9f 8f       	std	Y+31, r25	; 0x1f
}
    1f8e:	df 91       	pop	r29
    1f90:	cf 91       	pop	r28
    1f92:	1f 91       	pop	r17
    1f94:	0f 91       	pop	r16
    1f96:	ff 90       	pop	r15
    1f98:	ef 90       	pop	r14
    1f9a:	df 90       	pop	r13
    1f9c:	cf 90       	pop	r12
    1f9e:	08 95       	ret

00001fa0 <derivative>:
float derivative(ZNPID* self, float PV, float timelapse)
{
    1fa0:	cf 92       	push	r12
    1fa2:	df 92       	push	r13
    1fa4:	ef 92       	push	r14
    1fa6:	ff 92       	push	r15
    1fa8:	0f 93       	push	r16
    1faa:	1f 93       	push	r17
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	ec 01       	movw	r28, r24
    1fb2:	68 01       	movw	r12, r16
    1fb4:	79 01       	movw	r14, r18
	tmp=delta(delta(self->SetPoint, PV),self->Err_past);
    1fb6:	9a 01       	movw	r18, r20
    1fb8:	ab 01       	movw	r20, r22
    1fba:	68 a1       	ldd	r22, Y+32	; 0x20
    1fbc:	79 a1       	ldd	r23, Y+33	; 0x21
    1fbe:	8a a1       	ldd	r24, Y+34	; 0x22
    1fc0:	9b a1       	ldd	r25, Y+35	; 0x23
    1fc2:	30 d5       	rcall	.+2656   	; 0x2a24 <__subsf3>
    1fc4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fc6:	3d 85       	ldd	r19, Y+13	; 0x0d
    1fc8:	4e 85       	ldd	r20, Y+14	; 0x0e
    1fca:	5f 85       	ldd	r21, Y+15	; 0x0f
    1fcc:	2b d5       	rcall	.+2646   	; 0x2a24 <__subsf3>
    1fce:	60 93 82 03 	sts	0x0382, r22	; 0x800382 <tmp>
    1fd2:	70 93 83 03 	sts	0x0383, r23	; 0x800383 <tmp+0x1>
    1fd6:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <tmp+0x2>
    1fda:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <tmp+0x3>
	return (self->derivative /= timelapse);
    1fde:	a7 01       	movw	r20, r14
    1fe0:	96 01       	movw	r18, r12
    1fe2:	68 8d       	ldd	r22, Y+24	; 0x18
    1fe4:	79 8d       	ldd	r23, Y+25	; 0x19
    1fe6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fe8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1fea:	85 d5       	rcall	.+2826   	; 0x2af6 <__divsf3>
    1fec:	68 8f       	std	Y+24, r22	; 0x18
    1fee:	79 8f       	std	Y+25, r23	; 0x19
    1ff0:	8a 8f       	std	Y+26, r24	; 0x1a
    1ff2:	9b 8f       	std	Y+27, r25	; 0x1b
}
    1ff4:	df 91       	pop	r29
    1ff6:	cf 91       	pop	r28
    1ff8:	1f 91       	pop	r17
    1ffa:	0f 91       	pop	r16
    1ffc:	ff 90       	pop	r15
    1ffe:	ef 90       	pop	r14
    2000:	df 90       	pop	r13
    2002:	cf 90       	pop	r12
    2004:	08 95       	ret

00002006 <ZNPID_output>:
float ZNPID_output(ZNPID* self, float PV, float timelapse)
{
    2006:	4f 92       	push	r4
    2008:	5f 92       	push	r5
    200a:	6f 92       	push	r6
    200c:	7f 92       	push	r7
    200e:	8f 92       	push	r8
    2010:	9f 92       	push	r9
    2012:	af 92       	push	r10
    2014:	bf 92       	push	r11
    2016:	cf 92       	push	r12
    2018:	df 92       	push	r13
    201a:	ef 92       	push	r14
    201c:	ff 92       	push	r15
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	cf 93       	push	r28
    2024:	df 93       	push	r29
    2026:	00 d0       	rcall	.+0      	; 0x2028 <ZNPID_output+0x22>
    2028:	00 d0       	rcall	.+0      	; 0x202a <ZNPID_output+0x24>
    202a:	00 d0       	rcall	.+0      	; 0x202c <ZNPID_output+0x26>
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	9e 83       	std	Y+6, r25	; 0x06
    2032:	8d 83       	std	Y+5, r24	; 0x05
    2034:	6a 01       	movw	r12, r20
    2036:	7b 01       	movw	r14, r22
    2038:	48 01       	movw	r8, r16
    203a:	59 01       	movw	r10, r18
	float result;
	self->PV=PV;
    203c:	fc 01       	movw	r30, r24
    203e:	44 a3       	std	Z+36, r20	; 0x24
    2040:	55 a3       	std	Z+37, r21	; 0x25
    2042:	66 a3       	std	Z+38, r22	; 0x26
    2044:	77 a3       	std	Z+39, r23	; 0x27
{
	self->SetPoint=setpoint;
}
float delta(float present_value, float past_value)
{
	return (present_value - past_value);
    2046:	9a 01       	movw	r18, r20
    2048:	ab 01       	movw	r20, r22
    204a:	60 a1       	ldd	r22, Z+32	; 0x20
    204c:	71 a1       	ldd	r23, Z+33	; 0x21
    204e:	82 a1       	ldd	r24, Z+34	; 0x22
    2050:	93 a1       	ldd	r25, Z+35	; 0x23
    2052:	e8 d4       	rcall	.+2512   	; 0x2a24 <__subsf3>
}
float ZNPID_output(ZNPID* self, float PV, float timelapse)
{
	float result;
	self->PV=PV;
	self->dy=delta(self->SetPoint, PV);
    2054:	ed 81       	ldd	r30, Y+5	; 0x05
    2056:	fe 81       	ldd	r31, Y+6	; 0x06
    2058:	60 8b       	std	Z+16, r22	; 0x10
    205a:	71 8b       	std	Z+17, r23	; 0x11
    205c:	82 8b       	std	Z+18, r24	; 0x12
    205e:	93 8b       	std	Z+19, r25	; 0x13
	self->dx=timelapse;
    2060:	84 8a       	std	Z+20, r8	; 0x14
    2062:	95 8a       	std	Z+21, r9	; 0x15
    2064:	a6 8a       	std	Z+22, r10	; 0x16
    2066:	b7 8a       	std	Z+23, r11	; 0x17
{
	return (value_1 + value_2);
}
float product(float value_1, float value_2)
{
	return (value_1 * value_2);
    2068:	20 81       	ld	r18, Z
    206a:	31 81       	ldd	r19, Z+1	; 0x01
    206c:	42 81       	ldd	r20, Z+2	; 0x02
    206e:	53 81       	ldd	r21, Z+3	; 0x03
    2070:	91 d6       	rcall	.+3362   	; 0x2d94 <__mulsf3>
    2072:	2b 01       	movw	r4, r22
    2074:	3c 01       	movw	r6, r24
	float result;
	self->PV=PV;
	self->dy=delta(self->SetPoint, PV);
	self->dx=timelapse;
	result=product(self->kc, self->dy);
	tmp=product(self->ki, integral(self, PV, timelapse));
    2076:	95 01       	movw	r18, r10
    2078:	84 01       	movw	r16, r8
    207a:	b7 01       	movw	r22, r14
    207c:	a6 01       	movw	r20, r12
    207e:	8d 81       	ldd	r24, Y+5	; 0x05
    2080:	9e 81       	ldd	r25, Y+6	; 0x06
    2082:	55 df       	rcall	.-342    	; 0x1f2e <integral>
{
	return (value_1 + value_2);
}
float product(float value_1, float value_2)
{
	return (value_1 * value_2);
    2084:	ed 81       	ldd	r30, Y+5	; 0x05
    2086:	fe 81       	ldd	r31, Y+6	; 0x06
    2088:	24 81       	ldd	r18, Z+4	; 0x04
    208a:	35 81       	ldd	r19, Z+5	; 0x05
    208c:	46 81       	ldd	r20, Z+6	; 0x06
    208e:	57 81       	ldd	r21, Z+7	; 0x07
    2090:	81 d6       	rcall	.+3330   	; 0x2d94 <__mulsf3>
	float result;
	self->PV=PV;
	self->dy=delta(self->SetPoint, PV);
	self->dx=timelapse;
	result=product(self->kc, self->dy);
	tmp=product(self->ki, integral(self, PV, timelapse));
    2092:	60 93 82 03 	sts	0x0382, r22	; 0x800382 <tmp>
    2096:	70 93 83 03 	sts	0x0383, r23	; 0x800383 <tmp+0x1>
    209a:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <tmp+0x2>
    209e:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <tmp+0x3>
{
	return (present_value - past_value);
}
float sum(float value_1, float value_2)
{
	return (value_1 + value_2);
    20a2:	a3 01       	movw	r20, r6
    20a4:	92 01       	movw	r18, r4
    20a6:	bf d4       	rcall	.+2430   	; 0x2a26 <__addsf3>
    20a8:	2b 01       	movw	r4, r22
    20aa:	3c 01       	movw	r6, r24
	self->dy=delta(self->SetPoint, PV);
	self->dx=timelapse;
	result=product(self->kc, self->dy);
	tmp=product(self->ki, integral(self, PV, timelapse));
	result=sum(result, tmp);
	tmp=product(self->kd, derivative(self, PV, timelapse));
    20ac:	95 01       	movw	r18, r10
    20ae:	84 01       	movw	r16, r8
    20b0:	b7 01       	movw	r22, r14
    20b2:	a6 01       	movw	r20, r12
    20b4:	8d 81       	ldd	r24, Y+5	; 0x05
    20b6:	9e 81       	ldd	r25, Y+6	; 0x06
    20b8:	73 df       	rcall	.-282    	; 0x1fa0 <derivative>
{
	return (value_1 + value_2);
}
float product(float value_1, float value_2)
{
	return (value_1 * value_2);
    20ba:	ed 81       	ldd	r30, Y+5	; 0x05
    20bc:	fe 81       	ldd	r31, Y+6	; 0x06
    20be:	20 85       	ldd	r18, Z+8	; 0x08
    20c0:	31 85       	ldd	r19, Z+9	; 0x09
    20c2:	42 85       	ldd	r20, Z+10	; 0x0a
    20c4:	53 85       	ldd	r21, Z+11	; 0x0b
    20c6:	66 d6       	rcall	.+3276   	; 0x2d94 <__mulsf3>
	self->dy=delta(self->SetPoint, PV);
	self->dx=timelapse;
	result=product(self->kc, self->dy);
	tmp=product(self->ki, integral(self, PV, timelapse));
	result=sum(result, tmp);
	tmp=product(self->kd, derivative(self, PV, timelapse));
    20c8:	60 93 82 03 	sts	0x0382, r22	; 0x800382 <tmp>
    20cc:	70 93 83 03 	sts	0x0383, r23	; 0x800383 <tmp+0x1>
    20d0:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <tmp+0x2>
    20d4:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <tmp+0x3>
{
	return (present_value - past_value);
}
float sum(float value_1, float value_2)
{
	return (value_1 + value_2);
    20d8:	a3 01       	movw	r20, r6
    20da:	92 01       	movw	r18, r4
    20dc:	a4 d4       	rcall	.+2376   	; 0x2a26 <__addsf3>
    20de:	6b 01       	movw	r12, r22
    20e0:	7c 01       	movw	r14, r24
	result=product(self->kc, self->dy);
	tmp=product(self->ki, integral(self, PV, timelapse));
	result=sum(result, tmp);
	tmp=product(self->kd, derivative(self, PV, timelapse));
	result=sum(result, tmp);
	self->Err_past = self->dy;
    20e2:	ed 81       	ldd	r30, Y+5	; 0x05
    20e4:	fe 81       	ldd	r31, Y+6	; 0x06
    20e6:	80 88       	ldd	r8, Z+16	; 0x10
    20e8:	91 88       	ldd	r9, Z+17	; 0x11
    20ea:	a2 88       	ldd	r10, Z+18	; 0x12
    20ec:	b3 88       	ldd	r11, Z+19	; 0x13
    20ee:	84 86       	std	Z+12, r8	; 0x0c
    20f0:	95 86       	std	Z+13, r9	; 0x0d
    20f2:	a6 86       	std	Z+14, r10	; 0x0e
    20f4:	b7 86       	std	Z+15, r11	; 0x0f
	self->OP=result;
    20f6:	60 a7       	std	Z+40, r22	; 0x28
    20f8:	71 a7       	std	Z+41, r23	; 0x29
    20fa:	82 a7       	std	Z+42, r24	; 0x2a
	if(result > ZNPID_outMAX)
    20fc:	93 a7       	std	Z+43, r25	; 0x2b
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 ec       	ldi	r19, 0xC0	; 192
    2102:	4f e7       	ldi	r20, 0x7F	; 127
    2104:	54 e4       	ldi	r21, 0x44	; 68
    2106:	42 d6       	rcall	.+3204   	; 0x2d8c <__gesf2>
    2108:	18 16       	cp	r1, r24
    210a:	64 f5       	brge	.+88     	; 0x2164 <ZNPID_output+0x15e>
		self->integral=ZNPID_outMAX - (self->dy * self->dx) - (self->derivative * self->dx * self->dx);
    210c:	ed 81       	ldd	r30, Y+5	; 0x05
    210e:	fe 81       	ldd	r31, Y+6	; 0x06
    2110:	44 88       	ldd	r4, Z+20	; 0x14
    2112:	55 88       	ldd	r5, Z+21	; 0x15
    2114:	66 88       	ldd	r6, Z+22	; 0x16
    2116:	77 88       	ldd	r7, Z+23	; 0x17
    2118:	a3 01       	movw	r20, r6
    211a:	92 01       	movw	r18, r4
    211c:	c5 01       	movw	r24, r10
    211e:	b4 01       	movw	r22, r8
    2120:	39 d6       	rcall	.+3186   	; 0x2d94 <__mulsf3>
    2122:	9b 01       	movw	r18, r22
    2124:	ac 01       	movw	r20, r24
    2126:	60 e0       	ldi	r22, 0x00	; 0
    2128:	70 ec       	ldi	r23, 0xC0	; 192
    212a:	8f e7       	ldi	r24, 0x7F	; 127
    212c:	94 e4       	ldi	r25, 0x44	; 68
    212e:	7a d4       	rcall	.+2292   	; 0x2a24 <__subsf3>
    2130:	4b 01       	movw	r8, r22
    2132:	5c 01       	movw	r10, r24
    2134:	ed 81       	ldd	r30, Y+5	; 0x05
    2136:	fe 81       	ldd	r31, Y+6	; 0x06
    2138:	20 8d       	ldd	r18, Z+24	; 0x18
    213a:	31 8d       	ldd	r19, Z+25	; 0x19
    213c:	42 8d       	ldd	r20, Z+26	; 0x1a
    213e:	53 8d       	ldd	r21, Z+27	; 0x1b
    2140:	c3 01       	movw	r24, r6
    2142:	b2 01       	movw	r22, r4
    2144:	27 d6       	rcall	.+3150   	; 0x2d94 <__mulsf3>
    2146:	a3 01       	movw	r20, r6
    2148:	92 01       	movw	r18, r4
    214a:	24 d6       	rcall	.+3144   	; 0x2d94 <__mulsf3>
    214c:	9b 01       	movw	r18, r22
    214e:	ac 01       	movw	r20, r24
    2150:	c5 01       	movw	r24, r10
    2152:	b4 01       	movw	r22, r8
    2154:	67 d4       	rcall	.+2254   	; 0x2a24 <__subsf3>
    2156:	ed 81       	ldd	r30, Y+5	; 0x05
    2158:	fe 81       	ldd	r31, Y+6	; 0x06
    215a:	64 8f       	std	Z+28, r22	; 0x1c
    215c:	75 8f       	std	Z+29, r23	; 0x1d
    215e:	86 8f       	std	Z+30, r24	; 0x1e
    2160:	97 8f       	std	Z+31, r25	; 0x1f
	else if(result < ZNPID_outMIN)
    2162:	34 c0       	rjmp	.+104    	; 0x21cc <ZNPID_output+0x1c6>
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 ec       	ldi	r19, 0xC0	; 192
    2168:	4f e7       	ldi	r20, 0x7F	; 127
    216a:	54 ec       	ldi	r21, 0xC4	; 196
    216c:	c7 01       	movw	r24, r14
    216e:	b6 01       	movw	r22, r12
    2170:	be d4       	rcall	.+2428   	; 0x2aee <__cmpsf2>
    2172:	88 23       	and	r24, r24
		self->integral=ZNPID_outMIN + (self->dy * self->dx) + (self->derivative * self->dx * self->dx);
    2174:	5c f5       	brge	.+86     	; 0x21cc <ZNPID_output+0x1c6>
    2176:	ed 81       	ldd	r30, Y+5	; 0x05
    2178:	fe 81       	ldd	r31, Y+6	; 0x06
    217a:	44 88       	ldd	r4, Z+20	; 0x14
    217c:	55 88       	ldd	r5, Z+21	; 0x15
    217e:	66 88       	ldd	r6, Z+22	; 0x16
    2180:	77 88       	ldd	r7, Z+23	; 0x17
    2182:	20 8d       	ldd	r18, Z+24	; 0x18
    2184:	31 8d       	ldd	r19, Z+25	; 0x19
    2186:	42 8d       	ldd	r20, Z+26	; 0x1a
    2188:	53 8d       	ldd	r21, Z+27	; 0x1b
    218a:	c3 01       	movw	r24, r6
    218c:	b2 01       	movw	r22, r4
    218e:	02 d6       	rcall	.+3076   	; 0x2d94 <__mulsf3>
    2190:	a3 01       	movw	r20, r6
    2192:	92 01       	movw	r18, r4
    2194:	ff d5       	rcall	.+3070   	; 0x2d94 <__mulsf3>
    2196:	69 83       	std	Y+1, r22	; 0x01
    2198:	7a 83       	std	Y+2, r23	; 0x02
    219a:	8b 83       	std	Y+3, r24	; 0x03
    219c:	9c 83       	std	Y+4, r25	; 0x04
    219e:	a3 01       	movw	r20, r6
    21a0:	92 01       	movw	r18, r4
    21a2:	c5 01       	movw	r24, r10
    21a4:	b4 01       	movw	r22, r8
    21a6:	f6 d5       	rcall	.+3052   	; 0x2d94 <__mulsf3>
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 ec       	ldi	r19, 0xC0	; 192
    21ac:	4f e7       	ldi	r20, 0x7F	; 127
    21ae:	54 e4       	ldi	r21, 0x44	; 68
    21b0:	39 d4       	rcall	.+2162   	; 0x2a24 <__subsf3>
    21b2:	9b 01       	movw	r18, r22
    21b4:	ac 01       	movw	r20, r24
    21b6:	69 81       	ldd	r22, Y+1	; 0x01
    21b8:	7a 81       	ldd	r23, Y+2	; 0x02
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	9c 81       	ldd	r25, Y+4	; 0x04
    21be:	33 d4       	rcall	.+2150   	; 0x2a26 <__addsf3>
    21c0:	ed 81       	ldd	r30, Y+5	; 0x05
    21c2:	fe 81       	ldd	r31, Y+6	; 0x06
    21c4:	64 8f       	std	Z+28, r22	; 0x1c
    21c6:	75 8f       	std	Z+29, r23	; 0x1d
    21c8:	86 8f       	std	Z+30, r24	; 0x1e
    21ca:	97 8f       	std	Z+31, r25	; 0x1f
	return result;
}
    21cc:	c7 01       	movw	r24, r14
    21ce:	b6 01       	movw	r22, r12
    21d0:	26 96       	adiw	r28, 0x06	; 6
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	de bf       	out	0x3e, r29	; 62
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	df 91       	pop	r29
    21de:	cf 91       	pop	r28
    21e0:	1f 91       	pop	r17
    21e2:	0f 91       	pop	r16
    21e4:	ff 90       	pop	r15
    21e6:	ef 90       	pop	r14
    21e8:	df 90       	pop	r13
    21ea:	cf 90       	pop	r12
    21ec:	bf 90       	pop	r11
    21ee:	af 90       	pop	r10
    21f0:	9f 90       	pop	r9
    21f2:	8f 90       	pop	r8
    21f4:	7f 90       	pop	r7
    21f6:	6f 90       	pop	r6
    21f8:	5f 90       	pop	r5
    21fa:	4f 90       	pop	r4
    21fc:	08 95       	ret

000021fe <PORTINIT>:
** procedure and function
*/
void PORTINIT(void)
{
	//INPUT
	DDRF=0x00;
    21fe:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTF=0x0F;
    2202:	8f e0       	ldi	r24, 0x0F	; 15
    2204:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	//OUTPUT
	DDRB|=(1<<5) | (1<<6) | (1<<7);
    2208:	87 b3       	in	r24, 0x17	; 23
    220a:	80 6e       	ori	r24, 0xE0	; 224
    220c:	87 bb       	out	0x17, r24	; 23
    220e:	08 95       	ret

00002210 <main>:
** Header
*/
void PORTINIT();
/****MAIN****/
int main(void)
{
    2210:	cf 93       	push	r28
    2212:	df 93       	push	r29
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
    2218:	c3 5d       	subi	r28, 0xD3	; 211
    221a:	d1 09       	sbc	r29, r1
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
	PORTINIT(); // Inic Ports
    2226:	eb df       	rcall	.-42     	; 0x21fe <PORTINIT>
	/***INICIALIZE OBJECTS***/
	function= FUNCenable(); // Function Library
    2228:	ce 01       	movw	r24, r28
    222a:	8e 57       	subi	r24, 0x7E	; 126
    222c:	9f 4f       	sbci	r25, 0xFF	; 255
    222e:	ea d8       	rcall	.-3628   	; 0x1404 <FUNCenable>
    2230:	8a e4       	ldi	r24, 0x4A	; 74
    2232:	fe 01       	movw	r30, r28
    2234:	ee 57       	subi	r30, 0x7E	; 126
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	ac e8       	ldi	r26, 0x8C	; 140
    223a:	b3 e0       	ldi	r27, 0x03	; 3
    223c:	01 90       	ld	r0, Z+
    223e:	0d 92       	st	X+, r0
    2240:	8a 95       	dec	r24
    2242:	e1 f7       	brne	.-8      	; 0x223c <main+0x2c>
	LCD0 lcd0 = LCD0enable(&DDRA,&PINA,&PORTA); // LCD Display 4X20
    2244:	2b e3       	ldi	r18, 0x3B	; 59
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	49 e3       	ldi	r20, 0x39	; 57
    224a:	50 e0       	ldi	r21, 0x00	; 0
    224c:	6a e3       	ldi	r22, 0x3A	; 58
    224e:	70 e0       	ldi	r23, 0x00	; 0
    2250:	ce 01       	movw	r24, r28
    2252:	c8 96       	adiw	r24, 0x38	; 56
    2254:	b0 dd       	rcall	.-1184   	; 0x1db6 <LCD0enable>
    2256:	26 96       	adiw	r28, 0x06	; 6
    2258:	6e ac       	ldd	r6, Y+62	; 0x3e
    225a:	7f ac       	ldd	r7, Y+63	; 0x3f
    225c:	26 97       	sbiw	r28, 0x06	; 6
    225e:	2a 96       	adiw	r28, 0x0a	; 10
    2260:	2e ad       	ldd	r18, Y+62	; 0x3e
    2262:	3f ad       	ldd	r19, Y+63	; 0x3f
    2264:	2a 97       	sbiw	r28, 0x0a	; 10
    2266:	c4 53       	subi	r28, 0x34	; 52
    2268:	df 4f       	sbci	r29, 0xFF	; 255
    226a:	39 83       	std	Y+1, r19	; 0x01
    226c:	28 83       	st	Y, r18
    226e:	cc 5c       	subi	r28, 0xCC	; 204
    2270:	d0 40       	sbci	r29, 0x00	; 0
    2272:	2c 96       	adiw	r28, 0x0c	; 12
    2274:	4e ac       	ldd	r4, Y+62	; 0x3e
    2276:	5f ac       	ldd	r5, Y+63	; 0x3f
    2278:	2c 97       	sbiw	r28, 0x0c	; 12
	KEYPAD keypad = KEYPADenable(&DDRE,&PINE,&PORTE); // Keyboard
    227a:	43 e2       	ldi	r20, 0x23	; 35
    227c:	50 e0       	ldi	r21, 0x00	; 0
    227e:	61 e2       	ldi	r22, 0x21	; 33
    2280:	70 e0       	ldi	r23, 0x00	; 0
    2282:	82 e2       	ldi	r24, 0x22	; 34
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	18 db       	rcall	.-2512   	; 0x18b8 <KEYPADenable>
    2288:	2f 96       	adiw	r28, 0x0f	; 15
    228a:	2f af       	std	Y+63, r18	; 0x3f
    228c:	2f 97       	sbiw	r28, 0x0f	; 15
    228e:	60 96       	adiw	r28, 0x10	; 16
    2290:	3f af       	std	Y+63, r19	; 0x3f
    2292:	60 97       	sbiw	r28, 0x10	; 16
    2294:	61 96       	adiw	r28, 0x11	; 17
    2296:	4f af       	std	Y+63, r20	; 0x3f
    2298:	61 97       	sbiw	r28, 0x11	; 17
    229a:	62 96       	adiw	r28, 0x12	; 18
    229c:	5f af       	std	Y+63, r21	; 0x3f
    229e:	62 97       	sbiw	r28, 0x12	; 18
    22a0:	63 96       	adiw	r28, 0x13	; 19
    22a2:	6f af       	std	Y+63, r22	; 0x3f
    22a4:	63 97       	sbiw	r28, 0x13	; 19
    22a6:	64 96       	adiw	r28, 0x14	; 20
    22a8:	7f af       	std	Y+63, r23	; 0x3f
    22aa:	64 97       	sbiw	r28, 0x14	; 20
    22ac:	65 96       	adiw	r28, 0x15	; 21
    22ae:	8f af       	std	Y+63, r24	; 0x3f
    22b0:	65 97       	sbiw	r28, 0x15	; 21
    22b2:	66 96       	adiw	r28, 0x16	; 22
    22b4:	9f af       	std	Y+63, r25	; 0x3f
    22b6:	66 97       	sbiw	r28, 0x16	; 22
    22b8:	64 96       	adiw	r28, 0x14	; 20
    22ba:	8e ac       	ldd	r8, Y+62	; 0x3e
    22bc:	9f ac       	ldd	r9, Y+63	; 0x3f
    22be:	64 97       	sbiw	r28, 0x14	; 20
    22c0:	66 96       	adiw	r28, 0x16	; 22
    22c2:	2e ac       	ldd	r2, Y+62	; 0x3e
    22c4:	3f ac       	ldd	r3, Y+63	; 0x3f
    22c6:	66 97       	sbiw	r28, 0x16	; 22
	ANALOG analog = ANALOGenable(1, 128, 1, 0); // Channel 0 for Position
    22c8:	1f 92       	push	r1
    22ca:	1f 92       	push	r1
    22cc:	1f 92       	push	r1
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	8f 93       	push	r24
    22d2:	90 e8       	ldi	r25, 0x80	; 128
    22d4:	9f 93       	push	r25
    22d6:	8f 93       	push	r24
    22d8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <ANALOGenable>
    22dc:	c2 53       	subi	r28, 0x32	; 50
    22de:	df 4f       	sbci	r29, 0xFF	; 255
    22e0:	68 83       	st	Y, r22
    22e2:	79 83       	std	Y+1, r23	; 0x01
    22e4:	8a 83       	std	Y+2, r24	; 0x02
    22e6:	9b 83       	std	Y+3, r25	; 0x03
    22e8:	ce 5c       	subi	r28, 0xCE	; 206
    22ea:	d0 40       	sbci	r29, 0x00	; 0
	TIMER_COUNTER0 timer0 = TIMER_COUNTER0enable(2,2); // 1Hz to HC595
    22ec:	42 e0       	ldi	r20, 0x02	; 2
    22ee:	62 e0       	ldi	r22, 0x02	; 2
    22f0:	ce 01       	movw	r24, r28
    22f2:	8a 5a       	subi	r24, 0xAA	; 170
    22f4:	9f 4f       	sbci	r25, 0xFF	; 255
    22f6:	0e 94 88 03 	call	0x710	; 0x710 <TIMER_COUNTER0enable>
	TIMER_COUNTER1 timer1 = TIMER_COUNTER1enable(9,0); // PWM Positioning
    22fa:	40 e0       	ldi	r20, 0x00	; 0
    22fc:	69 e0       	ldi	r22, 0x09	; 9
    22fe:	ce 01       	movw	r24, r28
    2300:	8a 59       	subi	r24, 0x9A	; 154
    2302:	9f 4f       	sbci	r25, 0xFF	; 255
    2304:	0e 94 ca 03 	call	0x794	; 0x794 <TIMER_COUNTER1enable>
	shift = HC595enable(&DDRG,&PORTG,2,0,1);
    2308:	01 e0       	ldi	r16, 0x01	; 1
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	42 e0       	ldi	r20, 0x02	; 2
    230e:	65 e6       	ldi	r22, 0x65	; 101
    2310:	70 e0       	ldi	r23, 0x00	; 0
    2312:	84 e6       	ldi	r24, 0x64	; 100
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	0e 94 05 01 	call	0x20a	; 0x20a <HC595enable>
    231a:	20 93 86 03 	sts	0x0386, r18	; 0x800386 <shift>
    231e:	30 93 87 03 	sts	0x0387, r19	; 0x800387 <shift+0x1>
    2322:	40 93 88 03 	sts	0x0388, r20	; 0x800388 <shift+0x2>
    2326:	50 93 89 03 	sts	0x0389, r21	; 0x800389 <shift+0x3>
    232a:	60 93 8a 03 	sts	0x038A, r22	; 0x80038a <shift+0x4>
    232e:	70 93 8b 03 	sts	0x038B, r23	; 0x80038b <shift+0x5>
	pid_1 = ZNPIDenable();
    2332:	ce 01       	movw	r24, r28
    2334:	8e 57       	subi	r24, 0x7E	; 126
    2336:	9f 4f       	sbci	r25, 0xFF	; 255
    2338:	be dd       	rcall	.-1156   	; 0x1eb6 <ZNPIDenable>
    233a:	86 e3       	ldi	r24, 0x36	; 54
    233c:	fe 01       	movw	r30, r28
    233e:	ee 57       	subi	r30, 0x7E	; 126
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	ac ed       	ldi	r26, 0xDC	; 220
    2344:	b3 e0       	ldi	r27, 0x03	; 3
    2346:	01 90       	ld	r0, Z+
    2348:	0d 92       	st	X+, r0
    234a:	8a 95       	dec	r24
	pid_2 = ZNPIDenable();
    234c:	e1 f7       	brne	.-8      	; 0x2346 <main+0x136>
    234e:	ce 01       	movw	r24, r28
    2350:	8e 57       	subi	r24, 0x7E	; 126
    2352:	9f 4f       	sbci	r25, 0xFF	; 255
    2354:	b0 dd       	rcall	.-1184   	; 0x1eb6 <ZNPIDenable>
    2356:	86 e3       	ldi	r24, 0x36	; 54
    2358:	fe 01       	movw	r30, r28
    235a:	ee 57       	subi	r30, 0x7E	; 126
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	a2 e1       	ldi	r26, 0x12	; 18
    2360:	b4 e0       	ldi	r27, 0x04	; 4
    2362:	01 90       	ld	r0, Z+
    2364:	0d 92       	st	X+, r0
    2366:	8a 95       	dec	r24
    2368:	e1 f7       	brne	.-8      	; 0x2362 <main+0x152>
	/******/
	char Menu='1'; // Main menu selector
	char str[6]="0"; // analog vector
    236a:	ce 01       	movw	r24, r28
    236c:	8a 58       	subi	r24, 0x8A	; 138
    236e:	9f 4f       	sbci	r25, 0xFF	; 255
    2370:	fc 01       	movw	r30, r24
    2372:	20 e3       	ldi	r18, 0x30	; 48
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	21 93       	st	Z+, r18
    2378:	31 93       	st	Z+, r19
    237a:	24 e0       	ldi	r18, 0x04	; 4
    237c:	df 01       	movw	r26, r30
    237e:	1d 92       	st	X+, r1
    2380:	2a 95       	dec	r18
    2382:	e9 f7       	brne	.-6      	; 0x237e <main+0x16e>
	int16_t mvalue=90; // manual position reading
	int16_t m_value; // manual positioning
	char mstr[6]="90"; // manual position vector
    2384:	29 e3       	ldi	r18, 0x39	; 57
    2386:	30 e3       	ldi	r19, 0x30	; 48
    2388:	ee 96       	adiw	r28, 0x3e	; 62
    238a:	3f af       	std	Y+63, r19	; 0x3f
    238c:	2e af       	std	Y+62, r18	; 0x3e
    238e:	ee 97       	sbiw	r28, 0x3e	; 62
    2390:	c2 58       	subi	r28, 0x82	; 130
    2392:	df 4f       	sbci	r29, 0xFF	; 255
    2394:	19 82       	std	Y+1, r1	; 0x01
    2396:	18 82       	st	Y, r1
    2398:	ce 57       	subi	r28, 0x7E	; 126
    239a:	d0 40       	sbci	r29, 0x00	; 0
    239c:	c0 58       	subi	r28, 0x80	; 128
    239e:	df 4f       	sbci	r29, 0xFF	; 255
    23a0:	19 82       	std	Y+1, r1	; 0x01
    23a2:	18 82       	st	Y, r1
    23a4:	c0 58       	subi	r28, 0x80	; 128
    23a6:	d0 40       	sbci	r29, 0x00	; 0
	ptr=str;
    23a8:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <ptr+0x1>
    23ac:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <ptr>
	/***Parameters timers***/
	timer0.compare(249);
    23b0:	6e 96       	adiw	r28, 0x1e	; 30
    23b2:	ee ad       	ldd	r30, Y+62	; 0x3e
    23b4:	ff ad       	ldd	r31, Y+63	; 0x3f
    23b6:	6e 97       	sbiw	r28, 0x1e	; 30
    23b8:	89 ef       	ldi	r24, 0xF9	; 249
    23ba:	09 95       	icall
	timer0.start(64);
    23bc:	a4 96       	adiw	r28, 0x24	; 36
    23be:	ee ad       	ldd	r30, Y+62	; 0x3e
    23c0:	ff ad       	ldd	r31, Y+63	; 0x3f
    23c2:	a4 97       	sbiw	r28, 0x24	; 36
    23c4:	80 e4       	ldi	r24, 0x40	; 64
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	09 95       	icall
	timer1.compoutmodeB(2);
    23ca:	aa 96       	adiw	r28, 0x2a	; 42
    23cc:	ee ad       	ldd	r30, Y+62	; 0x3e
    23ce:	ff ad       	ldd	r31, Y+63	; 0x3f
    23d0:	aa 97       	sbiw	r28, 0x2a	; 42
    23d2:	82 e0       	ldi	r24, 0x02	; 2
    23d4:	09 95       	icall
	timer1.compareA(20000);
    23d6:	ae 96       	adiw	r28, 0x2e	; 46
    23d8:	ee ad       	ldd	r30, Y+62	; 0x3e
    23da:	ff ad       	ldd	r31, Y+63	; 0x3f
    23dc:	ae 97       	sbiw	r28, 0x2e	; 46
    23de:	80 e2       	ldi	r24, 0x20	; 32
    23e0:	9e e4       	ldi	r25, 0x4E	; 78
    23e2:	09 95       	icall
	timer1.start(8);
    23e4:	e4 96       	adiw	r28, 0x34	; 52
    23e6:	ee ad       	ldd	r30, Y+62	; 0x3e
    23e8:	ff ad       	ldd	r31, Y+63	; 0x3f
    23ea:	e4 97       	sbiw	r28, 0x34	; 52
    23ec:	88 e0       	ldi	r24, 0x08	; 8
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	09 95       	icall
	pid_1.set_kc(&pid_1, 1);
    23f2:	0c ed       	ldi	r16, 0xDC	; 220
    23f4:	13 e0       	ldi	r17, 0x03	; 3
    23f6:	d8 01       	movw	r26, r16
    23f8:	9c 96       	adiw	r26, 0x2c	; 44
    23fa:	ed 91       	ld	r30, X+
    23fc:	fc 91       	ld	r31, X
    23fe:	9d 97       	sbiw	r26, 0x2d	; 45
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	50 e0       	ldi	r21, 0x00	; 0
    2404:	60 e8       	ldi	r22, 0x80	; 128
    2406:	7f e3       	ldi	r23, 0x3F	; 63
    2408:	c8 01       	movw	r24, r16
    240a:	09 95       	icall
	pid_1.set_kd(&pid_1, 1); //
    240c:	d8 01       	movw	r26, r16
    240e:	d0 96       	adiw	r26, 0x30	; 48
    2410:	ed 91       	ld	r30, X+
    2412:	fc 91       	ld	r31, X
    2414:	d1 97       	sbiw	r26, 0x31	; 49
    2416:	40 e0       	ldi	r20, 0x00	; 0
    2418:	50 e0       	ldi	r21, 0x00	; 0
    241a:	60 e8       	ldi	r22, 0x80	; 128
    241c:	7f e3       	ldi	r23, 0x3F	; 63
    241e:	c8 01       	movw	r24, r16
    2420:	09 95       	icall
	pid_1.set_ki(&pid_1, 0.1); // will provoke overshoot, to much acceleration limit max value and minimum value.
    2422:	d8 01       	movw	r26, r16
    2424:	9e 96       	adiw	r26, 0x2e	; 46
    2426:	ed 91       	ld	r30, X+
    2428:	fc 91       	ld	r31, X
    242a:	9f 97       	sbiw	r26, 0x2f	; 47
    242c:	4d ec       	ldi	r20, 0xCD	; 205
    242e:	5c ec       	ldi	r21, 0xCC	; 204
    2430:	6c ec       	ldi	r22, 0xCC	; 204
    2432:	7d e3       	ldi	r23, 0x3D	; 61
    2434:	c8 01       	movw	r24, r16
    2436:	09 95       	icall
	pid_1.set_SP(&pid_1, 520);
    2438:	d8 01       	movw	r26, r16
    243a:	d2 96       	adiw	r26, 0x32	; 50
    243c:	ed 91       	ld	r30, X+
    243e:	fc 91       	ld	r31, X
    2440:	d3 97       	sbiw	r26, 0x33	; 51
    2442:	40 e0       	ldi	r20, 0x00	; 0
    2444:	50 e0       	ldi	r21, 0x00	; 0
    2446:	62 e0       	ldi	r22, 0x02	; 2
    2448:	74 e4       	ldi	r23, 0x44	; 68
    244a:	c8 01       	movw	r24, r16
    244c:	09 95       	icall
	/***Another one woopy ti dooo***/
	pid_2.set_kc(&pid_2, 1);
    244e:	02 e1       	ldi	r16, 0x12	; 18
    2450:	14 e0       	ldi	r17, 0x04	; 4
    2452:	d8 01       	movw	r26, r16
    2454:	9c 96       	adiw	r26, 0x2c	; 44
    2456:	ed 91       	ld	r30, X+
    2458:	fc 91       	ld	r31, X
    245a:	9d 97       	sbiw	r26, 0x2d	; 45
    245c:	40 e0       	ldi	r20, 0x00	; 0
    245e:	50 e0       	ldi	r21, 0x00	; 0
    2460:	60 e8       	ldi	r22, 0x80	; 128
    2462:	7f e3       	ldi	r23, 0x3F	; 63
    2464:	c8 01       	movw	r24, r16
    2466:	09 95       	icall
	pid_2.set_kd(&pid_2, 1); //
    2468:	d8 01       	movw	r26, r16
    246a:	d0 96       	adiw	r26, 0x30	; 48
    246c:	ed 91       	ld	r30, X+
    246e:	fc 91       	ld	r31, X
    2470:	d1 97       	sbiw	r26, 0x31	; 49
    2472:	40 e0       	ldi	r20, 0x00	; 0
    2474:	50 e0       	ldi	r21, 0x00	; 0
    2476:	60 e8       	ldi	r22, 0x80	; 128
    2478:	7f e3       	ldi	r23, 0x3F	; 63
    247a:	c8 01       	movw	r24, r16
    247c:	09 95       	icall
	pid_2.set_ki(&pid_2, 0.01); // will provoke overshoot, to much acceleration limit max value and minimum value.
    247e:	d8 01       	movw	r26, r16
    2480:	9e 96       	adiw	r26, 0x2e	; 46
    2482:	ed 91       	ld	r30, X+
    2484:	fc 91       	ld	r31, X
    2486:	9f 97       	sbiw	r26, 0x2f	; 47
    2488:	4a e0       	ldi	r20, 0x0A	; 10
    248a:	57 ed       	ldi	r21, 0xD7	; 215
    248c:	63 e2       	ldi	r22, 0x23	; 35
    248e:	7c e3       	ldi	r23, 0x3C	; 60
    2490:	c8 01       	movw	r24, r16
    2492:	09 95       	icall
	pid_2.set_SP(&pid_2, 520);
    2494:	d8 01       	movw	r26, r16
    2496:	d2 96       	adiw	r26, 0x32	; 50
    2498:	ed 91       	ld	r30, X+
    249a:	fc 91       	ld	r31, X
    249c:	d3 97       	sbiw	r26, 0x33	; 51
    249e:	40 e0       	ldi	r20, 0x00	; 0
    24a0:	50 e0       	ldi	r21, 0x00	; 0
    24a2:	62 e0       	ldi	r22, 0x02	; 2
    24a4:	74 e4       	ldi	r23, 0x44	; 68
    24a6:	c8 01       	movw	r24, r16
    24a8:	09 95       	icall
	/**********/
	//TODO:: Please write your application code
	while(TRUE){
		/***PREAMBLE***/
		lcd0.reboot();
    24aa:	2e 96       	adiw	r28, 0x0e	; 14
    24ac:	ee ad       	ldd	r30, Y+62	; 0x3e
    24ae:	ff ad       	ldd	r31, Y+63	; 0x3f
    24b0:	2e 97       	sbiw	r28, 0x0e	; 14
    24b2:	09 95       	icall
		keypad.read();
    24b4:	62 96       	adiw	r28, 0x12	; 18
    24b6:	2e ad       	ldd	r18, Y+62	; 0x3e
    24b8:	3f ad       	ldd	r19, Y+63	; 0x3f
    24ba:	62 97       	sbiw	r28, 0x12	; 18
    24bc:	f9 01       	movw	r30, r18
    24be:	09 95       	icall
		//uartreceive=uart.read();
		/***Reading input***/
		lcd0.gotoxy(3,13);
    24c0:	6d e0       	ldi	r22, 0x0D	; 13
    24c2:	70 e0       	ldi	r23, 0x00	; 0
    24c4:	83 e0       	ldi	r24, 0x03	; 3
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	f2 01       	movw	r30, r4
    24ca:	09 95       	icall
		lcd0.putch(':');
    24cc:	ee ad       	ldd	r30, Y+62	; 0x3e
    24ce:	ff ad       	ldd	r31, Y+63	; 0x3f
    24d0:	8a e3       	ldi	r24, 0x3A	; 58
    24d2:	09 95       	icall
		lcd0.string_size(keypad.get().printstring,6);
    24d4:	f4 01       	movw	r30, r8
    24d6:	09 95       	icall
    24d8:	3c ab       	std	Y+52, r19	; 0x34
    24da:	4d ab       	std	Y+53, r20	; 0x35
    24dc:	66 e0       	ldi	r22, 0x06	; 6
    24de:	8c a9       	ldd	r24, Y+52	; 0x34
    24e0:	9d a9       	ldd	r25, Y+53	; 0x35
    24e2:	f3 01       	movw	r30, r6
    24e4:	09 95       	icall
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	0f 90       	pop	r0
		/***ENTRY END***/
		switch(Menu){
			/***MENU 1***/
			case '1': // Main Program Menu
				if(!strcmp(keypad.get().string,"A")){Menu='2';keypad.flush();lcd0.clear();break;}
    24f2:	f4 01       	movw	r30, r8
    24f4:	09 95       	icall
    24f6:	59 ab       	std	Y+49, r21	; 0x31
    24f8:	6a ab       	std	Y+50, r22	; 0x32
    24fa:	62 e1       	ldi	r22, 0x12	; 18
    24fc:	71 e0       	ldi	r23, 0x01	; 1
    24fe:	89 a9       	ldd	r24, Y+49	; 0x31
    2500:	9a a9       	ldd	r25, Y+50	; 0x32
    2502:	41 d5       	rcall	.+2690   	; 0x2f86 <strcmp>
    2504:	89 2b       	or	r24, r25
    2506:	51 f4       	brne	.+20     	; 0x251c <main+0x30c>
    2508:	f1 01       	movw	r30, r2
    250a:	09 95       	icall
    250c:	c4 53       	subi	r28, 0x34	; 52
    250e:	df 4f       	sbci	r29, 0xFF	; 255
    2510:	e8 81       	ld	r30, Y
    2512:	f9 81       	ldd	r31, Y+1	; 0x01
    2514:	cc 5c       	subi	r28, 0xCC	; 204
    2516:	d0 40       	sbci	r29, 0x00	; 0
    2518:	09 95       	icall
    251a:	a4 c1       	rjmp	.+840    	; 0x2864 <main+0x654>
				if(!strcmp(keypad.get().string,"B")){Menu='3';keypad.flush();lcd0.clear();break;}
    251c:	f4 01       	movw	r30, r8
    251e:	09 95       	icall
    2520:	5c a7       	std	Y+44, r21	; 0x2c
    2522:	6d a7       	std	Y+45, r22	; 0x2d
    2524:	64 e1       	ldi	r22, 0x14	; 20
    2526:	71 e0       	ldi	r23, 0x01	; 1
    2528:	8c a5       	ldd	r24, Y+44	; 0x2c
    252a:	9d a5       	ldd	r25, Y+45	; 0x2d
    252c:	2c d5       	rcall	.+2648   	; 0x2f86 <strcmp>
    252e:	89 2b       	or	r24, r25
    2530:	51 f4       	brne	.+20     	; 0x2546 <main+0x336>
    2532:	f1 01       	movw	r30, r2
    2534:	09 95       	icall
    2536:	c4 53       	subi	r28, 0x34	; 52
    2538:	df 4f       	sbci	r29, 0xFF	; 255
    253a:	e8 81       	ld	r30, Y
    253c:	f9 81       	ldd	r31, Y+1	; 0x01
    253e:	cc 5c       	subi	r28, 0xCC	; 204
    2540:	d0 40       	sbci	r29, 0x00	; 0
    2542:	09 95       	icall
    2544:	65 c1       	rjmp	.+714    	; 0x2810 <main+0x600>
					/***Reading analog***/
					adcvalue=analog.read(0);
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	c0 53       	subi	r28, 0x30	; 48
    254c:	df 4f       	sbci	r29, 0xFF	; 255
    254e:	e8 81       	ld	r30, Y
    2550:	f9 81       	ldd	r31, Y+1	; 0x01
    2552:	c0 5d       	subi	r28, 0xD0	; 208
    2554:	d0 40       	sbci	r29, 0x00	; 0
    2556:	09 95       	icall
    2558:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <adcvalue+0x1>
    255c:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <adcvalue>
					lcd0.gotoxy(0,0);
    2560:	60 e0       	ldi	r22, 0x00	; 0
    2562:	70 e0       	ldi	r23, 0x00	; 0
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	f2 01       	movw	r30, r4
    256a:	09 95       	icall
					lcd0.string_size("Sense: ",7);
    256c:	67 e0       	ldi	r22, 0x07	; 7
    256e:	86 e1       	ldi	r24, 0x16	; 22
    2570:	91 e0       	ldi	r25, 0x01	; 1
    2572:	f3 01       	movw	r30, r6
    2574:	09 95       	icall
					strcpy(str,function.i16toa(adcvalue));
    2576:	e0 91 ac 03 	lds	r30, 0x03AC	; 0x8003ac <function+0x20>
    257a:	f0 91 ad 03 	lds	r31, 0x03AD	; 0x8003ad <function+0x21>
    257e:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <adcvalue>
    2582:	90 91 db 03 	lds	r25, 0x03DB	; 0x8003db <adcvalue+0x1>
    2586:	09 95       	icall
    2588:	bc 01       	movw	r22, r24
    258a:	ce 01       	movw	r24, r28
    258c:	8a 58       	subi	r24, 0x8A	; 138
    258e:	9f 4f       	sbci	r25, 0xFF	; 255
    2590:	03 d5       	rcall	.+2566   	; 0x2f98 <strcpy>
					lcd0.string_size(str,4);
    2592:	64 e0       	ldi	r22, 0x04	; 4
    2594:	ce 01       	movw	r24, r28
    2596:	8a 58       	subi	r24, 0x8A	; 138
    2598:	9f 4f       	sbci	r25, 0xFF	; 255
    259a:	f3 01       	movw	r30, r6
    259c:	09 95       	icall
					
					// PID_1 output
					lcd0.gotoxy(0,13);
    259e:	6d e0       	ldi	r22, 0x0D	; 13
    25a0:	70 e0       	ldi	r23, 0x00	; 0
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	f2 01       	movw	r30, r4
					strcpy(str,function.i32toa(pid_out_1));
    25a8:	09 95       	icall
    25aa:	60 91 48 04 	lds	r22, 0x0448	; 0x800448 <pid_out_1>
    25ae:	70 91 49 04 	lds	r23, 0x0449	; 0x800449 <pid_out_1+0x1>
    25b2:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <pid_out_1+0x2>
    25b6:	90 91 4b 04 	lds	r25, 0x044B	; 0x80044b <pid_out_1+0x3>
    25ba:	05 d3       	rcall	.+1546   	; 0x2bc6 <__fixsfsi>
    25bc:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <function+0x24>
    25c0:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <function+0x25>
    25c4:	09 95       	icall
    25c6:	bc 01       	movw	r22, r24
    25c8:	ce 01       	movw	r24, r28
    25ca:	8a 58       	subi	r24, 0x8A	; 138
    25cc:	9f 4f       	sbci	r25, 0xFF	; 255
    25ce:	e4 d4       	rcall	.+2504   	; 0x2f98 <strcpy>
					lcd0.string_size(str,6);
    25d0:	66 e0       	ldi	r22, 0x06	; 6
    25d2:	ce 01       	movw	r24, r28
    25d4:	8a 58       	subi	r24, 0x8A	; 138
    25d6:	9f 4f       	sbci	r25, 0xFF	; 255
    25d8:	f3 01       	movw	r30, r6
    25da:	09 95       	icall
					// PID_2 output
					lcd0.gotoxy(1,13);
    25dc:	6d e0       	ldi	r22, 0x0D	; 13
    25de:	70 e0       	ldi	r23, 0x00	; 0
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	f2 01       	movw	r30, r4
					strcpy(str,function.i32toa(pid_out_2));
    25e6:	09 95       	icall
    25e8:	60 91 d6 03 	lds	r22, 0x03D6	; 0x8003d6 <pid_out_2>
    25ec:	70 91 d7 03 	lds	r23, 0x03D7	; 0x8003d7 <pid_out_2+0x1>
    25f0:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <pid_out_2+0x2>
    25f4:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <pid_out_2+0x3>
    25f8:	e6 d2       	rcall	.+1484   	; 0x2bc6 <__fixsfsi>
    25fa:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <function+0x24>
    25fe:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <function+0x25>
    2602:	09 95       	icall
    2604:	bc 01       	movw	r22, r24
    2606:	ce 01       	movw	r24, r28
    2608:	8a 58       	subi	r24, 0x8A	; 138
    260a:	9f 4f       	sbci	r25, 0xFF	; 255
    260c:	c5 d4       	rcall	.+2442   	; 0x2f98 <strcpy>
					lcd0.string_size(str,6);
    260e:	66 e0       	ldi	r22, 0x06	; 6
    2610:	ce 01       	movw	r24, r28
    2612:	8a 58       	subi	r24, 0x8A	; 138
    2614:	9f 4f       	sbci	r25, 0xFF	; 255
    2616:	f3 01       	movw	r30, r6
    2618:	09 95       	icall
					
					
					
				break;
    261a:	4e c1       	rjmp	.+668    	; 0x28b8 <main+0x6a8>
			/***MENU 2***/
			case '2': // Manual position override 
				if(!strcmp(keypad.get().string,"A")){Menu='3';keypad.flush();lcd0.clear();break;}
    261c:	f1 01       	movw	r30, r2
    261e:	09 95       	icall
    2620:	c4 53       	subi	r28, 0x34	; 52
    2622:	df 4f       	sbci	r29, 0xFF	; 255
    2624:	e8 81       	ld	r30, Y
    2626:	f9 81       	ldd	r31, Y+1	; 0x01
    2628:	cc 5c       	subi	r28, 0xCC	; 204
    262a:	d0 40       	sbci	r29, 0x00	; 0
    262c:	09 95       	icall
				if(!strcmp(keypad.get().string,"B")){Menu='1';keypad.flush();lcd0.clear();break;}
    262e:	f0 c0       	rjmp	.+480    	; 0x2810 <main+0x600>
    2630:	f4 01       	movw	r30, r8
    2632:	09 95       	icall
    2634:	5a a3       	std	Y+34, r21	; 0x22
    2636:	6b a3       	std	Y+35, r22	; 0x23
    2638:	64 e1       	ldi	r22, 0x14	; 20
    263a:	71 e0       	ldi	r23, 0x01	; 1
    263c:	8a a1       	ldd	r24, Y+34	; 0x22
    263e:	9b a1       	ldd	r25, Y+35	; 0x23
    2640:	a2 d4       	rcall	.+2372   	; 0x2f86 <strcmp>
    2642:	89 2b       	or	r24, r25
    2644:	51 f4       	brne	.+20     	; 0x265a <main+0x44a>
    2646:	f1 01       	movw	r30, r2
    2648:	09 95       	icall
    264a:	c4 53       	subi	r28, 0x34	; 52
    264c:	df 4f       	sbci	r29, 0xFF	; 255
    264e:	e8 81       	ld	r30, Y
    2650:	f9 81       	ldd	r31, Y+1	; 0x01
    2652:	cc 5c       	subi	r28, 0xCC	; 204
    2654:	d0 40       	sbci	r29, 0x00	; 0
    2656:	09 95       	icall
				if(!strcmp(keypad.get().string,"C")){Menu='1';keypad.flush();lcd0.clear();break;}
    2658:	2f c1       	rjmp	.+606    	; 0x28b8 <main+0x6a8>
    265a:	f4 01       	movw	r30, r8
    265c:	09 95       	icall
    265e:	5d 8f       	std	Y+29, r21	; 0x1d
    2660:	6e 8f       	std	Y+30, r22	; 0x1e
    2662:	6e e1       	ldi	r22, 0x1E	; 30
    2664:	71 e0       	ldi	r23, 0x01	; 1
    2666:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2668:	9e 8d       	ldd	r25, Y+30	; 0x1e
    266a:	8d d4       	rcall	.+2330   	; 0x2f86 <strcmp>
    266c:	89 2b       	or	r24, r25
    266e:	51 f4       	brne	.+20     	; 0x2684 <main+0x474>
    2670:	f1 01       	movw	r30, r2
    2672:	09 95       	icall
    2674:	c4 53       	subi	r28, 0x34	; 52
    2676:	df 4f       	sbci	r29, 0xFF	; 255
    2678:	e8 81       	ld	r30, Y
    267a:	f9 81       	ldd	r31, Y+1	; 0x01
    267c:	cc 5c       	subi	r28, 0xCC	; 204
    267e:	d0 40       	sbci	r29, 0x00	; 0
    2680:	09 95       	icall
    2682:	1a c1       	rjmp	.+564    	; 0x28b8 <main+0x6a8>
					lcd0.gotoxy(0,0);
    2684:	60 e0       	ldi	r22, 0x00	; 0
    2686:	70 e0       	ldi	r23, 0x00	; 0
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	f2 01       	movw	r30, r4
    268e:	09 95       	icall
					lcd0.string_size("Manual: ",8);
    2690:	68 e0       	ldi	r22, 0x08	; 8
    2692:	80 e2       	ldi	r24, 0x20	; 32
    2694:	91 e0       	ldi	r25, 0x01	; 1
    2696:	f3 01       	movw	r30, r6
    2698:	09 95       	icall
					lcd0.string_size(mstr,3);
    269a:	63 e0       	ldi	r22, 0x03	; 3
    269c:	ce 01       	movw	r24, r28
    269e:	84 58       	subi	r24, 0x84	; 132
    26a0:	9f 4f       	sbci	r25, 0xFF	; 255
    26a2:	f3 01       	movw	r30, r6
    26a4:	09 95       	icall
					lcd0.gotoxy(1,0);
    26a6:	60 e0       	ldi	r22, 0x00	; 0
    26a8:	70 e0       	ldi	r23, 0x00	; 0
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	f2 01       	movw	r30, r4
    26b0:	09 95       	icall
					lcd0.string_size("Enter Angle",11);
    26b2:	6b e0       	ldi	r22, 0x0B	; 11
    26b4:	89 e2       	ldi	r24, 0x29	; 41
    26b6:	91 e0       	ldi	r25, 0x01	; 1
    26b8:	f3 01       	movw	r30, r6
    26ba:	09 95       	icall
					if(keypad.get().character==KEYPADENTERKEY){
    26bc:	f4 01       	movw	r30, r8
    26be:	09 95       	icall
    26c0:	24 34       	cpi	r18, 0x44	; 68
    26c2:	09 f0       	breq	.+2      	; 0x26c6 <main+0x4b6>
						strncpy(mstr,keypad.get().string,6);
    26c4:	5a c0       	rjmp	.+180    	; 0x277a <main+0x56a>
    26c6:	f4 01       	movw	r30, r8
    26c8:	09 95       	icall
    26ca:	5b 8b       	std	Y+19, r21	; 0x13
    26cc:	6c 8b       	std	Y+20, r22	; 0x14
    26ce:	6b 89       	ldd	r22, Y+19	; 0x13
    26d0:	7c 89       	ldd	r23, Y+20	; 0x14
    26d2:	46 e0       	ldi	r20, 0x06	; 6
    26d4:	50 e0       	ldi	r21, 0x00	; 0
    26d6:	ce 01       	movw	r24, r28
    26d8:	84 58       	subi	r24, 0x84	; 132
    26da:	9f 4f       	sbci	r25, 0xFF	; 255
    26dc:	64 d4       	rcall	.+2248   	; 0x2fa6 <strncpy>
						mvalue=function.strToInt(mstr);
    26de:	e0 91 b8 03 	lds	r30, 0x03B8	; 0x8003b8 <function+0x2c>
    26e2:	f0 91 b9 03 	lds	r31, 0x03B9	; 0x8003b9 <function+0x2d>
    26e6:	ce 01       	movw	r24, r28
    26e8:	84 58       	subi	r24, 0x84	; 132
    26ea:	9f 4f       	sbci	r25, 0xFF	; 255
    26ec:	09 95       	icall
						if(mvalue >=0 && mvalue <181){
    26ee:	85 3b       	cpi	r24, 0xB5	; 181
    26f0:	91 05       	cpc	r25, r1
    26f2:	e0 f5       	brcc	.+120    	; 0x276c <main+0x55c>
							m_value=mvalue;
							timer1.compareB(function.trimmer(m_value,0,180,Min,Max));
    26f4:	e0 96       	adiw	r28, 0x30	; 48
    26f6:	2e ad       	ldd	r18, Y+62	; 0x3e
    26f8:	3f ad       	ldd	r19, Y+63	; 0x3f
    26fa:	e0 97       	sbiw	r28, 0x30	; 48
    26fc:	ce 52       	subi	r28, 0x2E	; 46
    26fe:	df 4f       	sbci	r29, 0xFF	; 255
    2700:	39 83       	std	Y+1, r19	; 0x01
    2702:	28 83       	st	Y, r18
    2704:	c2 5d       	subi	r28, 0xD2	; 210
    2706:	d0 40       	sbci	r29, 0x00	; 0
    2708:	bc 01       	movw	r22, r24
    270a:	99 0f       	add	r25, r25
    270c:	88 0b       	sbc	r24, r24
    270e:	99 0b       	sbc	r25, r25
    2710:	1f 92       	push	r1
    2712:	1f 92       	push	r1
    2714:	39 e0       	ldi	r19, 0x09	; 9
    2716:	3f 93       	push	r19
    2718:	ae e2       	ldi	r26, 0x2E	; 46
    271a:	af 93       	push	r26
    271c:	e0 91 ca 03 	lds	r30, 0x03CA	; 0x8003ca <function+0x3e>
    2720:	f0 91 cb 03 	lds	r31, 0x03CB	; 0x8003cb <function+0x3f>
    2724:	0f 2e       	mov	r0, r31
    2726:	f4 ef       	ldi	r31, 0xF4	; 244
    2728:	af 2e       	mov	r10, r31
    272a:	bb 24       	eor	r11, r11
    272c:	b3 94       	inc	r11
    272e:	c1 2c       	mov	r12, r1
    2730:	d1 2c       	mov	r13, r1
    2732:	f0 2d       	mov	r31, r0
    2734:	14 eb       	ldi	r17, 0xB4	; 180
    2736:	e1 2e       	mov	r14, r17
    2738:	f1 2c       	mov	r15, r1
    273a:	00 e0       	ldi	r16, 0x00	; 0
    273c:	10 e0       	ldi	r17, 0x00	; 0
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	a9 01       	movw	r20, r18
    2744:	09 95       	icall
    2746:	cb 01       	movw	r24, r22
    2748:	ce 52       	subi	r28, 0x2E	; 46
    274a:	df 4f       	sbci	r29, 0xFF	; 255
    274c:	e8 81       	ld	r30, Y
    274e:	f9 81       	ldd	r31, Y+1	; 0x01
    2750:	c2 5d       	subi	r28, 0xD2	; 210
    2752:	d0 40       	sbci	r29, 0x00	; 0
    2754:	09 95       	icall
							lcd0.hspace(5);
    2756:	28 96       	adiw	r28, 0x08	; 8
    2758:	ee ad       	ldd	r30, Y+62	; 0x3e
    275a:	ff ad       	ldd	r31, Y+63	; 0x3f
    275c:	28 97       	sbiw	r28, 0x08	; 8
    275e:	85 e0       	ldi	r24, 0x05	; 5
    2760:	09 95       	icall
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	05 c0       	rjmp	.+10     	; 0x2776 <main+0x566>
						}else{
							lcd0.string_size("  err",5);
    276c:	65 e0       	ldi	r22, 0x05	; 5
    276e:	85 e3       	ldi	r24, 0x35	; 53
    2770:	91 e0       	ldi	r25, 0x01	; 1
    2772:	f3 01       	movw	r30, r6
    2774:	09 95       	icall
						}
						keypad.flush();
    2776:	f1 01       	movw	r30, r2
    2778:	09 95       	icall
					}
					//else
					//	timer1.compareB(function.trimmer(m_value,0,180,Min,Max));
					lcd0.gotoxy(3,0);
    277a:	60 e0       	ldi	r22, 0x00	; 0
    277c:	70 e0       	ldi	r23, 0x00	; 0
    277e:	83 e0       	ldi	r24, 0x03	; 3
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	f2 01       	movw	r30, r4
    2784:	09 95       	icall
					lcd0.string_size("C - exit",8);
    2786:	68 e0       	ldi	r22, 0x08	; 8
    2788:	8b e3       	ldi	r24, 0x3B	; 59
    278a:	91 e0       	ldi	r25, 0x01	; 1
    278c:	f3 01       	movw	r30, r6
    278e:	09 95       	icall
				break;
    2790:	69 c0       	rjmp	.+210    	; 0x2864 <main+0x654>
			/***MENU 3***/
			case '3': //Set Time and Date
				if(!strcmp(keypad.get().string,"A")){Menu='1';keypad.flush();lcd0.clear();break;}
    2792:	f1 01       	movw	r30, r2
    2794:	09 95       	icall
    2796:	c4 53       	subi	r28, 0x34	; 52
    2798:	df 4f       	sbci	r29, 0xFF	; 255
    279a:	e8 81       	ld	r30, Y
    279c:	f9 81       	ldd	r31, Y+1	; 0x01
    279e:	cc 5c       	subi	r28, 0xCC	; 204
    27a0:	d0 40       	sbci	r29, 0x00	; 0
    27a2:	09 95       	icall
				if(!strcmp(keypad.get().string,"B")){Menu='2';keypad.flush();lcd0.clear();break;}
    27a4:	89 c0       	rjmp	.+274    	; 0x28b8 <main+0x6a8>
    27a6:	f4 01       	movw	r30, r8
    27a8:	09 95       	icall
    27aa:	59 87       	std	Y+9, r21	; 0x09
    27ac:	6a 87       	std	Y+10, r22	; 0x0a
    27ae:	64 e1       	ldi	r22, 0x14	; 20
    27b0:	71 e0       	ldi	r23, 0x01	; 1
    27b2:	89 85       	ldd	r24, Y+9	; 0x09
    27b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b6:	e7 d3       	rcall	.+1998   	; 0x2f86 <strcmp>
    27b8:	89 2b       	or	r24, r25
    27ba:	51 f4       	brne	.+20     	; 0x27d0 <main+0x5c0>
    27bc:	f1 01       	movw	r30, r2
    27be:	09 95       	icall
    27c0:	c4 53       	subi	r28, 0x34	; 52
    27c2:	df 4f       	sbci	r29, 0xFF	; 255
    27c4:	e8 81       	ld	r30, Y
    27c6:	f9 81       	ldd	r31, Y+1	; 0x01
    27c8:	cc 5c       	subi	r28, 0xCC	; 204
    27ca:	d0 40       	sbci	r29, 0x00	; 0
    27cc:	09 95       	icall
				if(!strcmp(keypad.get().string,"C")){Menu='1';keypad.flush();lcd0.clear();break;}
    27ce:	4a c0       	rjmp	.+148    	; 0x2864 <main+0x654>
    27d0:	f4 01       	movw	r30, r8
    27d2:	09 95       	icall
    27d4:	5c 83       	std	Y+4, r21	; 0x04
    27d6:	6d 83       	std	Y+5, r22	; 0x05
    27d8:	6e e1       	ldi	r22, 0x1E	; 30
    27da:	71 e0       	ldi	r23, 0x01	; 1
    27dc:	8c 81       	ldd	r24, Y+4	; 0x04
    27de:	9d 81       	ldd	r25, Y+5	; 0x05
    27e0:	d2 d3       	rcall	.+1956   	; 0x2f86 <strcmp>
    27e2:	89 2b       	or	r24, r25
    27e4:	51 f4       	brne	.+20     	; 0x27fa <main+0x5ea>
    27e6:	f1 01       	movw	r30, r2
    27e8:	09 95       	icall
    27ea:	c4 53       	subi	r28, 0x34	; 52
    27ec:	df 4f       	sbci	r29, 0xFF	; 255
    27ee:	e8 81       	ld	r30, Y
    27f0:	f9 81       	ldd	r31, Y+1	; 0x01
    27f2:	cc 5c       	subi	r28, 0xCC	; 204
    27f4:	d0 40       	sbci	r29, 0x00	; 0
    27f6:	09 95       	icall
    27f8:	5f c0       	rjmp	.+190    	; 0x28b8 <main+0x6a8>
					lcd0.gotoxy(0,0);
    27fa:	60 e0       	ldi	r22, 0x00	; 0
    27fc:	70 e0       	ldi	r23, 0x00	; 0
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	f2 01       	movw	r30, r4
    2804:	09 95       	icall
					lcd0.string_size("Not being used",19);
    2806:	63 e1       	ldi	r22, 0x13	; 19
    2808:	84 e4       	ldi	r24, 0x44	; 68
    280a:	91 e0       	ldi	r25, 0x01	; 1
    280c:	f3 01       	movw	r30, r6
    280e:	09 95       	icall
	pid_2.set_SP(&pid_2, 520);
	/**********/
	//TODO:: Please write your application code
	while(TRUE){
		/***PREAMBLE***/
		lcd0.reboot();
    2810:	2e 96       	adiw	r28, 0x0e	; 14
    2812:	ee ad       	ldd	r30, Y+62	; 0x3e
    2814:	ff ad       	ldd	r31, Y+63	; 0x3f
    2816:	2e 97       	sbiw	r28, 0x0e	; 14
    2818:	09 95       	icall
		keypad.read();
    281a:	62 96       	adiw	r28, 0x12	; 18
    281c:	ee ad       	ldd	r30, Y+62	; 0x3e
    281e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2820:	62 97       	sbiw	r28, 0x12	; 18
    2822:	09 95       	icall
		//uartreceive=uart.read();
		/***Reading input***/
		lcd0.gotoxy(3,13);
    2824:	6d e0       	ldi	r22, 0x0D	; 13
    2826:	70 e0       	ldi	r23, 0x00	; 0
    2828:	83 e0       	ldi	r24, 0x03	; 3
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	f2 01       	movw	r30, r4
    282e:	09 95       	icall
		lcd0.putch(':');
    2830:	ee ad       	ldd	r30, Y+62	; 0x3e
    2832:	ff ad       	ldd	r31, Y+63	; 0x3f
    2834:	8a e3       	ldi	r24, 0x3A	; 58
		lcd0.string_size(keypad.get().printstring,6);
    2836:	09 95       	icall
    2838:	f4 01       	movw	r30, r8
    283a:	09 95       	icall
    283c:	3c ab       	std	Y+52, r19	; 0x34
    283e:	4d ab       	std	Y+53, r20	; 0x35
    2840:	66 e0       	ldi	r22, 0x06	; 6
    2842:	8c a9       	ldd	r24, Y+52	; 0x34
    2844:	9d a9       	ldd	r25, Y+53	; 0x35
    2846:	f3 01       	movw	r30, r6
					lcd0.gotoxy(3,0);
					lcd0.string_size("C - exit",8);
				break;
			/***MENU 3***/
			case '3': //Set Time and Date
				if(!strcmp(keypad.get().string,"A")){Menu='1';keypad.flush();lcd0.clear();break;}
    2848:	09 95       	icall
    284a:	f4 01       	movw	r30, r8
    284c:	09 95       	icall
    284e:	5e 87       	std	Y+14, r21	; 0x0e
    2850:	6f 87       	std	Y+15, r22	; 0x0f
    2852:	62 e1       	ldi	r22, 0x12	; 18
    2854:	71 e0       	ldi	r23, 0x01	; 1
    2856:	8e 85       	ldd	r24, Y+14	; 0x0e
    2858:	9f 85       	ldd	r25, Y+15	; 0x0f
    285a:	95 d3       	rcall	.+1834   	; 0x2f86 <strcmp>
    285c:	89 2b       	or	r24, r25
    285e:	09 f4       	brne	.+2      	; 0x2862 <main+0x652>
    2860:	98 cf       	rjmp	.-208    	; 0x2792 <main+0x582>
    2862:	a1 cf       	rjmp	.-190    	; 0x27a6 <main+0x596>
	pid_2.set_SP(&pid_2, 520);
	/**********/
	//TODO:: Please write your application code
	while(TRUE){
		/***PREAMBLE***/
		lcd0.reboot();
    2864:	2e 96       	adiw	r28, 0x0e	; 14
    2866:	ee ad       	ldd	r30, Y+62	; 0x3e
    2868:	ff ad       	ldd	r31, Y+63	; 0x3f
    286a:	2e 97       	sbiw	r28, 0x0e	; 14
    286c:	09 95       	icall
		keypad.read();
    286e:	62 96       	adiw	r28, 0x12	; 18
    2870:	ee ad       	ldd	r30, Y+62	; 0x3e
    2872:	ff ad       	ldd	r31, Y+63	; 0x3f
    2874:	62 97       	sbiw	r28, 0x12	; 18
    2876:	09 95       	icall
		//uartreceive=uart.read();
		/***Reading input***/
		lcd0.gotoxy(3,13);
    2878:	6d e0       	ldi	r22, 0x0D	; 13
    287a:	70 e0       	ldi	r23, 0x00	; 0
    287c:	83 e0       	ldi	r24, 0x03	; 3
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	f2 01       	movw	r30, r4
    2882:	09 95       	icall
		lcd0.putch(':');
    2884:	ee ad       	ldd	r30, Y+62	; 0x3e
    2886:	ff ad       	ldd	r31, Y+63	; 0x3f
    2888:	8a e3       	ldi	r24, 0x3A	; 58
		lcd0.string_size(keypad.get().printstring,6);
    288a:	09 95       	icall
    288c:	f4 01       	movw	r30, r8
    288e:	09 95       	icall
    2890:	3c ab       	std	Y+52, r19	; 0x34
    2892:	4d ab       	std	Y+53, r20	; 0x35
    2894:	66 e0       	ldi	r22, 0x06	; 6
    2896:	8c a9       	ldd	r24, Y+52	; 0x34
    2898:	9d a9       	ldd	r25, Y+53	; 0x35
    289a:	f3 01       	movw	r30, r6
					
					
				break;
			/***MENU 2***/
			case '2': // Manual position override 
				if(!strcmp(keypad.get().string,"A")){Menu='3';keypad.flush();lcd0.clear();break;}
    289c:	09 95       	icall
    289e:	f4 01       	movw	r30, r8
    28a0:	09 95       	icall
    28a2:	5f a3       	std	Y+39, r21	; 0x27
    28a4:	68 a7       	std	Y+40, r22	; 0x28
    28a6:	62 e1       	ldi	r22, 0x12	; 18
    28a8:	71 e0       	ldi	r23, 0x01	; 1
    28aa:	8f a1       	ldd	r24, Y+39	; 0x27
    28ac:	98 a5       	ldd	r25, Y+40	; 0x28
    28ae:	6b d3       	rcall	.+1750   	; 0x2f86 <strcmp>
    28b0:	89 2b       	or	r24, r25
    28b2:	09 f4       	brne	.+2      	; 0x28b6 <main+0x6a6>
    28b4:	b3 ce       	rjmp	.-666    	; 0x261c <main+0x40c>
    28b6:	bc ce       	rjmp	.-648    	; 0x2630 <main+0x420>
	pid_2.set_SP(&pid_2, 520);
	/**********/
	//TODO:: Please write your application code
	while(TRUE){
		/***PREAMBLE***/
		lcd0.reboot();
    28b8:	2e 96       	adiw	r28, 0x0e	; 14
    28ba:	ee ad       	ldd	r30, Y+62	; 0x3e
    28bc:	ff ad       	ldd	r31, Y+63	; 0x3f
    28be:	2e 97       	sbiw	r28, 0x0e	; 14
    28c0:	09 95       	icall
		keypad.read();
    28c2:	62 96       	adiw	r28, 0x12	; 18
    28c4:	ee ad       	ldd	r30, Y+62	; 0x3e
    28c6:	ff ad       	ldd	r31, Y+63	; 0x3f
    28c8:	62 97       	sbiw	r28, 0x12	; 18
    28ca:	09 95       	icall
		//uartreceive=uart.read();
		/***Reading input***/
		lcd0.gotoxy(3,13);
    28cc:	6d e0       	ldi	r22, 0x0D	; 13
    28ce:	70 e0       	ldi	r23, 0x00	; 0
    28d0:	83 e0       	ldi	r24, 0x03	; 3
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	f2 01       	movw	r30, r4
    28d6:	09 95       	icall
		lcd0.putch(':');
    28d8:	ee ad       	ldd	r30, Y+62	; 0x3e
    28da:	ff ad       	ldd	r31, Y+63	; 0x3f
    28dc:	8a e3       	ldi	r24, 0x3A	; 58
    28de:	09 95       	icall
		lcd0.string_size(keypad.get().printstring,6);
    28e0:	f4 01       	movw	r30, r8
    28e2:	09 95       	icall
    28e4:	3c ab       	std	Y+52, r19	; 0x34
    28e6:	4d ab       	std	Y+53, r20	; 0x35
    28e8:	66 e0       	ldi	r22, 0x06	; 6
    28ea:	8c a9       	ldd	r24, Y+52	; 0x34
    28ec:	9d a9       	ldd	r25, Y+53	; 0x35
    28ee:	f3 01       	movw	r30, r6
    28f0:	09 95       	icall
    28f2:	ff cd       	rjmp	.-1026   	; 0x24f2 <main+0x2e2>

000028f4 <__vector_15>:
}
/*
** interrupt
*/
ISR(TIMER0_COMP_vect) // 1Hz and usart Tx
{
    28f4:	1f 92       	push	r1
    28f6:	0f 92       	push	r0
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	0f 92       	push	r0
    28fc:	11 24       	eor	r1, r1
    28fe:	0b b6       	in	r0, 0x3b	; 59
    2900:	0f 92       	push	r0
    2902:	0f 93       	push	r16
    2904:	1f 93       	push	r17
    2906:	2f 93       	push	r18
    2908:	3f 93       	push	r19
    290a:	4f 93       	push	r20
    290c:	5f 93       	push	r21
    290e:	6f 93       	push	r22
    2910:	7f 93       	push	r23
    2912:	8f 93       	push	r24
    2914:	9f 93       	push	r25
    2916:	af 93       	push	r26
    2918:	bf 93       	push	r27
    291a:	cf 93       	push	r28
    291c:	ef 93       	push	r30
    291e:	ff 93       	push	r31
	uint8_t Sreg;
	Sreg=SREG;
    2920:	cf b7       	in	r28, 0x3f	; 63
	SREG&=~(1<<7);
    2922:	8f b7       	in	r24, 0x3f	; 63
    2924:	8f 77       	andi	r24, 0x7F	; 127
    2926:	8f bf       	out	0x3f, r24	; 63
	if(count>59){ //59 -> 1Hz
    2928:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <count>
    292c:	8c 33       	cpi	r24, 0x3C	; 60
    292e:	08 f4       	brcc	.+2      	; 0x2932 <__vector_15+0x3e>
    2930:	5f c0       	rjmp	.+190    	; 0x29f0 <__vector_15+0xfc>
		pid_out_1=pid_1.output(&pid_1,adcvalue,0.5);
    2932:	60 91 da 03 	lds	r22, 0x03DA	; 0x8003da <adcvalue>
    2936:	70 91 db 03 	lds	r23, 0x03DB	; 0x8003db <adcvalue+0x1>
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	74 d1       	rcall	.+744    	; 0x2c28 <__floatunsisf>
    2940:	ab 01       	movw	r20, r22
    2942:	bc 01       	movw	r22, r24
    2944:	e0 91 10 04 	lds	r30, 0x0410	; 0x800410 <pid_1+0x34>
    2948:	f0 91 11 04 	lds	r31, 0x0411	; 0x800411 <pid_1+0x35>
    294c:	00 e0       	ldi	r16, 0x00	; 0
    294e:	10 e0       	ldi	r17, 0x00	; 0
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	3f e3       	ldi	r19, 0x3F	; 63
    2954:	8c ed       	ldi	r24, 0xDC	; 220
    2956:	93 e0       	ldi	r25, 0x03	; 3
    2958:	09 95       	icall
    295a:	60 93 48 04 	sts	0x0448, r22	; 0x800448 <pid_out_1>
    295e:	70 93 49 04 	sts	0x0449, r23	; 0x800449 <pid_out_1+0x1>
    2962:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <pid_out_1+0x2>
    2966:	90 93 4b 04 	sts	0x044B, r25	; 0x80044b <pid_out_1+0x3>
		pid_out_2=pid_2.output(&pid_2,adcvalue,0.5);
    296a:	60 91 da 03 	lds	r22, 0x03DA	; 0x8003da <adcvalue>
    296e:	70 91 db 03 	lds	r23, 0x03DB	; 0x8003db <adcvalue+0x1>
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	58 d1       	rcall	.+688    	; 0x2c28 <__floatunsisf>
    2978:	ab 01       	movw	r20, r22
    297a:	bc 01       	movw	r22, r24
    297c:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <pid_2+0x34>
    2980:	f0 91 47 04 	lds	r31, 0x0447	; 0x800447 <pid_2+0x35>
    2984:	00 e0       	ldi	r16, 0x00	; 0
    2986:	10 e0       	ldi	r17, 0x00	; 0
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	3f e3       	ldi	r19, 0x3F	; 63
    298c:	82 e1       	ldi	r24, 0x12	; 18
    298e:	94 e0       	ldi	r25, 0x04	; 4
    2990:	09 95       	icall
    2992:	60 93 d6 03 	sts	0x03D6, r22	; 0x8003d6 <pid_out_2>
    2996:	70 93 d7 03 	sts	0x03D7, r23	; 0x8003d7 <pid_out_2+0x1>
    299a:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <pid_out_2+0x2>
    299e:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <pid_out_2+0x3>
		increment++;
    29a2:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <increment>
    29a6:	8f 5f       	subi	r24, 0xFF	; 255
    29a8:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <increment>
		if((increment & 0x0F) < 8){
    29ac:	8f 70       	andi	r24, 0x0F	; 15
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	08 97       	sbiw	r24, 0x08	; 8
    29b2:	74 f4       	brge	.+28     	; 0x29d0 <__vector_15+0xdc>
			shift.bit(0);
    29b4:	06 e8       	ldi	r16, 0x86	; 134
    29b6:	13 e0       	ldi	r17, 0x03	; 3
    29b8:	d8 01       	movw	r26, r16
    29ba:	ed 91       	ld	r30, X+
    29bc:	fc 91       	ld	r31, X
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	09 95       	icall
			shift.out();
    29c2:	d8 01       	movw	r26, r16
    29c4:	14 96       	adiw	r26, 0x04	; 4
    29c6:	ed 91       	ld	r30, X+
    29c8:	fc 91       	ld	r31, X
    29ca:	15 97       	sbiw	r26, 0x05	; 5
    29cc:	09 95       	icall
    29ce:	0d c0       	rjmp	.+26     	; 0x29ea <__vector_15+0xf6>
		}else{
			shift.bit(1);
    29d0:	06 e8       	ldi	r16, 0x86	; 134
    29d2:	13 e0       	ldi	r17, 0x03	; 3
    29d4:	d8 01       	movw	r26, r16
    29d6:	ed 91       	ld	r30, X+
    29d8:	fc 91       	ld	r31, X
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	09 95       	icall
			shift.out();
    29de:	d8 01       	movw	r26, r16
    29e0:	14 96       	adiw	r26, 0x04	; 4
    29e2:	ed 91       	ld	r30, X+
    29e4:	fc 91       	ld	r31, X
    29e6:	15 97       	sbiw	r26, 0x05	; 5
    29e8:	09 95       	icall
		}
		count=0;
    29ea:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <count>
    29ee:	03 c0       	rjmp	.+6      	; 0x29f6 <__vector_15+0x102>
	}else
		count++;
    29f0:	8f 5f       	subi	r24, 0xFF	; 255
    29f2:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <count>
	SREG=Sreg;
    29f6:	cf bf       	out	0x3f, r28	; 63
}
    29f8:	ff 91       	pop	r31
    29fa:	ef 91       	pop	r30
    29fc:	cf 91       	pop	r28
    29fe:	bf 91       	pop	r27
    2a00:	af 91       	pop	r26
    2a02:	9f 91       	pop	r25
    2a04:	8f 91       	pop	r24
    2a06:	7f 91       	pop	r23
    2a08:	6f 91       	pop	r22
    2a0a:	5f 91       	pop	r21
    2a0c:	4f 91       	pop	r20
    2a0e:	3f 91       	pop	r19
    2a10:	2f 91       	pop	r18
    2a12:	1f 91       	pop	r17
    2a14:	0f 91       	pop	r16
    2a16:	0f 90       	pop	r0
    2a18:	0b be       	out	0x3b, r0	; 59
    2a1a:	0f 90       	pop	r0
    2a1c:	0f be       	out	0x3f, r0	; 63
    2a1e:	0f 90       	pop	r0
    2a20:	1f 90       	pop	r1
    2a22:	18 95       	reti

00002a24 <__subsf3>:
    2a24:	50 58       	subi	r21, 0x80	; 128

00002a26 <__addsf3>:
    2a26:	bb 27       	eor	r27, r27
    2a28:	aa 27       	eor	r26, r26
    2a2a:	0e d0       	rcall	.+28     	; 0x2a48 <__addsf3x>
    2a2c:	75 c1       	rjmp	.+746    	; 0x2d18 <__fp_round>
    2a2e:	66 d1       	rcall	.+716    	; 0x2cfc <__fp_pscA>
    2a30:	30 f0       	brcs	.+12     	; 0x2a3e <__addsf3+0x18>
    2a32:	6b d1       	rcall	.+726    	; 0x2d0a <__fp_pscB>
    2a34:	20 f0       	brcs	.+8      	; 0x2a3e <__addsf3+0x18>
    2a36:	31 f4       	brne	.+12     	; 0x2a44 <__addsf3+0x1e>
    2a38:	9f 3f       	cpi	r25, 0xFF	; 255
    2a3a:	11 f4       	brne	.+4      	; 0x2a40 <__addsf3+0x1a>
    2a3c:	1e f4       	brtc	.+6      	; 0x2a44 <__addsf3+0x1e>
    2a3e:	5b c1       	rjmp	.+694    	; 0x2cf6 <__fp_nan>
    2a40:	0e f4       	brtc	.+2      	; 0x2a44 <__addsf3+0x1e>
    2a42:	e0 95       	com	r30
    2a44:	e7 fb       	bst	r30, 7
    2a46:	51 c1       	rjmp	.+674    	; 0x2cea <__fp_inf>

00002a48 <__addsf3x>:
    2a48:	e9 2f       	mov	r30, r25
    2a4a:	77 d1       	rcall	.+750    	; 0x2d3a <__fp_split3>
    2a4c:	80 f3       	brcs	.-32     	; 0x2a2e <__addsf3+0x8>
    2a4e:	ba 17       	cp	r27, r26
    2a50:	62 07       	cpc	r22, r18
    2a52:	73 07       	cpc	r23, r19
    2a54:	84 07       	cpc	r24, r20
    2a56:	95 07       	cpc	r25, r21
    2a58:	18 f0       	brcs	.+6      	; 0x2a60 <__addsf3x+0x18>
    2a5a:	71 f4       	brne	.+28     	; 0x2a78 <__addsf3x+0x30>
    2a5c:	9e f5       	brtc	.+102    	; 0x2ac4 <__addsf3x+0x7c>
    2a5e:	8f c1       	rjmp	.+798    	; 0x2d7e <__fp_zero>
    2a60:	0e f4       	brtc	.+2      	; 0x2a64 <__addsf3x+0x1c>
    2a62:	e0 95       	com	r30
    2a64:	0b 2e       	mov	r0, r27
    2a66:	ba 2f       	mov	r27, r26
    2a68:	a0 2d       	mov	r26, r0
    2a6a:	0b 01       	movw	r0, r22
    2a6c:	b9 01       	movw	r22, r18
    2a6e:	90 01       	movw	r18, r0
    2a70:	0c 01       	movw	r0, r24
    2a72:	ca 01       	movw	r24, r20
    2a74:	a0 01       	movw	r20, r0
    2a76:	11 24       	eor	r1, r1
    2a78:	ff 27       	eor	r31, r31
    2a7a:	59 1b       	sub	r21, r25
    2a7c:	99 f0       	breq	.+38     	; 0x2aa4 <__addsf3x+0x5c>
    2a7e:	59 3f       	cpi	r21, 0xF9	; 249
    2a80:	50 f4       	brcc	.+20     	; 0x2a96 <__addsf3x+0x4e>
    2a82:	50 3e       	cpi	r21, 0xE0	; 224
    2a84:	68 f1       	brcs	.+90     	; 0x2ae0 <__addsf3x+0x98>
    2a86:	1a 16       	cp	r1, r26
    2a88:	f0 40       	sbci	r31, 0x00	; 0
    2a8a:	a2 2f       	mov	r26, r18
    2a8c:	23 2f       	mov	r18, r19
    2a8e:	34 2f       	mov	r19, r20
    2a90:	44 27       	eor	r20, r20
    2a92:	58 5f       	subi	r21, 0xF8	; 248
    2a94:	f3 cf       	rjmp	.-26     	; 0x2a7c <__addsf3x+0x34>
    2a96:	46 95       	lsr	r20
    2a98:	37 95       	ror	r19
    2a9a:	27 95       	ror	r18
    2a9c:	a7 95       	ror	r26
    2a9e:	f0 40       	sbci	r31, 0x00	; 0
    2aa0:	53 95       	inc	r21
    2aa2:	c9 f7       	brne	.-14     	; 0x2a96 <__addsf3x+0x4e>
    2aa4:	7e f4       	brtc	.+30     	; 0x2ac4 <__addsf3x+0x7c>
    2aa6:	1f 16       	cp	r1, r31
    2aa8:	ba 0b       	sbc	r27, r26
    2aaa:	62 0b       	sbc	r22, r18
    2aac:	73 0b       	sbc	r23, r19
    2aae:	84 0b       	sbc	r24, r20
    2ab0:	ba f0       	brmi	.+46     	; 0x2ae0 <__addsf3x+0x98>
    2ab2:	91 50       	subi	r25, 0x01	; 1
    2ab4:	a1 f0       	breq	.+40     	; 0x2ade <__addsf3x+0x96>
    2ab6:	ff 0f       	add	r31, r31
    2ab8:	bb 1f       	adc	r27, r27
    2aba:	66 1f       	adc	r22, r22
    2abc:	77 1f       	adc	r23, r23
    2abe:	88 1f       	adc	r24, r24
    2ac0:	c2 f7       	brpl	.-16     	; 0x2ab2 <__addsf3x+0x6a>
    2ac2:	0e c0       	rjmp	.+28     	; 0x2ae0 <__addsf3x+0x98>
    2ac4:	ba 0f       	add	r27, r26
    2ac6:	62 1f       	adc	r22, r18
    2ac8:	73 1f       	adc	r23, r19
    2aca:	84 1f       	adc	r24, r20
    2acc:	48 f4       	brcc	.+18     	; 0x2ae0 <__addsf3x+0x98>
    2ace:	87 95       	ror	r24
    2ad0:	77 95       	ror	r23
    2ad2:	67 95       	ror	r22
    2ad4:	b7 95       	ror	r27
    2ad6:	f7 95       	ror	r31
    2ad8:	9e 3f       	cpi	r25, 0xFE	; 254
    2ada:	08 f0       	brcs	.+2      	; 0x2ade <__addsf3x+0x96>
    2adc:	b3 cf       	rjmp	.-154    	; 0x2a44 <__addsf3+0x1e>
    2ade:	93 95       	inc	r25
    2ae0:	88 0f       	add	r24, r24
    2ae2:	08 f0       	brcs	.+2      	; 0x2ae6 <__addsf3x+0x9e>
    2ae4:	99 27       	eor	r25, r25
    2ae6:	ee 0f       	add	r30, r30
    2ae8:	97 95       	ror	r25
    2aea:	87 95       	ror	r24
    2aec:	08 95       	ret

00002aee <__cmpsf2>:
    2aee:	d9 d0       	rcall	.+434    	; 0x2ca2 <__fp_cmp>
    2af0:	08 f4       	brcc	.+2      	; 0x2af4 <__cmpsf2+0x6>
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	08 95       	ret

00002af6 <__divsf3>:
    2af6:	0c d0       	rcall	.+24     	; 0x2b10 <__divsf3x>
    2af8:	0f c1       	rjmp	.+542    	; 0x2d18 <__fp_round>
    2afa:	07 d1       	rcall	.+526    	; 0x2d0a <__fp_pscB>
    2afc:	40 f0       	brcs	.+16     	; 0x2b0e <__divsf3+0x18>
    2afe:	fe d0       	rcall	.+508    	; 0x2cfc <__fp_pscA>
    2b00:	30 f0       	brcs	.+12     	; 0x2b0e <__divsf3+0x18>
    2b02:	21 f4       	brne	.+8      	; 0x2b0c <__divsf3+0x16>
    2b04:	5f 3f       	cpi	r21, 0xFF	; 255
    2b06:	19 f0       	breq	.+6      	; 0x2b0e <__divsf3+0x18>
    2b08:	f0 c0       	rjmp	.+480    	; 0x2cea <__fp_inf>
    2b0a:	51 11       	cpse	r21, r1
    2b0c:	39 c1       	rjmp	.+626    	; 0x2d80 <__fp_szero>
    2b0e:	f3 c0       	rjmp	.+486    	; 0x2cf6 <__fp_nan>

00002b10 <__divsf3x>:
    2b10:	14 d1       	rcall	.+552    	; 0x2d3a <__fp_split3>
    2b12:	98 f3       	brcs	.-26     	; 0x2afa <__divsf3+0x4>

00002b14 <__divsf3_pse>:
    2b14:	99 23       	and	r25, r25
    2b16:	c9 f3       	breq	.-14     	; 0x2b0a <__divsf3+0x14>
    2b18:	55 23       	and	r21, r21
    2b1a:	b1 f3       	breq	.-20     	; 0x2b08 <__divsf3+0x12>
    2b1c:	95 1b       	sub	r25, r21
    2b1e:	55 0b       	sbc	r21, r21
    2b20:	bb 27       	eor	r27, r27
    2b22:	aa 27       	eor	r26, r26
    2b24:	62 17       	cp	r22, r18
    2b26:	73 07       	cpc	r23, r19
    2b28:	84 07       	cpc	r24, r20
    2b2a:	38 f0       	brcs	.+14     	; 0x2b3a <__divsf3_pse+0x26>
    2b2c:	9f 5f       	subi	r25, 0xFF	; 255
    2b2e:	5f 4f       	sbci	r21, 0xFF	; 255
    2b30:	22 0f       	add	r18, r18
    2b32:	33 1f       	adc	r19, r19
    2b34:	44 1f       	adc	r20, r20
    2b36:	aa 1f       	adc	r26, r26
    2b38:	a9 f3       	breq	.-22     	; 0x2b24 <__divsf3_pse+0x10>
    2b3a:	33 d0       	rcall	.+102    	; 0x2ba2 <__divsf3_pse+0x8e>
    2b3c:	0e 2e       	mov	r0, r30
    2b3e:	3a f0       	brmi	.+14     	; 0x2b4e <__divsf3_pse+0x3a>
    2b40:	e0 e8       	ldi	r30, 0x80	; 128
    2b42:	30 d0       	rcall	.+96     	; 0x2ba4 <__divsf3_pse+0x90>
    2b44:	91 50       	subi	r25, 0x01	; 1
    2b46:	50 40       	sbci	r21, 0x00	; 0
    2b48:	e6 95       	lsr	r30
    2b4a:	00 1c       	adc	r0, r0
    2b4c:	ca f7       	brpl	.-14     	; 0x2b40 <__divsf3_pse+0x2c>
    2b4e:	29 d0       	rcall	.+82     	; 0x2ba2 <__divsf3_pse+0x8e>
    2b50:	fe 2f       	mov	r31, r30
    2b52:	27 d0       	rcall	.+78     	; 0x2ba2 <__divsf3_pse+0x8e>
    2b54:	66 0f       	add	r22, r22
    2b56:	77 1f       	adc	r23, r23
    2b58:	88 1f       	adc	r24, r24
    2b5a:	bb 1f       	adc	r27, r27
    2b5c:	26 17       	cp	r18, r22
    2b5e:	37 07       	cpc	r19, r23
    2b60:	48 07       	cpc	r20, r24
    2b62:	ab 07       	cpc	r26, r27
    2b64:	b0 e8       	ldi	r27, 0x80	; 128
    2b66:	09 f0       	breq	.+2      	; 0x2b6a <__divsf3_pse+0x56>
    2b68:	bb 0b       	sbc	r27, r27
    2b6a:	80 2d       	mov	r24, r0
    2b6c:	bf 01       	movw	r22, r30
    2b6e:	ff 27       	eor	r31, r31
    2b70:	93 58       	subi	r25, 0x83	; 131
    2b72:	5f 4f       	sbci	r21, 0xFF	; 255
    2b74:	2a f0       	brmi	.+10     	; 0x2b80 <__divsf3_pse+0x6c>
    2b76:	9e 3f       	cpi	r25, 0xFE	; 254
    2b78:	51 05       	cpc	r21, r1
    2b7a:	68 f0       	brcs	.+26     	; 0x2b96 <__divsf3_pse+0x82>
    2b7c:	b6 c0       	rjmp	.+364    	; 0x2cea <__fp_inf>
    2b7e:	00 c1       	rjmp	.+512    	; 0x2d80 <__fp_szero>
    2b80:	5f 3f       	cpi	r21, 0xFF	; 255
    2b82:	ec f3       	brlt	.-6      	; 0x2b7e <__divsf3_pse+0x6a>
    2b84:	98 3e       	cpi	r25, 0xE8	; 232
    2b86:	dc f3       	brlt	.-10     	; 0x2b7e <__divsf3_pse+0x6a>
    2b88:	86 95       	lsr	r24
    2b8a:	77 95       	ror	r23
    2b8c:	67 95       	ror	r22
    2b8e:	b7 95       	ror	r27
    2b90:	f7 95       	ror	r31
    2b92:	9f 5f       	subi	r25, 0xFF	; 255
    2b94:	c9 f7       	brne	.-14     	; 0x2b88 <__divsf3_pse+0x74>
    2b96:	88 0f       	add	r24, r24
    2b98:	91 1d       	adc	r25, r1
    2b9a:	96 95       	lsr	r25
    2b9c:	87 95       	ror	r24
    2b9e:	97 f9       	bld	r25, 7
    2ba0:	08 95       	ret
    2ba2:	e1 e0       	ldi	r30, 0x01	; 1
    2ba4:	66 0f       	add	r22, r22
    2ba6:	77 1f       	adc	r23, r23
    2ba8:	88 1f       	adc	r24, r24
    2baa:	bb 1f       	adc	r27, r27
    2bac:	62 17       	cp	r22, r18
    2bae:	73 07       	cpc	r23, r19
    2bb0:	84 07       	cpc	r24, r20
    2bb2:	ba 07       	cpc	r27, r26
    2bb4:	20 f0       	brcs	.+8      	; 0x2bbe <__divsf3_pse+0xaa>
    2bb6:	62 1b       	sub	r22, r18
    2bb8:	73 0b       	sbc	r23, r19
    2bba:	84 0b       	sbc	r24, r20
    2bbc:	ba 0b       	sbc	r27, r26
    2bbe:	ee 1f       	adc	r30, r30
    2bc0:	88 f7       	brcc	.-30     	; 0x2ba4 <__divsf3_pse+0x90>
    2bc2:	e0 95       	com	r30
    2bc4:	08 95       	ret

00002bc6 <__fixsfsi>:
    2bc6:	04 d0       	rcall	.+8      	; 0x2bd0 <__fixunssfsi>
    2bc8:	68 94       	set
    2bca:	b1 11       	cpse	r27, r1
    2bcc:	d9 c0       	rjmp	.+434    	; 0x2d80 <__fp_szero>
    2bce:	08 95       	ret

00002bd0 <__fixunssfsi>:
    2bd0:	bc d0       	rcall	.+376    	; 0x2d4a <__fp_splitA>
    2bd2:	88 f0       	brcs	.+34     	; 0x2bf6 <__fixunssfsi+0x26>
    2bd4:	9f 57       	subi	r25, 0x7F	; 127
    2bd6:	90 f0       	brcs	.+36     	; 0x2bfc <__fixunssfsi+0x2c>
    2bd8:	b9 2f       	mov	r27, r25
    2bda:	99 27       	eor	r25, r25
    2bdc:	b7 51       	subi	r27, 0x17	; 23
    2bde:	a0 f0       	brcs	.+40     	; 0x2c08 <__fixunssfsi+0x38>
    2be0:	d1 f0       	breq	.+52     	; 0x2c16 <__fixunssfsi+0x46>
    2be2:	66 0f       	add	r22, r22
    2be4:	77 1f       	adc	r23, r23
    2be6:	88 1f       	adc	r24, r24
    2be8:	99 1f       	adc	r25, r25
    2bea:	1a f0       	brmi	.+6      	; 0x2bf2 <__fixunssfsi+0x22>
    2bec:	ba 95       	dec	r27
    2bee:	c9 f7       	brne	.-14     	; 0x2be2 <__fixunssfsi+0x12>
    2bf0:	12 c0       	rjmp	.+36     	; 0x2c16 <__fixunssfsi+0x46>
    2bf2:	b1 30       	cpi	r27, 0x01	; 1
    2bf4:	81 f0       	breq	.+32     	; 0x2c16 <__fixunssfsi+0x46>
    2bf6:	c3 d0       	rcall	.+390    	; 0x2d7e <__fp_zero>
    2bf8:	b1 e0       	ldi	r27, 0x01	; 1
    2bfa:	08 95       	ret
    2bfc:	c0 c0       	rjmp	.+384    	; 0x2d7e <__fp_zero>
    2bfe:	67 2f       	mov	r22, r23
    2c00:	78 2f       	mov	r23, r24
    2c02:	88 27       	eor	r24, r24
    2c04:	b8 5f       	subi	r27, 0xF8	; 248
    2c06:	39 f0       	breq	.+14     	; 0x2c16 <__fixunssfsi+0x46>
    2c08:	b9 3f       	cpi	r27, 0xF9	; 249
    2c0a:	cc f3       	brlt	.-14     	; 0x2bfe <__fixunssfsi+0x2e>
    2c0c:	86 95       	lsr	r24
    2c0e:	77 95       	ror	r23
    2c10:	67 95       	ror	r22
    2c12:	b3 95       	inc	r27
    2c14:	d9 f7       	brne	.-10     	; 0x2c0c <__fixunssfsi+0x3c>
    2c16:	3e f4       	brtc	.+14     	; 0x2c26 <__fixunssfsi+0x56>
    2c18:	90 95       	com	r25
    2c1a:	80 95       	com	r24
    2c1c:	70 95       	com	r23
    2c1e:	61 95       	neg	r22
    2c20:	7f 4f       	sbci	r23, 0xFF	; 255
    2c22:	8f 4f       	sbci	r24, 0xFF	; 255
    2c24:	9f 4f       	sbci	r25, 0xFF	; 255
    2c26:	08 95       	ret

00002c28 <__floatunsisf>:
    2c28:	e8 94       	clt
    2c2a:	09 c0       	rjmp	.+18     	; 0x2c3e <__floatsisf+0x12>

00002c2c <__floatsisf>:
    2c2c:	97 fb       	bst	r25, 7
    2c2e:	3e f4       	brtc	.+14     	; 0x2c3e <__floatsisf+0x12>
    2c30:	90 95       	com	r25
    2c32:	80 95       	com	r24
    2c34:	70 95       	com	r23
    2c36:	61 95       	neg	r22
    2c38:	7f 4f       	sbci	r23, 0xFF	; 255
    2c3a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c3e:	99 23       	and	r25, r25
    2c40:	a9 f0       	breq	.+42     	; 0x2c6c <__floatsisf+0x40>
    2c42:	f9 2f       	mov	r31, r25
    2c44:	96 e9       	ldi	r25, 0x96	; 150
    2c46:	bb 27       	eor	r27, r27
    2c48:	93 95       	inc	r25
    2c4a:	f6 95       	lsr	r31
    2c4c:	87 95       	ror	r24
    2c4e:	77 95       	ror	r23
    2c50:	67 95       	ror	r22
    2c52:	b7 95       	ror	r27
    2c54:	f1 11       	cpse	r31, r1
    2c56:	f8 cf       	rjmp	.-16     	; 0x2c48 <__floatsisf+0x1c>
    2c58:	fa f4       	brpl	.+62     	; 0x2c98 <__floatsisf+0x6c>
    2c5a:	bb 0f       	add	r27, r27
    2c5c:	11 f4       	brne	.+4      	; 0x2c62 <__floatsisf+0x36>
    2c5e:	60 ff       	sbrs	r22, 0
    2c60:	1b c0       	rjmp	.+54     	; 0x2c98 <__floatsisf+0x6c>
    2c62:	6f 5f       	subi	r22, 0xFF	; 255
    2c64:	7f 4f       	sbci	r23, 0xFF	; 255
    2c66:	8f 4f       	sbci	r24, 0xFF	; 255
    2c68:	9f 4f       	sbci	r25, 0xFF	; 255
    2c6a:	16 c0       	rjmp	.+44     	; 0x2c98 <__floatsisf+0x6c>
    2c6c:	88 23       	and	r24, r24
    2c6e:	11 f0       	breq	.+4      	; 0x2c74 <__floatsisf+0x48>
    2c70:	96 e9       	ldi	r25, 0x96	; 150
    2c72:	11 c0       	rjmp	.+34     	; 0x2c96 <__floatsisf+0x6a>
    2c74:	77 23       	and	r23, r23
    2c76:	21 f0       	breq	.+8      	; 0x2c80 <__floatsisf+0x54>
    2c78:	9e e8       	ldi	r25, 0x8E	; 142
    2c7a:	87 2f       	mov	r24, r23
    2c7c:	76 2f       	mov	r23, r22
    2c7e:	05 c0       	rjmp	.+10     	; 0x2c8a <__floatsisf+0x5e>
    2c80:	66 23       	and	r22, r22
    2c82:	71 f0       	breq	.+28     	; 0x2ca0 <__floatsisf+0x74>
    2c84:	96 e8       	ldi	r25, 0x86	; 134
    2c86:	86 2f       	mov	r24, r22
    2c88:	70 e0       	ldi	r23, 0x00	; 0
    2c8a:	60 e0       	ldi	r22, 0x00	; 0
    2c8c:	2a f0       	brmi	.+10     	; 0x2c98 <__floatsisf+0x6c>
    2c8e:	9a 95       	dec	r25
    2c90:	66 0f       	add	r22, r22
    2c92:	77 1f       	adc	r23, r23
    2c94:	88 1f       	adc	r24, r24
    2c96:	da f7       	brpl	.-10     	; 0x2c8e <__floatsisf+0x62>
    2c98:	88 0f       	add	r24, r24
    2c9a:	96 95       	lsr	r25
    2c9c:	87 95       	ror	r24
    2c9e:	97 f9       	bld	r25, 7
    2ca0:	08 95       	ret

00002ca2 <__fp_cmp>:
    2ca2:	99 0f       	add	r25, r25
    2ca4:	00 08       	sbc	r0, r0
    2ca6:	55 0f       	add	r21, r21
    2ca8:	aa 0b       	sbc	r26, r26
    2caa:	e0 e8       	ldi	r30, 0x80	; 128
    2cac:	fe ef       	ldi	r31, 0xFE	; 254
    2cae:	16 16       	cp	r1, r22
    2cb0:	17 06       	cpc	r1, r23
    2cb2:	e8 07       	cpc	r30, r24
    2cb4:	f9 07       	cpc	r31, r25
    2cb6:	c0 f0       	brcs	.+48     	; 0x2ce8 <__fp_cmp+0x46>
    2cb8:	12 16       	cp	r1, r18
    2cba:	13 06       	cpc	r1, r19
    2cbc:	e4 07       	cpc	r30, r20
    2cbe:	f5 07       	cpc	r31, r21
    2cc0:	98 f0       	brcs	.+38     	; 0x2ce8 <__fp_cmp+0x46>
    2cc2:	62 1b       	sub	r22, r18
    2cc4:	73 0b       	sbc	r23, r19
    2cc6:	84 0b       	sbc	r24, r20
    2cc8:	95 0b       	sbc	r25, r21
    2cca:	39 f4       	brne	.+14     	; 0x2cda <__fp_cmp+0x38>
    2ccc:	0a 26       	eor	r0, r26
    2cce:	61 f0       	breq	.+24     	; 0x2ce8 <__fp_cmp+0x46>
    2cd0:	23 2b       	or	r18, r19
    2cd2:	24 2b       	or	r18, r20
    2cd4:	25 2b       	or	r18, r21
    2cd6:	21 f4       	brne	.+8      	; 0x2ce0 <__fp_cmp+0x3e>
    2cd8:	08 95       	ret
    2cda:	0a 26       	eor	r0, r26
    2cdc:	09 f4       	brne	.+2      	; 0x2ce0 <__fp_cmp+0x3e>
    2cde:	a1 40       	sbci	r26, 0x01	; 1
    2ce0:	a6 95       	lsr	r26
    2ce2:	8f ef       	ldi	r24, 0xFF	; 255
    2ce4:	81 1d       	adc	r24, r1
    2ce6:	81 1d       	adc	r24, r1
    2ce8:	08 95       	ret

00002cea <__fp_inf>:
    2cea:	97 f9       	bld	r25, 7
    2cec:	9f 67       	ori	r25, 0x7F	; 127
    2cee:	80 e8       	ldi	r24, 0x80	; 128
    2cf0:	70 e0       	ldi	r23, 0x00	; 0
    2cf2:	60 e0       	ldi	r22, 0x00	; 0
    2cf4:	08 95       	ret

00002cf6 <__fp_nan>:
    2cf6:	9f ef       	ldi	r25, 0xFF	; 255
    2cf8:	80 ec       	ldi	r24, 0xC0	; 192
    2cfa:	08 95       	ret

00002cfc <__fp_pscA>:
    2cfc:	00 24       	eor	r0, r0
    2cfe:	0a 94       	dec	r0
    2d00:	16 16       	cp	r1, r22
    2d02:	17 06       	cpc	r1, r23
    2d04:	18 06       	cpc	r1, r24
    2d06:	09 06       	cpc	r0, r25
    2d08:	08 95       	ret

00002d0a <__fp_pscB>:
    2d0a:	00 24       	eor	r0, r0
    2d0c:	0a 94       	dec	r0
    2d0e:	12 16       	cp	r1, r18
    2d10:	13 06       	cpc	r1, r19
    2d12:	14 06       	cpc	r1, r20
    2d14:	05 06       	cpc	r0, r21
    2d16:	08 95       	ret

00002d18 <__fp_round>:
    2d18:	09 2e       	mov	r0, r25
    2d1a:	03 94       	inc	r0
    2d1c:	00 0c       	add	r0, r0
    2d1e:	11 f4       	brne	.+4      	; 0x2d24 <__fp_round+0xc>
    2d20:	88 23       	and	r24, r24
    2d22:	52 f0       	brmi	.+20     	; 0x2d38 <__fp_round+0x20>
    2d24:	bb 0f       	add	r27, r27
    2d26:	40 f4       	brcc	.+16     	; 0x2d38 <__fp_round+0x20>
    2d28:	bf 2b       	or	r27, r31
    2d2a:	11 f4       	brne	.+4      	; 0x2d30 <__fp_round+0x18>
    2d2c:	60 ff       	sbrs	r22, 0
    2d2e:	04 c0       	rjmp	.+8      	; 0x2d38 <__fp_round+0x20>
    2d30:	6f 5f       	subi	r22, 0xFF	; 255
    2d32:	7f 4f       	sbci	r23, 0xFF	; 255
    2d34:	8f 4f       	sbci	r24, 0xFF	; 255
    2d36:	9f 4f       	sbci	r25, 0xFF	; 255
    2d38:	08 95       	ret

00002d3a <__fp_split3>:
    2d3a:	57 fd       	sbrc	r21, 7
    2d3c:	90 58       	subi	r25, 0x80	; 128
    2d3e:	44 0f       	add	r20, r20
    2d40:	55 1f       	adc	r21, r21
    2d42:	59 f0       	breq	.+22     	; 0x2d5a <__fp_splitA+0x10>
    2d44:	5f 3f       	cpi	r21, 0xFF	; 255
    2d46:	71 f0       	breq	.+28     	; 0x2d64 <__fp_splitA+0x1a>
    2d48:	47 95       	ror	r20

00002d4a <__fp_splitA>:
    2d4a:	88 0f       	add	r24, r24
    2d4c:	97 fb       	bst	r25, 7
    2d4e:	99 1f       	adc	r25, r25
    2d50:	61 f0       	breq	.+24     	; 0x2d6a <__fp_splitA+0x20>
    2d52:	9f 3f       	cpi	r25, 0xFF	; 255
    2d54:	79 f0       	breq	.+30     	; 0x2d74 <__fp_splitA+0x2a>
    2d56:	87 95       	ror	r24
    2d58:	08 95       	ret
    2d5a:	12 16       	cp	r1, r18
    2d5c:	13 06       	cpc	r1, r19
    2d5e:	14 06       	cpc	r1, r20
    2d60:	55 1f       	adc	r21, r21
    2d62:	f2 cf       	rjmp	.-28     	; 0x2d48 <__fp_split3+0xe>
    2d64:	46 95       	lsr	r20
    2d66:	f1 df       	rcall	.-30     	; 0x2d4a <__fp_splitA>
    2d68:	08 c0       	rjmp	.+16     	; 0x2d7a <__fp_splitA+0x30>
    2d6a:	16 16       	cp	r1, r22
    2d6c:	17 06       	cpc	r1, r23
    2d6e:	18 06       	cpc	r1, r24
    2d70:	99 1f       	adc	r25, r25
    2d72:	f1 cf       	rjmp	.-30     	; 0x2d56 <__fp_splitA+0xc>
    2d74:	86 95       	lsr	r24
    2d76:	71 05       	cpc	r23, r1
    2d78:	61 05       	cpc	r22, r1
    2d7a:	08 94       	sec
    2d7c:	08 95       	ret

00002d7e <__fp_zero>:
    2d7e:	e8 94       	clt

00002d80 <__fp_szero>:
    2d80:	bb 27       	eor	r27, r27
    2d82:	66 27       	eor	r22, r22
    2d84:	77 27       	eor	r23, r23
    2d86:	cb 01       	movw	r24, r22
    2d88:	97 f9       	bld	r25, 7
    2d8a:	08 95       	ret

00002d8c <__gesf2>:
    2d8c:	8a df       	rcall	.-236    	; 0x2ca2 <__fp_cmp>
    2d8e:	08 f4       	brcc	.+2      	; 0x2d92 <__gesf2+0x6>
    2d90:	8f ef       	ldi	r24, 0xFF	; 255
    2d92:	08 95       	ret

00002d94 <__mulsf3>:
    2d94:	0b d0       	rcall	.+22     	; 0x2dac <__mulsf3x>
    2d96:	c0 cf       	rjmp	.-128    	; 0x2d18 <__fp_round>
    2d98:	b1 df       	rcall	.-158    	; 0x2cfc <__fp_pscA>
    2d9a:	28 f0       	brcs	.+10     	; 0x2da6 <__mulsf3+0x12>
    2d9c:	b6 df       	rcall	.-148    	; 0x2d0a <__fp_pscB>
    2d9e:	18 f0       	brcs	.+6      	; 0x2da6 <__mulsf3+0x12>
    2da0:	95 23       	and	r25, r21
    2da2:	09 f0       	breq	.+2      	; 0x2da6 <__mulsf3+0x12>
    2da4:	a2 cf       	rjmp	.-188    	; 0x2cea <__fp_inf>
    2da6:	a7 cf       	rjmp	.-178    	; 0x2cf6 <__fp_nan>
    2da8:	11 24       	eor	r1, r1
    2daa:	ea cf       	rjmp	.-44     	; 0x2d80 <__fp_szero>

00002dac <__mulsf3x>:
    2dac:	c6 df       	rcall	.-116    	; 0x2d3a <__fp_split3>
    2dae:	a0 f3       	brcs	.-24     	; 0x2d98 <__mulsf3+0x4>

00002db0 <__mulsf3_pse>:
    2db0:	95 9f       	mul	r25, r21
    2db2:	d1 f3       	breq	.-12     	; 0x2da8 <__mulsf3+0x14>
    2db4:	95 0f       	add	r25, r21
    2db6:	50 e0       	ldi	r21, 0x00	; 0
    2db8:	55 1f       	adc	r21, r21
    2dba:	62 9f       	mul	r22, r18
    2dbc:	f0 01       	movw	r30, r0
    2dbe:	72 9f       	mul	r23, r18
    2dc0:	bb 27       	eor	r27, r27
    2dc2:	f0 0d       	add	r31, r0
    2dc4:	b1 1d       	adc	r27, r1
    2dc6:	63 9f       	mul	r22, r19
    2dc8:	aa 27       	eor	r26, r26
    2dca:	f0 0d       	add	r31, r0
    2dcc:	b1 1d       	adc	r27, r1
    2dce:	aa 1f       	adc	r26, r26
    2dd0:	64 9f       	mul	r22, r20
    2dd2:	66 27       	eor	r22, r22
    2dd4:	b0 0d       	add	r27, r0
    2dd6:	a1 1d       	adc	r26, r1
    2dd8:	66 1f       	adc	r22, r22
    2dda:	82 9f       	mul	r24, r18
    2ddc:	22 27       	eor	r18, r18
    2dde:	b0 0d       	add	r27, r0
    2de0:	a1 1d       	adc	r26, r1
    2de2:	62 1f       	adc	r22, r18
    2de4:	73 9f       	mul	r23, r19
    2de6:	b0 0d       	add	r27, r0
    2de8:	a1 1d       	adc	r26, r1
    2dea:	62 1f       	adc	r22, r18
    2dec:	83 9f       	mul	r24, r19
    2dee:	a0 0d       	add	r26, r0
    2df0:	61 1d       	adc	r22, r1
    2df2:	22 1f       	adc	r18, r18
    2df4:	74 9f       	mul	r23, r20
    2df6:	33 27       	eor	r19, r19
    2df8:	a0 0d       	add	r26, r0
    2dfa:	61 1d       	adc	r22, r1
    2dfc:	23 1f       	adc	r18, r19
    2dfe:	84 9f       	mul	r24, r20
    2e00:	60 0d       	add	r22, r0
    2e02:	21 1d       	adc	r18, r1
    2e04:	82 2f       	mov	r24, r18
    2e06:	76 2f       	mov	r23, r22
    2e08:	6a 2f       	mov	r22, r26
    2e0a:	11 24       	eor	r1, r1
    2e0c:	9f 57       	subi	r25, 0x7F	; 127
    2e0e:	50 40       	sbci	r21, 0x00	; 0
    2e10:	8a f0       	brmi	.+34     	; 0x2e34 <__mulsf3_pse+0x84>
    2e12:	e1 f0       	breq	.+56     	; 0x2e4c <__mulsf3_pse+0x9c>
    2e14:	88 23       	and	r24, r24
    2e16:	4a f0       	brmi	.+18     	; 0x2e2a <__mulsf3_pse+0x7a>
    2e18:	ee 0f       	add	r30, r30
    2e1a:	ff 1f       	adc	r31, r31
    2e1c:	bb 1f       	adc	r27, r27
    2e1e:	66 1f       	adc	r22, r22
    2e20:	77 1f       	adc	r23, r23
    2e22:	88 1f       	adc	r24, r24
    2e24:	91 50       	subi	r25, 0x01	; 1
    2e26:	50 40       	sbci	r21, 0x00	; 0
    2e28:	a9 f7       	brne	.-22     	; 0x2e14 <__mulsf3_pse+0x64>
    2e2a:	9e 3f       	cpi	r25, 0xFE	; 254
    2e2c:	51 05       	cpc	r21, r1
    2e2e:	70 f0       	brcs	.+28     	; 0x2e4c <__mulsf3_pse+0x9c>
    2e30:	5c cf       	rjmp	.-328    	; 0x2cea <__fp_inf>
    2e32:	a6 cf       	rjmp	.-180    	; 0x2d80 <__fp_szero>
    2e34:	5f 3f       	cpi	r21, 0xFF	; 255
    2e36:	ec f3       	brlt	.-6      	; 0x2e32 <__mulsf3_pse+0x82>
    2e38:	98 3e       	cpi	r25, 0xE8	; 232
    2e3a:	dc f3       	brlt	.-10     	; 0x2e32 <__mulsf3_pse+0x82>
    2e3c:	86 95       	lsr	r24
    2e3e:	77 95       	ror	r23
    2e40:	67 95       	ror	r22
    2e42:	b7 95       	ror	r27
    2e44:	f7 95       	ror	r31
    2e46:	e7 95       	ror	r30
    2e48:	9f 5f       	subi	r25, 0xFF	; 255
    2e4a:	c1 f7       	brne	.-16     	; 0x2e3c <__mulsf3_pse+0x8c>
    2e4c:	fe 2b       	or	r31, r30
    2e4e:	88 0f       	add	r24, r24
    2e50:	91 1d       	adc	r25, r1
    2e52:	96 95       	lsr	r25
    2e54:	87 95       	ror	r24
    2e56:	97 f9       	bld	r25, 7
    2e58:	08 95       	ret

00002e5a <__mulsi3>:
    2e5a:	db 01       	movw	r26, r22
    2e5c:	8f 93       	push	r24
    2e5e:	9f 93       	push	r25
    2e60:	88 d0       	rcall	.+272    	; 0x2f72 <__muluhisi3>
    2e62:	bf 91       	pop	r27
    2e64:	af 91       	pop	r26
    2e66:	a2 9f       	mul	r26, r18
    2e68:	80 0d       	add	r24, r0
    2e6a:	91 1d       	adc	r25, r1
    2e6c:	a3 9f       	mul	r26, r19
    2e6e:	90 0d       	add	r25, r0
    2e70:	b2 9f       	mul	r27, r18
    2e72:	90 0d       	add	r25, r0
    2e74:	11 24       	eor	r1, r1
    2e76:	08 95       	ret

00002e78 <__udivmodhi4>:
    2e78:	aa 1b       	sub	r26, r26
    2e7a:	bb 1b       	sub	r27, r27
    2e7c:	51 e1       	ldi	r21, 0x11	; 17
    2e7e:	07 c0       	rjmp	.+14     	; 0x2e8e <__udivmodhi4_ep>

00002e80 <__udivmodhi4_loop>:
    2e80:	aa 1f       	adc	r26, r26
    2e82:	bb 1f       	adc	r27, r27
    2e84:	a6 17       	cp	r26, r22
    2e86:	b7 07       	cpc	r27, r23
    2e88:	10 f0       	brcs	.+4      	; 0x2e8e <__udivmodhi4_ep>
    2e8a:	a6 1b       	sub	r26, r22
    2e8c:	b7 0b       	sbc	r27, r23

00002e8e <__udivmodhi4_ep>:
    2e8e:	88 1f       	adc	r24, r24
    2e90:	99 1f       	adc	r25, r25
    2e92:	5a 95       	dec	r21
    2e94:	a9 f7       	brne	.-22     	; 0x2e80 <__udivmodhi4_loop>
    2e96:	80 95       	com	r24
    2e98:	90 95       	com	r25
    2e9a:	bc 01       	movw	r22, r24
    2e9c:	cd 01       	movw	r24, r26
    2e9e:	08 95       	ret

00002ea0 <__divmodhi4>:
    2ea0:	97 fb       	bst	r25, 7
    2ea2:	07 2e       	mov	r0, r23
    2ea4:	16 f4       	brtc	.+4      	; 0x2eaa <__divmodhi4+0xa>
    2ea6:	00 94       	com	r0
    2ea8:	06 d0       	rcall	.+12     	; 0x2eb6 <__divmodhi4_neg1>
    2eaa:	77 fd       	sbrc	r23, 7
    2eac:	08 d0       	rcall	.+16     	; 0x2ebe <__divmodhi4_neg2>
    2eae:	e4 df       	rcall	.-56     	; 0x2e78 <__udivmodhi4>
    2eb0:	07 fc       	sbrc	r0, 7
    2eb2:	05 d0       	rcall	.+10     	; 0x2ebe <__divmodhi4_neg2>
    2eb4:	3e f4       	brtc	.+14     	; 0x2ec4 <__divmodhi4_exit>

00002eb6 <__divmodhi4_neg1>:
    2eb6:	90 95       	com	r25
    2eb8:	81 95       	neg	r24
    2eba:	9f 4f       	sbci	r25, 0xFF	; 255
    2ebc:	08 95       	ret

00002ebe <__divmodhi4_neg2>:
    2ebe:	70 95       	com	r23
    2ec0:	61 95       	neg	r22
    2ec2:	7f 4f       	sbci	r23, 0xFF	; 255

00002ec4 <__divmodhi4_exit>:
    2ec4:	08 95       	ret

00002ec6 <__udivmodsi4>:
    2ec6:	a1 e2       	ldi	r26, 0x21	; 33
    2ec8:	1a 2e       	mov	r1, r26
    2eca:	aa 1b       	sub	r26, r26
    2ecc:	bb 1b       	sub	r27, r27
    2ece:	fd 01       	movw	r30, r26
    2ed0:	0d c0       	rjmp	.+26     	; 0x2eec <__udivmodsi4_ep>

00002ed2 <__udivmodsi4_loop>:
    2ed2:	aa 1f       	adc	r26, r26
    2ed4:	bb 1f       	adc	r27, r27
    2ed6:	ee 1f       	adc	r30, r30
    2ed8:	ff 1f       	adc	r31, r31
    2eda:	a2 17       	cp	r26, r18
    2edc:	b3 07       	cpc	r27, r19
    2ede:	e4 07       	cpc	r30, r20
    2ee0:	f5 07       	cpc	r31, r21
    2ee2:	20 f0       	brcs	.+8      	; 0x2eec <__udivmodsi4_ep>
    2ee4:	a2 1b       	sub	r26, r18
    2ee6:	b3 0b       	sbc	r27, r19
    2ee8:	e4 0b       	sbc	r30, r20
    2eea:	f5 0b       	sbc	r31, r21

00002eec <__udivmodsi4_ep>:
    2eec:	66 1f       	adc	r22, r22
    2eee:	77 1f       	adc	r23, r23
    2ef0:	88 1f       	adc	r24, r24
    2ef2:	99 1f       	adc	r25, r25
    2ef4:	1a 94       	dec	r1
    2ef6:	69 f7       	brne	.-38     	; 0x2ed2 <__udivmodsi4_loop>
    2ef8:	60 95       	com	r22
    2efa:	70 95       	com	r23
    2efc:	80 95       	com	r24
    2efe:	90 95       	com	r25
    2f00:	9b 01       	movw	r18, r22
    2f02:	ac 01       	movw	r20, r24
    2f04:	bd 01       	movw	r22, r26
    2f06:	cf 01       	movw	r24, r30
    2f08:	08 95       	ret

00002f0a <__divmodsi4>:
    2f0a:	05 2e       	mov	r0, r21
    2f0c:	97 fb       	bst	r25, 7
    2f0e:	16 f4       	brtc	.+4      	; 0x2f14 <__divmodsi4+0xa>
    2f10:	00 94       	com	r0
    2f12:	0f d0       	rcall	.+30     	; 0x2f32 <__negsi2>
    2f14:	57 fd       	sbrc	r21, 7
    2f16:	05 d0       	rcall	.+10     	; 0x2f22 <__divmodsi4_neg2>
    2f18:	d6 df       	rcall	.-84     	; 0x2ec6 <__udivmodsi4>
    2f1a:	07 fc       	sbrc	r0, 7
    2f1c:	02 d0       	rcall	.+4      	; 0x2f22 <__divmodsi4_neg2>
    2f1e:	46 f4       	brtc	.+16     	; 0x2f30 <__divmodsi4_exit>
    2f20:	08 c0       	rjmp	.+16     	; 0x2f32 <__negsi2>

00002f22 <__divmodsi4_neg2>:
    2f22:	50 95       	com	r21
    2f24:	40 95       	com	r20
    2f26:	30 95       	com	r19
    2f28:	21 95       	neg	r18
    2f2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f2c:	4f 4f       	sbci	r20, 0xFF	; 255
    2f2e:	5f 4f       	sbci	r21, 0xFF	; 255

00002f30 <__divmodsi4_exit>:
    2f30:	08 95       	ret

00002f32 <__negsi2>:
    2f32:	90 95       	com	r25
    2f34:	80 95       	com	r24
    2f36:	70 95       	com	r23
    2f38:	61 95       	neg	r22
    2f3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f3c:	8f 4f       	sbci	r24, 0xFF	; 255
    2f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f40:	08 95       	ret

00002f42 <__tablejump2__>:
    2f42:	ee 0f       	add	r30, r30
    2f44:	ff 1f       	adc	r31, r31
    2f46:	00 24       	eor	r0, r0
    2f48:	00 1c       	adc	r0, r0
    2f4a:	0b be       	out	0x3b, r0	; 59
    2f4c:	07 90       	elpm	r0, Z+
    2f4e:	f6 91       	elpm	r31, Z
    2f50:	e0 2d       	mov	r30, r0
    2f52:	09 94       	ijmp

00002f54 <__umulhisi3>:
    2f54:	a2 9f       	mul	r26, r18
    2f56:	b0 01       	movw	r22, r0
    2f58:	b3 9f       	mul	r27, r19
    2f5a:	c0 01       	movw	r24, r0
    2f5c:	a3 9f       	mul	r26, r19
    2f5e:	70 0d       	add	r23, r0
    2f60:	81 1d       	adc	r24, r1
    2f62:	11 24       	eor	r1, r1
    2f64:	91 1d       	adc	r25, r1
    2f66:	b2 9f       	mul	r27, r18
    2f68:	70 0d       	add	r23, r0
    2f6a:	81 1d       	adc	r24, r1
    2f6c:	11 24       	eor	r1, r1
    2f6e:	91 1d       	adc	r25, r1
    2f70:	08 95       	ret

00002f72 <__muluhisi3>:
    2f72:	f0 df       	rcall	.-32     	; 0x2f54 <__umulhisi3>
    2f74:	a5 9f       	mul	r26, r21
    2f76:	90 0d       	add	r25, r0
    2f78:	b4 9f       	mul	r27, r20
    2f7a:	90 0d       	add	r25, r0
    2f7c:	a4 9f       	mul	r26, r20
    2f7e:	80 0d       	add	r24, r0
    2f80:	91 1d       	adc	r25, r1
    2f82:	11 24       	eor	r1, r1
    2f84:	08 95       	ret

00002f86 <strcmp>:
    2f86:	fb 01       	movw	r30, r22
    2f88:	dc 01       	movw	r26, r24
    2f8a:	8d 91       	ld	r24, X+
    2f8c:	01 90       	ld	r0, Z+
    2f8e:	80 19       	sub	r24, r0
    2f90:	01 10       	cpse	r0, r1
    2f92:	d9 f3       	breq	.-10     	; 0x2f8a <strcmp+0x4>
    2f94:	99 0b       	sbc	r25, r25
    2f96:	08 95       	ret

00002f98 <strcpy>:
    2f98:	fb 01       	movw	r30, r22
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	01 90       	ld	r0, Z+
    2f9e:	0d 92       	st	X+, r0
    2fa0:	00 20       	and	r0, r0
    2fa2:	e1 f7       	brne	.-8      	; 0x2f9c <strcpy+0x4>
    2fa4:	08 95       	ret

00002fa6 <strncpy>:
    2fa6:	fb 01       	movw	r30, r22
    2fa8:	dc 01       	movw	r26, r24
    2faa:	41 50       	subi	r20, 0x01	; 1
    2fac:	50 40       	sbci	r21, 0x00	; 0
    2fae:	48 f0       	brcs	.+18     	; 0x2fc2 <strncpy+0x1c>
    2fb0:	01 90       	ld	r0, Z+
    2fb2:	0d 92       	st	X+, r0
    2fb4:	00 20       	and	r0, r0
    2fb6:	c9 f7       	brne	.-14     	; 0x2faa <strncpy+0x4>
    2fb8:	01 c0       	rjmp	.+2      	; 0x2fbc <strncpy+0x16>
    2fba:	1d 92       	st	X+, r1
    2fbc:	41 50       	subi	r20, 0x01	; 1
    2fbe:	50 40       	sbci	r21, 0x00	; 0
    2fc0:	e0 f7       	brcc	.-8      	; 0x2fba <strncpy+0x14>
    2fc2:	08 95       	ret

00002fc4 <_exit>:
    2fc4:	f8 94       	cli

00002fc6 <__stop_program>:
    2fc6:	ff cf       	rjmp	.-2      	; 0x2fc6 <__stop_program>
