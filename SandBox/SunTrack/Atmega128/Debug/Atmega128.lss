
Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  00003dc2  00003e56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003dc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c3  008001da  008001da  00003f30  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003f30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003f60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000740  00000000  00000000  00003f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008aba  00000000  00000000  000046dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002052  00000000  00000000  0000d196  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004875  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001548  00000000  00000000  00013a60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001794  00000000  00000000  00014fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000708a  00000000  00000000  0001673c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000680  00000000  00000000  0001d7c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	67 c0       	rjmp	.+206    	; 0xd0 <__ctors_end>
       2:	00 00       	nop
       4:	84 c0       	rjmp	.+264    	; 0x10e <__bad_interrupt>
       6:	00 00       	nop
       8:	82 c0       	rjmp	.+260    	; 0x10e <__bad_interrupt>
       a:	00 00       	nop
       c:	80 c0       	rjmp	.+256    	; 0x10e <__bad_interrupt>
       e:	00 00       	nop
      10:	7e c0       	rjmp	.+252    	; 0x10e <__bad_interrupt>
      12:	00 00       	nop
      14:	7c c0       	rjmp	.+248    	; 0x10e <__bad_interrupt>
      16:	00 00       	nop
      18:	7a c0       	rjmp	.+244    	; 0x10e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	78 c0       	rjmp	.+240    	; 0x10e <__bad_interrupt>
      1e:	00 00       	nop
      20:	76 c0       	rjmp	.+236    	; 0x10e <__bad_interrupt>
      22:	00 00       	nop
      24:	74 c0       	rjmp	.+232    	; 0x10e <__bad_interrupt>
      26:	00 00       	nop
      28:	b3 c5       	rjmp	.+2918   	; 0xb90 <__vector_10>
      2a:	00 00       	nop
      2c:	7f c5       	rjmp	.+2814   	; 0xb2c <__vector_11>
      2e:	00 00       	nop
      30:	87 c5       	rjmp	.+2830   	; 0xb40 <__vector_12>
      32:	00 00       	nop
      34:	8f c5       	rjmp	.+2846   	; 0xb54 <__vector_13>
      36:	00 00       	nop
      38:	a1 c5       	rjmp	.+2882   	; 0xb7c <__vector_14>
      3a:	00 00       	nop
      3c:	0c 94 4a 1c 	jmp	0x3894	; 0x3894 <__vector_15>
      40:	6b c5       	rjmp	.+2774   	; 0xb18 <__vector_16>
      42:	00 00       	nop
      44:	64 c0       	rjmp	.+200    	; 0x10e <__bad_interrupt>
      46:	00 00       	nop
      48:	df c5       	rjmp	.+3006   	; 0xc08 <__vector_18>
      4a:	00 00       	nop
      4c:	13 c6       	rjmp	.+3110   	; 0xc74 <__vector_19>
      4e:	00 00       	nop
      50:	5e c0       	rjmp	.+188    	; 0x10e <__bad_interrupt>
      52:	00 00       	nop
      54:	da c1       	rjmp	.+948    	; 0x40a <__vector_21>
      56:	00 00       	nop
      58:	5a c0       	rjmp	.+180    	; 0x10e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	58 c0       	rjmp	.+176    	; 0x10e <__bad_interrupt>
      5e:	00 00       	nop
      60:	83 c5       	rjmp	.+2822   	; 0xb68 <__vector_24>
      62:	00 00       	nop
      64:	9f c5       	rjmp	.+2878   	; 0xba4 <__vector_25>
      66:	00 00       	nop
      68:	a7 c5       	rjmp	.+2894   	; 0xbb8 <__vector_26>
      6a:	00 00       	nop
      6c:	af c5       	rjmp	.+2910   	; 0xbcc <__vector_27>
      6e:	00 00       	nop
      70:	b7 c5       	rjmp	.+2926   	; 0xbe0 <__vector_28>
      72:	00 00       	nop
      74:	bf c5       	rjmp	.+2942   	; 0xbf4 <__vector_29>
      76:	00 00       	nop
      78:	26 c6       	rjmp	.+3148   	; 0xcc6 <__vector_30>
      7a:	00 00       	nop
      7c:	5d c6       	rjmp	.+3258   	; 0xd38 <__vector_31>
      7e:	00 00       	nop
      80:	46 c0       	rjmp	.+140    	; 0x10e <__bad_interrupt>
      82:	00 00       	nop
      84:	44 c0       	rjmp	.+136    	; 0x10e <__bad_interrupt>
      86:	00 00       	nop
      88:	42 c0       	rjmp	.+132    	; 0x10e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ad 04       	cpc	r10, r13
      8e:	b1 04       	cpc	r11, r1
      90:	b5 04       	cpc	r11, r5
      92:	b9 04       	cpc	r11, r9
      94:	bd 04       	cpc	r11, r13
      96:	c4 04       	cpc	r12, r4
      98:	cb 04       	cpc	r12, r11
      9a:	d2 04       	cpc	r13, r2
      9c:	d6 04       	cpc	r13, r6
      9e:	dd 04       	cpc	r13, r13
      a0:	e4 04       	cpc	r14, r4
      a2:	eb 04       	cpc	r14, r11
      a4:	ef 04       	cpc	r14, r15
      a6:	f6 04       	cpc	r15, r6
      a8:	fd 04       	cpc	r15, r13
      aa:	19 05       	cpc	r17, r9
      ac:	1d 05       	cpc	r17, r13
      ae:	21 05       	cpc	r18, r1
      b0:	25 05       	cpc	r18, r5
      b2:	2b 05       	cpc	r18, r11
      b4:	2f 05       	cpc	r18, r15
      b6:	33 05       	cpc	r19, r3
      b8:	37 05       	cpc	r19, r7
      ba:	40 05       	cpc	r20, r0
      bc:	44 05       	cpc	r20, r4
      be:	48 05       	cpc	r20, r8
      c0:	51 05       	cpc	r21, r1
      c2:	f7 18       	sub	r15, r7
      c4:	0c 1a       	sub	r0, r28
      c6:	65 1a       	sub	r6, r21
      c8:	be 1a       	sub	r11, r30
      ca:	17 1b       	sub	r17, r23
      cc:	70 1b       	sub	r23, r16
      ce:	c9 1b       	sub	r28, r25

000000d0 <__ctors_end>:
      d0:	11 24       	eor	r1, r1
      d2:	1f be       	out	0x3f, r1	; 63
      d4:	cf ef       	ldi	r28, 0xFF	; 255
      d6:	d0 e1       	ldi	r29, 0x10	; 16
      d8:	de bf       	out	0x3e, r29	; 62
      da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
      dc:	11 e0       	ldi	r17, 0x01	; 1
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	e2 ec       	ldi	r30, 0xC2	; 194
      e4:	fd e3       	ldi	r31, 0x3D	; 61
      e6:	00 e0       	ldi	r16, 0x00	; 0
      e8:	0b bf       	out	0x3b, r16	; 59
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x14>
      ec:	07 90       	elpm	r0, Z+
      ee:	0d 92       	st	X+, r0
      f0:	aa 3d       	cpi	r26, 0xDA	; 218
      f2:	b1 07       	cpc	r27, r17
      f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x10>

000000f6 <__do_clear_bss>:
      f6:	24 e0       	ldi	r18, 0x04	; 4
      f8:	aa ed       	ldi	r26, 0xDA	; 218
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	ad 39       	cpi	r26, 0x9D	; 157
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
     106:	0e 94 b3 13 	call	0x2766	; 0x2766 <main>
     10a:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <_exit>

0000010e <__bad_interrupt>:
     10e:	78 cf       	rjmp	.-272    	; 0x0 <__vectors>

00000110 <HC595_shift_bit>:
	//
	return hc595;
}
void HC595_shift_bit(uint8_t bool)
{
	if (bool)
     110:	88 23       	and	r24, r24
     112:	89 f0       	breq	.+34     	; 0x136 <HC595_shift_bit+0x26>
		*hc595_PORT |= (1<<HC595_datapin); //Data bit HIGH
     114:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <hc595_PORT>
     118:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <hc595_PORT+0x1>
     11c:	20 81       	ld	r18, Z
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	00 90 0b 02 	lds	r0, 0x020B	; 0x80020b <HC595_datapin>
     126:	02 c0       	rjmp	.+4      	; 0x12c <HC595_shift_bit+0x1c>
     128:	88 0f       	add	r24, r24
     12a:	99 1f       	adc	r25, r25
     12c:	0a 94       	dec	r0
     12e:	e2 f7       	brpl	.-8      	; 0x128 <HC595_shift_bit+0x18>
     130:	82 2b       	or	r24, r18
     132:	80 83       	st	Z, r24
     134:	11 c0       	rjmp	.+34     	; 0x158 <HC595_shift_bit+0x48>
	else
		*hc595_PORT &= ~(1<<HC595_datapin); //Data bit LOW
     136:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <hc595_PORT>
     13a:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <hc595_PORT+0x1>
     13e:	20 81       	ld	r18, Z
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	00 90 0b 02 	lds	r0, 0x020B	; 0x80020b <HC595_datapin>
     148:	02 c0       	rjmp	.+4      	; 0x14e <HC595_shift_bit+0x3e>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	0a 94       	dec	r0
     150:	e2 f7       	brpl	.-8      	; 0x14a <HC595_shift_bit+0x3a>
     152:	80 95       	com	r24
     154:	82 23       	and	r24, r18
     156:	80 83       	st	Z, r24
	*hc595_PORT |= (1<<HC595_clkpin); // Shift bit
     158:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <hc595_PORT>
     15c:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <hc595_PORT+0x1>
     160:	40 81       	ld	r20, Z
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	9c 01       	movw	r18, r24
     168:	00 90 0d 02 	lds	r0, 0x020D	; 0x80020d <HC595_clkpin>
     16c:	02 c0       	rjmp	.+4      	; 0x172 <HC595_shift_bit+0x62>
     16e:	22 0f       	add	r18, r18
     170:	33 1f       	adc	r19, r19
     172:	0a 94       	dec	r0
     174:	e2 f7       	brpl	.-8      	; 0x16e <HC595_shift_bit+0x5e>
     176:	24 2b       	or	r18, r20
     178:	20 83       	st	Z, r18
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
     17a:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <hc595_PORT>
     17e:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <hc595_PORT+0x1>
     182:	20 81       	ld	r18, Z
     184:	00 90 0d 02 	lds	r0, 0x020D	; 0x80020d <HC595_clkpin>
     188:	02 c0       	rjmp	.+4      	; 0x18e <HC595_shift_bit+0x7e>
     18a:	88 0f       	add	r24, r24
     18c:	99 1f       	adc	r25, r25
     18e:	0a 94       	dec	r0
     190:	e2 f7       	brpl	.-8      	; 0x18a <HC595_shift_bit+0x7a>
     192:	80 95       	com	r24
     194:	82 23       	and	r24, r18
     196:	80 83       	st	Z, r24
     198:	08 95       	ret

0000019a <HC595_shift_out>:
		HC595_shift_bit(byte & (1<<i));
	HC595_shift_out();
}
void HC595_shift_out(void)
{
	*hc595_PORT |= (1<<HC595_outpin); //Output enable
     19a:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <hc595_PORT>
     19e:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <hc595_PORT+0x1>
     1a2:	40 81       	ld	r20, Z
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	9c 01       	movw	r18, r24
     1aa:	00 90 0c 02 	lds	r0, 0x020C	; 0x80020c <HC595_outpin>
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <HC595_shift_out+0x1a>
     1b0:	22 0f       	add	r18, r18
     1b2:	33 1f       	adc	r19, r19
     1b4:	0a 94       	dec	r0
     1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <HC595_shift_out+0x16>
     1b8:	24 2b       	or	r18, r20
     1ba:	20 83       	st	Z, r18
	*hc595_PORT &= ~(1<<HC595_outpin); //Output disable
     1bc:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <hc595_PORT>
     1c0:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <hc595_PORT+0x1>
     1c4:	20 81       	ld	r18, Z
     1c6:	00 90 0c 02 	lds	r0, 0x020C	; 0x80020c <HC595_outpin>
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <HC595_shift_out+0x36>
     1cc:	88 0f       	add	r24, r24
     1ce:	99 1f       	adc	r25, r25
     1d0:	0a 94       	dec	r0
     1d2:	e2 f7       	brpl	.-8      	; 0x1cc <HC595_shift_out+0x32>
     1d4:	80 95       	com	r24
     1d6:	82 23       	and	r24, r18
     1d8:	80 83       	st	Z, r24
     1da:	08 95       	ret

000001dc <HC595_shift_byte>:
		*hc595_PORT &= ~(1<<HC595_datapin); //Data bit LOW
	*hc595_PORT |= (1<<HC595_clkpin); // Shift bit
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
}
void HC595_shift_byte(uint8_t byte)
{
     1dc:	ff 92       	push	r15
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	f8 2e       	mov	r15, r24
     1e8:	c0 e0       	ldi	r28, 0x00	; 0
     1ea:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for(i=0;i<8;i++)
		HC595_shift_bit(byte & (1<<i));
     1ec:	01 e0       	ldi	r16, 0x01	; 1
     1ee:	10 e0       	ldi	r17, 0x00	; 0
     1f0:	c8 01       	movw	r24, r16
     1f2:	0c 2e       	mov	r0, r28
     1f4:	02 c0       	rjmp	.+4      	; 0x1fa <HC595_shift_byte+0x1e>
     1f6:	88 0f       	add	r24, r24
     1f8:	99 1f       	adc	r25, r25
     1fa:	0a 94       	dec	r0
     1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <HC595_shift_byte+0x1a>
     1fe:	8f 21       	and	r24, r15
     200:	87 df       	rcall	.-242    	; 0x110 <HC595_shift_bit>
     202:	21 96       	adiw	r28, 0x01	; 1
	*hc595_PORT &= ~(1<<HC595_clkpin); //Shift disable
}
void HC595_shift_byte(uint8_t byte)
{
	uint8_t i;
	for(i=0;i<8;i++)
     204:	c8 30       	cpi	r28, 0x08	; 8
     206:	d1 05       	cpc	r29, r1
		HC595_shift_bit(byte & (1<<i));
	HC595_shift_out();
     208:	99 f7       	brne	.-26     	; 0x1f0 <HC595_shift_byte+0x14>
     20a:	c7 df       	rcall	.-114    	; 0x19a <HC595_shift_out>
}
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	1f 91       	pop	r17
     212:	0f 91       	pop	r16
     214:	ff 90       	pop	r15
     216:	08 95       	ret

00000218 <HC595enable>:
void HC595_shift_bit(uint8_t bool);
void HC595_shift_byte(uint8_t byte);
void HC595_shift_out(void);
/***Procedure & Function***/
HC595 HC595enable(volatile uint8_t *ddr, volatile uint8_t *port, uint8_t datapin, uint8_t clkpin, uint8_t outpin)
{
     218:	0f 93       	push	r16
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	00 d0       	rcall	.+0      	; 0x220 <HC595enable+0x8>
     220:	00 d0       	rcall	.+0      	; 0x222 <HC595enable+0xa>
     222:	00 d0       	rcall	.+0      	; 0x224 <HC595enable+0xc>
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
     228:	5f b7       	in	r21, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     22a:	3f b7       	in	r19, 0x3f	; 63
     22c:	3f 77       	andi	r19, 0x7F	; 127
     22e:	3f bf       	out	0x3f, r19	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	HC595 hc595;
	//import parametros
	hc595_DDR=ddr;
     230:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <hc595_DDR+0x1>
     234:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <hc595_DDR>
	hc595_PORT=port;
     238:	70 93 0a 02 	sts	0x020A, r23	; 0x80020a <hc595_PORT+0x1>
     23c:	60 93 09 02 	sts	0x0209, r22	; 0x800209 <hc595_PORT>
	HC595_datapin=datapin;
     240:	40 93 0b 02 	sts	0x020B, r20	; 0x80020b <HC595_datapin>
	HC595_clkpin=clkpin;
     244:	20 93 0d 02 	sts	0x020D, r18	; 0x80020d <HC595_clkpin>
	HC595_outpin=outpin;
     248:	00 93 0c 02 	sts	0x020C, r16	; 0x80020c <HC595_outpin>
	//inic variables
    *hc595_DDR |= (1<<datapin) | (1<<clkpin) | (1<<outpin);
     24c:	fc 01       	movw	r30, r24
     24e:	30 81       	ld	r19, Z
     250:	61 e0       	ldi	r22, 0x01	; 1
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	db 01       	movw	r26, r22
     256:	02 c0       	rjmp	.+4      	; 0x25c <HC595enable+0x44>
     258:	aa 0f       	add	r26, r26
     25a:	bb 1f       	adc	r27, r27
     25c:	2a 95       	dec	r18
     25e:	e2 f7       	brpl	.-8      	; 0x258 <HC595enable+0x40>
     260:	fb 01       	movw	r30, r22
     262:	02 c0       	rjmp	.+4      	; 0x268 <HC595enable+0x50>
     264:	ee 0f       	add	r30, r30
     266:	ff 1f       	adc	r31, r31
     268:	0a 95       	dec	r16
     26a:	e2 f7       	brpl	.-8      	; 0x264 <HC595enable+0x4c>
     26c:	ea 2b       	or	r30, r26
     26e:	02 c0       	rjmp	.+4      	; 0x274 <HC595enable+0x5c>
     270:	66 0f       	add	r22, r22
     272:	77 1f       	adc	r23, r23
     274:	4a 95       	dec	r20
     276:	e2 f7       	brpl	.-8      	; 0x270 <HC595enable+0x58>
     278:	6e 2b       	or	r22, r30
     27a:	23 2f       	mov	r18, r19
     27c:	26 2b       	or	r18, r22
     27e:	fc 01       	movw	r30, r24
     280:	20 83       	st	Z, r18
	*hc595_PORT &= ~((1<<datapin) | (1<<clkpin) | (1<<outpin));
     282:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <hc595_PORT>
     286:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <hc595_PORT+0x1>
     28a:	80 81       	ld	r24, Z
     28c:	60 95       	com	r22
     28e:	68 23       	and	r22, r24
     290:	60 83       	st	Z, r22
	//Direccionar apontadores para PROTOTIPOS
	hc595.bit=HC595_shift_bit;
	hc595.byte=HC595_shift_byte;
	hc595.out=HC595_shift_out;
	SREG=tSREG;
     292:	5f bf       	out	0x3f, r21	; 63
	//
	return hc595;
     294:	28 e8       	ldi	r18, 0x88	; 136
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	3a 83       	std	Y+2, r19	; 0x02
     29a:	29 83       	std	Y+1, r18	; 0x01
     29c:	4e ee       	ldi	r20, 0xEE	; 238
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	5c 83       	std	Y+4, r21	; 0x04
     2a2:	4b 83       	std	Y+3, r20	; 0x03
     2a4:	6d ec       	ldi	r22, 0xCD	; 205
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	7e 83       	std	Y+6, r23	; 0x06
     2aa:	6d 83       	std	Y+5, r22	; 0x05
     2ac:	3a 81       	ldd	r19, Y+2	; 0x02
     2ae:	5c 81       	ldd	r21, Y+4	; 0x04
     2b0:	7e 81       	ldd	r23, Y+6	; 0x06
}
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	26 96       	adiw	r28, 0x06	; 6
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	0f 91       	pop	r16
     2c8:	08 95       	ret

000002ca <ANALOG_read>:
Returns selected Channel ADC_VALUE
***/
{
	uint8_t ADSC_FLAG;
	ADSC_FLAG=(1<<ADSC);
	if( !(ADC_CONTROL & ADSC_FLAG) ){
     2ca:	36 9b       	sbis	0x06, 6	; 6
		//ADC_SELECT
		/***/
		ADC_CONTROL|=(1<<ADSC);
     2cc:	36 9a       	sbi	0x06, 6	; 6
	}	
	return ADC_VALUE[selection];
     2ce:	fc 01       	movw	r30, r24
     2d0:	ee 0f       	add	r30, r30
     2d2:	ff 1f       	adc	r31, r31
     2d4:	ed 50       	subi	r30, 0x0D	; 13
     2d6:	fe 4f       	sbci	r31, 0xFE	; 254
     2d8:	80 81       	ld	r24, Z
     2da:	91 81       	ldd	r25, Z+1	; 0x01
}
     2dc:	08 95       	ret

000002de <ANALOGenable>:
ANALOG ANALOGenable( uint8_t Vreff, uint8_t Divfactor, int n_channel, ... )
/***
Interrupt running mode setup
setup, and list of channels to be probed
***/
{
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
     2ea:	9f 81       	ldd	r25, Y+7	; 0x07
     2ec:	68 85       	ldd	r22, Y+8	; 0x08
     2ee:	49 85       	ldd	r20, Y+9	; 0x09
     2f0:	5a 85       	ldd	r21, Y+10	; 0x0a
	/***LOCAL VARIABLES***/
	uint8_t tSREG;
	va_list list;
	int i;
	//inic variables
	tSREG=STATUS_REGISTER;
     2f2:	1f b7       	in	r17, 0x3f	; 63
	STATUS_REGISTER&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     2f4:	8f b7       	in	r24, 0x3f	; 63
     2f6:	8f 77       	andi	r24, 0x7F	; 127
     2f8:	8f bf       	out	0x3f, r24	; 63
	/***GLOBAL VARIABLES INICIALIZE***/
	ADC_N_CHANNEL=n_channel;
     2fa:	50 93 e2 01 	sts	0x01E2, r21	; 0x8001e2 <ADC_N_CHANNEL+0x1>
     2fe:	40 93 e1 01 	sts	0x01E1, r20	; 0x8001e1 <ADC_N_CHANNEL>
	ADC_SELECTOR=0;
     302:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <ADC_SELECTOR+0x1>
     306:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <ADC_SELECTOR>
	adc_n_sample=0;
     30a:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <__data_end>
	//import parametros
	//inic parameters
	//Direccionar apontadores para PROTOTIPOS
	analog.read=ANALOG_read;
		/******/
		ADC_SELECT&=~(3<<REFS0);
     30e:	87 b1       	in	r24, 0x07	; 7
     310:	8f 73       	andi	r24, 0x3F	; 63
     312:	87 b9       	out	0x07, r24	; 7
		switch( Vreff ){
     314:	91 30       	cpi	r25, 0x01	; 1
     316:	19 f0       	breq	.+6      	; 0x31e <ANALOGenable+0x40>
     318:	93 30       	cpi	r25, 0x03	; 3
     31a:	21 f0       	breq	.+8      	; 0x324 <ANALOGenable+0x46>
     31c:	08 c0       	rjmp	.+16     	; 0x32e <ANALOGenable+0x50>
			case 0:
				analog.VREFF=0;
				break;
			case 1:
				ADC_SELECT|=(1<<REFS0);
     31e:	3e 9a       	sbi	0x07, 6	; 7
				analog.VREFF=1;
     320:	01 e0       	ldi	r16, 0x01	; 1
				break;
     322:	06 c0       	rjmp	.+12     	; 0x330 <ANALOGenable+0x52>
			case 3:
				ADC_SELECT|=(3<<REFS0);
     324:	87 b1       	in	r24, 0x07	; 7
     326:	80 6c       	ori	r24, 0xC0	; 192
     328:	87 b9       	out	0x07, r24	; 7
				analog.VREFF=3;
     32a:	03 e0       	ldi	r16, 0x03	; 3
				break;
     32c:	01 c0       	rjmp	.+2      	; 0x330 <ANALOGenable+0x52>
	analog.read=ANALOG_read;
		/******/
		ADC_SELECT&=~(3<<REFS0);
		switch( Vreff ){
			case 0:
				analog.VREFF=0;
     32e:	00 e0       	ldi	r16, 0x00	; 0
			default:
				analog.VREFF=0;
				break;
		}
		//
		ADC_SELECT&=~(1<<ADLAR);
     330:	3d 98       	cbi	0x07, 5	; 7
		/******/
		va_start(list, n_channel);
		for(i=0;i<n_channel;i++){
     332:	14 16       	cp	r1, r20
     334:	15 06       	cpc	r1, r21
     336:	8c f4       	brge	.+34     	; 0x35a <ANALOGenable+0x7c>
     338:	de 01       	movw	r26, r28
     33a:	1b 96       	adiw	r26, 0x0b	; 11
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	90 e0       	ldi	r25, 0x00	; 0
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
     340:	2d 91       	ld	r18, X+
     342:	3d 91       	ld	r19, X+
     344:	fc 01       	movw	r30, r24
     346:	ee 0f       	add	r30, r30
     348:	ff 1f       	adc	r31, r31
     34a:	ed 51       	subi	r30, 0x1D	; 29
     34c:	fe 4f       	sbci	r31, 0xFE	; 254
     34e:	31 83       	std	Z+1, r19	; 0x01
     350:	20 83       	st	Z, r18
		}
		//
		ADC_SELECT&=~(1<<ADLAR);
		/******/
		va_start(list, n_channel);
		for(i=0;i<n_channel;i++){
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	48 17       	cp	r20, r24
     356:	59 07       	cpc	r21, r25
     358:	99 f7       	brne	.-26     	; 0x340 <ANALOGenable+0x62>
			ADC_CHANNEL_GAIN[i] = va_arg(list, int);
		}
		va_end(list);
		ADC_SELECT&=~MUX_MASK;
     35a:	87 b1       	in	r24, 0x07	; 7
     35c:	80 7e       	andi	r24, 0xE0	; 224
     35e:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT|=(MUX_MASK & ADC_CHANNEL_GAIN[ADC_SELECTOR]);
     360:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <ADC_SELECTOR>
     364:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <ADC_SELECTOR+0x1>
     368:	ee 0f       	add	r30, r30
     36a:	ff 1f       	adc	r31, r31
     36c:	ed 51       	subi	r30, 0x1D	; 29
     36e:	fe 4f       	sbci	r31, 0xFE	; 254
     370:	80 81       	ld	r24, Z
     372:	91 81       	ldd	r25, Z+1	; 0x01
     374:	27 b1       	in	r18, 0x07	; 7
     376:	8f 71       	andi	r24, 0x1F	; 31
     378:	99 27       	eor	r25, r25
     37a:	82 2b       	or	r24, r18
     37c:	87 b9       	out	0x07, r24	; 7
		/******/
		ADC_CONTROL|=(1<<ADEN);
     37e:	37 9a       	sbi	0x06, 7	; 6
		ADC_CONTROL|=(1<<ADSC);
     380:	36 9a       	sbi	0x06, 6	; 6
		ADC_CONTROL&=~(1<<ADFR);
     382:	35 98       	cbi	0x06, 5	; 6
		ADC_CONTROL|=(1<<ADIE);
     384:	33 9a       	sbi	0x06, 3	; 6
		/******/
		ADC_CONTROL&=~(7<<ADPS0);
     386:	86 b1       	in	r24, 0x06	; 6
     388:	88 7f       	andi	r24, 0xF8	; 248
     38a:	86 b9       	out	0x06, r24	; 6
		switch( Divfactor ){
     38c:	60 31       	cpi	r22, 0x10	; 16
     38e:	d1 f0       	breq	.+52     	; 0x3c4 <ANALOGenable+0xe6>
     390:	38 f4       	brcc	.+14     	; 0x3a0 <ANALOGenable+0xc2>
     392:	64 30       	cpi	r22, 0x04	; 4
     394:	79 f0       	breq	.+30     	; 0x3b4 <ANALOGenable+0xd6>
     396:	68 30       	cpi	r22, 0x08	; 8
     398:	81 f0       	breq	.+32     	; 0x3ba <ANALOGenable+0xdc>
     39a:	62 30       	cpi	r22, 0x02	; 2
     39c:	29 f5       	brne	.+74     	; 0x3e8 <ANALOGenable+0x10a>
     39e:	07 c0       	rjmp	.+14     	; 0x3ae <ANALOGenable+0xd0>
     3a0:	60 34       	cpi	r22, 0x40	; 64
     3a2:	c1 f0       	breq	.+48     	; 0x3d4 <ANALOGenable+0xf6>
     3a4:	60 38       	cpi	r22, 0x80	; 128
     3a6:	d9 f0       	breq	.+54     	; 0x3de <ANALOGenable+0x100>
     3a8:	60 32       	cpi	r22, 0x20	; 32
     3aa:	f1 f4       	brne	.+60     	; 0x3e8 <ANALOGenable+0x10a>
     3ac:	0e c0       	rjmp	.+28     	; 0x3ca <ANALOGenable+0xec>
			case 2://1
				ADC_CONTROL|=(1<<ADPS0);
     3ae:	30 9a       	sbi	0x06, 0	; 6
				analog.DIVISION_FACTOR=2;
     3b0:	22 e0       	ldi	r18, 0x02	; 2
				break;
     3b2:	1e c0       	rjmp	.+60     	; 0x3f0 <ANALOGenable+0x112>
			case 4://2
				ADC_CONTROL|=(1<<ADPS1);
     3b4:	31 9a       	sbi	0x06, 1	; 6
				analog.DIVISION_FACTOR=4;
     3b6:	24 e0       	ldi	r18, 0x04	; 4
				break;
     3b8:	1b c0       	rjmp	.+54     	; 0x3f0 <ANALOGenable+0x112>
			case 8://3
				ADC_CONTROL|=(3<<ADPS0);
     3ba:	86 b1       	in	r24, 0x06	; 6
     3bc:	83 60       	ori	r24, 0x03	; 3
     3be:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=8;
     3c0:	28 e0       	ldi	r18, 0x08	; 8
				break;
     3c2:	16 c0       	rjmp	.+44     	; 0x3f0 <ANALOGenable+0x112>
			case 16://4
				ADC_CONTROL|=(1<<ADPS2);
     3c4:	32 9a       	sbi	0x06, 2	; 6
				analog.DIVISION_FACTOR=16;
     3c6:	20 e1       	ldi	r18, 0x10	; 16
				break;
     3c8:	13 c0       	rjmp	.+38     	; 0x3f0 <ANALOGenable+0x112>
			case 32://5
				ADC_CONTROL|=(5<<ADPS0);
     3ca:	86 b1       	in	r24, 0x06	; 6
     3cc:	85 60       	ori	r24, 0x05	; 5
     3ce:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=32;
     3d0:	20 e2       	ldi	r18, 0x20	; 32
				break;
     3d2:	0e c0       	rjmp	.+28     	; 0x3f0 <ANALOGenable+0x112>
			case 64://6
				ADC_CONTROL|=(6<<ADPS0);
     3d4:	86 b1       	in	r24, 0x06	; 6
     3d6:	86 60       	ori	r24, 0x06	; 6
     3d8:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=64;
     3da:	20 e4       	ldi	r18, 0x40	; 64
				break;
     3dc:	09 c0       	rjmp	.+18     	; 0x3f0 <ANALOGenable+0x112>
			case 128://7
				ADC_CONTROL|=(7<<ADPS0);
     3de:	86 b1       	in	r24, 0x06	; 6
     3e0:	87 60       	ori	r24, 0x07	; 7
     3e2:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=128;
     3e4:	20 e8       	ldi	r18, 0x80	; 128
				break;
     3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <ANALOGenable+0x112>
			default:
				ADC_CONTROL|=(7<<ADPS0);
     3e8:	86 b1       	in	r24, 0x06	; 6
     3ea:	87 60       	ori	r24, 0x07	; 7
     3ec:	86 b9       	out	0x06, r24	; 6
				analog.DIVISION_FACTOR=128;
     3ee:	20 e8       	ldi	r18, 0x80	; 128
				break;
		}
	
	STATUS_REGISTER=tSREG;
     3f0:	1f bf       	out	0x3f, r17	; 63
	STATUS_REGISTER|=(1<<GLOBAL_INTERRUPT_ENABLE);
     3f2:	8f b7       	in	r24, 0x3f	; 63
     3f4:	80 68       	ori	r24, 0x80	; 128
     3f6:	8f bf       	out	0x3f, r24	; 63
	/******/
	return analog;
     3f8:	60 2f       	mov	r22, r16
     3fa:	72 2f       	mov	r23, r18
     3fc:	85 e6       	ldi	r24, 0x65	; 101
     3fe:	91 e0       	ldi	r25, 0x01	; 1
}
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	08 95       	ret

0000040a <__vector_21>:
ISR(ANALOG_INTERRUPT)
/*************************************************************************
Function: ANALOG interrupt
Purpose:  Read Analog Input
**************************************************************************/
{
     40a:	1f 92       	push	r1
     40c:	0f 92       	push	r0
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	0f 92       	push	r0
     412:	11 24       	eor	r1, r1
     414:	0b b6       	in	r0, 0x3b	; 59
     416:	0f 92       	push	r0
     418:	2f 93       	push	r18
     41a:	3f 93       	push	r19
     41c:	4f 93       	push	r20
     41e:	5f 93       	push	r21
     420:	8f 93       	push	r24
     422:	9f 93       	push	r25
     424:	ef 93       	push	r30
     426:	ff 93       	push	r31
	uint8_t Sreg;
	Sreg=STATUS_REGISTER;
     428:	2f b7       	in	r18, 0x3f	; 63
	STATUS_REGISTER&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     42a:	8f b7       	in	r24, 0x3f	; 63
     42c:	8f 77       	andi	r24, 0x7F	; 127
     42e:	8f bf       	out	0x3f, r24	; 63
	adc_tmp=ADCL;
     430:	84 b1       	in	r24, 0x04	; 4
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <adc_tmp+0x1>
     438:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <adc_tmp>
	adc_tmp|=(ADCH<<8);
     43c:	35 b1       	in	r19, 0x05	; 5
     43e:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <adc_tmp>
     442:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <adc_tmp+0x1>
     446:	93 2b       	or	r25, r19
     448:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <adc_tmp+0x1>
     44c:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <adc_tmp>
	if(adc_n_sample < (1<<ADC_NUMBER_SAMPLE)){
     450:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__data_end>
     454:	84 30       	cpi	r24, 0x04	; 4
     456:	a0 f4       	brcc	.+40     	; 0x480 <__vector_21+0x76>
		adc_n_sample++;
     458:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__data_end>
     45c:	8f 5f       	subi	r24, 0xFF	; 255
     45e:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__data_end>
		adc_sample+=adc_tmp;
     462:	40 91 db 01 	lds	r20, 0x01DB	; 0x8001db <adc_tmp>
     466:	50 91 dc 01 	lds	r21, 0x01DC	; 0x8001dc <adc_tmp+0x1>
     46a:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <adc_sample>
     46e:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <adc_sample+0x1>
     472:	84 0f       	add	r24, r20
     474:	95 1f       	adc	r25, r21
     476:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <adc_sample+0x1>
     47a:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <adc_sample>
     47e:	43 c0       	rjmp	.+134    	; 0x506 <__vector_21+0xfc>
	}else{
		ADC_VALUE[ADC_SELECTOR]=adc_sample>>ADC_NUMBER_SAMPLE;
     480:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <ADC_SELECTOR>
     484:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <ADC_SELECTOR+0x1>
     488:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <adc_sample>
     48c:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <adc_sample+0x1>
     490:	95 95       	asr	r25
     492:	87 95       	ror	r24
     494:	95 95       	asr	r25
     496:	87 95       	ror	r24
     498:	ee 0f       	add	r30, r30
     49a:	ff 1f       	adc	r31, r31
     49c:	ed 50       	subi	r30, 0x0D	; 13
     49e:	fe 4f       	sbci	r31, 0xFE	; 254
     4a0:	91 83       	std	Z+1, r25	; 0x01
     4a2:	80 83       	st	Z, r24
		adc_n_sample=adc_sample=0;
     4a4:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <adc_sample+0x1>
     4a8:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <adc_sample>
     4ac:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <__data_end>
		/******/
		if(ADC_SELECTOR < ADC_N_CHANNEL)
     4b0:	40 91 df 01 	lds	r20, 0x01DF	; 0x8001df <ADC_SELECTOR>
     4b4:	50 91 e0 01 	lds	r21, 0x01E0	; 0x8001e0 <ADC_SELECTOR+0x1>
     4b8:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <ADC_N_CHANNEL>
     4bc:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <ADC_N_CHANNEL+0x1>
     4c0:	48 17       	cp	r20, r24
     4c2:	59 07       	cpc	r21, r25
     4c4:	54 f4       	brge	.+20     	; 0x4da <__vector_21+0xd0>
			ADC_SELECTOR++;
     4c6:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <ADC_SELECTOR>
     4ca:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <ADC_SELECTOR+0x1>
     4ce:	01 96       	adiw	r24, 0x01	; 1
     4d0:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <ADC_SELECTOR+0x1>
     4d4:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <ADC_SELECTOR>
     4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <__vector_21+0xd8>
		else
			ADC_SELECTOR=0;
     4da:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <ADC_SELECTOR+0x1>
     4de:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <ADC_SELECTOR>
		ADC_SELECT &= ~MUX_MASK;
     4e2:	87 b1       	in	r24, 0x07	; 7
     4e4:	80 7e       	andi	r24, 0xE0	; 224
     4e6:	87 b9       	out	0x07, r24	; 7
		ADC_SELECT |= (ADC_CHANNEL_GAIN[ADC_SELECTOR] & MUX_MASK);
     4e8:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <ADC_SELECTOR>
     4ec:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <ADC_SELECTOR+0x1>
     4f0:	ee 0f       	add	r30, r30
     4f2:	ff 1f       	adc	r31, r31
     4f4:	ed 51       	subi	r30, 0x1D	; 29
     4f6:	fe 4f       	sbci	r31, 0xFE	; 254
     4f8:	80 81       	ld	r24, Z
     4fa:	91 81       	ldd	r25, Z+1	; 0x01
     4fc:	37 b1       	in	r19, 0x07	; 7
     4fe:	8f 71       	andi	r24, 0x1F	; 31
     500:	99 27       	eor	r25, r25
     502:	83 2b       	or	r24, r19
     504:	87 b9       	out	0x07, r24	; 7
	}
	STATUS_REGISTER=Sreg;
     506:	2f bf       	out	0x3f, r18	; 63
}
     508:	ff 91       	pop	r31
     50a:	ef 91       	pop	r30
     50c:	9f 91       	pop	r25
     50e:	8f 91       	pop	r24
     510:	5f 91       	pop	r21
     512:	4f 91       	pop	r20
     514:	3f 91       	pop	r19
     516:	2f 91       	pop	r18
     518:	0f 90       	pop	r0
     51a:	0b be       	out	0x3b, r0	; 59
     51c:	0f 90       	pop	r0
     51e:	0f be       	out	0x3f, r0	; 63
     520:	0f 90       	pop	r0
     522:	1f 90       	pop	r1
     524:	18 95       	reti

00000526 <I2C_Start>:
	/***Vtable***/
}
/***void I2C_Start(void)***/
void I2C_Start(void)
{
  TWI_CONTROL_REGISTER = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
     526:	e4 e7       	ldi	r30, 0x74	; 116
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	84 ea       	ldi	r24, 0xA4	; 164
     52c:	80 83       	st	Z, r24
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1<<TWINT)) && ticks; ticks--);
     52e:	8f ef       	ldi	r24, 0xFF	; 255
     530:	93 e0       	ldi	r25, 0x03	; 3
     532:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <ticks+0x1>
     536:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <ticks>
     53a:	80 81       	ld	r24, Z
     53c:	88 23       	and	r24, r24
     53e:	5c f0       	brlt	.+22     	; 0x556 <I2C_Start+0x30>
     540:	8e ef       	ldi	r24, 0xFE	; 254
     542:	93 e0       	ldi	r25, 0x03	; 3
     544:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <ticks+0x1>
     548:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <ticks>
     54c:	20 81       	ld	r18, Z
     54e:	22 23       	and	r18, r18
     550:	14 f0       	brlt	.+4      	; 0x556 <I2C_Start+0x30>
     552:	01 97       	sbiw	r24, 0x01	; 1
     554:	b8 f7       	brcc	.-18     	; 0x544 <I2C_Start+0x1e>
     556:	08 95       	ret

00000558 <I2C_Write>:
   _delay_us(100); //wait for a short time
}
/***void I2C_Write(uint8_t var_i2cData_u8)***/
void I2C_Write(uint8_t var_i2cData_u8)
{
  TWI_DATA_REGISTER = var_i2cData_u8 ;
     558:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN));
     55c:	e4 e7       	ldi	r30, 0x74	; 116
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	84 e8       	ldi	r24, 0x84	; 132
     562:	80 83       	st	Z, r24
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1 <<TWINT)) && ticks; ticks--);
     564:	8f ef       	ldi	r24, 0xFF	; 255
     566:	93 e0       	ldi	r25, 0x03	; 3
     568:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <ticks+0x1>
     56c:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <ticks>
     570:	80 81       	ld	r24, Z
     572:	88 23       	and	r24, r24
     574:	5c f0       	brlt	.+22     	; 0x58c <I2C_Write+0x34>
     576:	8e ef       	ldi	r24, 0xFE	; 254
     578:	93 e0       	ldi	r25, 0x03	; 3
     57a:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <ticks+0x1>
     57e:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <ticks>
     582:	20 81       	ld	r18, Z
     584:	22 23       	and	r18, r18
     586:	14 f0       	brlt	.+4      	; 0x58c <I2C_Write+0x34>
     588:	01 97       	sbiw	r24, 0x01	; 1
     58a:	b8 f7       	brcc	.-18     	; 0x57a <I2C_Write+0x22>
     58c:	08 95       	ret

0000058e <I2C_Read>:
}
/***uint8_t I2C_Read(uint8_t var_ackOption_u8)***/
uint8_t I2C_Read(uint8_t var_ackOption_u8)
{
 TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN) | (var_ackOption_u8<<TWEA));
     58e:	20 e4       	ldi	r18, 0x40	; 64
     590:	82 9f       	mul	r24, r18
     592:	c0 01       	movw	r24, r0
     594:	11 24       	eor	r1, r1
     596:	84 68       	ori	r24, 0x84	; 132
     598:	e4 e7       	ldi	r30, 0x74	; 116
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	80 83       	st	Z, r24
   for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1 <<TWINT)) && ticks; ticks--);
     59e:	8f ef       	ldi	r24, 0xFF	; 255
     5a0:	93 e0       	ldi	r25, 0x03	; 3
     5a2:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <ticks+0x1>
     5a6:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <ticks>
     5aa:	80 81       	ld	r24, Z
     5ac:	88 23       	and	r24, r24
     5ae:	5c f0       	brlt	.+22     	; 0x5c6 <I2C_Read+0x38>
     5b0:	8e ef       	ldi	r24, 0xFE	; 254
     5b2:	93 e0       	ldi	r25, 0x03	; 3
     5b4:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <ticks+0x1>
     5b8:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <ticks>
     5bc:	20 81       	ld	r18, Z
     5be:	22 23       	and	r18, r18
     5c0:	14 f0       	brlt	.+4      	; 0x5c6 <I2C_Read+0x38>
     5c2:	01 97       	sbiw	r24, 0x01	; 1
     5c4:	b8 f7       	brcc	.-18     	; 0x5b4 <I2C_Read+0x26>
   return TWI_DATA_REGISTER;
     5c6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
}
     5ca:	08 95       	ret

000005cc <I2C_Status>:
/***uint8_t I2C_status(void)***/
uint8_t I2C_Status(void)
{
	return TWI_STATUS_REGISTER & TWI_STATUS_MASK;
     5cc:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
}
     5d0:	88 7f       	andi	r24, 0xF8	; 248
     5d2:	08 95       	ret

000005d4 <I2C_Stop>:
  for (ticks=Nticks; !(TWI_CONTROL_REGISTER & (1<<TWINT)) && ticks; ticks--);
}
/***void I2C_Stop(void)***/
void I2C_Stop(void)
{
  TWI_CONTROL_REGISTER = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
     5d4:	84 e9       	ldi	r24, 0x94	; 148
     5d6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5da:	8f e8       	ldi	r24, 0x8F	; 143
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	01 97       	sbiw	r24, 0x01	; 1
     5e0:	f1 f7       	brne	.-4      	; 0x5de <I2C_Stop+0xa>
     5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <I2C_Stop+0x10>
     5e4:	00 00       	nop
     5e6:	08 95       	ret

000005e8 <I2C_Init>:
  return ic;
}
/***void I2C_Init(uint8_t prescaler)***/
void I2C_Init(uint8_t prescaler)
{
	I2C_DDR|=I2C_IO_MASK;
     5e8:	91 b3       	in	r25, 0x11	; 17
     5ea:	93 60       	ori	r25, 0x03	; 3
     5ec:	91 bb       	out	0x11, r25	; 17
	I2C_PORT|=I2C_IO_MASK;
     5ee:	92 b3       	in	r25, 0x12	; 18
     5f0:	93 60       	ori	r25, 0x03	; 3
     5f2:	92 bb       	out	0x12, r25	; 18
	switch(prescaler){
     5f4:	84 30       	cpi	r24, 0x04	; 4
     5f6:	79 f0       	breq	.+30     	; 0x616 <I2C_Init+0x2e>
     5f8:	18 f4       	brcc	.+6      	; 0x600 <I2C_Init+0x18>
     5fa:	81 30       	cpi	r24, 0x01	; 1
     5fc:	31 f0       	breq	.+12     	; 0x60a <I2C_Init+0x22>
     5fe:	1d c0       	rjmp	.+58     	; 0x63a <I2C_Init+0x52>
     600:	80 31       	cpi	r24, 0x10	; 16
     602:	79 f0       	breq	.+30     	; 0x622 <I2C_Init+0x3a>
     604:	80 34       	cpi	r24, 0x40	; 64
     606:	99 f0       	breq	.+38     	; 0x62e <I2C_Init+0x46>
     608:	18 c0       	rjmp	.+48     	; 0x63a <I2C_Init+0x52>
		case 1:
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
     60a:	e1 e7       	ldi	r30, 0x71	; 113
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	90 81       	ld	r25, Z
     610:	9c 7f       	andi	r25, 0xFC	; 252
     612:	90 83       	st	Z, r25
		break;
     614:	18 c0       	rjmp	.+48     	; 0x646 <I2C_Init+0x5e>
		case 4:
		TWI_STATUS_REGISTER |= (1<<TWPS0);
     616:	e1 e7       	ldi	r30, 0x71	; 113
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	90 81       	ld	r25, Z
     61c:	91 60       	ori	r25, 0x01	; 1
     61e:	90 83       	st	Z, r25
		break;
     620:	12 c0       	rjmp	.+36     	; 0x646 <I2C_Init+0x5e>
		case 16:
		TWI_STATUS_REGISTER |= (2<<TWPS0);
     622:	e1 e7       	ldi	r30, 0x71	; 113
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	90 81       	ld	r25, Z
     628:	92 60       	ori	r25, 0x02	; 2
     62a:	90 83       	st	Z, r25
		break;
     62c:	0c c0       	rjmp	.+24     	; 0x646 <I2C_Init+0x5e>
		case 64:
		TWI_STATUS_REGISTER |= (3<<TWPS0);
     62e:	e1 e7       	ldi	r30, 0x71	; 113
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	90 81       	ld	r25, Z
     634:	93 60       	ori	r25, 0x03	; 3
     636:	90 83       	st	Z, r25
		break;
     638:	06 c0       	rjmp	.+12     	; 0x646 <I2C_Init+0x5e>
		default:
		prescaler=1;
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
     63a:	e1 e7       	ldi	r30, 0x71	; 113
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	80 81       	ld	r24, Z
     640:	8c 7f       	andi	r24, 0xFC	; 252
     642:	80 83       	st	Z, r24
		break;
		case 64:
		TWI_STATUS_REGISTER |= (3<<TWPS0);
		break;
		default:
		prescaler=1;
     644:	81 e0       	ldi	r24, 0x01	; 1
		TWI_STATUS_REGISTER &= ~TWI_PRESCALER_MASK;
		break;
	}
	TWI_BIT_RATE_REGISTER = ((F_CPU/I2C_SCL_CLOCK)-16)/(2*prescaler);
     646:	28 2f       	mov	r18, r24
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	22 0f       	add	r18, r18
     64c:	33 1f       	adc	r19, r19
     64e:	03 2e       	mov	r0, r19
     650:	00 0c       	add	r0, r0
     652:	44 0b       	sbc	r20, r20
     654:	55 0b       	sbc	r21, r21
     656:	60 e9       	ldi	r22, 0x90	; 144
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <__udivmodsi4>
     662:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     666:	08 95       	ret

00000668 <I2Cenable>:
void I2C_Write(uint8_t var_i2cData_u8);
uint8_t I2C_Read(uint8_t var_ackOption_u8);
uint8_t I2C_Status(void);
/***I2C I2Cenable(uint8_t prescaler)***/
I2C I2Cenable(uint8_t prescaler)
{
     668:	1f 93       	push	r17
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	ec 01       	movw	r28, r24
     670:	86 2f       	mov	r24, r22
  uint8_t tSREG;
  tSREG=SREG;
     672:	1f b7       	in	r17, 0x3f	; 63
  SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
     674:	9f b7       	in	r25, 0x3f	; 63
     676:	9f 77       	andi	r25, 0x7F	; 127
     678:	9f bf       	out	0x3f, r25	; 63
  I2C ic;
  I2C_Init(prescaler);
     67a:	b6 df       	rcall	.-148    	; 0x5e8 <I2C_Init>
  ic.Stop=I2C_Stop;
  ic.Write=I2C_Write;
  ic.Read=I2C_Read;
  ic.Status=I2C_Status;
  /******/
  SREG=tSREG;
     67c:	1f bf       	out	0x3f, r17	; 63
  return ic;
     67e:	83 e9       	ldi	r24, 0x93	; 147
     680:	92 e0       	ldi	r25, 0x02	; 2
     682:	99 83       	std	Y+1, r25	; 0x01
     684:	88 83       	st	Y, r24
     686:	8a ee       	ldi	r24, 0xEA	; 234
     688:	92 e0       	ldi	r25, 0x02	; 2
     68a:	9b 83       	std	Y+3, r25	; 0x03
     68c:	8a 83       	std	Y+2, r24	; 0x02
     68e:	8c ea       	ldi	r24, 0xAC	; 172
     690:	92 e0       	ldi	r25, 0x02	; 2
     692:	9d 83       	std	Y+5, r25	; 0x05
     694:	8c 83       	std	Y+4, r24	; 0x04
     696:	87 ec       	ldi	r24, 0xC7	; 199
     698:	92 e0       	ldi	r25, 0x02	; 2
     69a:	9f 83       	std	Y+7, r25	; 0x07
     69c:	8e 83       	std	Y+6, r24	; 0x06
     69e:	86 ee       	ldi	r24, 0xE6	; 230
     6a0:	92 e0       	ldi	r25, 0x02	; 2
     6a2:	99 87       	std	Y+9, r25	; 0x09
     6a4:	88 87       	std	Y+8, r24	; 0x08
}
     6a6:	ce 01       	movw	r24, r28
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	1f 91       	pop	r17
     6ae:	08 95       	ret

000006b0 <TIMER_COUNTER0_start>:
	timer3.compareB=TIMER_COUNTER3_compareB;
	timer3.compareC=TIMER_COUNTER3_compareC;
	timer3.start=TIMER_COUNTER3_start;
	timer3.stop=TIMER_COUNTER3_stop;
	return timer3;
}
     6b0:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <timer0_state>
     6b4:	21 11       	cpse	r18, r1
     6b6:	40 c0       	rjmp	.+128    	; 0x738 <TIMER_COUNTER0_start+0x88>
     6b8:	2f ef       	ldi	r18, 0xFF	; 255
     6ba:	21 bf       	out	0x31, r18	; 49
     6bc:	23 b7       	in	r18, 0x33	; 51
     6be:	28 7f       	andi	r18, 0xF8	; 248
     6c0:	23 bf       	out	0x33, r18	; 51
     6c2:	80 34       	cpi	r24, 0x40	; 64
     6c4:	91 05       	cpc	r25, r1
     6c6:	11 f1       	breq	.+68     	; 0x70c <TIMER_COUNTER0_start+0x5c>
     6c8:	48 f4       	brcc	.+18     	; 0x6dc <TIMER_COUNTER0_start+0x2c>
     6ca:	88 30       	cpi	r24, 0x08	; 8
     6cc:	91 05       	cpc	r25, r1
     6ce:	b1 f0       	breq	.+44     	; 0x6fc <TIMER_COUNTER0_start+0x4c>
     6d0:	80 32       	cpi	r24, 0x20	; 32
     6d2:	91 05       	cpc	r25, r1
     6d4:	b9 f0       	breq	.+46     	; 0x704 <TIMER_COUNTER0_start+0x54>
     6d6:	01 97       	sbiw	r24, 0x01	; 1
     6d8:	49 f5       	brne	.+82     	; 0x72c <TIMER_COUNTER0_start+0x7c>
     6da:	0c c0       	rjmp	.+24     	; 0x6f4 <TIMER_COUNTER0_start+0x44>
     6dc:	81 15       	cp	r24, r1
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	92 07       	cpc	r25, r18
     6e2:	e1 f0       	breq	.+56     	; 0x71c <TIMER_COUNTER0_start+0x6c>
     6e4:	81 15       	cp	r24, r1
     6e6:	24 e0       	ldi	r18, 0x04	; 4
     6e8:	92 07       	cpc	r25, r18
     6ea:	e1 f0       	breq	.+56     	; 0x724 <TIMER_COUNTER0_start+0x74>
     6ec:	80 38       	cpi	r24, 0x80	; 128
     6ee:	91 05       	cpc	r25, r1
     6f0:	e9 f4       	brne	.+58     	; 0x72c <TIMER_COUNTER0_start+0x7c>
     6f2:	10 c0       	rjmp	.+32     	; 0x714 <TIMER_COUNTER0_start+0x64>
     6f4:	83 b7       	in	r24, 0x33	; 51
     6f6:	81 60       	ori	r24, 0x01	; 1
     6f8:	83 bf       	out	0x33, r24	; 51
     6fa:	1b c0       	rjmp	.+54     	; 0x732 <TIMER_COUNTER0_start+0x82>
     6fc:	83 b7       	in	r24, 0x33	; 51
     6fe:	82 60       	ori	r24, 0x02	; 2
     700:	83 bf       	out	0x33, r24	; 51
     702:	17 c0       	rjmp	.+46     	; 0x732 <TIMER_COUNTER0_start+0x82>
     704:	83 b7       	in	r24, 0x33	; 51
     706:	83 60       	ori	r24, 0x03	; 3
     708:	83 bf       	out	0x33, r24	; 51
     70a:	13 c0       	rjmp	.+38     	; 0x732 <TIMER_COUNTER0_start+0x82>
     70c:	83 b7       	in	r24, 0x33	; 51
     70e:	84 60       	ori	r24, 0x04	; 4
     710:	83 bf       	out	0x33, r24	; 51
     712:	0f c0       	rjmp	.+30     	; 0x732 <TIMER_COUNTER0_start+0x82>
     714:	83 b7       	in	r24, 0x33	; 51
     716:	85 60       	ori	r24, 0x05	; 5
     718:	83 bf       	out	0x33, r24	; 51
     71a:	0b c0       	rjmp	.+22     	; 0x732 <TIMER_COUNTER0_start+0x82>
     71c:	83 b7       	in	r24, 0x33	; 51
     71e:	86 60       	ori	r24, 0x06	; 6
     720:	83 bf       	out	0x33, r24	; 51
     722:	07 c0       	rjmp	.+14     	; 0x732 <TIMER_COUNTER0_start+0x82>
     724:	83 b7       	in	r24, 0x33	; 51
     726:	87 60       	ori	r24, 0x07	; 7
     728:	83 bf       	out	0x33, r24	; 51
     72a:	03 c0       	rjmp	.+6      	; 0x732 <TIMER_COUNTER0_start+0x82>
     72c:	83 b7       	in	r24, 0x33	; 51
     72e:	87 60       	ori	r24, 0x07	; 7
     730:	83 bf       	out	0x33, r24	; 51
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <timer0_state>
     738:	08 95       	ret

0000073a <TIMER_COUNTER0_compoutmode>:
     73a:	93 b7       	in	r25, 0x33	; 51
     73c:	9f 7c       	andi	r25, 0xCF	; 207
     73e:	93 bf       	out	0x33, r25	; 51
     740:	82 30       	cpi	r24, 0x02	; 2
     742:	41 f0       	breq	.+16     	; 0x754 <TIMER_COUNTER0_compoutmode+0x1a>
     744:	83 30       	cpi	r24, 0x03	; 3
     746:	51 f0       	breq	.+20     	; 0x75c <TIMER_COUNTER0_compoutmode+0x22>
     748:	81 30       	cpi	r24, 0x01	; 1
     74a:	59 f4       	brne	.+22     	; 0x762 <TIMER_COUNTER0_compoutmode+0x28>
     74c:	83 b7       	in	r24, 0x33	; 51
     74e:	80 61       	ori	r24, 0x10	; 16
     750:	83 bf       	out	0x33, r24	; 51
     752:	08 95       	ret
     754:	83 b7       	in	r24, 0x33	; 51
     756:	80 62       	ori	r24, 0x20	; 32
     758:	83 bf       	out	0x33, r24	; 51
     75a:	08 95       	ret
     75c:	83 b7       	in	r24, 0x33	; 51
     75e:	80 63       	ori	r24, 0x30	; 48
     760:	83 bf       	out	0x33, r24	; 51
     762:	08 95       	ret

00000764 <TIMER_COUNTER0_compare>:
     764:	81 bf       	out	0x31, r24	; 49
     766:	08 95       	ret

00000768 <TIMER_COUNTER0_stop>:
     768:	83 b7       	in	r24, 0x33	; 51
     76a:	88 7f       	andi	r24, 0xF8	; 248
     76c:	83 bf       	out	0x33, r24	; 51
     76e:	12 be       	out	0x32, r1	; 50
     770:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <timer0_state>
     774:	08 95       	ret

00000776 <TIMER_COUNTER1_start>:
     776:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <timer1_state>
     77a:	21 11       	cpse	r18, r1
     77c:	42 c0       	rjmp	.+132    	; 0x802 <TIMER_COUNTER1_start+0x8c>
     77e:	2f ef       	ldi	r18, 0xFF	; 255
     780:	3f ef       	ldi	r19, 0xFF	; 255
     782:	3b bd       	out	0x2b, r19	; 43
     784:	2a bd       	out	0x2a, r18	; 42
     786:	2e b5       	in	r18, 0x2e	; 46
     788:	28 7f       	andi	r18, 0xF8	; 248
     78a:	2e bd       	out	0x2e, r18	; 46
     78c:	88 30       	cpi	r24, 0x08	; 8
     78e:	91 05       	cpc	r25, r1
     790:	d1 f0       	breq	.+52     	; 0x7c6 <TIMER_COUNTER1_start+0x50>
     792:	48 f4       	brcc	.+18     	; 0x7a6 <TIMER_COUNTER1_start+0x30>
     794:	83 30       	cpi	r24, 0x03	; 3
     796:	91 05       	cpc	r25, r1
     798:	31 f1       	breq	.+76     	; 0x7e6 <TIMER_COUNTER1_start+0x70>
     79a:	85 30       	cpi	r24, 0x05	; 5
     79c:	91 05       	cpc	r25, r1
     79e:	39 f1       	breq	.+78     	; 0x7ee <TIMER_COUNTER1_start+0x78>
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	49 f5       	brne	.+82     	; 0x7f6 <TIMER_COUNTER1_start+0x80>
     7a4:	0c c0       	rjmp	.+24     	; 0x7be <TIMER_COUNTER1_start+0x48>
     7a6:	81 15       	cp	r24, r1
     7a8:	21 e0       	ldi	r18, 0x01	; 1
     7aa:	92 07       	cpc	r25, r18
     7ac:	a1 f0       	breq	.+40     	; 0x7d6 <TIMER_COUNTER1_start+0x60>
     7ae:	81 15       	cp	r24, r1
     7b0:	24 e0       	ldi	r18, 0x04	; 4
     7b2:	92 07       	cpc	r25, r18
     7b4:	a1 f0       	breq	.+40     	; 0x7de <TIMER_COUNTER1_start+0x68>
     7b6:	80 34       	cpi	r24, 0x40	; 64
     7b8:	91 05       	cpc	r25, r1
     7ba:	e9 f4       	brne	.+58     	; 0x7f6 <TIMER_COUNTER1_start+0x80>
     7bc:	08 c0       	rjmp	.+16     	; 0x7ce <TIMER_COUNTER1_start+0x58>
     7be:	8e b5       	in	r24, 0x2e	; 46
     7c0:	81 60       	ori	r24, 0x01	; 1
     7c2:	8e bd       	out	0x2e, r24	; 46
     7c4:	1b c0       	rjmp	.+54     	; 0x7fc <TIMER_COUNTER1_start+0x86>
     7c6:	8e b5       	in	r24, 0x2e	; 46
     7c8:	82 60       	ori	r24, 0x02	; 2
     7ca:	8e bd       	out	0x2e, r24	; 46
     7cc:	17 c0       	rjmp	.+46     	; 0x7fc <TIMER_COUNTER1_start+0x86>
     7ce:	8e b5       	in	r24, 0x2e	; 46
     7d0:	83 60       	ori	r24, 0x03	; 3
     7d2:	8e bd       	out	0x2e, r24	; 46
     7d4:	13 c0       	rjmp	.+38     	; 0x7fc <TIMER_COUNTER1_start+0x86>
     7d6:	8e b5       	in	r24, 0x2e	; 46
     7d8:	84 60       	ori	r24, 0x04	; 4
     7da:	8e bd       	out	0x2e, r24	; 46
     7dc:	0f c0       	rjmp	.+30     	; 0x7fc <TIMER_COUNTER1_start+0x86>
     7de:	8e b5       	in	r24, 0x2e	; 46
     7e0:	85 60       	ori	r24, 0x05	; 5
     7e2:	8e bd       	out	0x2e, r24	; 46
     7e4:	0b c0       	rjmp	.+22     	; 0x7fc <TIMER_COUNTER1_start+0x86>
     7e6:	8e b5       	in	r24, 0x2e	; 46
     7e8:	86 60       	ori	r24, 0x06	; 6
     7ea:	8e bd       	out	0x2e, r24	; 46
     7ec:	07 c0       	rjmp	.+14     	; 0x7fc <TIMER_COUNTER1_start+0x86>
     7ee:	8e b5       	in	r24, 0x2e	; 46
     7f0:	87 60       	ori	r24, 0x07	; 7
     7f2:	8e bd       	out	0x2e, r24	; 46
     7f4:	03 c0       	rjmp	.+6      	; 0x7fc <TIMER_COUNTER1_start+0x86>
     7f6:	8e b5       	in	r24, 0x2e	; 46
     7f8:	85 60       	ori	r24, 0x05	; 5
     7fa:	8e bd       	out	0x2e, r24	; 46
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <timer1_state>
     802:	08 95       	ret

00000804 <TIMER_COUNTER1_compoutmodeA>:
     804:	9f b5       	in	r25, 0x2f	; 47
     806:	9f 73       	andi	r25, 0x3F	; 63
     808:	9f bd       	out	0x2f, r25	; 47
     80a:	82 30       	cpi	r24, 0x02	; 2
     80c:	41 f0       	breq	.+16     	; 0x81e <TIMER_COUNTER1_compoutmodeA+0x1a>
     80e:	83 30       	cpi	r24, 0x03	; 3
     810:	51 f0       	breq	.+20     	; 0x826 <TIMER_COUNTER1_compoutmodeA+0x22>
     812:	81 30       	cpi	r24, 0x01	; 1
     814:	59 f4       	brne	.+22     	; 0x82c <TIMER_COUNTER1_compoutmodeA+0x28>
     816:	8f b5       	in	r24, 0x2f	; 47
     818:	80 64       	ori	r24, 0x40	; 64
     81a:	8f bd       	out	0x2f, r24	; 47
     81c:	08 95       	ret
     81e:	8f b5       	in	r24, 0x2f	; 47
     820:	80 68       	ori	r24, 0x80	; 128
     822:	8f bd       	out	0x2f, r24	; 47
     824:	08 95       	ret
     826:	8f b5       	in	r24, 0x2f	; 47
     828:	80 6c       	ori	r24, 0xC0	; 192
     82a:	8f bd       	out	0x2f, r24	; 47
     82c:	08 95       	ret

0000082e <TIMER_COUNTER1_compoutmodeB>:
     82e:	9f b5       	in	r25, 0x2f	; 47
     830:	9f 7c       	andi	r25, 0xCF	; 207
     832:	9f bd       	out	0x2f, r25	; 47
     834:	82 30       	cpi	r24, 0x02	; 2
     836:	41 f0       	breq	.+16     	; 0x848 <TIMER_COUNTER1_compoutmodeB+0x1a>
     838:	83 30       	cpi	r24, 0x03	; 3
     83a:	51 f0       	breq	.+20     	; 0x850 <TIMER_COUNTER1_compoutmodeB+0x22>
     83c:	81 30       	cpi	r24, 0x01	; 1
     83e:	59 f4       	brne	.+22     	; 0x856 <TIMER_COUNTER1_compoutmodeB+0x28>
     840:	8f b5       	in	r24, 0x2f	; 47
     842:	80 61       	ori	r24, 0x10	; 16
     844:	8f bd       	out	0x2f, r24	; 47
     846:	08 95       	ret
     848:	8f b5       	in	r24, 0x2f	; 47
     84a:	80 62       	ori	r24, 0x20	; 32
     84c:	8f bd       	out	0x2f, r24	; 47
     84e:	08 95       	ret
     850:	8f b5       	in	r24, 0x2f	; 47
     852:	80 63       	ori	r24, 0x30	; 48
     854:	8f bd       	out	0x2f, r24	; 47
     856:	08 95       	ret

00000858 <TIMER_COUNTER1_compoutmodeC>:
     858:	9f b5       	in	r25, 0x2f	; 47
     85a:	93 7f       	andi	r25, 0xF3	; 243
     85c:	9f bd       	out	0x2f, r25	; 47
     85e:	82 30       	cpi	r24, 0x02	; 2
     860:	41 f0       	breq	.+16     	; 0x872 <TIMER_COUNTER1_compoutmodeC+0x1a>
     862:	83 30       	cpi	r24, 0x03	; 3
     864:	51 f0       	breq	.+20     	; 0x87a <TIMER_COUNTER1_compoutmodeC+0x22>
     866:	81 30       	cpi	r24, 0x01	; 1
     868:	59 f4       	brne	.+22     	; 0x880 <TIMER_COUNTER1_compoutmodeC+0x28>
     86a:	8f b5       	in	r24, 0x2f	; 47
     86c:	84 60       	ori	r24, 0x04	; 4
     86e:	8f bd       	out	0x2f, r24	; 47
     870:	08 95       	ret
     872:	8f b5       	in	r24, 0x2f	; 47
     874:	88 60       	ori	r24, 0x08	; 8
     876:	8f bd       	out	0x2f, r24	; 47
     878:	08 95       	ret
     87a:	8f b5       	in	r24, 0x2f	; 47
     87c:	8c 60       	ori	r24, 0x0C	; 12
     87e:	8f bd       	out	0x2f, r24	; 47
     880:	08 95       	ret

00000882 <TIMER_COUNTER1_compareA>:
     882:	9b bd       	out	0x2b, r25	; 43
     884:	8a bd       	out	0x2a, r24	; 42
     886:	08 95       	ret

00000888 <TIMER_COUNTER1_compareB>:
     888:	99 bd       	out	0x29, r25	; 41
     88a:	88 bd       	out	0x28, r24	; 40
     88c:	08 95       	ret

0000088e <TIMER_COUNTER1_compareC>:
     88e:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     892:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     896:	08 95       	ret

00000898 <TIMER_COUNTER1_stop>:
     898:	8e b5       	in	r24, 0x2e	; 46
     89a:	88 7f       	andi	r24, 0xF8	; 248
     89c:	8e bd       	out	0x2e, r24	; 46
     89e:	1d bc       	out	0x2d, r1	; 45
     8a0:	1c bc       	out	0x2c, r1	; 44
     8a2:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <timer1_state>
     8a6:	08 95       	ret

000008a8 <TIMER_COUNTER0enable>:
     8a8:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <timer0_state>
     8ac:	23 b7       	in	r18, 0x33	; 51
     8ae:	27 7b       	andi	r18, 0xB7	; 183
     8b0:	23 bf       	out	0x33, r18	; 51
     8b2:	62 30       	cpi	r22, 0x02	; 2
     8b4:	41 f0       	breq	.+16     	; 0x8c6 <TIMER_COUNTER0enable+0x1e>
     8b6:	63 30       	cpi	r22, 0x03	; 3
     8b8:	51 f0       	breq	.+20     	; 0x8ce <TIMER_COUNTER0enable+0x26>
     8ba:	61 30       	cpi	r22, 0x01	; 1
     8bc:	59 f4       	brne	.+22     	; 0x8d4 <TIMER_COUNTER0enable+0x2c>
     8be:	23 b7       	in	r18, 0x33	; 51
     8c0:	20 64       	ori	r18, 0x40	; 64
     8c2:	23 bf       	out	0x33, r18	; 51
     8c4:	07 c0       	rjmp	.+14     	; 0x8d4 <TIMER_COUNTER0enable+0x2c>
     8c6:	23 b7       	in	r18, 0x33	; 51
     8c8:	28 60       	ori	r18, 0x08	; 8
     8ca:	23 bf       	out	0x33, r18	; 51
     8cc:	03 c0       	rjmp	.+6      	; 0x8d4 <TIMER_COUNTER0enable+0x2c>
     8ce:	23 b7       	in	r18, 0x33	; 51
     8d0:	28 64       	ori	r18, 0x48	; 72
     8d2:	23 bf       	out	0x33, r18	; 51
     8d4:	27 b7       	in	r18, 0x37	; 55
     8d6:	2e 7f       	andi	r18, 0xFE	; 254
     8d8:	27 bf       	out	0x37, r18	; 55
     8da:	27 b7       	in	r18, 0x37	; 55
     8dc:	2d 7f       	andi	r18, 0xFD	; 253
     8de:	27 bf       	out	0x37, r18	; 55
     8e0:	42 30       	cpi	r20, 0x02	; 2
     8e2:	41 f0       	breq	.+16     	; 0x8f4 <TIMER_COUNTER0enable+0x4c>
     8e4:	43 30       	cpi	r20, 0x03	; 3
     8e6:	51 f0       	breq	.+20     	; 0x8fc <TIMER_COUNTER0enable+0x54>
     8e8:	41 30       	cpi	r20, 0x01	; 1
     8ea:	71 f4       	brne	.+28     	; 0x908 <TIMER_COUNTER0enable+0x60>
     8ec:	27 b7       	in	r18, 0x37	; 55
     8ee:	21 60       	ori	r18, 0x01	; 1
     8f0:	27 bf       	out	0x37, r18	; 55
     8f2:	0a c0       	rjmp	.+20     	; 0x908 <TIMER_COUNTER0enable+0x60>
     8f4:	27 b7       	in	r18, 0x37	; 55
     8f6:	22 60       	ori	r18, 0x02	; 2
     8f8:	27 bf       	out	0x37, r18	; 55
     8fa:	06 c0       	rjmp	.+12     	; 0x908 <TIMER_COUNTER0enable+0x60>
     8fc:	27 b7       	in	r18, 0x37	; 55
     8fe:	21 60       	ori	r18, 0x01	; 1
     900:	27 bf       	out	0x37, r18	; 55
     902:	27 b7       	in	r18, 0x37	; 55
     904:	22 60       	ori	r18, 0x02	; 2
     906:	27 bf       	out	0x37, r18	; 55
     908:	2d e9       	ldi	r18, 0x9D	; 157
     90a:	33 e0       	ldi	r19, 0x03	; 3
     90c:	fc 01       	movw	r30, r24
     90e:	31 83       	std	Z+1, r19	; 0x01
     910:	20 83       	st	Z, r18
     912:	22 eb       	ldi	r18, 0xB2	; 178
     914:	33 e0       	ldi	r19, 0x03	; 3
     916:	37 83       	std	Z+7, r19	; 0x07
     918:	26 83       	std	Z+6, r18	; 0x06
     91a:	28 e5       	ldi	r18, 0x58	; 88
     91c:	33 e0       	ldi	r19, 0x03	; 3
     91e:	35 87       	std	Z+13, r19	; 0x0d
     920:	24 87       	std	Z+12, r18	; 0x0c
     922:	24 eb       	ldi	r18, 0xB4	; 180
     924:	33 e0       	ldi	r19, 0x03	; 3
     926:	37 87       	std	Z+15, r19	; 0x0f
     928:	26 87       	std	Z+14, r18	; 0x0e
     92a:	08 95       	ret

0000092c <TIMER_COUNTER1enable>:
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	dc 01       	movw	r26, r24
     932:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <timer1_state>
     936:	8f b5       	in	r24, 0x2f	; 47
     938:	8c 7f       	andi	r24, 0xFC	; 252
     93a:	8f bd       	out	0x2f, r24	; 47
     93c:	8e b5       	in	r24, 0x2e	; 46
     93e:	87 7e       	andi	r24, 0xE7	; 231
     940:	8e bd       	out	0x2e, r24	; 46
     942:	06 2f       	mov	r16, r22
     944:	10 e0       	ldi	r17, 0x00	; 0
     946:	f8 01       	movw	r30, r16
     948:	31 97       	sbiw	r30, 0x01	; 1
     94a:	ef 30       	cpi	r30, 0x0F	; 15
     94c:	f1 05       	cpc	r31, r1
     94e:	08 f0       	brcs	.+2      	; 0x952 <TIMER_COUNTER1enable+0x26>
     950:	5a c0       	rjmp	.+180    	; 0xa06 <TIMER_COUNTER1enable+0xda>
     952:	ea 5b       	subi	r30, 0xBA	; 186
     954:	ff 4f       	sbci	r31, 0xFF	; 255
     956:	0c 94 9e 1e 	jmp	0x3d3c	; 0x3d3c <__tablejump2__>
     95a:	8f b5       	in	r24, 0x2f	; 47
     95c:	81 60       	ori	r24, 0x01	; 1
     95e:	8f bd       	out	0x2f, r24	; 47
     960:	52 c0       	rjmp	.+164    	; 0xa06 <TIMER_COUNTER1enable+0xda>
     962:	8f b5       	in	r24, 0x2f	; 47
     964:	82 60       	ori	r24, 0x02	; 2
     966:	8f bd       	out	0x2f, r24	; 47
     968:	4e c0       	rjmp	.+156    	; 0xa06 <TIMER_COUNTER1enable+0xda>
     96a:	8f b5       	in	r24, 0x2f	; 47
     96c:	83 60       	ori	r24, 0x03	; 3
     96e:	8f bd       	out	0x2f, r24	; 47
     970:	4a c0       	rjmp	.+148    	; 0xa06 <TIMER_COUNTER1enable+0xda>
     972:	8e b5       	in	r24, 0x2e	; 46
     974:	88 60       	ori	r24, 0x08	; 8
     976:	8e bd       	out	0x2e, r24	; 46
     978:	46 c0       	rjmp	.+140    	; 0xa06 <TIMER_COUNTER1enable+0xda>
     97a:	8f b5       	in	r24, 0x2f	; 47
     97c:	81 60       	ori	r24, 0x01	; 1
     97e:	8f bd       	out	0x2f, r24	; 47
     980:	8e b5       	in	r24, 0x2e	; 46
     982:	88 60       	ori	r24, 0x08	; 8
     984:	8e bd       	out	0x2e, r24	; 46
     986:	3f c0       	rjmp	.+126    	; 0xa06 <TIMER_COUNTER1enable+0xda>
     988:	8f b5       	in	r24, 0x2f	; 47
     98a:	82 60       	ori	r24, 0x02	; 2
     98c:	8f bd       	out	0x2f, r24	; 47
     98e:	8e b5       	in	r24, 0x2e	; 46
     990:	88 60       	ori	r24, 0x08	; 8
     992:	8e bd       	out	0x2e, r24	; 46
     994:	38 c0       	rjmp	.+112    	; 0xa06 <TIMER_COUNTER1enable+0xda>
     996:	8f b5       	in	r24, 0x2f	; 47
     998:	83 60       	ori	r24, 0x03	; 3
     99a:	8f bd       	out	0x2f, r24	; 47
     99c:	8e b5       	in	r24, 0x2e	; 46
     99e:	88 60       	ori	r24, 0x08	; 8
     9a0:	8e bd       	out	0x2e, r24	; 46
     9a2:	31 c0       	rjmp	.+98     	; 0xa06 <TIMER_COUNTER1enable+0xda>
     9a4:	8e b5       	in	r24, 0x2e	; 46
     9a6:	80 61       	ori	r24, 0x10	; 16
     9a8:	8e bd       	out	0x2e, r24	; 46
     9aa:	2d c0       	rjmp	.+90     	; 0xa06 <TIMER_COUNTER1enable+0xda>
     9ac:	8f b5       	in	r24, 0x2f	; 47
     9ae:	81 60       	ori	r24, 0x01	; 1
     9b0:	8f bd       	out	0x2f, r24	; 47
     9b2:	8e b5       	in	r24, 0x2e	; 46
     9b4:	80 61       	ori	r24, 0x10	; 16
     9b6:	8e bd       	out	0x2e, r24	; 46
     9b8:	26 c0       	rjmp	.+76     	; 0xa06 <TIMER_COUNTER1enable+0xda>
     9ba:	8f b5       	in	r24, 0x2f	; 47
     9bc:	82 60       	ori	r24, 0x02	; 2
     9be:	8f bd       	out	0x2f, r24	; 47
     9c0:	8e b5       	in	r24, 0x2e	; 46
     9c2:	80 61       	ori	r24, 0x10	; 16
     9c4:	8e bd       	out	0x2e, r24	; 46
     9c6:	1f c0       	rjmp	.+62     	; 0xa06 <TIMER_COUNTER1enable+0xda>
     9c8:	8f b5       	in	r24, 0x2f	; 47
     9ca:	83 60       	ori	r24, 0x03	; 3
     9cc:	8f bd       	out	0x2f, r24	; 47
     9ce:	8e b5       	in	r24, 0x2e	; 46
     9d0:	80 61       	ori	r24, 0x10	; 16
     9d2:	8e bd       	out	0x2e, r24	; 46
     9d4:	18 c0       	rjmp	.+48     	; 0xa06 <TIMER_COUNTER1enable+0xda>
     9d6:	8e b5       	in	r24, 0x2e	; 46
     9d8:	88 61       	ori	r24, 0x18	; 24
     9da:	8e bd       	out	0x2e, r24	; 46
     9dc:	14 c0       	rjmp	.+40     	; 0xa06 <TIMER_COUNTER1enable+0xda>
     9de:	8f b5       	in	r24, 0x2f	; 47
     9e0:	81 60       	ori	r24, 0x01	; 1
     9e2:	8f bd       	out	0x2f, r24	; 47
     9e4:	8e b5       	in	r24, 0x2e	; 46
     9e6:	88 61       	ori	r24, 0x18	; 24
     9e8:	8e bd       	out	0x2e, r24	; 46
     9ea:	0d c0       	rjmp	.+26     	; 0xa06 <TIMER_COUNTER1enable+0xda>
     9ec:	8f b5       	in	r24, 0x2f	; 47
     9ee:	82 60       	ori	r24, 0x02	; 2
     9f0:	8f bd       	out	0x2f, r24	; 47
     9f2:	8e b5       	in	r24, 0x2e	; 46
     9f4:	88 61       	ori	r24, 0x18	; 24
     9f6:	8e bd       	out	0x2e, r24	; 46
     9f8:	06 c0       	rjmp	.+12     	; 0xa06 <TIMER_COUNTER1enable+0xda>
     9fa:	8f b5       	in	r24, 0x2f	; 47
     9fc:	83 60       	ori	r24, 0x03	; 3
     9fe:	8f bd       	out	0x2f, r24	; 47
     a00:	8e b5       	in	r24, 0x2e	; 46
     a02:	88 61       	ori	r24, 0x18	; 24
     a04:	8e bd       	out	0x2e, r24	; 46
     a06:	8f b5       	in	r24, 0x2f	; 47
     a08:	83 70       	andi	r24, 0x03	; 3
     a0a:	8f bd       	out	0x2f, r24	; 47
     a0c:	87 b7       	in	r24, 0x37	; 55
     a0e:	83 7c       	andi	r24, 0xC3	; 195
     a10:	87 bf       	out	0x37, r24	; 55
     a12:	ed e7       	ldi	r30, 0x7D	; 125
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	80 81       	ld	r24, Z
     a18:	8e 7f       	andi	r24, 0xFE	; 254
     a1a:	80 83       	st	Z, r24
     a1c:	50 e0       	ldi	r21, 0x00	; 0
     a1e:	fa 01       	movw	r30, r20
     a20:	31 97       	sbiw	r30, 0x01	; 1
     a22:	ec 30       	cpi	r30, 0x0C	; 12
     a24:	f1 05       	cpc	r31, r1
     a26:	08 f0       	brcs	.+2      	; 0xa2a <TIMER_COUNTER1enable+0xfe>
     a28:	44 c0       	rjmp	.+136    	; 0xab2 <TIMER_COUNTER1enable+0x186>
     a2a:	eb 5a       	subi	r30, 0xAB	; 171
     a2c:	ff 4f       	sbci	r31, 0xFF	; 255
     a2e:	0c 94 9e 1e 	jmp	0x3d3c	; 0x3d3c <__tablejump2__>
     a32:	87 b7       	in	r24, 0x37	; 55
     a34:	84 60       	ori	r24, 0x04	; 4
     a36:	87 bf       	out	0x37, r24	; 55
     a38:	3c c0       	rjmp	.+120    	; 0xab2 <TIMER_COUNTER1enable+0x186>
     a3a:	87 b7       	in	r24, 0x37	; 55
     a3c:	80 61       	ori	r24, 0x10	; 16
     a3e:	87 bf       	out	0x37, r24	; 55
     a40:	38 c0       	rjmp	.+112    	; 0xab2 <TIMER_COUNTER1enable+0x186>
     a42:	87 b7       	in	r24, 0x37	; 55
     a44:	88 60       	ori	r24, 0x08	; 8
     a46:	87 bf       	out	0x37, r24	; 55
     a48:	34 c0       	rjmp	.+104    	; 0xab2 <TIMER_COUNTER1enable+0x186>
     a4a:	ed e7       	ldi	r30, 0x7D	; 125
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	80 81       	ld	r24, Z
     a50:	81 60       	ori	r24, 0x01	; 1
     a52:	80 83       	st	Z, r24
     a54:	2e c0       	rjmp	.+92     	; 0xab2 <TIMER_COUNTER1enable+0x186>
     a56:	87 b7       	in	r24, 0x37	; 55
     a58:	80 62       	ori	r24, 0x20	; 32
     a5a:	87 bf       	out	0x37, r24	; 55
     a5c:	2a c0       	rjmp	.+84     	; 0xab2 <TIMER_COUNTER1enable+0x186>
     a5e:	87 b7       	in	r24, 0x37	; 55
     a60:	84 61       	ori	r24, 0x14	; 20
     a62:	87 bf       	out	0x37, r24	; 55
     a64:	26 c0       	rjmp	.+76     	; 0xab2 <TIMER_COUNTER1enable+0x186>
     a66:	87 b7       	in	r24, 0x37	; 55
     a68:	8c 60       	ori	r24, 0x0C	; 12
     a6a:	87 bf       	out	0x37, r24	; 55
     a6c:	22 c0       	rjmp	.+68     	; 0xab2 <TIMER_COUNTER1enable+0x186>
     a6e:	87 b7       	in	r24, 0x37	; 55
     a70:	84 60       	ori	r24, 0x04	; 4
     a72:	87 bf       	out	0x37, r24	; 55
     a74:	ed e7       	ldi	r30, 0x7D	; 125
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	80 81       	ld	r24, Z
     a7a:	81 60       	ori	r24, 0x01	; 1
     a7c:	80 83       	st	Z, r24
     a7e:	19 c0       	rjmp	.+50     	; 0xab2 <TIMER_COUNTER1enable+0x186>
     a80:	87 b7       	in	r24, 0x37	; 55
     a82:	84 62       	ori	r24, 0x24	; 36
     a84:	87 bf       	out	0x37, r24	; 55
     a86:	15 c0       	rjmp	.+42     	; 0xab2 <TIMER_COUNTER1enable+0x186>
     a88:	87 b7       	in	r24, 0x37	; 55
     a8a:	8c 61       	ori	r24, 0x1C	; 28
     a8c:	87 bf       	out	0x37, r24	; 55
     a8e:	11 c0       	rjmp	.+34     	; 0xab2 <TIMER_COUNTER1enable+0x186>
     a90:	87 b7       	in	r24, 0x37	; 55
     a92:	8c 61       	ori	r24, 0x1C	; 28
     a94:	87 bf       	out	0x37, r24	; 55
     a96:	ed e7       	ldi	r30, 0x7D	; 125
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	81 60       	ori	r24, 0x01	; 1
     a9e:	80 83       	st	Z, r24
     aa0:	08 c0       	rjmp	.+16     	; 0xab2 <TIMER_COUNTER1enable+0x186>
     aa2:	87 b7       	in	r24, 0x37	; 55
     aa4:	88 61       	ori	r24, 0x18	; 24
     aa6:	87 bf       	out	0x37, r24	; 55
     aa8:	ed e7       	ldi	r30, 0x7D	; 125
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	80 81       	ld	r24, Z
     aae:	81 60       	ori	r24, 0x01	; 1
     ab0:	80 83       	st	Z, r24
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	94 e0       	ldi	r25, 0x04	; 4
     ab6:	11 96       	adiw	r26, 0x01	; 1
     ab8:	9c 93       	st	X, r25
     aba:	8e 93       	st	-X, r24
     abc:	87 e1       	ldi	r24, 0x17	; 23
     abe:	94 e0       	ldi	r25, 0x04	; 4
     ac0:	13 96       	adiw	r26, 0x03	; 3
     ac2:	9c 93       	st	X, r25
     ac4:	8e 93       	st	-X, r24
     ac6:	12 97       	sbiw	r26, 0x02	; 2
     ac8:	8c e2       	ldi	r24, 0x2C	; 44
     aca:	94 e0       	ldi	r25, 0x04	; 4
     acc:	15 96       	adiw	r26, 0x05	; 5
     ace:	9c 93       	st	X, r25
     ad0:	8e 93       	st	-X, r24
     ad2:	14 97       	sbiw	r26, 0x04	; 4
     ad4:	81 e4       	ldi	r24, 0x41	; 65
     ad6:	94 e0       	ldi	r25, 0x04	; 4
     ad8:	17 96       	adiw	r26, 0x07	; 7
     ada:	9c 93       	st	X, r25
     adc:	8e 93       	st	-X, r24
     ade:	16 97       	sbiw	r26, 0x06	; 6
     ae0:	84 e4       	ldi	r24, 0x44	; 68
     ae2:	94 e0       	ldi	r25, 0x04	; 4
     ae4:	19 96       	adiw	r26, 0x09	; 9
     ae6:	9c 93       	st	X, r25
     ae8:	8e 93       	st	-X, r24
     aea:	18 97       	sbiw	r26, 0x08	; 8
     aec:	87 e4       	ldi	r24, 0x47	; 71
     aee:	94 e0       	ldi	r25, 0x04	; 4
     af0:	1b 96       	adiw	r26, 0x0b	; 11
     af2:	9c 93       	st	X, r25
     af4:	8e 93       	st	-X, r24
     af6:	1a 97       	sbiw	r26, 0x0a	; 10
     af8:	8b eb       	ldi	r24, 0xBB	; 187
     afa:	93 e0       	ldi	r25, 0x03	; 3
     afc:	1d 96       	adiw	r26, 0x0d	; 13
     afe:	9c 93       	st	X, r25
     b00:	8e 93       	st	-X, r24
     b02:	1c 97       	sbiw	r26, 0x0c	; 12
     b04:	8c e4       	ldi	r24, 0x4C	; 76
     b06:	94 e0       	ldi	r25, 0x04	; 4
     b08:	1f 96       	adiw	r26, 0x0f	; 15
     b0a:	9c 93       	st	X, r25
     b0c:	8e 93       	st	-X, r24
     b0e:	1e 97       	sbiw	r26, 0x0e	; 14
     b10:	cd 01       	movw	r24, r26
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	08 95       	ret

00000b18 <__vector_16>:
	timer3_state=0;
}
/***Interrupt***/
// So that main will not freeze when not defined, therefore exclude here! before use.
//ISR(TIMER0_COMP_vect){ }
ISR(TIMER0_OVF_vect){ }
     b18:	1f 92       	push	r1
     b1a:	0f 92       	push	r0
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	0f 92       	push	r0
     b20:	11 24       	eor	r1, r1
     b22:	0f 90       	pop	r0
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	0f 90       	pop	r0
     b28:	1f 90       	pop	r1
     b2a:	18 95       	reti

00000b2c <__vector_11>:
ISR(TIMER1_CAPT_vect){ }
     b2c:	1f 92       	push	r1
     b2e:	0f 92       	push	r0
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	0f 92       	push	r0
     b34:	11 24       	eor	r1, r1
     b36:	0f 90       	pop	r0
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	0f 90       	pop	r0
     b3c:	1f 90       	pop	r1
     b3e:	18 95       	reti

00000b40 <__vector_12>:
ISR(TIMER1_COMPA_vect){ }
     b40:	1f 92       	push	r1
     b42:	0f 92       	push	r0
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	0f 92       	push	r0
     b48:	11 24       	eor	r1, r1
     b4a:	0f 90       	pop	r0
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	0f 90       	pop	r0
     b50:	1f 90       	pop	r1
     b52:	18 95       	reti

00000b54 <__vector_13>:
ISR(TIMER1_COMPB_vect){ }
     b54:	1f 92       	push	r1
     b56:	0f 92       	push	r0
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	0f 92       	push	r0
     b5c:	11 24       	eor	r1, r1
     b5e:	0f 90       	pop	r0
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	0f 90       	pop	r0
     b64:	1f 90       	pop	r1
     b66:	18 95       	reti

00000b68 <__vector_24>:
ISR(TIMER1_COMPC_vect){ }
     b68:	1f 92       	push	r1
     b6a:	0f 92       	push	r0
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	0f 92       	push	r0
     b70:	11 24       	eor	r1, r1
     b72:	0f 90       	pop	r0
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	0f 90       	pop	r0
     b78:	1f 90       	pop	r1
     b7a:	18 95       	reti

00000b7c <__vector_14>:
ISR(TIMER1_OVF_vect){ }
     b7c:	1f 92       	push	r1
     b7e:	0f 92       	push	r0
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	0f 92       	push	r0
     b84:	11 24       	eor	r1, r1
     b86:	0f 90       	pop	r0
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	0f 90       	pop	r0
     b8c:	1f 90       	pop	r1
     b8e:	18 95       	reti

00000b90 <__vector_10>:
ISR(TIMER2_OVF_vect){ }
     b90:	1f 92       	push	r1
     b92:	0f 92       	push	r0
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	0f 92       	push	r0
     b98:	11 24       	eor	r1, r1
     b9a:	0f 90       	pop	r0
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	0f 90       	pop	r0
     ba0:	1f 90       	pop	r1
     ba2:	18 95       	reti

00000ba4 <__vector_25>:
ISR(TIMER3_CAPT_vect){ }
     ba4:	1f 92       	push	r1
     ba6:	0f 92       	push	r0
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	0f 92       	push	r0
     bac:	11 24       	eor	r1, r1
     bae:	0f 90       	pop	r0
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	0f 90       	pop	r0
     bb4:	1f 90       	pop	r1
     bb6:	18 95       	reti

00000bb8 <__vector_26>:
ISR(TIMER3_COMPA_vect){ }
     bb8:	1f 92       	push	r1
     bba:	0f 92       	push	r0
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	0f 92       	push	r0
     bc0:	11 24       	eor	r1, r1
     bc2:	0f 90       	pop	r0
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	0f 90       	pop	r0
     bc8:	1f 90       	pop	r1
     bca:	18 95       	reti

00000bcc <__vector_27>:
ISR(TIMER3_COMPB_vect){ }
     bcc:	1f 92       	push	r1
     bce:	0f 92       	push	r0
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	0f 92       	push	r0
     bd4:	11 24       	eor	r1, r1
     bd6:	0f 90       	pop	r0
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	0f 90       	pop	r0
     bdc:	1f 90       	pop	r1
     bde:	18 95       	reti

00000be0 <__vector_28>:
ISR(TIMER3_COMPC_vect){ }
     be0:	1f 92       	push	r1
     be2:	0f 92       	push	r0
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	0f 92       	push	r0
     be8:	11 24       	eor	r1, r1
     bea:	0f 90       	pop	r0
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	0f 90       	pop	r0
     bf0:	1f 90       	pop	r1
     bf2:	18 95       	reti

00000bf4 <__vector_29>:
ISR(TIMER3_OVF_vect){ }
     bf4:	1f 92       	push	r1
     bf6:	0f 92       	push	r0
     bf8:	0f b6       	in	r0, 0x3f	; 63
     bfa:	0f 92       	push	r0
     bfc:	11 24       	eor	r1, r1
     bfe:	0f 90       	pop	r0
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	0f 90       	pop	r0
     c04:	1f 90       	pop	r1
     c06:	18 95       	reti

00000c08 <__vector_18>:
	}else{
		uart1_index=0;
		ret=uart1_msg;
	}
	return ret;
}
     c08:	1f 92       	push	r1
     c0a:	0f 92       	push	r0
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	0f 92       	push	r0
     c10:	11 24       	eor	r1, r1
     c12:	0b b6       	in	r0, 0x3b	; 59
     c14:	0f 92       	push	r0
     c16:	8f 93       	push	r24
     c18:	9f 93       	push	r25
     c1a:	ef 93       	push	r30
     c1c:	ff 93       	push	r31
     c1e:	8b b1       	in	r24, 0x0b	; 11
     c20:	9a b1       	in	r25, 0x0a	; 10
     c22:	88 71       	andi	r24, 0x18	; 24
     c24:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <UART_LastRxError>
     c28:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <UART_RxHead>
     c2c:	ef 5f       	subi	r30, 0xFF	; 255
     c2e:	ef 73       	andi	r30, 0x3F	; 63
     c30:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <UART_RxTail>
     c34:	e9 13       	cpse	r30, r25
     c36:	04 c0       	rjmp	.+8      	; 0xc40 <__vector_18+0x38>
     c38:	82 e0       	ldi	r24, 0x02	; 2
     c3a:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <UART_LastRxError>
     c3e:	0f c0       	rjmp	.+30     	; 0xc5e <__vector_18+0x56>
     c40:	9c b1       	in	r25, 0x0c	; 12
     c42:	e0 93 5e 03 	sts	0x035E, r30	; 0x80035e <UART_RxHead>
     c46:	88 23       	and	r24, r24
     c48:	31 f0       	breq	.+12     	; 0xc56 <__vector_18+0x4e>
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	ef 59       	subi	r30, 0x9F	; 159
     c4e:	fc 4f       	sbci	r31, 0xFC	; 252
     c50:	88 e5       	ldi	r24, 0x58	; 88
     c52:	80 83       	st	Z, r24
     c54:	04 c0       	rjmp	.+8      	; 0xc5e <__vector_18+0x56>
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	ef 59       	subi	r30, 0x9F	; 159
     c5a:	fc 4f       	sbci	r31, 0xFC	; 252
     c5c:	90 83       	st	Z, r25
     c5e:	ff 91       	pop	r31
     c60:	ef 91       	pop	r30
     c62:	9f 91       	pop	r25
     c64:	8f 91       	pop	r24
     c66:	0f 90       	pop	r0
     c68:	0b be       	out	0x3b, r0	; 59
     c6a:	0f 90       	pop	r0
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	0f 90       	pop	r0
     c70:	1f 90       	pop	r1
     c72:	18 95       	reti

00000c74 <__vector_19>:
     c74:	1f 92       	push	r1
     c76:	0f 92       	push	r0
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	0f 92       	push	r0
     c7c:	11 24       	eor	r1, r1
     c7e:	0b b6       	in	r0, 0x3b	; 59
     c80:	0f 92       	push	r0
     c82:	8f 93       	push	r24
     c84:	9f 93       	push	r25
     c86:	ef 93       	push	r30
     c88:	ff 93       	push	r31
     c8a:	e0 91 99 02 	lds	r30, 0x0299	; 0x800299 <UART_TxTail>
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	e2 5e       	subi	r30, 0xE2	; 226
     c92:	fc 4f       	sbci	r31, 0xFC	; 252
     c94:	80 81       	ld	r24, Z
     c96:	8c b9       	out	0x0c, r24	; 12
     c98:	10 82       	st	Z, r1
     c9a:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <UART_TxTail>
     c9e:	8f 5f       	subi	r24, 0xFF	; 255
     ca0:	8f 73       	andi	r24, 0x3F	; 63
     ca2:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <UART_TxTail>
     ca6:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <UART_TxHead>
     caa:	89 13       	cpse	r24, r25
     cac:	01 c0       	rjmp	.+2      	; 0xcb0 <__vector_19+0x3c>
     cae:	55 98       	cbi	0x0a, 5	; 10
     cb0:	ff 91       	pop	r31
     cb2:	ef 91       	pop	r30
     cb4:	9f 91       	pop	r25
     cb6:	8f 91       	pop	r24
     cb8:	0f 90       	pop	r0
     cba:	0b be       	out	0x3b, r0	; 59
     cbc:	0f 90       	pop	r0
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	0f 90       	pop	r0
     cc2:	1f 90       	pop	r1
     cc4:	18 95       	reti

00000cc6 <__vector_30>:
	UART1_TxHead = UART1_TxTail;
}
/***Interrupt***/
/***SIGNAL(UART1_RECEIVE_INTERRUPT)***/
SIGNAL(UART1_RECEIVE_INTERRUPT)
{
     cc6:	1f 92       	push	r1
     cc8:	0f 92       	push	r0
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	0f 92       	push	r0
     cce:	11 24       	eor	r1, r1
     cd0:	0b b6       	in	r0, 0x3b	; 59
     cd2:	0f 92       	push	r0
     cd4:	8f 93       	push	r24
     cd6:	9f 93       	push	r25
     cd8:	ef 93       	push	r30
     cda:	ff 93       	push	r31
    unsigned char tmphead;
	unsigned char data;
	unsigned char bit9;
    unsigned char usr;
    /***read UART status register and UART data register***/
	usr  = UART1_STATUS;
     cdc:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    bit9 = UART1_CONTROL;
     ce0:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    bit9 = 0x01 & (bit9>>1);
    /***/
    UART1_LastRxError = (usr & (_BV(FE1)|_BV(DOR1)));
     ce4:	88 71       	andi	r24, 0x18	; 24
     ce6:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <UART1_LastRxError>
	/***calculate buffer index***/
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
     cea:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <UART1_RxHead>
     cee:	ef 5f       	subi	r30, 0xFF	; 255
     cf0:	ef 73       	andi	r30, 0x3F	; 63
    if ( tmphead == UART1_RxTail ) {	
     cf2:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <UART1_RxTail>
     cf6:	e9 13       	cpse	r30, r25
     cf8:	04 c0       	rjmp	.+8      	; 0xd02 <__vector_30+0x3c>
        /***error: receive buffer overflow, caracter is lost***/
        UART1_LastRxError = UART_BUFFER_OVERFLOW >> 8; 
     cfa:	82 e0       	ldi	r24, 0x02	; 2
     cfc:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <UART1_LastRxError>
     d00:	10 c0       	rjmp	.+32     	; 0xd22 <__vector_30+0x5c>
	}else{
		data = UART1_DATA;
     d02:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
        /***store new index***/
        UART1_RxHead = tmphead;
     d06:	e0 93 9a 02 	sts	0x029A, r30	; 0x80029a <UART1_RxHead>
		if(UART1_LastRxError){
     d0a:	88 23       	and	r24, r24
     d0c:	31 f0       	breq	.+12     	; 0xd1a <__vector_30+0x54>
			/***store indication data error in buffer***/
			UART1_RxBuf[tmphead] = 'X';
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	e9 5a       	subi	r30, 0xA9	; 169
     d12:	fd 4f       	sbci	r31, 0xFD	; 253
     d14:	88 e5       	ldi	r24, 0x58	; 88
     d16:	80 83       	st	Z, r24
     d18:	04 c0       	rjmp	.+8      	; 0xd22 <__vector_30+0x5c>
		}else{
			/***store received data in buffer***/
			UART1_RxBuf[tmphead] = data;
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	e9 5a       	subi	r30, 0xA9	; 169
     d1e:	fd 4f       	sbci	r31, 0xFD	; 253
     d20:	90 83       	st	Z, r25
		}
    }
}
     d22:	ff 91       	pop	r31
     d24:	ef 91       	pop	r30
     d26:	9f 91       	pop	r25
     d28:	8f 91       	pop	r24
     d2a:	0f 90       	pop	r0
     d2c:	0b be       	out	0x3b, r0	; 59
     d2e:	0f 90       	pop	r0
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	0f 90       	pop	r0
     d34:	1f 90       	pop	r1
     d36:	18 95       	reti

00000d38 <__vector_31>:
/***SIGNAL(UART1_TRANSMIT_INTERRUPT)***/
SIGNAL(UART1_TRANSMIT_INTERRUPT)
{
     d38:	1f 92       	push	r1
     d3a:	0f 92       	push	r0
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	0f 92       	push	r0
     d40:	11 24       	eor	r1, r1
     d42:	0b b6       	in	r0, 0x3b	; 59
     d44:	0f 92       	push	r0
     d46:	8f 93       	push	r24
     d48:	9f 93       	push	r25
     d4a:	ef 93       	push	r30
     d4c:	ff 93       	push	r31
	uint8_t tail = UART1_TxTail;
	UART1_DATA = UART1_TxBuf[tail];
     d4e:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <UART1_TxTail>
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	e2 52       	subi	r30, 0x22	; 34
     d56:	fd 4f       	sbci	r31, 0xFD	; 253
     d58:	80 81       	ld	r24, Z
     d5a:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	UART1_TxBuf[tail]='\0';
     d5e:	10 82       	st	Z, r1
	UART1_TxTail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
     d60:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <UART1_TxTail>
     d64:	8f 5f       	subi	r24, 0xFF	; 255
     d66:	8f 73       	andi	r24, 0x3F	; 63
     d68:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <UART1_TxTail>
	if ( UART1_TxTail != UART1_TxHead )
     d6c:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <UART1_TxHead>
     d70:	89 13       	cpse	r24, r25
     d72:	05 c0       	rjmp	.+10     	; 0xd7e <__vector_31+0x46>
        ;
    else
		UART1_CONTROL &= ~_BV(UART1_UDRIE);
     d74:	ea e9       	ldi	r30, 0x9A	; 154
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	8f 7d       	andi	r24, 0xDF	; 223
     d7c:	80 83       	st	Z, r24
}
     d7e:	ff 91       	pop	r31
     d80:	ef 91       	pop	r30
     d82:	9f 91       	pop	r25
     d84:	8f 91       	pop	r24
     d86:	0f 90       	pop	r0
     d88:	0b be       	out	0x3b, r0	; 59
     d8a:	0f 90       	pop	r0
     d8c:	0f be       	out	0x3f, r0	; 63
     d8e:	0f 90       	pop	r0
     d90:	1f 90       	pop	r1
     d92:	18 95       	reti

00000d94 <FUNCpinmatch>:
}
//pinmatch
uint8_t FUNCpinmatch(uint8_t match, uint8_t pin, uint8_t HL)
{
	uint8_t result;
	result=match&pin;
     d94:	68 23       	and	r22, r24
	if(HL){
     d96:	44 23       	and	r20, r20
     d98:	21 f0       	breq	.+8      	; 0xda2 <FUNCpinmatch+0xe>
		if(result==match);
     d9a:	86 17       	cp	r24, r22
     d9c:	21 f0       	breq	.+8      	; 0xda6 <FUNCpinmatch+0x12>
		else
			result=0;
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	08 95       	ret
	}else{
		if(result)
     da2:	61 11       	cpse	r22, r1
			result=0;
     da4:	80 e0       	ldi	r24, 0x00	; 0
		else
			result=match;
	}
	return result;
}
     da6:	08 95       	ret

00000da8 <FUNChmerge>:
// hmerge
uint8_t FUNChmerge(uint8_t X, uint8_t Y)
{
	return (X | Y);
}
     da8:	86 2b       	or	r24, r22
     daa:	08 95       	ret

00000dac <FUNClmerge>:
// lmerge
uint8_t FUNClmerge(uint8_t X, uint8_t Y)
{
	return (X & Y);
}
     dac:	86 23       	and	r24, r22
     dae:	08 95       	ret

00000db0 <FUNChh>:
uint8_t FUNChh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi&xf;
	return i;
}
     db0:	86 23       	and	r24, r22
     db2:	08 95       	ret

00000db4 <FUNCll>:
// ll
uint8_t FUNCll(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi|xf;
	return ~i;
     db4:	86 2b       	or	r24, r22
}
     db6:	80 95       	com	r24
     db8:	08 95       	ret

00000dba <FUNClh>:
// lh
uint8_t FUNClh(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xi^xf;
     dba:	86 27       	eor	r24, r22
	i&=xf;
	return i;
}
     dbc:	86 23       	and	r24, r22
     dbe:	08 95       	ret

00000dc0 <FUNChl>:
// hl
uint8_t FUNChl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	i=xf^xi;
     dc0:	60 95       	com	r22
	i&=xi;
	return i;
}
     dc2:	86 23       	and	r24, r22
     dc4:	08 95       	ret

00000dc6 <FUNCdiff>:
// diff
uint8_t FUNCdiff(uint8_t xi, uint8_t xf)
{
	return xf^xi;
}
     dc6:	86 27       	eor	r24, r22
     dc8:	08 95       	ret

00000dca <FUNCswap>:
// interchange *px and *py
void FUNCswap(long *px, long *py)
{
     dca:	cf 92       	push	r12
     dcc:	df 92       	push	r13
     dce:	ef 92       	push	r14
     dd0:	ff 92       	push	r15
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
	long temp;
	temp = *px;
     dd6:	fc 01       	movw	r30, r24
     dd8:	00 81       	ld	r16, Z
     dda:	11 81       	ldd	r17, Z+1	; 0x01
     ddc:	22 81       	ldd	r18, Z+2	; 0x02
     dde:	33 81       	ldd	r19, Z+3	; 0x03
	*px = *py;
     de0:	fb 01       	movw	r30, r22
     de2:	c0 80       	ld	r12, Z
     de4:	d1 80       	ldd	r13, Z+1	; 0x01
     de6:	e2 80       	ldd	r14, Z+2	; 0x02
     de8:	f3 80       	ldd	r15, Z+3	; 0x03
     dea:	fc 01       	movw	r30, r24
     dec:	c0 82       	st	Z, r12
     dee:	d1 82       	std	Z+1, r13	; 0x01
     df0:	e2 82       	std	Z+2, r14	; 0x02
     df2:	f3 82       	std	Z+3, r15	; 0x03
	*py = temp;
     df4:	fb 01       	movw	r30, r22
     df6:	00 83       	st	Z, r16
     df8:	11 83       	std	Z+1, r17	; 0x01
     dfa:	22 83       	std	Z+2, r18	; 0x02
     dfc:	33 83       	std	Z+3, r19	; 0x03
}
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	ef 90       	pop	r14
     e06:	df 90       	pop	r13
     e08:	cf 90       	pop	r12
     e0a:	08 95       	ret

00000e0c <FUNCcopy>:
// copy: copy 'from' into 'to'; assume to is big enough
void FUNCcopy(char to[], char from[])
{
	int i;
	i = 0;
	while ((to[i] = from[i]) != '\0')
     e0c:	fb 01       	movw	r30, r22
     e0e:	20 81       	ld	r18, Z
     e10:	fc 01       	movw	r30, r24
     e12:	20 83       	st	Z, r18
     e14:	22 23       	and	r18, r18
     e16:	39 f0       	breq	.+14     	; 0xe26 <FUNCcopy+0x1a>
     e18:	db 01       	movw	r26, r22
     e1a:	11 96       	adiw	r26, 0x01	; 1
     e1c:	31 96       	adiw	r30, 0x01	; 1
     e1e:	9d 91       	ld	r25, X+
     e20:	91 93       	st	Z+, r25
     e22:	91 11       	cpse	r25, r1
     e24:	fc cf       	rjmp	.-8      	; 0xe1e <FUNCcopy+0x12>
     e26:	08 95       	ret

00000e28 <FUNCsqueeze>:
		++i;
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	ec 01       	movw	r28, r24
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     e2e:	98 81       	ld	r25, Y
     e30:	99 23       	and	r25, r25
     e32:	99 f0       	breq	.+38     	; 0xe5a <FUNCsqueeze+0x32>
     e34:	fe 01       	movw	r30, r28
     e36:	31 96       	adiw	r30, 0x01	; 1
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
     e3c:	49 2f       	mov	r20, r25
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	46 17       	cp	r20, r22
     e42:	57 07       	cpc	r21, r23
     e44:	31 f0       	breq	.+12     	; 0xe52 <FUNCsqueeze+0x2a>
			s[j++] = s[i];
     e46:	de 01       	movw	r26, r28
     e48:	a2 0f       	add	r26, r18
     e4a:	b3 1f       	adc	r27, r19
     e4c:	9c 93       	st	X, r25
     e4e:	2f 5f       	subi	r18, 0xFF	; 255
     e50:	3f 4f       	sbci	r19, 0xFF	; 255
}
// squeeze: delete all c from s
void FUNCsqueeze(char s[], int c)
{
	int i, j;
	for (i = j = 0; s[i] != '\0'; i++)
     e52:	91 91       	ld	r25, Z+
     e54:	91 11       	cpse	r25, r1
     e56:	f2 cf       	rjmp	.-28     	; 0xe3c <FUNCsqueeze+0x14>
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <FUNCsqueeze+0x36>
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
		if (s[i] != c)
			s[j++] = s[i];
		s[j] = '\0';
     e5e:	fe 01       	movw	r30, r28
     e60:	e2 0f       	add	r30, r18
     e62:	f3 1f       	adc	r31, r19
     e64:	10 82       	st	Z, r1
}
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	08 95       	ret

00000e6c <FUNCshellsort>:
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
     e6c:	2f 92       	push	r2
     e6e:	3f 92       	push	r3
     e70:	4f 92       	push	r4
     e72:	5f 92       	push	r5
     e74:	6f 92       	push	r6
     e76:	7f 92       	push	r7
     e78:	8f 92       	push	r8
     e7a:	9f 92       	push	r9
     e7c:	af 92       	push	r10
     e7e:	bf 92       	push	r11
     e80:	cf 92       	push	r12
     e82:	df 92       	push	r13
     e84:	ef 92       	push	r14
     e86:	ff 92       	push	r15
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	00 d0       	rcall	.+0      	; 0xe92 <FUNCshellsort+0x26>
     e92:	00 d0       	rcall	.+0      	; 0xe94 <FUNCshellsort+0x28>
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	2c 01       	movw	r4, r24
     e9a:	1b 01       	movw	r2, r22
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     e9c:	4b 01       	movw	r8, r22
     e9e:	77 23       	and	r23, r23
     ea0:	1c f4       	brge	.+6      	; 0xea8 <FUNCshellsort+0x3c>
     ea2:	2f ef       	ldi	r18, 0xFF	; 255
     ea4:	82 1a       	sub	r8, r18
     ea6:	92 0a       	sbc	r9, r18
     ea8:	95 94       	asr	r9
     eaa:	87 94       	ror	r8
     eac:	18 14       	cp	r1, r8
     eae:	19 04       	cpc	r1, r9
     eb0:	0c f4       	brge	.+2      	; 0xeb4 <FUNCshellsort+0x48>
     eb2:	51 c0       	rjmp	.+162    	; 0xf56 <FUNCshellsort+0xea>
     eb4:	6a c0       	rjmp	.+212    	; 0xf8a <FUNCshellsort+0x11e>
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     eb6:	96 01       	movw	r18, r12
     eb8:	dd 20       	and	r13, r13
     eba:	9c f1       	brlt	.+102    	; 0xf22 <FUNCshellsort+0xb6>
     ebc:	f5 01       	movw	r30, r10
     ebe:	40 81       	ld	r20, Z
     ec0:	51 81       	ldd	r21, Z+1	; 0x01
     ec2:	f4 01       	movw	r30, r8
     ec4:	60 81       	ld	r22, Z
     ec6:	71 81       	ldd	r23, Z+1	; 0x01
     ec8:	64 17       	cp	r22, r20
     eca:	75 07       	cpc	r23, r21
     ecc:	54 f5       	brge	.+84     	; 0xf22 <FUNCshellsort+0xb6>
     ece:	8c 01       	movw	r16, r24
     ed0:	0a 0d       	add	r16, r10
     ed2:	1b 1d       	adc	r17, r11
     ed4:	d4 01       	movw	r26, r8
     ed6:	bc 82       	std	Y+4, r11	; 0x04
     ed8:	ab 82       	std	Y+3, r10	; 0x03
     eda:	ba 82       	std	Y+2, r11	; 0x02
     edc:	a9 82       	std	Y+1, r10	; 0x01
				temp = v[j];
				v[j] = v[j+gap];
     ede:	eb 81       	ldd	r30, Y+3	; 0x03
     ee0:	fc 81       	ldd	r31, Y+4	; 0x04
     ee2:	71 83       	std	Z+1, r23	; 0x01
     ee4:	60 83       	st	Z, r22
				v[j+gap] = temp;
     ee6:	11 96       	adiw	r26, 0x01	; 1
     ee8:	5c 93       	st	X, r21
     eea:	4e 93       	st	-X, r20
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
     eec:	2e 19       	sub	r18, r14
     eee:	3f 09       	sbc	r19, r15
     ef0:	c2 f0       	brmi	.+48     	; 0xf22 <FUNCshellsort+0xb6>
     ef2:	f8 01       	movw	r30, r16
     ef4:	40 81       	ld	r20, Z
     ef6:	51 81       	ldd	r21, Z+1	; 0x01
     ef8:	e9 81       	ldd	r30, Y+1	; 0x01
     efa:	fa 81       	ldd	r31, Y+2	; 0x02
     efc:	60 81       	ld	r22, Z
     efe:	71 81       	ldd	r23, Z+1	; 0x01
     f00:	08 0f       	add	r16, r24
     f02:	19 1f       	adc	r17, r25
     f04:	e8 0f       	add	r30, r24
     f06:	f9 1f       	adc	r31, r25
     f08:	fa 83       	std	Y+2, r31	; 0x02
     f0a:	e9 83       	std	Y+1, r30	; 0x01
     f0c:	eb 81       	ldd	r30, Y+3	; 0x03
     f0e:	fc 81       	ldd	r31, Y+4	; 0x04
     f10:	e8 0f       	add	r30, r24
     f12:	f9 1f       	adc	r31, r25
     f14:	fc 83       	std	Y+4, r31	; 0x04
     f16:	eb 83       	std	Y+3, r30	; 0x03
     f18:	a8 0f       	add	r26, r24
     f1a:	b9 1f       	adc	r27, r25
     f1c:	64 17       	cp	r22, r20
     f1e:	75 07       	cpc	r23, r21
     f20:	f4 f2       	brlt	.-68     	; 0xede <FUNCshellsort+0x72>
     f22:	ff ef       	ldi	r31, 0xFF	; 255
     f24:	cf 1a       	sub	r12, r31
     f26:	df 0a       	sbc	r13, r31
     f28:	22 e0       	ldi	r18, 0x02	; 2
     f2a:	a2 0e       	add	r10, r18
     f2c:	b1 1c       	adc	r11, r1
     f2e:	e2 e0       	ldi	r30, 0x02	; 2
     f30:	8e 0e       	add	r8, r30
     f32:	91 1c       	adc	r9, r1
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
     f34:	c6 14       	cp	r12, r6
     f36:	d7 04       	cpc	r13, r7
     f38:	09 f0       	breq	.+2      	; 0xf3c <FUNCshellsort+0xd0>
     f3a:	bd cf       	rjmp	.-134    	; 0xeb6 <FUNCshellsort+0x4a>
}
// shellsort: sort v[0]...v[n-1] into increasing order
void FUNCshellsort(int v[], int n)
{
	int gap, i, j, temp;
	for (gap = n/2; gap > 0; gap /= 2)
     f3c:	47 01       	movw	r8, r14
     f3e:	ff 20       	and	r15, r15
     f40:	1c f4       	brge	.+6      	; 0xf48 <FUNCshellsort+0xdc>
     f42:	ff ef       	ldi	r31, 0xFF	; 255
     f44:	8f 1a       	sub	r8, r31
     f46:	9f 0a       	sbc	r9, r31
     f48:	95 94       	asr	r9
     f4a:	87 94       	ror	r8
     f4c:	18 14       	cp	r1, r8
     f4e:	19 04       	cpc	r1, r9
     f50:	e4 f4       	brge	.+56     	; 0xf8a <FUNCshellsort+0x11e>
     f52:	74 01       	movw	r14, r8
     f54:	01 c0       	rjmp	.+2      	; 0xf58 <FUNCshellsort+0xec>
     f56:	74 01       	movw	r14, r8
		for (i = gap; i < n; i++)
     f58:	82 14       	cp	r8, r2
     f5a:	93 04       	cpc	r9, r3
     f5c:	7c f7       	brge	.-34     	; 0xf3c <FUNCshellsort+0xd0>
     f5e:	64 01       	movw	r12, r8
     f60:	ce 18       	sub	r12, r14
     f62:	df 08       	sbc	r13, r15
     f64:	56 01       	movw	r10, r12
     f66:	aa 0c       	add	r10, r10
     f68:	bb 1c       	adc	r11, r11
     f6a:	a4 0c       	add	r10, r4
     f6c:	b5 1c       	adc	r11, r5
     f6e:	88 0c       	add	r8, r8
     f70:	99 1c       	adc	r9, r9
     f72:	84 0c       	add	r8, r4
     f74:	95 1c       	adc	r9, r5
     f76:	31 01       	movw	r6, r2
     f78:	6e 18       	sub	r6, r14
     f7a:	7f 08       	sbc	r7, r15
     f7c:	c7 01       	movw	r24, r14
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	91 95       	neg	r25
     f84:	81 95       	neg	r24
     f86:	91 09       	sbc	r25, r1
     f88:	96 cf       	rjmp	.-212    	; 0xeb6 <FUNCshellsort+0x4a>
			for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap){
				temp = v[j];
				v[j] = v[j+gap];
				v[j+gap] = temp;
			}
}
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	1f 91       	pop	r17
     f98:	0f 91       	pop	r16
     f9a:	ff 90       	pop	r15
     f9c:	ef 90       	pop	r14
     f9e:	df 90       	pop	r13
     fa0:	cf 90       	pop	r12
     fa2:	bf 90       	pop	r11
     fa4:	af 90       	pop	r10
     fa6:	9f 90       	pop	r9
     fa8:	8f 90       	pop	r8
     faa:	7f 90       	pop	r7
     fac:	6f 90       	pop	r6
     fae:	5f 90       	pop	r5
     fb0:	4f 90       	pop	r4
     fb2:	3f 90       	pop	r3
     fb4:	2f 90       	pop	r2
     fb6:	08 95       	ret

00000fb8 <FUNCpmax>:
	if(a1 > a2){
		biggest = a1;
	}else{
		biggest = a2;
	}
	return biggest;
     fb8:	86 17       	cp	r24, r22
     fba:	97 07       	cpc	r25, r23
     fbc:	0c f4       	brge	.+2      	; 0xfc0 <FUNCpmax+0x8>
     fbe:	cb 01       	movw	r24, r22
}
     fc0:	08 95       	ret

00000fc2 <FUNCgcd>:
// common divisor
int FUNCgcd (int u, int v)
{
     fc2:	9b 01       	movw	r18, r22
	int temp;
	while ( v != 0 ) {
     fc4:	67 2b       	or	r22, r23
     fc6:	11 f4       	brne	.+4      	; 0xfcc <FUNCgcd+0xa>
     fc8:	08 95       	ret
		temp = u % v;
		u = v;
		v = temp;
     fca:	9a 01       	movw	r18, r20
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
		temp = u % v;
     fcc:	b9 01       	movw	r22, r18
     fce:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <__divmodhi4>
     fd2:	ac 01       	movw	r20, r24
     fd4:	82 2f       	mov	r24, r18
     fd6:	93 2f       	mov	r25, r19
}
// common divisor
int FUNCgcd (int u, int v)
{
	int temp;
	while ( v != 0 ) {
     fd8:	41 15       	cp	r20, r1
     fda:	51 05       	cpc	r21, r1
     fdc:	b1 f7       	brne	.-20     	; 0xfca <FUNCgcd+0x8>
		temp = u % v;
		u = v;
		v = temp;
	}
	return u;
}
     fde:	08 95       	ret

00000fe0 <FUNCstrToInt>:
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
     fe0:	fc 01       	movw	r30, r24
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
     fe2:	90 81       	ld	r25, Z
     fe4:	80 ed       	ldi	r24, 0xD0	; 208
     fe6:	89 0f       	add	r24, r25
     fe8:	8a 30       	cpi	r24, 0x0A	; 10
     fea:	d0 f4       	brcc	.+52     	; 0x1020 <FUNCstrToInt+0x40>
     fec:	31 96       	adiw	r30, 0x01	; 1
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
		intValue = string[i] - '0';
		result = result * 10 + intValue;
     ff2:	a9 01       	movw	r20, r18
     ff4:	44 0f       	add	r20, r20
     ff6:	55 1f       	adc	r21, r21
     ff8:	22 0f       	add	r18, r18
     ffa:	33 1f       	adc	r19, r19
     ffc:	22 0f       	add	r18, r18
     ffe:	33 1f       	adc	r19, r19
    1000:	22 0f       	add	r18, r18
    1002:	33 1f       	adc	r19, r19
    1004:	42 0f       	add	r20, r18
    1006:	53 1f       	adc	r21, r19
    1008:	29 2f       	mov	r18, r25
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	20 53       	subi	r18, 0x30	; 48
    100e:	31 09       	sbc	r19, r1
    1010:	24 0f       	add	r18, r20
    1012:	35 1f       	adc	r19, r21
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
    1014:	91 91       	ld	r25, Z+
    1016:	80 ed       	ldi	r24, 0xD0	; 208
    1018:	89 0f       	add	r24, r25
    101a:	8a 30       	cpi	r24, 0x0A	; 10
    101c:	50 f3       	brcs	.-44     	; 0xff2 <FUNCstrToInt+0x12>
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <FUNCstrToInt+0x44>
	return u;
}
// Function to convert a string to an integer
int FUNCstrToInt (const char string[])
{
	int i, intValue, result = 0;
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
	for ( i = 0; string[i] >= '0' && string[i] <= '9'; ++i ){
		intValue = string[i] - '0';
		result = result * 10 + intValue;
	}
	return result;
}
    1024:	c9 01       	movw	r24, r18
    1026:	08 95       	ret

00001028 <FUNCfilter>:
uint8_t FUNCfilter(uint8_t mask, uint8_t data)
{
	uint8_t Z;
	Z=mask & data;
	return Z;
}
    1028:	86 23       	and	r24, r22
    102a:	08 95       	ret

0000102c <FUNCticks>:
// ticks
unsigned int FUNCticks(unsigned int num)
{
	unsigned int count;
	for(count=0;count<num;count++)
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	39 f0       	breq	.+14     	; 0x103e <FUNCticks+0x12>
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	2f 5f       	subi	r18, 0xFF	; 255
    1036:	3f 4f       	sbci	r19, 0xFF	; 255
    1038:	82 17       	cp	r24, r18
    103a:	93 07       	cpc	r25, r19
    103c:	d9 f7       	brne	.-10     	; 0x1034 <FUNCticks+0x8>
		;
	return count;
}
    103e:	08 95       	ret

00001040 <FUNCtwocomptoint8bit>:
// Two's Complement function
int FUNCtwocomptoint8bit(int twoscomp){
  
  //Let's see if the byte is negative
  if (twoscomp & 0B10000000){
    1040:	87 ff       	sbrs	r24, 7
    1042:	08 c0       	rjmp	.+16     	; 0x1054 <FUNCtwocomptoint8bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
    1044:	91 95       	neg	r25
    1046:	81 95       	neg	r24
    1048:	91 09       	sbc	r25, r1
	twoscomp = (twoscomp & 0B11111111);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
    104a:	99 27       	eor	r25, r25
    104c:	91 95       	neg	r25
    104e:	81 95       	neg	r24
    1050:	91 09       	sbc	r25, r1
    return value;
    1052:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    //Make sure we are never over 1279
    twoscomp = (twoscomp & 0B01111111);
    //Cast as int and return
    int value = (int)(twoscomp);
    return value;
    1054:	8f 77       	andi	r24, 0x7F	; 127
    1056:	99 27       	eor	r25, r25
  }
}
    1058:	08 95       	ret

0000105a <FUNCtwocomptoint10bit>:
// Two's Complement function, shifts 10 bit binary to signed integers (-512 to 512)
int FUNCtwocomptoint10bit(int twoscomp){
	
  //Let's see if the byte is negative
  if (twoscomp & 0x200){
    105a:	91 ff       	sbrs	r25, 1
    105c:	08 c0       	rjmp	.+16     	; 0x106e <FUNCtwocomptoint10bit+0x14>
    //Invert
    twoscomp = ~twoscomp + 1;
    105e:	91 95       	neg	r25
    1060:	81 95       	neg	r24
    1062:	91 09       	sbc	r25, r1
    twoscomp = (twoscomp & 0x3FF);
    //Cast as int and multiply by negative one
    int value = (int)(twoscomp)*(-1);
    1064:	93 70       	andi	r25, 0x03	; 3
    1066:	91 95       	neg	r25
    1068:	81 95       	neg	r24
    106a:	91 09       	sbc	r25, r1
    return value;
    106c:	08 95       	ret
    //Byte is non-negative, therefore convert to decimal and display
    twoscomp = (twoscomp & 0x1FF);
    //Cast as int and return
    //Serial.println(twoscomp);
    int value = (int)(twoscomp);
    return value;
    106e:	91 70       	andi	r25, 0x01	; 1
  }
}
    1070:	08 95       	ret

00001072 <FUNCtwocomptointnbit>:
// Two's Complement function, nbits
int FUNCtwocomptointnbit(int twoscomp, uint8_t nbits){
  unsigned int signmask;
  unsigned int mask;
  signmask = (1<<(nbits-1));
    1072:	61 50       	subi	r22, 0x01	; 1
    1074:	21 e0       	ldi	r18, 0x01	; 1
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	02 c0       	rjmp	.+4      	; 0x107e <FUNCtwocomptointnbit+0xc>
    107a:	22 0f       	add	r18, r18
    107c:	33 1f       	adc	r19, r19
    107e:	6a 95       	dec	r22
    1080:	e2 f7       	brpl	.-8      	; 0x107a <FUNCtwocomptointnbit+0x8>
  mask=signmask-1;
    1082:	a9 01       	movw	r20, r18
    1084:	41 50       	subi	r20, 0x01	; 1
    1086:	51 09       	sbc	r21, r1
  //Let's see if the number is negative
  if (twoscomp & signmask){
    1088:	b9 01       	movw	r22, r18
    108a:	68 23       	and	r22, r24
    108c:	79 23       	and	r23, r25
    108e:	67 2b       	or	r22, r23
    1090:	29 f0       	breq	.+10     	; 0x109c <FUNCtwocomptointnbit+0x2a>
	twoscomp &= mask;
    twoscomp -= signmask;
    1092:	84 23       	and	r24, r20
    1094:	95 23       	and	r25, r21
    1096:	82 1b       	sub	r24, r18
    1098:	93 0b       	sbc	r25, r19
    109a:	08 95       	ret
  }else{
	  twoscomp &= mask;
    109c:	84 23       	and	r24, r20
    109e:	95 23       	and	r25, r21
  }
  return twoscomp;
}
    10a0:	08 95       	ret

000010a2 <FUNCdec2bcd>:
// Convert Decimal to Binary Coded Decimal (BCD)
char FUNCdec2bcd(char num)
{
	return ((num/10 * 16) + (num % 10));
    10a2:	9d ec       	ldi	r25, 0xCD	; 205
    10a4:	89 9f       	mul	r24, r25
    10a6:	91 2d       	mov	r25, r1
    10a8:	11 24       	eor	r1, r1
    10aa:	96 95       	lsr	r25
    10ac:	96 95       	lsr	r25
    10ae:	96 95       	lsr	r25
    10b0:	39 2f       	mov	r19, r25
    10b2:	33 0f       	add	r19, r19
    10b4:	23 2f       	mov	r18, r19
    10b6:	22 0f       	add	r18, r18
    10b8:	22 0f       	add	r18, r18
    10ba:	23 0f       	add	r18, r19
    10bc:	82 1b       	sub	r24, r18
}
    10be:	20 e1       	ldi	r18, 0x10	; 16
    10c0:	92 9f       	mul	r25, r18
    10c2:	80 0d       	add	r24, r0
    10c4:	11 24       	eor	r1, r1
    10c6:	08 95       	ret

000010c8 <FUNCbcd2dec>:
// Convert Binary Coded Decimal (BCD) to Decimal
char FUNCbcd2dec(char num)
{
	return ((num/16 * 10) + (num % 16));
    10c8:	98 2f       	mov	r25, r24
    10ca:	92 95       	swap	r25
    10cc:	9f 70       	andi	r25, 0x0F	; 15
    10ce:	99 0f       	add	r25, r25
    10d0:	29 2f       	mov	r18, r25
    10d2:	22 0f       	add	r18, r18
    10d4:	22 0f       	add	r18, r18
    10d6:	92 0f       	add	r25, r18
    10d8:	8f 70       	andi	r24, 0x0F	; 15
}
    10da:	89 0f       	add	r24, r25
    10dc:	08 95       	ret

000010de <FUNCresizestr>:
char* FUNCresizestr(char *string, int size)
{
    10de:	fc 01       	movw	r30, r24
	int i;
	FUNCstr[size]='\0';
    10e0:	db 01       	movw	r26, r22
    10e2:	af 55       	subi	r26, 0x5F	; 95
    10e4:	bc 4f       	sbci	r27, 0xFC	; 252
    10e6:	1c 92       	st	X, r1
	for(i=0;i<size;i++){
    10e8:	16 16       	cp	r1, r22
    10ea:	17 06       	cpc	r1, r23
    10ec:	14 f5       	brge	.+68     	; 0x1132 <__stack+0x33>
		if(*(string+i)=='\0'){
    10ee:	90 81       	ld	r25, Z
    10f0:	91 11       	cpse	r25, r1
    10f2:	0c c0       	rjmp	.+24     	; 0x110c <__stack+0xd>
    10f4:	17 c0       	rjmp	.+46     	; 0x1124 <__stack+0x25>
    10f6:	91 91       	ld	r25, Z+
    10f8:	91 11       	cpse	r25, r1
    10fa:	0d c0       	rjmp	.+26     	; 0x1116 <__stack+0x17>
    10fc:	15 c0       	rjmp	.+42     	; 0x1128 <__stack+0x29>
			for(;i<size;i++){
				FUNCstr[i]=' ';
    10fe:	81 93       	st	Z+, r24
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
			for(;i<size;i++){
    1100:	2f 5f       	subi	r18, 0xFF	; 255
    1102:	3f 4f       	sbci	r19, 0xFF	; 255
    1104:	26 17       	cp	r18, r22
    1106:	37 07       	cpc	r19, r23
    1108:	d4 f3       	brlt	.-12     	; 0x10fe <FUNCresizestr+0x20>
    110a:	13 c0       	rjmp	.+38     	; 0x1132 <__stack+0x33>
    110c:	a1 ea       	ldi	r26, 0xA1	; 161
    110e:	b3 e0       	ldi	r27, 0x03	; 3
    1110:	31 96       	adiw	r30, 0x01	; 1
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
		if(*(string+i)=='\0'){
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
			for(;i<size;i++){
				FUNCstr[i]=' ';
			}
			break;
		}
		FUNCstr[i]=*(string+i);
    1116:	9d 93       	st	X+, r25
}
char* FUNCresizestr(char *string, int size)
{
	int i;
	FUNCstr[size]='\0';
	for(i=0;i<size;i++){
    1118:	2f 5f       	subi	r18, 0xFF	; 255
    111a:	3f 4f       	sbci	r19, 0xFF	; 255
    111c:	62 17       	cp	r22, r18
    111e:	73 07       	cpc	r23, r19
    1120:	51 f7       	brne	.-44     	; 0x10f6 <FUNCresizestr+0x18>
    1122:	07 c0       	rjmp	.+14     	; 0x1132 <__stack+0x33>
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	f9 01       	movw	r30, r18
    112a:	ef 55       	subi	r30, 0x5F	; 95
    112c:	fc 4f       	sbci	r31, 0xFC	; 252
		if(*(string+i)=='\0'){
			for(;i<size;i++){
				FUNCstr[i]=' ';
    112e:	80 e2       	ldi	r24, 0x20	; 32
    1130:	e6 cf       	rjmp	.-52     	; 0x10fe <FUNCresizestr+0x20>
			break;
		}
		FUNCstr[i]=*(string+i);
	}
	return FUNCstr;
}
    1132:	81 ea       	ldi	r24, 0xA1	; 161
    1134:	93 e0       	ldi	r25, 0x03	; 3
    1136:	08 95       	ret

00001138 <FUNCtrimmer>:
long FUNCtrimmer(long x, long in_min, long in_max, long out_min, long out_max)
/***
same as arduino map function.
***/
{
    1138:	4f 92       	push	r4
    113a:	5f 92       	push	r5
    113c:	6f 92       	push	r6
    113e:	7f 92       	push	r7
    1140:	af 92       	push	r10
    1142:	bf 92       	push	r11
    1144:	cf 92       	push	r12
    1146:	df 92       	push	r13
    1148:	ef 92       	push	r14
    114a:	ff 92       	push	r15
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	29 01       	movw	r4, r18
    115a:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    115c:	9b 01       	movw	r18, r22
    115e:	ac 01       	movw	r20, r24
    1160:	24 19       	sub	r18, r4
    1162:	35 09       	sbc	r19, r5
    1164:	46 09       	sbc	r20, r6
    1166:	57 09       	sbc	r21, r7
    1168:	89 89       	ldd	r24, Y+17	; 0x11
    116a:	9a 89       	ldd	r25, Y+18	; 0x12
    116c:	ab 89       	ldd	r26, Y+19	; 0x13
    116e:	bc 89       	ldd	r27, Y+20	; 0x14
    1170:	bc 01       	movw	r22, r24
    1172:	cd 01       	movw	r24, r26
    1174:	6a 19       	sub	r22, r10
    1176:	7b 09       	sbc	r23, r11
    1178:	8c 09       	sbc	r24, r12
    117a:	9d 09       	sbc	r25, r13
    117c:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <__mulsi3>
    1180:	a8 01       	movw	r20, r16
    1182:	97 01       	movw	r18, r14
    1184:	24 19       	sub	r18, r4
    1186:	35 09       	sbc	r19, r5
    1188:	46 09       	sbc	r20, r6
    118a:	57 09       	sbc	r21, r7
    118c:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <__divmodsi4>
    1190:	ca 01       	movw	r24, r20
    1192:	b9 01       	movw	r22, r18
    1194:	6a 0d       	add	r22, r10
    1196:	7b 1d       	adc	r23, r11
    1198:	8c 1d       	adc	r24, r12
    119a:	9d 1d       	adc	r25, r13
}
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	ff 90       	pop	r15
    11a6:	ef 90       	pop	r14
    11a8:	df 90       	pop	r13
    11aa:	cf 90       	pop	r12
    11ac:	bf 90       	pop	r11
    11ae:	af 90       	pop	r10
    11b0:	7f 90       	pop	r7
    11b2:	6f 90       	pop	r6
    11b4:	5f 90       	pop	r5
    11b6:	4f 90       	pop	r4
    11b8:	08 95       	ret

000011ba <Pwr>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	61 15       	cp	r22, r1
    11be:	71 05       	cpc	r23, r1
    11c0:	99 f0       	breq	.+38     	; 0x11e8 <Pwr+0x2e>
    11c2:	41 e0       	ldi	r20, 0x01	; 1
    11c4:	50 e0       	ldi	r21, 0x00	; 0
    11c6:	21 e0       	ldi	r18, 0x01	; 1
    11c8:	30 e0       	ldi	r19, 0x00	; 0
        p = p * bs;
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	fa 01       	movw	r30, r20
    11ce:	e8 9f       	mul	r30, r24
    11d0:	a0 01       	movw	r20, r0
    11d2:	e9 9f       	mul	r30, r25
    11d4:	50 0d       	add	r21, r0
    11d6:	f8 9f       	mul	r31, r24
    11d8:	50 0d       	add	r21, r0
    11da:	11 24       	eor	r1, r1
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    11dc:	2f 5f       	subi	r18, 0xFF	; 255
    11de:	3f 4f       	sbci	r19, 0xFF	; 255
    11e0:	62 17       	cp	r22, r18
    11e2:	73 07       	cpc	r23, r19
    11e4:	98 f7       	brcc	.-26     	; 0x11cc <Pwr+0x12>
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <Pwr+0x32>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    11e8:	41 e0       	ldi	r20, 0x01	; 1
    11ea:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 1; i <= n; ++i)
        p = p * bs;
    return p;
}
    11ec:	ca 01       	movw	r24, r20
    11ee:	08 95       	ret

000011f0 <StringLength>:
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
    11f0:	fc 01       	movw	r30, r24
    11f2:	20 81       	ld	r18, Z
    11f4:	22 23       	and	r18, r18
    11f6:	41 f0       	breq	.+16     	; 0x1208 <StringLength+0x18>
    11f8:	31 96       	adiw	r30, 0x01	; 1
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	90 e0       	ldi	r25, 0x00	; 0
		++count;
    11fe:	01 96       	adiw	r24, 0x01	; 1
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
	while ( string[count] != '\0' )
    1200:	21 91       	ld	r18, Z+
    1202:	21 11       	cpse	r18, r1
    1204:	fc cf       	rjmp	.-8      	; 0x11fe <StringLength+0xe>
    1206:	08 95       	ret
    return p;
}
// Function to count the number of characters in a string
int StringLength (const char string[])
{
	int count = 0;
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	90 e0       	ldi	r25, 0x00	; 0
	while ( string[count] != '\0' )
		++count;
	return count;
}
    120c:	08 95       	ret

0000120e <FUNCtrim>:
	Reverse(FUNCstr);
	return FUNCstr;
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	ec 01       	movw	r28, r24
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
    1214:	ed df       	rcall	.-38     	; 0x11f0 <StringLength>
    1216:	9c 01       	movw	r18, r24
    1218:	21 50       	subi	r18, 0x01	; 1
    121a:	31 09       	sbc	r19, r1
    121c:	62 f0       	brmi	.+24     	; 0x1236 <FUNCtrim+0x28>
    121e:	fe 01       	movw	r30, r28
    1220:	e8 0f       	add	r30, r24
    1222:	f9 1f       	adc	r31, r25
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
    1224:	92 91       	ld	r25, -Z
    1226:	90 32       	cpi	r25, 0x20	; 32
    1228:	19 f0       	breq	.+6      	; 0x1230 <FUNCtrim+0x22>
    122a:	99 50       	subi	r25, 0x09	; 9
    122c:	92 30       	cpi	r25, 0x02	; 2
    122e:	18 f4       	brcc	.+6      	; 0x1236 <FUNCtrim+0x28>
}
// trim: remove trailing blanks, tabs, newlines
int FUNCtrim(char s[])
{
	int n;
	for (n = StringLength(s)-1; n >= 0; n--)
    1230:	21 50       	subi	r18, 0x01	; 1
    1232:	31 09       	sbc	r19, r1
    1234:	b8 f7       	brcc	.-18     	; 0x1224 <FUNCtrim+0x16>
		if (s[n] != ' ' && s[n] != '\t' && s[n] != '\n')
			break;
	s[n+1] = '\0';
    1236:	c2 0f       	add	r28, r18
    1238:	d3 1f       	adc	r29, r19
    123a:	19 82       	std	Y+1, r1	; 0x01
	return n;
}
    123c:	c9 01       	movw	r24, r18
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	08 95       	ret

00001244 <Reverse>:
		++count;
	return count;
}
// reverse: reverse string s in place
void Reverse(char s[])
{
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	ec 01       	movw	r28, r24
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
    124a:	d2 df       	rcall	.-92     	; 0x11f0 <StringLength>
    124c:	9c 01       	movw	r18, r24
    124e:	21 50       	subi	r18, 0x01	; 1
    1250:	31 09       	sbc	r19, r1
    1252:	12 16       	cp	r1, r18
    1254:	13 06       	cpc	r1, r19
    1256:	84 f4       	brge	.+32     	; 0x1278 <Reverse+0x34>
    1258:	de 01       	movw	r26, r28
    125a:	a8 0f       	add	r26, r24
    125c:	b9 1f       	adc	r27, r25
    125e:	fe 01       	movw	r30, r28
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
		c = s[i];
    1264:	40 81       	ld	r20, Z
		s[i] = s[j];
    1266:	5e 91       	ld	r21, -X
    1268:	51 93       	st	Z+, r21
		s[j] = c;
    126a:	4c 93       	st	X, r20
}
// reverse: reverse string s in place
void Reverse(char s[])
{
	int c, i, j;
	for (i = 0, j = StringLength(s)-1; i < j; i++, j--){
    126c:	01 96       	adiw	r24, 0x01	; 1
    126e:	21 50       	subi	r18, 0x01	; 1
    1270:	31 09       	sbc	r19, r1
    1272:	82 17       	cp	r24, r18
    1274:	93 07       	cpc	r25, r19
    1276:	b4 f3       	brlt	.-20     	; 0x1264 <Reverse+0x20>
		c = s[i];
		s[i] = s[j];
		s[j] = c;
	}
}
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	08 95       	ret

0000127e <FUNCi32toa>:
				v[j+gap] = temp;
			}
}
// i32toa: convert n to characters in s
char* FUNCi32toa(int32_t n)
{
    127e:	8f 92       	push	r8
    1280:	9f 92       	push	r9
    1282:	af 92       	push	r10
    1284:	bf 92       	push	r11
    1286:	cf 92       	push	r12
    1288:	df 92       	push	r13
    128a:	ef 92       	push	r14
    128c:	ff 92       	push	r15
    128e:	0f 93       	push	r16
    1290:	1f 93       	push	r17
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    1296:	6b 01       	movw	r12, r22
    1298:	7c 01       	movw	r14, r24
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	ff 20       	and	r15, r15
    12a0:	3c f4       	brge	.+14     	; 0x12b0 <FUNCi32toa+0x32>
    12a2:	88 27       	eor	r24, r24
    12a4:	99 27       	eor	r25, r25
    12a6:	dc 01       	movw	r26, r24
    12a8:	8c 19       	sub	r24, r12
    12aa:	9d 09       	sbc	r25, r13
    12ac:	ae 09       	sbc	r26, r14
    12ae:	bf 09       	sbc	r27, r15
    12b0:	bc 01       	movw	r22, r24
    12b2:	cd 01       	movw	r24, r26
    12b4:	10 e0       	ldi	r17, 0x00	; 0
	int32_t sign;
	if ((sign = n) < 0) // record sign
	n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
    12b6:	0f 2e       	mov	r0, r31
    12b8:	fa e0       	ldi	r31, 0x0A	; 10
    12ba:	8f 2e       	mov	r8, r31
    12bc:	91 2c       	mov	r9, r1
    12be:	a1 2c       	mov	r10, r1
    12c0:	b1 2c       	mov	r11, r1
    12c2:	f0 2d       	mov	r31, r0
    12c4:	01 c0       	rjmp	.+2      	; 0x12c8 <FUNCi32toa+0x4a>
    12c6:	10 2f       	mov	r17, r16
    12c8:	01 e0       	ldi	r16, 0x01	; 1
    12ca:	01 0f       	add	r16, r17
    12cc:	c1 2f       	mov	r28, r17
    12ce:	d0 e0       	ldi	r29, 0x00	; 0
    12d0:	cf 55       	subi	r28, 0x5F	; 95
    12d2:	dc 4f       	sbci	r29, 0xFC	; 252
    12d4:	a5 01       	movw	r20, r10
    12d6:	94 01       	movw	r18, r8
    12d8:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <__divmodsi4>
    12dc:	60 5d       	subi	r22, 0xD0	; 208
    12de:	68 83       	st	Y, r22
	}while ((n /= 10) > 0); // delete it
    12e0:	62 2f       	mov	r22, r18
    12e2:	73 2f       	mov	r23, r19
    12e4:	84 2f       	mov	r24, r20
    12e6:	95 2f       	mov	r25, r21
    12e8:	16 16       	cp	r1, r22
    12ea:	17 06       	cpc	r1, r23
    12ec:	18 06       	cpc	r1, r24
    12ee:	19 06       	cpc	r1, r25
    12f0:	54 f3       	brlt	.-44     	; 0x12c6 <FUNCi32toa+0x48>
	if (sign < 0)
    12f2:	ff 20       	and	r15, r15
    12f4:	44 f4       	brge	.+16     	; 0x1306 <FUNCi32toa+0x88>
	FUNCstr[i++] = '-';
    12f6:	e0 2f       	mov	r30, r16
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	ef 55       	subi	r30, 0x5F	; 95
    12fc:	fc 4f       	sbci	r31, 0xFC	; 252
    12fe:	8d e2       	ldi	r24, 0x2D	; 45
    1300:	80 83       	st	Z, r24
    1302:	02 e0       	ldi	r16, 0x02	; 2
    1304:	01 0f       	add	r16, r17
	FUNCstr[i] = '\0';
    1306:	e0 2f       	mov	r30, r16
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	ef 55       	subi	r30, 0x5F	; 95
    130c:	fc 4f       	sbci	r31, 0xFC	; 252
    130e:	10 82       	st	Z, r1
	Reverse(FUNCstr);
    1310:	81 ea       	ldi	r24, 0xA1	; 161
    1312:	93 e0       	ldi	r25, 0x03	; 3
    1314:	97 df       	rcall	.-210    	; 0x1244 <Reverse>
	return FUNCstr;
}
    1316:	81 ea       	ldi	r24, 0xA1	; 161
    1318:	93 e0       	ldi	r25, 0x03	; 3
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	1f 91       	pop	r17
    1320:	0f 91       	pop	r16
    1322:	ff 90       	pop	r15
    1324:	ef 90       	pop	r14
    1326:	df 90       	pop	r13
    1328:	cf 90       	pop	r12
    132a:	bf 90       	pop	r11
    132c:	af 90       	pop	r10
    132e:	9f 90       	pop	r9
    1330:	8f 90       	pop	r8
    1332:	08 95       	ret

00001334 <FUNCi16toa>:
// i16toa: convert n to characters in s
char* FUNCi16toa(int16_t n)
{
    1334:	0f 93       	push	r16
    1336:	1f 93       	push	r17
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	ec 01       	movw	r28, r24
    133e:	99 23       	and	r25, r25
    1340:	24 f4       	brge	.+8      	; 0x134a <FUNCi16toa+0x16>
    1342:	88 27       	eor	r24, r24
    1344:	99 27       	eor	r25, r25
    1346:	8c 1b       	sub	r24, r28
    1348:	9d 0b       	sbc	r25, r29
    134a:	20 e0       	ldi	r18, 0x00	; 0
	int16_t sign;
	if ((sign = n) < 0) // record sign
		n = -n; // make n positive
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
    134c:	0a e0       	ldi	r16, 0x0A	; 10
    134e:	10 e0       	ldi	r17, 0x00	; 0
    1350:	01 c0       	rjmp	.+2      	; 0x1354 <FUNCi16toa+0x20>
    1352:	23 2f       	mov	r18, r19
    1354:	31 e0       	ldi	r19, 0x01	; 1
    1356:	32 0f       	add	r19, r18
    1358:	e2 2f       	mov	r30, r18
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	ef 55       	subi	r30, 0x5F	; 95
    135e:	fc 4f       	sbci	r31, 0xFC	; 252
    1360:	b8 01       	movw	r22, r16
    1362:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <__divmodhi4>
    1366:	80 5d       	subi	r24, 0xD0	; 208
    1368:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
    136a:	86 2f       	mov	r24, r22
    136c:	97 2f       	mov	r25, r23
    136e:	18 16       	cp	r1, r24
    1370:	19 06       	cpc	r1, r25
    1372:	7c f3       	brlt	.-34     	; 0x1352 <FUNCi16toa+0x1e>
	if (sign < 0)
    1374:	dd 23       	and	r29, r29
    1376:	44 f4       	brge	.+16     	; 0x1388 <FUNCi16toa+0x54>
		FUNCstr[i++] = '-';
    1378:	e3 2f       	mov	r30, r19
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	ef 55       	subi	r30, 0x5F	; 95
    137e:	fc 4f       	sbci	r31, 0xFC	; 252
    1380:	8d e2       	ldi	r24, 0x2D	; 45
    1382:	80 83       	st	Z, r24
    1384:	32 e0       	ldi	r19, 0x02	; 2
    1386:	32 0f       	add	r19, r18
	FUNCstr[i] = '\0';
    1388:	e3 2f       	mov	r30, r19
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	ef 55       	subi	r30, 0x5F	; 95
    138e:	fc 4f       	sbci	r31, 0xFC	; 252
    1390:	10 82       	st	Z, r1
	Reverse(FUNCstr);
    1392:	81 ea       	ldi	r24, 0xA1	; 161
    1394:	93 e0       	ldi	r25, 0x03	; 3
    1396:	56 df       	rcall	.-340    	; 0x1244 <Reverse>
	return FUNCstr;
}
    1398:	81 ea       	ldi	r24, 0xA1	; 161
    139a:	93 e0       	ldi	r25, 0x03	; 3
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
    13a4:	08 95       	ret

000013a6 <FUNCui16toa>:
// ui16toa: convert n to characters in s
char* FUNCui16toa(uint16_t n)
{
    13a6:	cf 93       	push	r28
    13a8:	ac 01       	movw	r20, r24
	uint8_t i;
	i = 0;
    13aa:	e0 e0       	ldi	r30, 0x00	; 0
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
    13ac:	c1 e0       	ldi	r28, 0x01	; 1
    13ae:	ce 0f       	add	r28, r30
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	ef 55       	subi	r30, 0x5F	; 95
    13b4:	fc 4f       	sbci	r31, 0xFC	; 252
    13b6:	9a 01       	movw	r18, r20
    13b8:	ad ec       	ldi	r26, 0xCD	; 205
    13ba:	bc ec       	ldi	r27, 0xCC	; 204
    13bc:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <__umulhisi3>
    13c0:	96 95       	lsr	r25
    13c2:	87 95       	ror	r24
    13c4:	96 95       	lsr	r25
    13c6:	87 95       	ror	r24
    13c8:	96 95       	lsr	r25
    13ca:	87 95       	ror	r24
    13cc:	9c 01       	movw	r18, r24
    13ce:	22 0f       	add	r18, r18
    13d0:	33 1f       	adc	r19, r19
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	82 0f       	add	r24, r18
    13e0:	93 1f       	adc	r25, r19
    13e2:	9a 01       	movw	r18, r20
    13e4:	28 1b       	sub	r18, r24
    13e6:	39 0b       	sbc	r19, r25
    13e8:	c9 01       	movw	r24, r18
    13ea:	80 5d       	subi	r24, 0xD0	; 208
    13ec:	80 83       	st	Z, r24
	}while ((n /= 10) > 0); // delete it
    13ee:	9a 01       	movw	r18, r20
    13f0:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <__umulhisi3>
    13f4:	ac 01       	movw	r20, r24
    13f6:	56 95       	lsr	r21
    13f8:	47 95       	ror	r20
    13fa:	56 95       	lsr	r21
    13fc:	47 95       	ror	r20
    13fe:	56 95       	lsr	r21
    1400:	47 95       	ror	r20
char* FUNCui16toa(uint16_t n)
{
	uint8_t i;
	i = 0;
	do { // generate digits in reverse order
		FUNCstr[i++] = n % 10 + '0'; // get next digit
    1402:	ec 2f       	mov	r30, r28
	}while ((n /= 10) > 0); // delete it
    1404:	41 15       	cp	r20, r1
    1406:	51 05       	cpc	r21, r1
    1408:	89 f6       	brne	.-94     	; 0x13ac <FUNCui16toa+0x6>
	FUNCstr[i] = '\0';
    140a:	ec 2f       	mov	r30, r28
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	ef 55       	subi	r30, 0x5F	; 95
    1410:	fc 4f       	sbci	r31, 0xFC	; 252
    1412:	10 82       	st	Z, r1
	Reverse(FUNCstr);
    1414:	81 ea       	ldi	r24, 0xA1	; 161
    1416:	93 e0       	ldi	r25, 0x03	; 3
    1418:	15 df       	rcall	.-470    	; 0x1244 <Reverse>
	return FUNCstr;
}
    141a:	81 ea       	ldi	r24, 0xA1	; 161
    141c:	93 e0       	ldi	r25, 0x03	; 3
    141e:	cf 91       	pop	r28
    1420:	08 95       	ret

00001422 <FUNCbcd2bin>:
		s[j] = c;
	}
}
unsigned char FUNCbcd2bin(unsigned char val)
{
	return (val & 0x0f) + (val >> 4) * 10;
    1422:	98 2f       	mov	r25, r24
    1424:	92 95       	swap	r25
    1426:	9f 70       	andi	r25, 0x0F	; 15
    1428:	99 0f       	add	r25, r25
    142a:	29 2f       	mov	r18, r25
    142c:	22 0f       	add	r18, r18
    142e:	22 0f       	add	r18, r18
    1430:	92 0f       	add	r25, r18
    1432:	8f 70       	andi	r24, 0x0F	; 15
}
    1434:	89 0f       	add	r24, r25
    1436:	08 95       	ret

00001438 <FUNCbin2bcd>:
unsigned char FUNCbin2bcd(unsigned val)
{
    1438:	ac 01       	movw	r20, r24
	return ((val / 10) << 4) + val % 10;
    143a:	9c 01       	movw	r18, r24
    143c:	ad ec       	ldi	r26, 0xCD	; 205
    143e:	bc ec       	ldi	r27, 0xCC	; 204
    1440:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <__umulhisi3>
    1444:	96 95       	lsr	r25
    1446:	87 95       	ror	r24
    1448:	96 95       	lsr	r25
    144a:	87 95       	ror	r24
    144c:	96 95       	lsr	r25
    144e:	87 95       	ror	r24
    1450:	bc 01       	movw	r22, r24
    1452:	66 0f       	add	r22, r22
    1454:	77 1f       	adc	r23, r23
    1456:	9c 01       	movw	r18, r24
    1458:	22 0f       	add	r18, r18
    145a:	33 1f       	adc	r19, r19
    145c:	22 0f       	add	r18, r18
    145e:	33 1f       	adc	r19, r19
    1460:	22 0f       	add	r18, r18
    1462:	33 1f       	adc	r19, r19
    1464:	26 0f       	add	r18, r22
    1466:	37 1f       	adc	r19, r23
    1468:	42 1b       	sub	r20, r18
    146a:	53 0b       	sbc	r21, r19
}
    146c:	34 2f       	mov	r19, r20
    146e:	20 e1       	ldi	r18, 0x10	; 16
    1470:	82 9f       	mul	r24, r18
    1472:	30 0d       	add	r19, r0
    1474:	11 24       	eor	r1, r1
    1476:	83 2f       	mov	r24, r19
    1478:	08 95       	ret

0000147a <FUNCgcd1>:
long FUNCgcd1(long a, long b)
{
    147a:	cf 92       	push	r12
    147c:	df 92       	push	r13
    147e:	ef 92       	push	r14
    1480:	ff 92       	push	r15
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	28 97       	sbiw	r28, 0x08	; 8
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	6b 01       	movw	r12, r22
    1498:	7c 01       	movw	r14, r24
    149a:	69 83       	std	Y+1, r22	; 0x01
    149c:	7a 83       	std	Y+2, r23	; 0x02
    149e:	8b 83       	std	Y+3, r24	; 0x03
    14a0:	9c 83       	std	Y+4, r25	; 0x04
    14a2:	2d 83       	std	Y+5, r18	; 0x05
    14a4:	3e 83       	std	Y+6, r19	; 0x06
    14a6:	4f 83       	std	Y+7, r20	; 0x07
    14a8:	58 87       	std	Y+8, r21	; 0x08
	long r;
	if (a < b)
    14aa:	c2 16       	cp	r12, r18
    14ac:	d3 06       	cpc	r13, r19
    14ae:	e4 06       	cpc	r14, r20
    14b0:	f5 06       	cpc	r15, r21
    14b2:	34 f4       	brge	.+12     	; 0x14c0 <FUNCgcd1+0x46>
		FUNCswap(&a, &b);
    14b4:	be 01       	movw	r22, r28
    14b6:	6b 5f       	subi	r22, 0xFB	; 251
    14b8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ba:	ce 01       	movw	r24, r28
    14bc:	01 96       	adiw	r24, 0x01	; 1
    14be:	85 dc       	rcall	.-1782   	; 0xdca <FUNCswap>
	if (!b){
    14c0:	8d 81       	ldd	r24, Y+5	; 0x05
    14c2:	9e 81       	ldd	r25, Y+6	; 0x06
    14c4:	af 81       	ldd	r26, Y+7	; 0x07
    14c6:	b8 85       	ldd	r27, Y+8	; 0x08
    14c8:	89 2b       	or	r24, r25
    14ca:	8a 2b       	or	r24, r26
    14cc:	8b 2b       	or	r24, r27
    14ce:	71 f4       	brne	.+28     	; 0x14ec <FUNCgcd1+0x72>
		while ((r = a % b) != 0) {
    14d0:	69 81       	ldd	r22, Y+1	; 0x01
    14d2:	7a 81       	ldd	r23, Y+2	; 0x02
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	a9 01       	movw	r20, r18
    14de:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <__divmodsi4>
    14e2:	61 15       	cp	r22, r1
    14e4:	71 05       	cpc	r23, r1
    14e6:	81 05       	cpc	r24, r1
    14e8:	91 05       	cpc	r25, r1
    14ea:	29 f4       	brne	.+10     	; 0x14f6 <FUNCgcd1+0x7c>
			a = b;
			b = r;
		}
	}	
	return b;
    14ec:	6d 81       	ldd	r22, Y+5	; 0x05
    14ee:	7e 81       	ldd	r23, Y+6	; 0x06
    14f0:	8f 81       	ldd	r24, Y+7	; 0x07
    14f2:	98 85       	ldd	r25, Y+8	; 0x08
    14f4:	05 c0       	rjmp	.+10     	; 0x1500 <FUNCgcd1+0x86>
	if (a < b)
		FUNCswap(&a, &b);
	if (!b){
		while ((r = a % b) != 0) {
			a = b;
			b = r;
    14f6:	6d 83       	std	Y+5, r22	; 0x05
    14f8:	7e 83       	std	Y+6, r23	; 0x06
    14fa:	8f 83       	std	Y+7, r24	; 0x07
    14fc:	98 87       	std	Y+8, r25	; 0x08
    14fe:	f6 cf       	rjmp	.-20     	; 0x14ec <FUNCgcd1+0x72>
		}
	}	
	return b;
}
    1500:	28 96       	adiw	r28, 0x08	; 8
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	ff 90       	pop	r15
    1512:	ef 90       	pop	r14
    1514:	df 90       	pop	r13
    1516:	cf 90       	pop	r12
    1518:	08 95       	ret

0000151a <FUNCpincheck>:
	uint8_t lh;
	if(port & (1<<pin))
		lh=1;
	else
		lh=0;
	return lh;
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <FUNCpincheck+0x8>
    151e:	95 95       	asr	r25
    1520:	87 95       	ror	r24
    1522:	6a 95       	dec	r22
    1524:	e2 f7       	brpl	.-8      	; 0x151e <FUNCpincheck+0x4>
}
    1526:	81 70       	andi	r24, 0x01	; 1
    1528:	08 95       	ret

0000152a <FUNCprint_binary>:
char* FUNCprint_binary(uint8_t number)
{
    152a:	e1 ea       	ldi	r30, 0xA1	; 161
    152c:	f3 e0       	ldi	r31, 0x03	; 3
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	20 e8       	ldi	r18, 0x80	; 128
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
    1532:	50 e3       	ldi	r21, 0x30	; 48
    1534:	41 e3       	ldi	r20, 0x31	; 49
    1536:	38 2f       	mov	r19, r24
    1538:	32 23       	and	r19, r18
    153a:	11 f0       	breq	.+4      	; 0x1540 <FUNCprint_binary+0x16>
    153c:	40 83       	st	Z, r20
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <FUNCprint_binary+0x18>
    1540:	50 83       	st	Z, r21
	return lh;
}
char* FUNCprint_binary(uint8_t number)
{
	uint8_t i,c;
    for(i=128,c=0;i;i>>=1,c++){
    1542:	26 95       	lsr	r18
    1544:	9f 5f       	subi	r25, 0xFF	; 255
    1546:	31 96       	adiw	r30, 0x01	; 1
    1548:	98 30       	cpi	r25, 0x08	; 8
    154a:	a9 f7       	brne	.-22     	; 0x1536 <FUNCprint_binary+0xc>
	(number & i) ? (FUNCstr[c]='1') : (FUNCstr[c]='0');
	}
	FUNCstr[c]='\0';
    154c:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <FUNCstr+0x8>
	return FUNCstr;
}
    1550:	81 ea       	ldi	r24, 0xA1	; 161
    1552:	93 e0       	ldi	r25, 0x03	; 3
    1554:	08 95       	ret

00001556 <FUNCmayia>:
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    1556:	a4 2f       	mov	r26, r20
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	10 97       	sbiw	r26, 0x00	; 0
    155c:	61 f0       	breq	.+24     	; 0x1576 <FUNCmayia+0x20>
    155e:	21 e0       	ldi	r18, 0x01	; 1
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	e1 e0       	ldi	r30, 0x01	; 1
    1564:	f0 e0       	ldi	r31, 0x00	; 0
        p = p * bs;
    1566:	ee 0f       	add	r30, r30
    1568:	ff 1f       	adc	r31, r31
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
    156a:	2f 5f       	subi	r18, 0xFF	; 255
    156c:	3f 4f       	sbci	r19, 0xFF	; 255
    156e:	a2 17       	cp	r26, r18
    1570:	b3 07       	cpc	r27, r19
    1572:	c8 f7       	brcc	.-14     	; 0x1566 <FUNCmayia+0x10>
    1574:	02 c0       	rjmp	.+4      	; 0x157a <FUNCmayia+0x24>
}
// power: raise base to n-th power; n >= 0
unsigned int Pwr(uint8_t bs, uint8_t n)
{
    unsigned int i, p;
    p = 1;
    1576:	e1 e0       	ldi	r30, 0x01	; 1
    1578:	f0 e0       	ldi	r31, 0x00	; 0
unsigned int FUNCmayia(unsigned int xi, unsigned int xf, uint8_t nbits)
{//magic formula
	unsigned int mask;
	unsigned int diff;
	unsigned int trans;
	mask=Pwr(2,nbits)-1;
    157a:	31 97       	sbiw	r30, 0x01	; 1
	xi&=mask;
	xf&=mask;
    157c:	6e 23       	and	r22, r30
    157e:	7f 23       	and	r23, r31
	diff=xf^xi;
    1580:	8e 23       	and	r24, r30
    1582:	9f 23       	and	r25, r31
    1584:	86 27       	eor	r24, r22
    1586:	97 27       	eor	r25, r23
	trans=diff&xf;
	return (trans<<nbits)|diff;
    1588:	68 23       	and	r22, r24
    158a:	79 23       	and	r23, r25
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <FUNCmayia+0x3c>
    158e:	66 0f       	add	r22, r22
    1590:	77 1f       	adc	r23, r23
    1592:	4a 95       	dec	r20
    1594:	e2 f7       	brpl	.-8      	; 0x158e <FUNCmayia+0x38>
}
    1596:	86 2b       	or	r24, r22
    1598:	97 2b       	or	r25, r23
    159a:	08 95       	ret

0000159c <FUNCenable>:
int FUNCreadint(int nmin, int nmax);
***/
// uint8_t TRANupdate(struct TRAN *tr, uint8_t idata);
/***Procedure & Function***/
FUNC FUNCenable( void )
{
    159c:	fc 01       	movw	r30, r24
	uint8_t tSREG;
	tSREG=SREG;
    159e:	9f b7       	in	r25, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    15a0:	8f b7       	in	r24, 0x3f	; 63
    15a2:	8f 77       	andi	r24, 0x7F	; 127
    15a4:	8f bf       	out	0x3f, r24	; 63
	func.putstr=FUNCputstr;
	func.getnum=FUNCgetnum;
	func.getnumv2=FUNCgetnumv2;
	func.readint=FUNCreadint;
	*/
	SREG=tSREG;
    15a6:	9f bf       	out	0x3f, r25	; 63
	/******/
	return func;
    15a8:	8d ed       	ldi	r24, 0xDD	; 221
    15aa:	98 e0       	ldi	r25, 0x08	; 8
    15ac:	91 83       	std	Z+1, r25	; 0x01
    15ae:	80 83       	st	Z, r24
    15b0:	88 ef       	ldi	r24, 0xF8	; 248
    15b2:	98 e0       	ldi	r25, 0x08	; 8
    15b4:	93 83       	std	Z+3, r25	; 0x03
    15b6:	82 83       	std	Z+2, r24	; 0x02
    15b8:	82 e2       	ldi	r24, 0x22	; 34
    15ba:	99 e0       	ldi	r25, 0x09	; 9
    15bc:	95 83       	std	Z+5, r25	; 0x05
    15be:	84 83       	std	Z+4, r24	; 0x04
    15c0:	8b ea       	ldi	r24, 0xAB	; 171
    15c2:	9a e0       	ldi	r25, 0x0A	; 10
    15c4:	97 83       	std	Z+7, r25	; 0x07
    15c6:	86 83       	std	Z+6, r24	; 0x06
    15c8:	8a ec       	ldi	r24, 0xCA	; 202
    15ca:	96 e0       	ldi	r25, 0x06	; 6
    15cc:	91 87       	std	Z+9, r25	; 0x09
    15ce:	80 87       	std	Z+8, r24	; 0x08
    15d0:	88 ed       	ldi	r24, 0xD8	; 216
    15d2:	96 e0       	ldi	r25, 0x06	; 6
    15d4:	93 87       	std	Z+11, r25	; 0x0b
    15d6:	82 87       	std	Z+10, r24	; 0x0a
    15d8:	8a ed       	ldi	r24, 0xDA	; 218
    15da:	96 e0       	ldi	r25, 0x06	; 6
    15dc:	95 87       	std	Z+13, r25	; 0x0d
    15de:	84 87       	std	Z+12, r24	; 0x0c
    15e0:	8d ed       	ldi	r24, 0xDD	; 221
    15e2:	96 e0       	ldi	r25, 0x06	; 6
    15e4:	97 87       	std	Z+15, r25	; 0x0f
    15e6:	86 87       	std	Z+14, r24	; 0x0e
    15e8:	80 ee       	ldi	r24, 0xE0	; 224
    15ea:	96 e0       	ldi	r25, 0x06	; 6
    15ec:	91 8b       	std	Z+17, r25	; 0x11
    15ee:	80 8b       	std	Z+16, r24	; 0x10
    15f0:	83 ee       	ldi	r24, 0xE3	; 227
    15f2:	96 e0       	ldi	r25, 0x06	; 6
    15f4:	93 8b       	std	Z+19, r25	; 0x13
    15f6:	82 8b       	std	Z+18, r24	; 0x12
    15f8:	84 ed       	ldi	r24, 0xD4	; 212
    15fa:	96 e0       	ldi	r25, 0x06	; 6
    15fc:	95 8b       	std	Z+21, r25	; 0x15
    15fe:	84 8b       	std	Z+20, r24	; 0x14
    1600:	86 ed       	ldi	r24, 0xD6	; 214
    1602:	96 e0       	ldi	r25, 0x06	; 6
    1604:	97 8b       	std	Z+23, r25	; 0x17
    1606:	86 8b       	std	Z+22, r24	; 0x16
    1608:	85 ee       	ldi	r24, 0xE5	; 229
    160a:	96 e0       	ldi	r25, 0x06	; 6
    160c:	91 8f       	std	Z+25, r25	; 0x19
    160e:	80 8f       	std	Z+24, r24	; 0x18
    1610:	86 e0       	ldi	r24, 0x06	; 6
    1612:	97 e0       	ldi	r25, 0x07	; 7
    1614:	93 8f       	std	Z+27, r25	; 0x1b
    1616:	82 8f       	std	Z+26, r24	; 0x1a
    1618:	84 e1       	ldi	r24, 0x14	; 20
    161a:	97 e0       	ldi	r25, 0x07	; 7
    161c:	95 8f       	std	Z+29, r25	; 0x1d
    161e:	84 8f       	std	Z+28, r24	; 0x1c
    1620:	86 e3       	ldi	r24, 0x36	; 54
    1622:	97 e0       	ldi	r25, 0x07	; 7
    1624:	97 8f       	std	Z+31, r25	; 0x1f
    1626:	86 8f       	std	Z+30, r24	; 0x1e
    1628:	8a e9       	ldi	r24, 0x9A	; 154
    162a:	99 e0       	ldi	r25, 0x09	; 9
    162c:	91 a3       	std	Z+33, r25	; 0x21
    162e:	80 a3       	std	Z+32, r24	; 0x20
    1630:	83 ed       	ldi	r24, 0xD3	; 211
    1632:	99 e0       	ldi	r25, 0x09	; 9
    1634:	93 a3       	std	Z+35, r25	; 0x23
    1636:	82 a3       	std	Z+34, r24	; 0x22
    1638:	8f e3       	ldi	r24, 0x3F	; 63
    163a:	99 e0       	ldi	r25, 0x09	; 9
    163c:	95 a3       	std	Z+37, r25	; 0x25
    163e:	84 a3       	std	Z+36, r24	; 0x24
    1640:	87 e0       	ldi	r24, 0x07	; 7
    1642:	99 e0       	ldi	r25, 0x09	; 9
    1644:	97 a3       	std	Z+39, r25	; 0x27
    1646:	86 a3       	std	Z+38, r24	; 0x26
    1648:	8c ed       	ldi	r24, 0xDC	; 220
    164a:	97 e0       	ldi	r25, 0x07	; 7
    164c:	91 a7       	std	Z+41, r25	; 0x29
    164e:	80 a7       	std	Z+40, r24	; 0x28
    1650:	81 ee       	ldi	r24, 0xE1	; 225
    1652:	97 e0       	ldi	r25, 0x07	; 7
    1654:	93 a7       	std	Z+43, r25	; 0x2b
    1656:	82 a7       	std	Z+42, r24	; 0x2a
    1658:	80 ef       	ldi	r24, 0xF0	; 240
    165a:	97 e0       	ldi	r25, 0x07	; 7
    165c:	95 a7       	std	Z+45, r25	; 0x2d
    165e:	84 a7       	std	Z+44, r24	; 0x2c
    1660:	84 e1       	ldi	r24, 0x14	; 20
    1662:	98 e0       	ldi	r25, 0x08	; 8
    1664:	97 a7       	std	Z+47, r25	; 0x2f
    1666:	86 a7       	std	Z+46, r24	; 0x2e
    1668:	86 e1       	ldi	r24, 0x16	; 22
    166a:	98 e0       	ldi	r25, 0x08	; 8
    166c:	91 ab       	std	Z+49, r25	; 0x31
    166e:	80 ab       	std	Z+48, r24	; 0x30
    1670:	80 e2       	ldi	r24, 0x20	; 32
    1672:	98 e0       	ldi	r25, 0x08	; 8
    1674:	93 ab       	std	Z+51, r25	; 0x33
    1676:	82 ab       	std	Z+50, r24	; 0x32
    1678:	8d e2       	ldi	r24, 0x2D	; 45
    167a:	98 e0       	ldi	r25, 0x08	; 8
    167c:	95 ab       	std	Z+53, r25	; 0x35
    167e:	84 ab       	std	Z+52, r24	; 0x34
    1680:	89 e3       	ldi	r24, 0x39	; 57
    1682:	98 e0       	ldi	r25, 0x08	; 8
    1684:	97 ab       	std	Z+55, r25	; 0x37
    1686:	86 ab       	std	Z+54, r24	; 0x36
    1688:	81 e5       	ldi	r24, 0x51	; 81
    168a:	98 e0       	ldi	r25, 0x08	; 8
    168c:	91 af       	std	Z+57, r25	; 0x39
    168e:	80 af       	std	Z+56, r24	; 0x38
    1690:	84 e6       	ldi	r24, 0x64	; 100
    1692:	98 e0       	ldi	r25, 0x08	; 8
    1694:	93 af       	std	Z+59, r25	; 0x3b
    1696:	82 af       	std	Z+58, r24	; 0x3a
    1698:	8f e6       	ldi	r24, 0x6F	; 111
    169a:	98 e0       	ldi	r25, 0x08	; 8
    169c:	95 af       	std	Z+61, r25	; 0x3d
    169e:	84 af       	std	Z+60, r24	; 0x3c
    16a0:	8c e9       	ldi	r24, 0x9C	; 156
    16a2:	98 e0       	ldi	r25, 0x08	; 8
    16a4:	97 af       	std	Z+63, r25	; 0x3f
    16a6:	86 af       	std	Z+62, r24	; 0x3e
    16a8:	df 01       	movw	r26, r30
    16aa:	a0 5c       	subi	r26, 0xC0	; 192
    16ac:	bf 4f       	sbci	r27, 0xFF	; 255
    16ae:	81 e1       	ldi	r24, 0x11	; 17
    16b0:	9a e0       	ldi	r25, 0x0A	; 10
    16b2:	11 96       	adiw	r26, 0x01	; 1
    16b4:	9c 93       	st	X, r25
    16b6:	8e 93       	st	-X, r24
    16b8:	12 96       	adiw	r26, 0x02	; 2
    16ba:	8c e1       	ldi	r24, 0x1C	; 28
    16bc:	9a e0       	ldi	r25, 0x0A	; 10
    16be:	11 96       	adiw	r26, 0x01	; 1
    16c0:	9c 93       	st	X, r25
    16c2:	8e 93       	st	-X, r24
    16c4:	12 96       	adiw	r26, 0x02	; 2
    16c6:	8d e3       	ldi	r24, 0x3D	; 61
    16c8:	9a e0       	ldi	r25, 0x0A	; 10
    16ca:	11 96       	adiw	r26, 0x01	; 1
    16cc:	9c 93       	st	X, r25
    16ce:	8e 93       	st	-X, r24
    16d0:	12 96       	adiw	r26, 0x02	; 2
    16d2:	8d e8       	ldi	r24, 0x8D	; 141
    16d4:	9a e0       	ldi	r25, 0x0A	; 10
    16d6:	11 96       	adiw	r26, 0x01	; 1
    16d8:	9c 93       	st	X, r25
    16da:	8e 93       	st	-X, r24
    16dc:	12 96       	adiw	r26, 0x02	; 2
    16de:	85 e9       	ldi	r24, 0x95	; 149
    16e0:	9a e0       	ldi	r25, 0x0A	; 10
    16e2:	8d 93       	st	X+, r24
    16e4:	9c 93       	st	X, r25
}
    16e6:	cf 01       	movw	r24, r30
    16e8:	08 95       	ret

000016ea <KEYPAD_get>:
	}
	return data;
}
/***read***/
struct keypadata KEYPAD_get(void)
{
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <KEYPAD_get+0x6>
    16f0:	00 d0       	rcall	.+0      	; 0x16f2 <KEYPAD_get+0x8>
    16f2:	1f 92       	push	r1
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
	return data;
    16f8:	85 e0       	ldi	r24, 0x05	; 5
    16fa:	e4 ef       	ldi	r30, 0xF4	; 244
    16fc:	f3 e0       	ldi	r31, 0x03	; 3
    16fe:	de 01       	movw	r26, r28
    1700:	11 96       	adiw	r26, 0x01	; 1
    1702:	01 90       	ld	r0, Z+
    1704:	0d 92       	st	X+, r0
    1706:	8a 95       	dec	r24
    1708:	e1 f7       	brne	.-8      	; 0x1702 <KEYPAD_get+0x18>
    170a:	29 81       	ldd	r18, Y+1	; 0x01
    170c:	3a 81       	ldd	r19, Y+2	; 0x02
    170e:	4b 81       	ldd	r20, Y+3	; 0x03
    1710:	5c 81       	ldd	r21, Y+4	; 0x04
    1712:	6d 81       	ldd	r22, Y+5	; 0x05
}
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	08 95       	ret

0000172a <KEYPAD_flush>:
/***flush***/
void KEYPAD_flush(void)
{
	KEYPADSTRINGINDEX=0;
    172a:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <KEYPADSTRINGINDEX>
	data.character=' ';
    172e:	e4 ef       	ldi	r30, 0xF4	; 244
    1730:	f3 e0       	ldi	r31, 0x03	; 3
    1732:	80 e2       	ldi	r24, 0x20	; 32
    1734:	80 83       	st	Z, r24
	data.printstring="\0";
    1736:	80 e1       	ldi	r24, 0x10	; 16
    1738:	91 e0       	ldi	r25, 0x01	; 1
    173a:	92 83       	std	Z+2, r25	; 0x02
    173c:	81 83       	std	Z+1, r24	; 0x01
	data.string="\0";
    173e:	94 83       	std	Z+4, r25	; 0x04
    1740:	83 83       	std	Z+3, r24	; 0x03
    1742:	08 95       	ret

00001744 <KEYPAD_getkey>:
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
	//Going to use pull down method.
	return keypad;
}
char KEYPAD_getkey(void)
{
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	21 e0       	ldi	r18, 0x01	; 1
	uint8_t HL;
	char c='\0';
    174a:	80 e0       	ldi	r24, 0x00	; 0
				*keypad_PORT|=(1<<KEYPADLINE_1);
				break;
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    174c:	a9 eb       	ldi	r26, 0xB9	; 185
    174e:	b3 e0       	ldi	r27, 0x03	; 3
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    1750:	ed eb       	ldi	r30, 0xBD	; 189
    1752:	f3 e0       	ldi	r31, 0x03	; 3
					if(HL == (1<<KEYPADDATA_2))
						c=keypadvalue[1][1];
					if(HL == (1<<KEYPADDATA_3))
						c=keypadvalue[1][2];
					if(HL == (1<<KEYPADDATA_4))
						c=keypadvalue[1][3];
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	71 e0       	ldi	r23, 0x01	; 1
    1758:	01 c0       	rjmp	.+2      	; 0x175c <KEYPAD_getkey+0x18>
    175a:	2f 5f       	subi	r18, 0xFF	; 255
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
		switch (keypad_option)
    175c:	9f ef       	ldi	r25, 0xFF	; 255
    175e:	92 0f       	add	r25, r18
    1760:	91 30       	cpi	r25, 0x01	; 1
    1762:	09 f4       	brne	.+2      	; 0x1766 <KEYPAD_getkey+0x22>
    1764:	4b c0       	rjmp	.+150    	; 0x17fc <KEYPAD_getkey+0xb8>
    1766:	38 f0       	brcs	.+14     	; 0x1776 <KEYPAD_getkey+0x32>
    1768:	92 30       	cpi	r25, 0x02	; 2
    176a:	09 f4       	brne	.+2      	; 0x176e <KEYPAD_getkey+0x2a>
    176c:	8c c0       	rjmp	.+280    	; 0x1886 <KEYPAD_getkey+0x142>
    176e:	93 30       	cpi	r25, 0x03	; 3
    1770:	09 f4       	brne	.+2      	; 0x1774 <KEYPAD_getkey+0x30>
    1772:	ce c0       	rjmp	.+412    	; 0x1910 <KEYPAD_getkey+0x1cc>
    1774:	0e c1       	rjmp	.+540    	; 0x1992 <KEYPAD_getkey+0x24e>
		{
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
    1776:	40 91 c4 03 	lds	r20, 0x03C4	; 0x8003c4 <keypad_DDR>
    177a:	50 91 c5 03 	lds	r21, 0x03C5	; 0x8003c5 <keypad_DDR+0x1>
    177e:	ea 01       	movw	r28, r20
    1780:	98 81       	ld	r25, Y
    1782:	90 68       	ori	r25, 0x80	; 128
    1784:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_1);
    1786:	40 91 b6 03 	lds	r20, 0x03B6	; 0x8003b6 <keypad_PORT>
    178a:	50 91 b7 03 	lds	r21, 0x03B7	; 0x8003b7 <keypad_PORT+0x1>
    178e:	ea 01       	movw	r28, r20
    1790:	98 81       	ld	r25, Y
    1792:	9f 77       	andi	r25, 0x7F	; 127
    1794:	98 83       	st	Y, r25
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    1796:	40 91 c2 03 	lds	r20, 0x03C2	; 0x8003c2 <keypad_PIN>
    179a:	50 91 c3 03 	lds	r21, 0x03C3	; 0x8003c3 <keypad_PIN+0x1>
    179e:	ea 01       	movw	r28, r20
    17a0:	38 81       	ld	r19, Y
    17a2:	34 77       	andi	r19, 0x74	; 116
    17a4:	3c 93       	st	X, r19
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
    17a6:	90 81       	ld	r25, Z
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    17a8:	43 2f       	mov	r20, r19
    17aa:	49 27       	eor	r20, r25
    17ac:	94 23       	and	r25, r20
			case 0: //line 1 index 0
				*keypad_DDR|=(1<<KEYPADLINE_1);
				*keypad_PORT&=~(1<<KEYPADLINE_1);
				keypad_dataf.line_1=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_1,keypad_dataf.line_1);
				keypad_datai.line_1=keypad_dataf.line_1;
    17ae:	30 83       	st	Z, r19
				if(HL){
    17b0:	99 23       	and	r25, r25
    17b2:	99 f0       	breq	.+38     	; 0x17da <KEYPAD_getkey+0x96>
					//decode index line one column what ?
					if(HL == (1<<KEYPADDATA_1))
    17b4:	94 30       	cpi	r25, 0x04	; 4
    17b6:	19 f4       	brne	.+6      	; 0x17be <KEYPAD_getkey+0x7a>
						c=keypadvalue[0][0];
    17b8:	eb 01       	movw	r28, r22
    17ba:	88 81       	ld	r24, Y
    17bc:	0a c0       	rjmp	.+20     	; 0x17d2 <KEYPAD_getkey+0x8e>
					if(HL == (1<<KEYPADDATA_2))
    17be:	90 31       	cpi	r25, 0x10	; 16
    17c0:	19 f4       	brne	.+6      	; 0x17c8 <KEYPAD_getkey+0x84>
						c=keypadvalue[0][1];
    17c2:	eb 01       	movw	r28, r22
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	09 c0       	rjmp	.+18     	; 0x17da <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_3))
    17c8:	90 32       	cpi	r25, 0x20	; 32
    17ca:	19 f4       	brne	.+6      	; 0x17d2 <KEYPAD_getkey+0x8e>
						c=keypadvalue[0][2];
    17cc:	eb 01       	movw	r28, r22
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	04 c0       	rjmp	.+8      	; 0x17da <KEYPAD_getkey+0x96>
					if(HL == (1<<KEYPADDATA_4))
    17d2:	90 34       	cpi	r25, 0x40	; 64
    17d4:	11 f4       	brne	.+4      	; 0x17da <KEYPAD_getkey+0x96>
						c=keypadvalue[0][3];
    17d6:	eb 01       	movw	r28, r22
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
				}
				*keypad_DDR&=~(1<<KEYPADLINE_1);
    17da:	40 91 c4 03 	lds	r20, 0x03C4	; 0x8003c4 <keypad_DDR>
    17de:	50 91 c5 03 	lds	r21, 0x03C5	; 0x8003c5 <keypad_DDR+0x1>
    17e2:	ea 01       	movw	r28, r20
    17e4:	98 81       	ld	r25, Y
    17e6:	9f 77       	andi	r25, 0x7F	; 127
    17e8:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_1);
    17ea:	40 91 b6 03 	lds	r20, 0x03B6	; 0x8003b6 <keypad_PORT>
    17ee:	50 91 b7 03 	lds	r21, 0x03B7	; 0x8003b7 <keypad_PORT+0x1>
    17f2:	ea 01       	movw	r28, r20
    17f4:	98 81       	ld	r25, Y
    17f6:	90 68       	ori	r25, 0x80	; 128
    17f8:	98 83       	st	Y, r25
				break;
    17fa:	af cf       	rjmp	.-162    	; 0x175a <KEYPAD_getkey+0x16>
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
    17fc:	40 91 c4 03 	lds	r20, 0x03C4	; 0x8003c4 <keypad_DDR>
    1800:	50 91 c5 03 	lds	r21, 0x03C5	; 0x8003c5 <keypad_DDR+0x1>
    1804:	ea 01       	movw	r28, r20
    1806:	98 81       	ld	r25, Y
    1808:	91 60       	ori	r25, 0x01	; 1
    180a:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_2);
    180c:	40 91 b6 03 	lds	r20, 0x03B6	; 0x8003b6 <keypad_PORT>
    1810:	50 91 b7 03 	lds	r21, 0x03B7	; 0x8003b7 <keypad_PORT+0x1>
    1814:	ea 01       	movw	r28, r20
    1816:	98 81       	ld	r25, Y
    1818:	9e 7f       	andi	r25, 0xFE	; 254
    181a:	98 83       	st	Y, r25
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    181c:	40 91 c2 03 	lds	r20, 0x03C2	; 0x8003c2 <keypad_PIN>
    1820:	50 91 c3 03 	lds	r21, 0x03C3	; 0x8003c3 <keypad_PIN+0x1>
    1824:	ea 01       	movw	r28, r20
    1826:	38 81       	ld	r19, Y
    1828:	34 77       	andi	r19, 0x74	; 116
    182a:	11 96       	adiw	r26, 0x01	; 1
    182c:	3c 93       	st	X, r19
    182e:	11 97       	sbiw	r26, 0x01	; 1
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
    1830:	91 81       	ldd	r25, Z+1	; 0x01
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1832:	43 2f       	mov	r20, r19
    1834:	49 27       	eor	r20, r25
    1836:	94 23       	and	r25, r20
			case 1: //line 2 index 1
				*keypad_DDR|=(1<<KEYPADLINE_2);
				*keypad_PORT&=~(1<<KEYPADLINE_2);
				keypad_dataf.line_2=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_2,keypad_dataf.line_2);
				keypad_datai.line_2=keypad_dataf.line_2;
    1838:	31 83       	std	Z+1, r19	; 0x01
				if(HL){
    183a:	99 23       	and	r25, r25
    183c:	99 f0       	breq	.+38     	; 0x1864 <KEYPAD_getkey+0x120>
					//decode index line two column what ?
					if(HL == (1<<KEYPADDATA_1))
    183e:	94 30       	cpi	r25, 0x04	; 4
    1840:	19 f4       	brne	.+6      	; 0x1848 <KEYPAD_getkey+0x104>
						c=keypadvalue[1][0];
    1842:	eb 01       	movw	r28, r22
    1844:	8c 81       	ldd	r24, Y+4	; 0x04
    1846:	0a c0       	rjmp	.+20     	; 0x185c <KEYPAD_getkey+0x118>
					if(HL == (1<<KEYPADDATA_2))
    1848:	90 31       	cpi	r25, 0x10	; 16
    184a:	19 f4       	brne	.+6      	; 0x1852 <KEYPAD_getkey+0x10e>
						c=keypadvalue[1][1];
    184c:	eb 01       	movw	r28, r22
    184e:	8d 81       	ldd	r24, Y+5	; 0x05
    1850:	09 c0       	rjmp	.+18     	; 0x1864 <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_3))
    1852:	90 32       	cpi	r25, 0x20	; 32
    1854:	19 f4       	brne	.+6      	; 0x185c <KEYPAD_getkey+0x118>
						c=keypadvalue[1][2];
    1856:	eb 01       	movw	r28, r22
    1858:	8e 81       	ldd	r24, Y+6	; 0x06
    185a:	04 c0       	rjmp	.+8      	; 0x1864 <KEYPAD_getkey+0x120>
					if(HL == (1<<KEYPADDATA_4))
    185c:	90 34       	cpi	r25, 0x40	; 64
    185e:	11 f4       	brne	.+4      	; 0x1864 <KEYPAD_getkey+0x120>
						c=keypadvalue[1][3];
    1860:	eb 01       	movw	r28, r22
    1862:	8f 81       	ldd	r24, Y+7	; 0x07
				}
				*keypad_DDR&=~(1<<KEYPADLINE_2);
    1864:	40 91 c4 03 	lds	r20, 0x03C4	; 0x8003c4 <keypad_DDR>
    1868:	50 91 c5 03 	lds	r21, 0x03C5	; 0x8003c5 <keypad_DDR+0x1>
    186c:	ea 01       	movw	r28, r20
    186e:	98 81       	ld	r25, Y
    1870:	9e 7f       	andi	r25, 0xFE	; 254
    1872:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_2);
    1874:	40 91 b6 03 	lds	r20, 0x03B6	; 0x8003b6 <keypad_PORT>
    1878:	50 91 b7 03 	lds	r21, 0x03B7	; 0x8003b7 <keypad_PORT+0x1>
    187c:	ea 01       	movw	r28, r20
    187e:	98 81       	ld	r25, Y
    1880:	91 60       	ori	r25, 0x01	; 1
    1882:	98 83       	st	Y, r25
				break;
    1884:	6a cf       	rjmp	.-300    	; 0x175a <KEYPAD_getkey+0x16>
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
    1886:	40 91 c4 03 	lds	r20, 0x03C4	; 0x8003c4 <keypad_DDR>
    188a:	50 91 c5 03 	lds	r21, 0x03C5	; 0x8003c5 <keypad_DDR+0x1>
    188e:	ea 01       	movw	r28, r20
    1890:	98 81       	ld	r25, Y
    1892:	92 60       	ori	r25, 0x02	; 2
    1894:	98 83       	st	Y, r25
				*keypad_PORT&=~(1<<KEYPADLINE_3);
    1896:	40 91 b6 03 	lds	r20, 0x03B6	; 0x8003b6 <keypad_PORT>
    189a:	50 91 b7 03 	lds	r21, 0x03B7	; 0x8003b7 <keypad_PORT+0x1>
    189e:	ea 01       	movw	r28, r20
    18a0:	98 81       	ld	r25, Y
    18a2:	9d 7f       	andi	r25, 0xFD	; 253
    18a4:	98 83       	st	Y, r25
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    18a6:	40 91 c2 03 	lds	r20, 0x03C2	; 0x8003c2 <keypad_PIN>
    18aa:	50 91 c3 03 	lds	r21, 0x03C3	; 0x8003c3 <keypad_PIN+0x1>
    18ae:	ea 01       	movw	r28, r20
    18b0:	38 81       	ld	r19, Y
    18b2:	34 77       	andi	r19, 0x74	; 116
    18b4:	12 96       	adiw	r26, 0x02	; 2
    18b6:	3c 93       	st	X, r19
    18b8:	12 97       	sbiw	r26, 0x02	; 2
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
    18ba:	92 81       	ldd	r25, Z+2	; 0x02
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    18bc:	43 2f       	mov	r20, r19
    18be:	49 27       	eor	r20, r25
    18c0:	94 23       	and	r25, r20
			case 2: //line 3 index 2
				*keypad_DDR|=(1<<KEYPADLINE_3);
				*keypad_PORT&=~(1<<KEYPADLINE_3);
				keypad_dataf.line_3=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_3,keypad_dataf.line_3);
				keypad_datai.line_3=keypad_dataf.line_3;
    18c2:	32 83       	std	Z+2, r19	; 0x02
				if(HL){
    18c4:	99 23       	and	r25, r25
    18c6:	99 f0       	breq	.+38     	; 0x18ee <KEYPAD_getkey+0x1aa>
					//decode index line three column what ?
					if(HL == (1<<KEYPADDATA_1))
    18c8:	94 30       	cpi	r25, 0x04	; 4
    18ca:	19 f4       	brne	.+6      	; 0x18d2 <KEYPAD_getkey+0x18e>
						c=keypadvalue[2][0];
    18cc:	eb 01       	movw	r28, r22
    18ce:	88 85       	ldd	r24, Y+8	; 0x08
    18d0:	0a c0       	rjmp	.+20     	; 0x18e6 <KEYPAD_getkey+0x1a2>
					if(HL == (1<<KEYPADDATA_2))
    18d2:	90 31       	cpi	r25, 0x10	; 16
    18d4:	19 f4       	brne	.+6      	; 0x18dc <KEYPAD_getkey+0x198>
						c=keypadvalue[2][1];
    18d6:	eb 01       	movw	r28, r22
    18d8:	89 85       	ldd	r24, Y+9	; 0x09
    18da:	09 c0       	rjmp	.+18     	; 0x18ee <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_3))
    18dc:	90 32       	cpi	r25, 0x20	; 32
    18de:	19 f4       	brne	.+6      	; 0x18e6 <KEYPAD_getkey+0x1a2>
						c=keypadvalue[2][2];
    18e0:	eb 01       	movw	r28, r22
    18e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    18e4:	04 c0       	rjmp	.+8      	; 0x18ee <KEYPAD_getkey+0x1aa>
					if(HL == (1<<KEYPADDATA_4))
    18e6:	90 34       	cpi	r25, 0x40	; 64
    18e8:	11 f4       	brne	.+4      	; 0x18ee <KEYPAD_getkey+0x1aa>
						c=keypadvalue[2][3];
    18ea:	eb 01       	movw	r28, r22
    18ec:	8b 85       	ldd	r24, Y+11	; 0x0b
				}
				*keypad_DDR&=~(1<<KEYPADLINE_3);
    18ee:	40 91 c4 03 	lds	r20, 0x03C4	; 0x8003c4 <keypad_DDR>
    18f2:	50 91 c5 03 	lds	r21, 0x03C5	; 0x8003c5 <keypad_DDR+0x1>
    18f6:	ea 01       	movw	r28, r20
    18f8:	98 81       	ld	r25, Y
    18fa:	9d 7f       	andi	r25, 0xFD	; 253
    18fc:	98 83       	st	Y, r25
				*keypad_PORT|=(1<<KEYPADLINE_3);
    18fe:	40 91 b6 03 	lds	r20, 0x03B6	; 0x8003b6 <keypad_PORT>
    1902:	50 91 b7 03 	lds	r21, 0x03B7	; 0x8003b7 <keypad_PORT+0x1>
    1906:	ea 01       	movw	r28, r20
    1908:	98 81       	ld	r25, Y
    190a:	92 60       	ori	r25, 0x02	; 2
    190c:	98 83       	st	Y, r25
				break;
    190e:	25 cf       	rjmp	.-438    	; 0x175a <KEYPAD_getkey+0x16>
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
    1910:	e0 91 c4 03 	lds	r30, 0x03C4	; 0x8003c4 <keypad_DDR>
    1914:	f0 91 c5 03 	lds	r31, 0x03C5	; 0x8003c5 <keypad_DDR+0x1>
    1918:	90 81       	ld	r25, Z
    191a:	98 60       	ori	r25, 0x08	; 8
    191c:	90 83       	st	Z, r25
				*keypad_PORT&=~(1<<KEYPADLINE_4);
    191e:	e0 91 b6 03 	lds	r30, 0x03B6	; 0x8003b6 <keypad_PORT>
    1922:	f0 91 b7 03 	lds	r31, 0x03B7	; 0x8003b7 <keypad_PORT+0x1>
    1926:	90 81       	ld	r25, Z
    1928:	97 7f       	andi	r25, 0xF7	; 247
    192a:	90 83       	st	Z, r25
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
    192c:	e0 91 c2 03 	lds	r30, 0x03C2	; 0x8003c2 <keypad_PIN>
    1930:	f0 91 c3 03 	lds	r31, 0x03C3	; 0x8003c3 <keypad_PIN+0x1>
    1934:	20 81       	ld	r18, Z
    1936:	24 77       	andi	r18, 0x74	; 116
    1938:	20 93 bc 03 	sts	0x03BC, r18	; 0x8003bc <keypad_dataf+0x3>
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
    193c:	ed eb       	ldi	r30, 0xBD	; 189
    193e:	f3 e0       	ldi	r31, 0x03	; 3
    1940:	93 81       	ldd	r25, Z+3	; 0x03
uint8_t KEYPADhl(uint8_t xi, uint8_t xf)
{
	uint8_t i;
	//printf("KEYPADhl\n");
	i=xf^xi;
	i&=xi;
    1942:	32 2f       	mov	r19, r18
    1944:	39 27       	eor	r19, r25
    1946:	93 23       	and	r25, r19
			case 3: //line 4 index 3
				*keypad_DDR|=(1<<KEYPADLINE_4);
				*keypad_PORT&=~(1<<KEYPADLINE_4);
				keypad_dataf.line_4=*keypad_PIN & ((1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4));
				HL=KEYPADhl(keypad_datai.line_4,keypad_dataf.line_4);
				keypad_datai.line_4=keypad_dataf.line_4;
    1948:	23 83       	std	Z+3, r18	; 0x03
				if(HL){
    194a:	99 23       	and	r25, r25
    194c:	99 f0       	breq	.+38     	; 0x1974 <KEYPAD_getkey+0x230>
					//decode index line four column what ?
					if(HL == (1<<KEYPADDATA_1))
    194e:	94 30       	cpi	r25, 0x04	; 4
    1950:	19 f4       	brne	.+6      	; 0x1958 <KEYPAD_getkey+0x214>
						c=keypadvalue[3][0];
    1952:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
    1956:	0a c0       	rjmp	.+20     	; 0x196c <KEYPAD_getkey+0x228>
					if(HL == (1<<KEYPADDATA_2))
    1958:	90 31       	cpi	r25, 0x10	; 16
    195a:	19 f4       	brne	.+6      	; 0x1962 <KEYPAD_getkey+0x21e>
						c=keypadvalue[3][1];
    195c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
    1960:	09 c0       	rjmp	.+18     	; 0x1974 <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_3))
    1962:	90 32       	cpi	r25, 0x20	; 32
    1964:	19 f4       	brne	.+6      	; 0x196c <KEYPAD_getkey+0x228>
						c=keypadvalue[3][2];
    1966:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    196a:	04 c0       	rjmp	.+8      	; 0x1974 <KEYPAD_getkey+0x230>
					if(HL == (1<<KEYPADDATA_4))
    196c:	90 34       	cpi	r25, 0x40	; 64
    196e:	11 f4       	brne	.+4      	; 0x1974 <KEYPAD_getkey+0x230>
						c=keypadvalue[3][3];
    1970:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
				}
				*keypad_DDR&=~(1<<KEYPADLINE_4);
    1974:	e0 91 c4 03 	lds	r30, 0x03C4	; 0x8003c4 <keypad_DDR>
    1978:	f0 91 c5 03 	lds	r31, 0x03C5	; 0x8003c5 <keypad_DDR+0x1>
    197c:	90 81       	ld	r25, Z
    197e:	97 7f       	andi	r25, 0xF7	; 247
    1980:	90 83       	st	Z, r25
				*keypad_PORT|=(1<<KEYPADLINE_4);
    1982:	e0 91 b6 03 	lds	r30, 0x03B6	; 0x8003b6 <keypad_PORT>
    1986:	f0 91 b7 03 	lds	r31, 0x03B7	; 0x8003b7 <keypad_PORT+0x1>
    198a:	90 81       	ld	r25, Z
    198c:	98 60       	ori	r25, 0x08	; 8
    198e:	90 83       	st	Z, r25
    1990:	03 c0       	rjmp	.+6      	; 0x1998 <KEYPAD_getkey+0x254>
char KEYPAD_getkey(void)
{
	uint8_t HL;
	char c='\0';
	uint8_t keypad_option;
	for(keypad_option=0;keypad_option<KEYPADLINES;keypad_option++){
    1992:	24 30       	cpi	r18, 0x04	; 4
    1994:	08 f4       	brcc	.+2      	; 0x1998 <KEYPAD_getkey+0x254>
    1996:	e1 ce       	rjmp	.-574    	; 0x175a <KEYPAD_getkey+0x16>
			default:
				break;
		}
	}
	return c;
}
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	08 95       	ret

0000199e <KEYPAD_read>:
/***read***/
struct keypadata KEYPAD_read(void)
{
    199e:	cf 93       	push	r28
    19a0:	df 93       	push	r29
    19a2:	00 d0       	rcall	.+0      	; 0x19a4 <KEYPAD_read+0x6>
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <KEYPAD_read+0x8>
    19a6:	1f 92       	push	r1
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
	char c;
	c=KEYPAD_getkey(); //returns null all the time when no entry
    19ac:	cb de       	rcall	.-618    	; 0x1744 <KEYPAD_getkey>
	if(c){
    19ae:	88 23       	and	r24, r24
    19b0:	b1 f1       	breq	.+108    	; 0x1a1e <KEYPAD_read+0x80>
		data.character=c;
    19b2:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <data>
		if(KEYPADSTRINGINDEX<(KEYPADSTRINGSIZE)){
    19b6:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <KEYPADSTRINGINDEX>
    19ba:	94 31       	cpi	r25, 0x14	; 20
    19bc:	88 f4       	brcc	.+34     	; 0x19e0 <KEYPAD_read+0x42>
			KEYPAD_string[KEYPADSTRINGINDEX]=c;
    19be:	e0 91 c1 03 	lds	r30, 0x03C1	; 0x8003c1 <KEYPADSTRINGINDEX>
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	ea 53       	subi	r30, 0x3A	; 58
    19c6:	fc 4f       	sbci	r31, 0xFC	; 252
    19c8:	80 83       	st	Z, r24
			KEYPADSTRINGINDEX++;
    19ca:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <KEYPADSTRINGINDEX>
    19ce:	9f 5f       	subi	r25, 0xFF	; 255
    19d0:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <KEYPADSTRINGINDEX>
			KEYPAD_string[KEYPADSTRINGINDEX]='\0';
    19d4:	e0 91 c1 03 	lds	r30, 0x03C1	; 0x8003c1 <KEYPADSTRINGINDEX>
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	ea 53       	subi	r30, 0x3A	; 58
    19dc:	fc 4f       	sbci	r31, 0xFC	; 252
    19de:	10 82       	st	Z, r1
		}
		if(c==KEYPADENTERKEY){
    19e0:	84 34       	cpi	r24, 0x44	; 68
    19e2:	99 f4       	brne	.+38     	; 0x1a0a <KEYPAD_read+0x6c>
			KEYPAD_string[KEYPADSTRINGINDEX-1]='\0';
    19e4:	e0 91 c1 03 	lds	r30, 0x03C1	; 0x8003c1 <KEYPADSTRINGINDEX>
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	eb 53       	subi	r30, 0x3B	; 59
    19ec:	fc 4f       	sbci	r31, 0xFC	; 252
    19ee:	10 82       	st	Z, r1
			KEYPADSTRINGINDEX=0;
    19f0:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <KEYPADSTRINGINDEX>
			data.printstring="\0";
    19f4:	e4 ef       	ldi	r30, 0xF4	; 244
    19f6:	f3 e0       	ldi	r31, 0x03	; 3
    19f8:	80 e1       	ldi	r24, 0x10	; 16
    19fa:	91 e0       	ldi	r25, 0x01	; 1
    19fc:	92 83       	std	Z+2, r25	; 0x02
    19fe:	81 83       	std	Z+1, r24	; 0x01
			data.string=KEYPAD_string; // shift output
    1a00:	86 ec       	ldi	r24, 0xC6	; 198
    1a02:	93 e0       	ldi	r25, 0x03	; 3
    1a04:	94 83       	std	Z+4, r25	; 0x04
    1a06:	83 83       	std	Z+3, r24	; 0x03
    1a08:	0a c0       	rjmp	.+20     	; 0x1a1e <KEYPAD_read+0x80>
		}else{
			data.printstring=KEYPAD_string;
    1a0a:	e4 ef       	ldi	r30, 0xF4	; 244
    1a0c:	f3 e0       	ldi	r31, 0x03	; 3
    1a0e:	86 ec       	ldi	r24, 0xC6	; 198
    1a10:	93 e0       	ldi	r25, 0x03	; 3
    1a12:	92 83       	std	Z+2, r25	; 0x02
    1a14:	81 83       	std	Z+1, r24	; 0x01
			data.string="\0"; // clear output
    1a16:	80 e1       	ldi	r24, 0x10	; 16
    1a18:	91 e0       	ldi	r25, 0x01	; 1
    1a1a:	94 83       	std	Z+4, r25	; 0x04
    1a1c:	83 83       	std	Z+3, r24	; 0x03
		}
	}
	return data;
    1a1e:	85 e0       	ldi	r24, 0x05	; 5
    1a20:	e4 ef       	ldi	r30, 0xF4	; 244
    1a22:	f3 e0       	ldi	r31, 0x03	; 3
    1a24:	de 01       	movw	r26, r28
    1a26:	11 96       	adiw	r26, 0x01	; 1
    1a28:	01 90       	ld	r0, Z+
    1a2a:	0d 92       	st	X+, r0
    1a2c:	8a 95       	dec	r24
    1a2e:	e1 f7       	brne	.-8      	; 0x1a28 <KEYPAD_read+0x8a>
    1a30:	29 81       	ldd	r18, Y+1	; 0x01
    1a32:	3a 81       	ldd	r19, Y+2	; 0x02
    1a34:	4b 81       	ldd	r20, Y+3	; 0x03
    1a36:	5c 81       	ldd	r21, Y+4	; 0x04
    1a38:	6d 81       	ldd	r22, Y+5	; 0x05
}
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	08 95       	ret

00001a50 <KEYPADenable>:
uint8_t KEYPADlh(uint8_t xi, uint8_t xf);
/***hl***/
uint8_t KEYPADhl(uint8_t xi, uint8_t xf);
/***Procedure & Function***/
KEYPAD KEYPADenable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	28 97       	sbiw	r28, 0x08	; 8
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	f8 94       	cli
    1a5e:	de bf       	out	0x3e, r29	; 62
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	cd bf       	out	0x3d, r28	; 61
	//LOCAL VARIABLE
	uint8_t tSREG;
	tSREG=SREG;
    1a64:	2f b7       	in	r18, 0x3f	; 63
	data.character=' ';
    1a66:	30 e2       	ldi	r19, 0x20	; 32
    1a68:	30 93 f4 03 	sts	0x03F4, r19	; 0x8003f4 <data>
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	KEYPAD keypad;
	//import parametros
	keypad_DDR=ddr;
    1a6c:	90 93 c5 03 	sts	0x03C5, r25	; 0x8003c5 <keypad_DDR+0x1>
    1a70:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <keypad_DDR>
	keypad_PIN=pin;
    1a74:	70 93 c3 03 	sts	0x03C3, r23	; 0x8003c3 <keypad_PIN+0x1>
    1a78:	60 93 c2 03 	sts	0x03C2, r22	; 0x8003c2 <keypad_PIN>
	keypad_PORT=port;
    1a7c:	50 93 b7 03 	sts	0x03B7, r21	; 0x8003b7 <keypad_PORT+0x1>
    1a80:	40 93 b6 03 	sts	0x03B6, r20	; 0x8003b6 <keypad_PORT>
	//inic variables
	*keypad_DDR=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    1a84:	3b e8       	ldi	r19, 0x8B	; 139
    1a86:	fc 01       	movw	r30, r24
    1a88:	30 83       	st	Z, r19
	*keypad_PORT=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1a8a:	e0 91 b6 03 	lds	r30, 0x03B6	; 0x8003b6 <keypad_PORT>
    1a8e:	f0 91 b7 03 	lds	r31, 0x03B7	; 0x8003b7 <keypad_PORT+0x1>
    1a92:	84 e7       	ldi	r24, 0x74	; 116
    1a94:	80 83       	st	Z, r24
	keypad_datai.line_1=keypad_dataf.line_1=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1a96:	a9 eb       	ldi	r26, 0xB9	; 185
    1a98:	b3 e0       	ldi	r27, 0x03	; 3
    1a9a:	8c 93       	st	X, r24
    1a9c:	ed eb       	ldi	r30, 0xBD	; 189
    1a9e:	f3 e0       	ldi	r31, 0x03	; 3
    1aa0:	80 83       	st	Z, r24
	keypad_datai.line_2=keypad_dataf.line_2=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1aa2:	11 96       	adiw	r26, 0x01	; 1
    1aa4:	8c 93       	st	X, r24
    1aa6:	11 97       	sbiw	r26, 0x01	; 1
    1aa8:	81 83       	std	Z+1, r24	; 0x01
	keypad_datai.line_3=keypad_dataf.line_3=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1aaa:	12 96       	adiw	r26, 0x02	; 2
    1aac:	8c 93       	st	X, r24
    1aae:	12 97       	sbiw	r26, 0x02	; 2
    1ab0:	82 83       	std	Z+2, r24	; 0x02
	keypad_datai.line_4=keypad_dataf.line_4=(1<<KEYPADDATA_1) | (1<<KEYPADDATA_2) | (1<<KEYPADDATA_3) | (1<<KEYPADDATA_4);
    1ab2:	13 96       	adiw	r26, 0x03	; 3
    1ab4:	8c 93       	st	X, r24
    1ab6:	83 83       	std	Z+3, r24	; 0x03
	KEYPADSTRINGINDEX=0;
    1ab8:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <KEYPADSTRINGINDEX>
	//Vtable
	keypad.getkey=KEYPAD_getkey;
	keypad.read=KEYPAD_read;
	keypad.get=KEYPAD_get;
	keypad.flush=KEYPAD_flush;
	SREG=tSREG;
    1abc:	2f bf       	out	0x3f, r18	; 63
	//
	*keypad_PORT|=(1<<KEYPADLINE_1) | (1<<KEYPADLINE_2) | (1<<KEYPADLINE_3) | (1<<KEYPADLINE_4);
    1abe:	e0 91 b6 03 	lds	r30, 0x03B6	; 0x8003b6 <keypad_PORT>
    1ac2:	f0 91 b7 03 	lds	r31, 0x03B7	; 0x8003b7 <keypad_PORT+0x1>
    1ac6:	80 81       	ld	r24, Z
    1ac8:	8b 68       	ori	r24, 0x8B	; 139
    1aca:	80 83       	st	Z, r24
	//Going to use pull down method.
	return keypad;
    1acc:	22 ea       	ldi	r18, 0xA2	; 162
    1ace:	3b e0       	ldi	r19, 0x0B	; 11
    1ad0:	3a 83       	std	Y+2, r19	; 0x02
    1ad2:	29 83       	std	Y+1, r18	; 0x01
    1ad4:	4f ec       	ldi	r20, 0xCF	; 207
    1ad6:	5c e0       	ldi	r21, 0x0C	; 12
    1ad8:	5c 83       	std	Y+4, r21	; 0x04
    1ada:	4b 83       	std	Y+3, r20	; 0x03
    1adc:	65 e7       	ldi	r22, 0x75	; 117
    1ade:	7b e0       	ldi	r23, 0x0B	; 11
    1ae0:	7e 83       	std	Y+6, r23	; 0x06
    1ae2:	6d 83       	std	Y+5, r22	; 0x05
    1ae4:	85 e9       	ldi	r24, 0x95	; 149
    1ae6:	9b e0       	ldi	r25, 0x0B	; 11
    1ae8:	98 87       	std	Y+8, r25	; 0x08
    1aea:	8f 83       	std	Y+7, r24	; 0x07
    1aec:	3a 81       	ldd	r19, Y+2	; 0x02
    1aee:	5c 81       	ldd	r21, Y+4	; 0x04
    1af0:	7e 81       	ldd	r23, Y+6	; 0x06
}
    1af2:	98 85       	ldd	r25, Y+8	; 0x08
    1af4:	28 96       	adiw	r28, 0x08	; 8
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	08 95       	ret

00001b06 <LCD0_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b06:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1b0a:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1b0e:	90 81       	ld	r25, Z
    1b10:	9d 7f       	andi	r25, 0xFD	; 253
    1b12:	90 83       	st	Z, r25
    1b14:	67 2b       	or	r22, r23
    1b16:	41 f0       	breq	.+16     	; 0x1b28 <LCD0_write+0x22>
    1b18:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1b1c:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1b20:	90 81       	ld	r25, Z
    1b22:	91 60       	ori	r25, 0x01	; 1
    1b24:	90 83       	st	Z, r25
    1b26:	07 c0       	rjmp	.+14     	; 0x1b36 <LCD0_write+0x30>
    1b28:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1b2c:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1b30:	90 81       	ld	r25, Z
    1b32:	9e 7f       	andi	r25, 0xFE	; 254
    1b34:	90 83       	st	Z, r25
    1b36:	e0 91 e2 03 	lds	r30, 0x03E2	; 0x8003e2 <lcd0_DDR>
    1b3a:	f0 91 e3 03 	lds	r31, 0x03E3	; 0x8003e3 <lcd0_DDR+0x1>
    1b3e:	90 81       	ld	r25, Z
    1b40:	90 6f       	ori	r25, 0xF0	; 240
    1b42:	90 83       	st	Z, r25
    1b44:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1b48:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1b4c:	90 81       	ld	r25, Z
    1b4e:	94 60       	ori	r25, 0x04	; 4
    1b50:	90 83       	st	Z, r25
    1b52:	88 23       	and	r24, r24
    1b54:	44 f4       	brge	.+16     	; 0x1b66 <LCD0_write+0x60>
    1b56:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1b5a:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1b5e:	90 81       	ld	r25, Z
    1b60:	90 68       	ori	r25, 0x80	; 128
    1b62:	90 83       	st	Z, r25
    1b64:	07 c0       	rjmp	.+14     	; 0x1b74 <LCD0_write+0x6e>
    1b66:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1b6a:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1b6e:	90 81       	ld	r25, Z
    1b70:	9f 77       	andi	r25, 0x7F	; 127
    1b72:	90 83       	st	Z, r25
    1b74:	86 ff       	sbrs	r24, 6
    1b76:	08 c0       	rjmp	.+16     	; 0x1b88 <LCD0_write+0x82>
    1b78:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1b7c:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1b80:	90 81       	ld	r25, Z
    1b82:	90 64       	ori	r25, 0x40	; 64
    1b84:	90 83       	st	Z, r25
    1b86:	07 c0       	rjmp	.+14     	; 0x1b96 <LCD0_write+0x90>
    1b88:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1b8c:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1b90:	90 81       	ld	r25, Z
    1b92:	9f 7b       	andi	r25, 0xBF	; 191
    1b94:	90 83       	st	Z, r25
    1b96:	85 ff       	sbrs	r24, 5
    1b98:	08 c0       	rjmp	.+16     	; 0x1baa <LCD0_write+0xa4>
    1b9a:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1b9e:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1ba2:	90 81       	ld	r25, Z
    1ba4:	90 62       	ori	r25, 0x20	; 32
    1ba6:	90 83       	st	Z, r25
    1ba8:	07 c0       	rjmp	.+14     	; 0x1bb8 <LCD0_write+0xb2>
    1baa:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1bae:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1bb2:	90 81       	ld	r25, Z
    1bb4:	9f 7d       	andi	r25, 0xDF	; 223
    1bb6:	90 83       	st	Z, r25
    1bb8:	84 ff       	sbrs	r24, 4
    1bba:	08 c0       	rjmp	.+16     	; 0x1bcc <LCD0_write+0xc6>
    1bbc:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1bc0:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1bc4:	90 81       	ld	r25, Z
    1bc6:	90 61       	ori	r25, 0x10	; 16
    1bc8:	90 83       	st	Z, r25
    1bca:	07 c0       	rjmp	.+14     	; 0x1bda <LCD0_write+0xd4>
    1bcc:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1bd0:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1bd4:	90 81       	ld	r25, Z
    1bd6:	9f 7e       	andi	r25, 0xEF	; 239
    1bd8:	90 83       	st	Z, r25
    1bda:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1bde:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1be2:	90 81       	ld	r25, Z
    1be4:	9b 7f       	andi	r25, 0xFB	; 251
    1be6:	90 83       	st	Z, r25
    1be8:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1bec:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1bf0:	90 81       	ld	r25, Z
    1bf2:	94 60       	ori	r25, 0x04	; 4
    1bf4:	90 83       	st	Z, r25
    1bf6:	83 ff       	sbrs	r24, 3
    1bf8:	08 c0       	rjmp	.+16     	; 0x1c0a <LCD0_write+0x104>
    1bfa:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1bfe:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1c02:	90 81       	ld	r25, Z
    1c04:	90 68       	ori	r25, 0x80	; 128
    1c06:	90 83       	st	Z, r25
    1c08:	07 c0       	rjmp	.+14     	; 0x1c18 <LCD0_write+0x112>
    1c0a:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1c0e:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1c12:	90 81       	ld	r25, Z
    1c14:	9f 77       	andi	r25, 0x7F	; 127
    1c16:	90 83       	st	Z, r25
    1c18:	82 ff       	sbrs	r24, 2
    1c1a:	08 c0       	rjmp	.+16     	; 0x1c2c <LCD0_write+0x126>
    1c1c:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1c20:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1c24:	90 81       	ld	r25, Z
    1c26:	90 64       	ori	r25, 0x40	; 64
    1c28:	90 83       	st	Z, r25
    1c2a:	07 c0       	rjmp	.+14     	; 0x1c3a <LCD0_write+0x134>
    1c2c:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1c30:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1c34:	90 81       	ld	r25, Z
    1c36:	9f 7b       	andi	r25, 0xBF	; 191
    1c38:	90 83       	st	Z, r25
    1c3a:	81 ff       	sbrs	r24, 1
    1c3c:	08 c0       	rjmp	.+16     	; 0x1c4e <LCD0_write+0x148>
    1c3e:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1c42:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1c46:	90 81       	ld	r25, Z
    1c48:	90 62       	ori	r25, 0x20	; 32
    1c4a:	90 83       	st	Z, r25
    1c4c:	07 c0       	rjmp	.+14     	; 0x1c5c <LCD0_write+0x156>
    1c4e:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1c52:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1c56:	90 81       	ld	r25, Z
    1c58:	9f 7d       	andi	r25, 0xDF	; 223
    1c5a:	90 83       	st	Z, r25
    1c5c:	80 ff       	sbrs	r24, 0
    1c5e:	08 c0       	rjmp	.+16     	; 0x1c70 <LCD0_write+0x16a>
    1c60:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1c64:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1c68:	80 81       	ld	r24, Z
    1c6a:	80 61       	ori	r24, 0x10	; 16
    1c6c:	80 83       	st	Z, r24
    1c6e:	07 c0       	rjmp	.+14     	; 0x1c7e <LCD0_write+0x178>
    1c70:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1c74:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1c78:	80 81       	ld	r24, Z
    1c7a:	8f 7e       	andi	r24, 0xEF	; 239
    1c7c:	80 83       	st	Z, r24
    1c7e:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1c82:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1c86:	80 81       	ld	r24, Z
    1c88:	8b 7f       	andi	r24, 0xFB	; 251
    1c8a:	80 83       	st	Z, r24
    1c8c:	08 95       	ret

00001c8e <LCD0_read>:
    1c8e:	e0 91 e2 03 	lds	r30, 0x03E2	; 0x8003e2 <lcd0_DDR>
    1c92:	f0 91 e3 03 	lds	r31, 0x03E3	; 0x8003e3 <lcd0_DDR+0x1>
    1c96:	20 81       	ld	r18, Z
    1c98:	2f 70       	andi	r18, 0x0F	; 15
    1c9a:	20 83       	st	Z, r18
    1c9c:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1ca0:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1ca4:	20 81       	ld	r18, Z
    1ca6:	20 6f       	ori	r18, 0xF0	; 240
    1ca8:	20 83       	st	Z, r18
    1caa:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1cae:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1cb2:	20 81       	ld	r18, Z
    1cb4:	22 60       	ori	r18, 0x02	; 2
    1cb6:	20 83       	st	Z, r18
    1cb8:	89 2b       	or	r24, r25
    1cba:	41 f0       	breq	.+16     	; 0x1ccc <LCD0_read+0x3e>
    1cbc:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1cc0:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1cc4:	80 81       	ld	r24, Z
    1cc6:	81 60       	ori	r24, 0x01	; 1
    1cc8:	80 83       	st	Z, r24
    1cca:	07 c0       	rjmp	.+14     	; 0x1cda <LCD0_read+0x4c>
    1ccc:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1cd0:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1cd4:	80 81       	ld	r24, Z
    1cd6:	8e 7f       	andi	r24, 0xFE	; 254
    1cd8:	80 83       	st	Z, r24
    1cda:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1cde:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1ce2:	80 81       	ld	r24, Z
    1ce4:	84 60       	ori	r24, 0x04	; 4
    1ce6:	80 83       	st	Z, r24
    1ce8:	e0 91 db 03 	lds	r30, 0x03DB	; 0x8003db <lcd0_PIN>
    1cec:	f0 91 dc 03 	lds	r31, 0x03DC	; 0x8003dc <lcd0_PIN+0x1>
    1cf0:	80 81       	ld	r24, Z
    1cf2:	88 23       	and	r24, r24
    1cf4:	14 f0       	brlt	.+4      	; 0x1cfa <LCD0_read+0x6c>
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	01 c0       	rjmp	.+2      	; 0x1cfc <LCD0_read+0x6e>
    1cfa:	80 e8       	ldi	r24, 0x80	; 128
    1cfc:	90 81       	ld	r25, Z
    1cfe:	96 ff       	sbrs	r25, 6
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <LCD0_read+0x78>
    1d02:	80 64       	ori	r24, 0x40	; 64
    1d04:	01 c0       	rjmp	.+2      	; 0x1d08 <LCD0_read+0x7a>
    1d06:	8f 7b       	andi	r24, 0xBF	; 191
    1d08:	90 81       	ld	r25, Z
    1d0a:	95 ff       	sbrs	r25, 5
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <LCD0_read+0x84>
    1d0e:	80 62       	ori	r24, 0x20	; 32
    1d10:	01 c0       	rjmp	.+2      	; 0x1d14 <LCD0_read+0x86>
    1d12:	8f 7d       	andi	r24, 0xDF	; 223
    1d14:	90 81       	ld	r25, Z
    1d16:	94 ff       	sbrs	r25, 4
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <LCD0_read+0x90>
    1d1a:	80 61       	ori	r24, 0x10	; 16
    1d1c:	01 c0       	rjmp	.+2      	; 0x1d20 <LCD0_read+0x92>
    1d1e:	8f 7e       	andi	r24, 0xEF	; 239
    1d20:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1d24:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1d28:	90 81       	ld	r25, Z
    1d2a:	9b 7f       	andi	r25, 0xFB	; 251
    1d2c:	90 83       	st	Z, r25
    1d2e:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1d32:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1d36:	90 81       	ld	r25, Z
    1d38:	94 60       	ori	r25, 0x04	; 4
    1d3a:	90 83       	st	Z, r25
    1d3c:	e0 91 db 03 	lds	r30, 0x03DB	; 0x8003db <lcd0_PIN>
    1d40:	f0 91 dc 03 	lds	r31, 0x03DC	; 0x8003dc <lcd0_PIN+0x1>
    1d44:	90 81       	ld	r25, Z
    1d46:	99 23       	and	r25, r25
    1d48:	14 f4       	brge	.+4      	; 0x1d4e <LCD0_read+0xc0>
    1d4a:	88 60       	ori	r24, 0x08	; 8
    1d4c:	01 c0       	rjmp	.+2      	; 0x1d50 <LCD0_read+0xc2>
    1d4e:	87 7f       	andi	r24, 0xF7	; 247
    1d50:	90 81       	ld	r25, Z
    1d52:	96 ff       	sbrs	r25, 6
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <LCD0_read+0xcc>
    1d56:	84 60       	ori	r24, 0x04	; 4
    1d58:	01 c0       	rjmp	.+2      	; 0x1d5c <LCD0_read+0xce>
    1d5a:	8b 7f       	andi	r24, 0xFB	; 251
    1d5c:	90 81       	ld	r25, Z
    1d5e:	95 ff       	sbrs	r25, 5
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <LCD0_read+0xd8>
    1d62:	82 60       	ori	r24, 0x02	; 2
    1d64:	01 c0       	rjmp	.+2      	; 0x1d68 <LCD0_read+0xda>
    1d66:	8d 7f       	andi	r24, 0xFD	; 253
    1d68:	90 81       	ld	r25, Z
    1d6a:	94 ff       	sbrs	r25, 4
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <LCD0_read+0xe4>
    1d6e:	81 60       	ori	r24, 0x01	; 1
    1d70:	01 c0       	rjmp	.+2      	; 0x1d74 <LCD0_read+0xe6>
    1d72:	8e 7f       	andi	r24, 0xFE	; 254
    1d74:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1d78:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1d7c:	90 81       	ld	r25, Z
    1d7e:	9b 7f       	andi	r25, 0xFB	; 251
    1d80:	90 83       	st	Z, r25
    1d82:	08 95       	ret

00001d84 <LCD0_BF>:
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	80 df       	rcall	.-256    	; 0x1c8e <LCD0_read>
    1d8e:	cb e0       	ldi	r28, 0x0B	; 11
    1d90:	d0 e0       	ldi	r29, 0x00	; 0
    1d92:	05 c0       	rjmp	.+10     	; 0x1d9e <LCD0_BF+0x1a>
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	7a df       	rcall	.-268    	; 0x1c8e <LCD0_read>
    1d9a:	21 97       	sbiw	r28, 0x01	; 1
    1d9c:	11 f0       	breq	.+4      	; 0x1da2 <LCD0_BF+0x1e>
    1d9e:	88 23       	and	r24, r24
    1da0:	cc f3       	brlt	.-14     	; 0x1d94 <LCD0_BF+0x10>
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	08 95       	ret

00001da8 <LCD0_putch>:
    1da8:	61 e0       	ldi	r22, 0x01	; 1
    1daa:	70 e0       	ldi	r23, 0x00	; 0
    1dac:	ac de       	rcall	.-680    	; 0x1b06 <LCD0_write>
    1dae:	ea cf       	rjmp	.-44     	; 0x1d84 <LCD0_BF>
    1db0:	08 95       	ret

00001db2 <LCD0_getch>:
    1db2:	cf 93       	push	r28
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	6a df       	rcall	.-300    	; 0x1c8e <LCD0_read>
    1dba:	c8 2f       	mov	r28, r24
    1dbc:	e3 df       	rcall	.-58     	; 0x1d84 <LCD0_BF>
    1dbe:	8c 2f       	mov	r24, r28
    1dc0:	cf 91       	pop	r28
    1dc2:	08 95       	ret

00001dc4 <LCD0_string>:
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
    1dc8:	ec 01       	movw	r28, r24
    1dca:	88 81       	ld	r24, Y
    1dcc:	88 23       	and	r24, r24
    1dce:	41 f0       	breq	.+16     	; 0x1de0 <LCD0_string+0x1c>
    1dd0:	21 96       	adiw	r28, 0x01	; 1
    1dd2:	61 e0       	ldi	r22, 0x01	; 1
    1dd4:	70 e0       	ldi	r23, 0x00	; 0
    1dd6:	97 de       	rcall	.-722    	; 0x1b06 <LCD0_write>
    1dd8:	d5 df       	rcall	.-86     	; 0x1d84 <LCD0_BF>
    1dda:	89 91       	ld	r24, Y+
    1ddc:	81 11       	cpse	r24, r1
    1dde:	f9 cf       	rjmp	.-14     	; 0x1dd2 <LCD0_string+0xe>
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	08 95       	ret

00001de6 <LCD0_string_size>:
    1de6:	0f 93       	push	r16
    1de8:	1f 93       	push	r17
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
    1dee:	fc 01       	movw	r30, r24
    1df0:	d6 2f       	mov	r29, r22
    1df2:	80 81       	ld	r24, Z
    1df4:	88 23       	and	r24, r24
    1df6:	51 f0       	breq	.+20     	; 0x1e0c <LCD0_string_size+0x26>
    1df8:	8f 01       	movw	r16, r30
    1dfa:	0f 5f       	subi	r16, 0xFF	; 255
    1dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfe:	61 11       	cpse	r22, r1
    1e00:	09 c0       	rjmp	.+18     	; 0x1e14 <LCD0_string_size+0x2e>
    1e02:	1b c0       	rjmp	.+54     	; 0x1e3a <LCD0_string_size+0x54>
    1e04:	cf 5f       	subi	r28, 0xFF	; 255
    1e06:	dc 17       	cp	r29, r28
    1e08:	30 f4       	brcc	.+12     	; 0x1e16 <LCD0_string_size+0x30>
    1e0a:	01 c0       	rjmp	.+2      	; 0x1e0e <LCD0_string_size+0x28>
    1e0c:	c0 e0       	ldi	r28, 0x00	; 0
    1e0e:	cd 17       	cp	r28, r29
    1e10:	60 f0       	brcs	.+24     	; 0x1e2a <LCD0_string_size+0x44>
    1e12:	13 c0       	rjmp	.+38     	; 0x1e3a <LCD0_string_size+0x54>
    1e14:	c1 e0       	ldi	r28, 0x01	; 1
    1e16:	61 e0       	ldi	r22, 0x01	; 1
    1e18:	70 e0       	ldi	r23, 0x00	; 0
    1e1a:	75 de       	rcall	.-790    	; 0x1b06 <LCD0_write>
    1e1c:	b3 df       	rcall	.-154    	; 0x1d84 <LCD0_BF>
    1e1e:	f8 01       	movw	r30, r16
    1e20:	81 91       	ld	r24, Z+
    1e22:	8f 01       	movw	r16, r30
    1e24:	81 11       	cpse	r24, r1
    1e26:	ee cf       	rjmp	.-36     	; 0x1e04 <LCD0_string_size+0x1e>
    1e28:	f2 cf       	rjmp	.-28     	; 0x1e0e <LCD0_string_size+0x28>
    1e2a:	cf 5f       	subi	r28, 0xFF	; 255
    1e2c:	61 e0       	ldi	r22, 0x01	; 1
    1e2e:	70 e0       	ldi	r23, 0x00	; 0
    1e30:	80 e2       	ldi	r24, 0x20	; 32
    1e32:	69 de       	rcall	.-814    	; 0x1b06 <LCD0_write>
    1e34:	a7 df       	rcall	.-178    	; 0x1d84 <LCD0_BF>
    1e36:	cd 17       	cp	r28, r29
    1e38:	c0 f3       	brcs	.-16     	; 0x1e2a <LCD0_string_size+0x44>
    1e3a:	df 91       	pop	r29
    1e3c:	cf 91       	pop	r28
    1e3e:	1f 91       	pop	r17
    1e40:	0f 91       	pop	r16
    1e42:	08 95       	ret

00001e44 <LCD0_hspace>:
    1e44:	cf 93       	push	r28
    1e46:	c8 2f       	mov	r28, r24
    1e48:	88 23       	and	r24, r24
    1e4a:	39 f0       	breq	.+14     	; 0x1e5a <LCD0_hspace+0x16>
    1e4c:	61 e0       	ldi	r22, 0x01	; 1
    1e4e:	70 e0       	ldi	r23, 0x00	; 0
    1e50:	80 e2       	ldi	r24, 0x20	; 32
    1e52:	59 de       	rcall	.-846    	; 0x1b06 <LCD0_write>
    1e54:	97 df       	rcall	.-210    	; 0x1d84 <LCD0_BF>
    1e56:	c1 50       	subi	r28, 0x01	; 1
    1e58:	c9 f7       	brne	.-14     	; 0x1e4c <LCD0_hspace+0x8>
    1e5a:	cf 91       	pop	r28
    1e5c:	08 95       	ret

00001e5e <LCD0_gotoxy>:
    1e5e:	26 2f       	mov	r18, r22
    1e60:	81 30       	cpi	r24, 0x01	; 1
    1e62:	91 05       	cpc	r25, r1
    1e64:	71 f0       	breq	.+28     	; 0x1e82 <LCD0_gotoxy+0x24>
    1e66:	30 f0       	brcs	.+12     	; 0x1e74 <LCD0_gotoxy+0x16>
    1e68:	82 30       	cpi	r24, 0x02	; 2
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	89 f0       	breq	.+34     	; 0x1e90 <LCD0_gotoxy+0x32>
    1e6e:	03 97       	sbiw	r24, 0x03	; 3
    1e70:	b1 f0       	breq	.+44     	; 0x1e9e <LCD0_gotoxy+0x40>
    1e72:	08 95       	ret
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	70 e0       	ldi	r23, 0x00	; 0
    1e78:	80 e8       	ldi	r24, 0x80	; 128
    1e7a:	82 0f       	add	r24, r18
    1e7c:	44 de       	rcall	.-888    	; 0x1b06 <LCD0_write>
    1e7e:	82 cf       	rjmp	.-252    	; 0x1d84 <LCD0_BF>
    1e80:	08 95       	ret
    1e82:	60 e0       	ldi	r22, 0x00	; 0
    1e84:	70 e0       	ldi	r23, 0x00	; 0
    1e86:	80 ec       	ldi	r24, 0xC0	; 192
    1e88:	82 0f       	add	r24, r18
    1e8a:	3d de       	rcall	.-902    	; 0x1b06 <LCD0_write>
    1e8c:	7b cf       	rjmp	.-266    	; 0x1d84 <LCD0_BF>
    1e8e:	08 95       	ret
    1e90:	60 e0       	ldi	r22, 0x00	; 0
    1e92:	70 e0       	ldi	r23, 0x00	; 0
    1e94:	84 e9       	ldi	r24, 0x94	; 148
    1e96:	82 0f       	add	r24, r18
    1e98:	36 de       	rcall	.-916    	; 0x1b06 <LCD0_write>
    1e9a:	74 cf       	rjmp	.-280    	; 0x1d84 <LCD0_BF>
    1e9c:	08 95       	ret
    1e9e:	60 e0       	ldi	r22, 0x00	; 0
    1ea0:	70 e0       	ldi	r23, 0x00	; 0
    1ea2:	84 ed       	ldi	r24, 0xD4	; 212
    1ea4:	82 0f       	add	r24, r18
    1ea6:	2f de       	rcall	.-930    	; 0x1b06 <LCD0_write>
    1ea8:	6d cf       	rjmp	.-294    	; 0x1d84 <LCD0_BF>
    1eaa:	08 95       	ret

00001eac <LCD0_clear>:
    1eac:	60 e0       	ldi	r22, 0x00	; 0
    1eae:	70 e0       	ldi	r23, 0x00	; 0
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	29 de       	rcall	.-942    	; 0x1b06 <LCD0_write>
    1eb4:	87 ee       	ldi	r24, 0xE7	; 231
    1eb6:	97 e1       	ldi	r25, 0x17	; 23
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	f1 f7       	brne	.-4      	; 0x1eb8 <LCD0_clear+0xc>
    1ebc:	00 c0       	rjmp	.+0      	; 0x1ebe <LCD0_clear+0x12>
    1ebe:	00 00       	nop
    1ec0:	08 95       	ret

00001ec2 <LCD0_inic>:
	return lcd0;
}
void LCD0_inic(void)
{
	//LCD INIC
	*lcd0_DDR=(1<<RS)|(1<<RW)|(1<<EN)|(0<<NC);
    1ec2:	e0 91 e2 03 	lds	r30, 0x03E2	; 0x8003e2 <lcd0_DDR>
    1ec6:	f0 91 e3 03 	lds	r31, 0x03E3	; 0x8003e3 <lcd0_DDR+0x1>
    1eca:	87 e0       	ldi	r24, 0x07	; 7
    1ecc:	80 83       	st	Z, r24
	*lcd0_PORT=(1<<NC);
    1ece:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1ed2:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1ed6:	88 e0       	ldi	r24, 0x08	; 8
    1ed8:	80 83       	st	Z, r24
    1eda:	2f ef       	ldi	r18, 0xFF	; 255
    1edc:	83 ef       	ldi	r24, 0xF3	; 243
    1ede:	91 e0       	ldi	r25, 0x01	; 1
    1ee0:	21 50       	subi	r18, 0x01	; 1
    1ee2:	80 40       	sbci	r24, 0x00	; 0
    1ee4:	90 40       	sbci	r25, 0x00	; 0
    1ee6:	e1 f7       	brne	.-8      	; 0x1ee0 <LCD0_inic+0x1e>
    1ee8:	00 c0       	rjmp	.+0      	; 0x1eea <LCD0_inic+0x28>
    1eea:	00 00       	nop
	/***INICIALIZACAO LCD**datasheet*/
	_delay_ms(40);
	LCD0_write(0x33,INST); //function set
    1eec:	60 e0       	ldi	r22, 0x00	; 0
    1eee:	70 e0       	ldi	r23, 0x00	; 0
    1ef0:	83 e3       	ldi	r24, 0x33	; 51
    1ef2:	09 de       	rcall	.-1006   	; 0x1b06 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ef4:	20 ed       	ldi	r18, 0xD0	; 208
    1ef6:	2a 95       	dec	r18
    1ef8:	f1 f7       	brne	.-4      	; 0x1ef6 <LCD0_inic+0x34>
	_delay_us(39);
	LCD0_write(0x33,INST); //function set
    1efa:	60 e0       	ldi	r22, 0x00	; 0
    1efc:	70 e0       	ldi	r23, 0x00	; 0
    1efe:	83 e3       	ldi	r24, 0x33	; 51
    1f00:	02 de       	rcall	.-1020   	; 0x1b06 <LCD0_write>
    1f02:	80 ed       	ldi	r24, 0xD0	; 208
    1f04:	8a 95       	dec	r24
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <LCD0_inic+0x42>
	_delay_us(39);
	LCD0_write(0x2B,INST); //function set
    1f08:	60 e0       	ldi	r22, 0x00	; 0
    1f0a:	70 e0       	ldi	r23, 0x00	; 0
    1f0c:	8b e2       	ldi	r24, 0x2B	; 43
    1f0e:	fb dd       	rcall	.-1034   	; 0x1b06 <LCD0_write>
    1f10:	95 ec       	ldi	r25, 0xC5	; 197
    1f12:	9a 95       	dec	r25
    1f14:	f1 f7       	brne	.-4      	; 0x1f12 <LCD0_inic+0x50>
    1f16:	00 00       	nop
	_delay_us(37);
	LCD0_write(0x0C,INST);// display on/off control
    1f18:	60 e0       	ldi	r22, 0x00	; 0
    1f1a:	70 e0       	ldi	r23, 0x00	; 0
    1f1c:	8c e0       	ldi	r24, 0x0C	; 12
    1f1e:	f3 dd       	rcall	.-1050   	; 0x1b06 <LCD0_write>
    1f20:	25 ec       	ldi	r18, 0xC5	; 197
    1f22:	2a 95       	dec	r18
    1f24:	f1 f7       	brne	.-4      	; 0x1f22 <LCD0_inic+0x60>
	_delay_us(37);
	LCD0_write(0x01,INST);// clear display
    1f26:	00 00       	nop
    1f28:	60 e0       	ldi	r22, 0x00	; 0
    1f2a:	70 e0       	ldi	r23, 0x00	; 0
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	eb dd       	rcall	.-1066   	; 0x1b06 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f30:	87 ee       	ldi	r24, 0xE7	; 231
    1f32:	97 e1       	ldi	r25, 0x17	; 23
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <LCD0_inic+0x72>
    1f38:	00 c0       	rjmp	.+0      	; 0x1f3a <LCD0_inic+0x78>
	_delay_ms(1.53);
	LCD0_write(0x06,INST);// entry mode set (crazy settings)
    1f3a:	00 00       	nop
    1f3c:	60 e0       	ldi	r22, 0x00	; 0
    1f3e:	70 e0       	ldi	r23, 0x00	; 0
    1f40:	86 e0       	ldi	r24, 0x06	; 6
    1f42:	e1 dd       	rcall	.-1086   	; 0x1b06 <LCD0_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f44:	95 ec       	ldi	r25, 0xC5	; 197
    1f46:	9a 95       	dec	r25
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <LCD0_inic+0x84>
    1f4a:	00 00       	nop
    1f4c:	08 95       	ret

00001f4e <LCD0enable>:
void LCD1_strobe(unsigned int num);
void LCD1_reboot(void);
unsigned int LCD_ticks(unsigned int num);
/***Procedure & Function***/
LCD0 LCD0enable(volatile uint8_t *ddr, volatile uint8_t *pin, volatile uint8_t *port)
{
    1f4e:	1f 93       	push	r17
    1f50:	cf 93       	push	r28
    1f52:	df 93       	push	r29
    1f54:	ec 01       	movw	r28, r24
	//LOCAL VARIABLES
	uint8_t tSREG;
	tSREG=SREG;
    1f56:	1f b7       	in	r17, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    1f58:	8f b7       	in	r24, 0x3f	; 63
    1f5a:	8f 77       	andi	r24, 0x7F	; 127
    1f5c:	8f bf       	out	0x3f, r24	; 63
	//ALLOCAÇÂO MEMORIA PARA Estrutura
	LCD0 lcd0;
	//import parametros
	lcd0_DDR=ddr;
    1f5e:	70 93 e3 03 	sts	0x03E3, r23	; 0x8003e3 <lcd0_DDR+0x1>
    1f62:	60 93 e2 03 	sts	0x03E2, r22	; 0x8003e2 <lcd0_DDR>
	lcd0_PIN=pin;
    1f66:	50 93 dc 03 	sts	0x03DC, r21	; 0x8003dc <lcd0_PIN+0x1>
    1f6a:	40 93 db 03 	sts	0x03DB, r20	; 0x8003db <lcd0_PIN>
	lcd0_PORT=port;
    1f6e:	30 93 e6 03 	sts	0x03E6, r19	; 0x8003e6 <lcd0_PORT+0x1>
    1f72:	20 93 e5 03 	sts	0x03E5, r18	; 0x8003e5 <lcd0_PORT>
	//inic variables
	*lcd0_DDR=0x00;
    1f76:	fb 01       	movw	r30, r22
    1f78:	10 82       	st	Z, r1
	*lcd0_PORT=0xFF;
    1f7a:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <lcd0_PORT>
    1f7e:	f0 91 e6 03 	lds	r31, 0x03E6	; 0x8003e6 <lcd0_PORT+0x1>
    1f82:	8f ef       	ldi	r24, 0xFF	; 255
    1f84:	80 83       	st	Z, r24
	lcd0_detect=*lcd0_PIN & (1<<NC);
    1f86:	e0 91 db 03 	lds	r30, 0x03DB	; 0x8003db <lcd0_PIN>
    1f8a:	f0 91 dc 03 	lds	r31, 0x03DC	; 0x8003dc <lcd0_PIN+0x1>
    1f8e:	80 81       	ld	r24, Z
    1f90:	88 70       	andi	r24, 0x08	; 8
    1f92:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <lcd0_detect>
	lcd0.hspace=LCD0_hspace;
	lcd0.clear=LCD0_clear;
	lcd0.gotoxy=LCD0_gotoxy;
	lcd0.reboot=LCD0_reboot;
	//LCD INIC
	LCD0_inic();
    1f96:	95 df       	rcall	.-214    	; 0x1ec2 <LCD0_inic>
	SREG=tSREG;
    1f98:	1f bf       	out	0x3f, r17	; 63
	//
	return lcd0;
    1f9a:	83 e8       	ldi	r24, 0x83	; 131
    1f9c:	9d e0       	ldi	r25, 0x0D	; 13
    1f9e:	99 83       	std	Y+1, r25	; 0x01
    1fa0:	88 83       	st	Y, r24
    1fa2:	87 e4       	ldi	r24, 0x47	; 71
    1fa4:	9e e0       	ldi	r25, 0x0E	; 14
    1fa6:	9b 83       	std	Y+3, r25	; 0x03
    1fa8:	8a 83       	std	Y+2, r24	; 0x02
    1faa:	82 ec       	ldi	r24, 0xC2	; 194
    1fac:	9e e0       	ldi	r25, 0x0E	; 14
    1fae:	9d 83       	std	Y+5, r25	; 0x05
    1fb0:	8c 83       	std	Y+4, r24	; 0x04
    1fb2:	84 ed       	ldi	r24, 0xD4	; 212
    1fb4:	9e e0       	ldi	r25, 0x0E	; 14
    1fb6:	9f 83       	std	Y+7, r25	; 0x07
    1fb8:	8e 83       	std	Y+6, r24	; 0x06
    1fba:	89 ed       	ldi	r24, 0xD9	; 217
    1fbc:	9e e0       	ldi	r25, 0x0E	; 14
    1fbe:	99 87       	std	Y+9, r25	; 0x09
    1fc0:	88 87       	std	Y+8, r24	; 0x08
    1fc2:	82 ee       	ldi	r24, 0xE2	; 226
    1fc4:	9e e0       	ldi	r25, 0x0E	; 14
    1fc6:	9b 87       	std	Y+11, r25	; 0x0b
    1fc8:	8a 87       	std	Y+10, r24	; 0x0a
    1fca:	83 ef       	ldi	r24, 0xF3	; 243
    1fcc:	9e e0       	ldi	r25, 0x0E	; 14
    1fce:	9d 87       	std	Y+13, r25	; 0x0d
    1fd0:	8c 87       	std	Y+12, r24	; 0x0c
    1fd2:	82 e2       	ldi	r24, 0x22	; 34
    1fd4:	9f e0       	ldi	r25, 0x0F	; 15
    1fd6:	9f 87       	std	Y+15, r25	; 0x0f
    1fd8:	8e 87       	std	Y+14, r24	; 0x0e
    1fda:	86 e5       	ldi	r24, 0x56	; 86
    1fdc:	9f e0       	ldi	r25, 0x0F	; 15
    1fde:	99 8b       	std	Y+17, r25	; 0x11
    1fe0:	88 8b       	std	Y+16, r24	; 0x10
    1fe2:	8f e2       	ldi	r24, 0x2F	; 47
    1fe4:	9f e0       	ldi	r25, 0x0F	; 15
    1fe6:	9b 8b       	std	Y+19, r25	; 0x13
    1fe8:	8a 8b       	std	Y+18, r24	; 0x12
    1fea:	8e ef       	ldi	r24, 0xFE	; 254
    1fec:	9f e0       	ldi	r25, 0x0F	; 15
    1fee:	9d 8b       	std	Y+21, r25	; 0x15
    1ff0:	8c 8b       	std	Y+20, r24	; 0x14
}
    1ff2:	ce 01       	movw	r24, r28
    1ff4:	df 91       	pop	r29
    1ff6:	cf 91       	pop	r28
    1ff8:	1f 91       	pop	r17
    1ffa:	08 95       	ret

00001ffc <LCD0_reboot>:
	*lcd0_PORT|=(1<<EN);
	LCD_ticks(num);
	*lcd0_PORT&=~(1<<EN);
}
void LCD0_reboot(void)
{
    1ffc:	cf 93       	push	r28
	//low high detect pin NC
	uint8_t i;
	uint8_t tmp;
	tmp=*lcd0_PIN & (1<<NC);
    1ffe:	e0 91 db 03 	lds	r30, 0x03DB	; 0x8003db <lcd0_PIN>
    2002:	f0 91 dc 03 	lds	r31, 0x03DC	; 0x8003dc <lcd0_PIN+0x1>
    2006:	c0 81       	ld	r28, Z
    2008:	c8 70       	andi	r28, 0x08	; 8
	i=tmp^lcd0_detect;
    200a:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <lcd0_detect>
    200e:	8c 27       	eor	r24, r28
	i&=tmp;
	if(i)
    2010:	8c 23       	and	r24, r28
    2012:	09 f0       	breq	.+2      	; 0x2016 <LCD0_reboot+0x1a>
		LCD0_inic();
    2014:	56 df       	rcall	.-340    	; 0x1ec2 <LCD0_inic>
	lcd0_detect=tmp;
    2016:	c0 93 e4 03 	sts	0x03E4, r28	; 0x8003e4 <lcd0_detect>
}
    201a:	cf 91       	pop	r28
    201c:	08 95       	ret

0000201e <PCF8563RTC_SetTime>:
	i2c.Write(0x00);						// Write 0x00 to Control register to disable SQW-Out
	i2c.Stop();								// Stop I2C communication after initializing PCF8563
}
/***void PCF8563RTC_SetTime(uint8_t var_hour_u8, uint8_t var_min_u8, uint8_t var_sec_u8)***/
void PCF8563RTC_SetTime(uint8_t var_hour_u8, uint8_t var_min_u8, uint8_t var_sec_u8)
{
    201e:	ff 92       	push	r15
    2020:	0f 93       	push	r16
    2022:	1f 93       	push	r17
    2024:	cf 93       	push	r28
    2026:	df 93       	push	r29
    2028:	18 2f       	mov	r17, r24
    202a:	06 2f       	mov	r16, r22
    202c:	f4 2e       	mov	r15, r20
	i2c.Start();                            // Start I2C communication
    202e:	ca e0       	ldi	r28, 0x0A	; 10
    2030:	d4 e0       	ldi	r29, 0x04	; 4
    2032:	e8 81       	ld	r30, Y
    2034:	f9 81       	ldd	r31, Y+1	; 0x01
    2036:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    2038:	ec 81       	ldd	r30, Y+4	; 0x04
    203a:	fd 81       	ldd	r31, Y+5	; 0x05
    203c:	82 ea       	ldi	r24, 0xA2	; 162
    203e:	09 95       	icall
	i2c.Write(PCF8563SecondRegAddress_U8);  // Select the SEC RAM address
    2040:	ec 81       	ldd	r30, Y+4	; 0x04
    2042:	fd 81       	ldd	r31, Y+5	; 0x05
    2044:	82 e0       	ldi	r24, 0x02	; 2
    2046:	09 95       	icall
	i2c.Write(var_sec_u8);			        // Write sec from RAM address 02H
    2048:	ec 81       	ldd	r30, Y+4	; 0x04
    204a:	fd 81       	ldd	r31, Y+5	; 0x05
    204c:	8f 2d       	mov	r24, r15
    204e:	09 95       	icall
	i2c.Write(var_min_u8);			        // Write min from RAM address 03H
    2050:	ec 81       	ldd	r30, Y+4	; 0x04
    2052:	fd 81       	ldd	r31, Y+5	; 0x05
    2054:	80 2f       	mov	r24, r16
    2056:	09 95       	icall
	i2c.Write(var_hour_u8);			        // Write hour from RAM address 04H
    2058:	ec 81       	ldd	r30, Y+4	; 0x04
    205a:	fd 81       	ldd	r31, Y+5	; 0x05
    205c:	81 2f       	mov	r24, r17
    205e:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    2060:	ea 81       	ldd	r30, Y+2	; 0x02
    2062:	fb 81       	ldd	r31, Y+3	; 0x03
    2064:	09 95       	icall
}
    2066:	df 91       	pop	r29
    2068:	cf 91       	pop	r28
    206a:	1f 91       	pop	r17
    206c:	0f 91       	pop	r16
    206e:	ff 90       	pop	r15
    2070:	08 95       	ret

00002072 <PCF8563RTC_SetHour>:
/***void PCF8563RTC_SetHour(uint8_t var_hour_u8)***/
void PCF8563RTC_SetHour(uint8_t var_hour_u8)
{
    2072:	1f 93       	push	r17
    2074:	cf 93       	push	r28
    2076:	df 93       	push	r29
    2078:	18 2f       	mov	r17, r24
	i2c.Start();                            // Start I2C communication
    207a:	ca e0       	ldi	r28, 0x0A	; 10
    207c:	d4 e0       	ldi	r29, 0x04	; 4
    207e:	e8 81       	ld	r30, Y
    2080:	f9 81       	ldd	r31, Y+1	; 0x01
    2082:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    2084:	ec 81       	ldd	r30, Y+4	; 0x04
    2086:	fd 81       	ldd	r31, Y+5	; 0x05
    2088:	82 ea       	ldi	r24, 0xA2	; 162
    208a:	09 95       	icall
	i2c.Write(PCF8563HourRegAddress_U8);    // Select the SEC RAM address
    208c:	ec 81       	ldd	r30, Y+4	; 0x04
    208e:	fd 81       	ldd	r31, Y+5	; 0x05
    2090:	84 e0       	ldi	r24, 0x04	; 4
    2092:	09 95       	icall
	i2c.Write(var_hour_u8);			        // Write hour from RAM address 04H
    2094:	ec 81       	ldd	r30, Y+4	; 0x04
    2096:	fd 81       	ldd	r31, Y+5	; 0x05
    2098:	81 2f       	mov	r24, r17
    209a:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    209c:	ea 81       	ldd	r30, Y+2	; 0x02
    209e:	fb 81       	ldd	r31, Y+3	; 0x03
    20a0:	09 95       	icall
}
    20a2:	df 91       	pop	r29
    20a4:	cf 91       	pop	r28
    20a6:	1f 91       	pop	r17
    20a8:	08 95       	ret

000020aa <PCF8563RTC_SetMinute>:
/***void PCF8563RTC_SetMinute(uint8_t var_min_u8)***/
void PCF8563RTC_SetMinute(uint8_t var_min_u8)
{
    20aa:	1f 93       	push	r17
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	18 2f       	mov	r17, r24
	i2c.Start();                            // Start I2C communication
    20b2:	ca e0       	ldi	r28, 0x0A	; 10
    20b4:	d4 e0       	ldi	r29, 0x04	; 4
    20b6:	e8 81       	ld	r30, Y
    20b8:	f9 81       	ldd	r31, Y+1	; 0x01
    20ba:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    20bc:	ec 81       	ldd	r30, Y+4	; 0x04
    20be:	fd 81       	ldd	r31, Y+5	; 0x05
    20c0:	82 ea       	ldi	r24, 0xA2	; 162
    20c2:	09 95       	icall
	i2c.Write(PCF8563MinuteRegAddress_U8);  // Select the SEC RAM address
    20c4:	ec 81       	ldd	r30, Y+4	; 0x04
    20c6:	fd 81       	ldd	r31, Y+5	; 0x05
    20c8:	83 e0       	ldi	r24, 0x03	; 3
    20ca:	09 95       	icall
	i2c.Write(var_min_u8);			        // Write min from RAM address 03H
    20cc:	ec 81       	ldd	r30, Y+4	; 0x04
    20ce:	fd 81       	ldd	r31, Y+5	; 0x05
    20d0:	81 2f       	mov	r24, r17
    20d2:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    20d4:	ea 81       	ldd	r30, Y+2	; 0x02
    20d6:	fb 81       	ldd	r31, Y+3	; 0x03
    20d8:	09 95       	icall
}
    20da:	df 91       	pop	r29
    20dc:	cf 91       	pop	r28
    20de:	1f 91       	pop	r17
    20e0:	08 95       	ret

000020e2 <PCF8563RTC_SetSecond>:
/***void PCF8563RTC_SetSecond(uint8_t var_sec_u8)***/
void PCF8563RTC_SetSecond(uint8_t var_sec_u8)
{
    20e2:	1f 93       	push	r17
    20e4:	cf 93       	push	r28
    20e6:	df 93       	push	r29
    20e8:	18 2f       	mov	r17, r24
	i2c.Start();                            // Start I2C communication
    20ea:	ca e0       	ldi	r28, 0x0A	; 10
    20ec:	d4 e0       	ldi	r29, 0x04	; 4
    20ee:	e8 81       	ld	r30, Y
    20f0:	f9 81       	ldd	r31, Y+1	; 0x01
    20f2:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);         // connect to PCF8563 by sending its ID on I2c Bus
    20f4:	ec 81       	ldd	r30, Y+4	; 0x04
    20f6:	fd 81       	ldd	r31, Y+5	; 0x05
    20f8:	82 ea       	ldi	r24, 0xA2	; 162
    20fa:	09 95       	icall
	i2c.Write(PCF8563SecondRegAddress_U8);  // Select the SEC RAM address
    20fc:	ec 81       	ldd	r30, Y+4	; 0x04
    20fe:	fd 81       	ldd	r31, Y+5	; 0x05
    2100:	82 e0       	ldi	r24, 0x02	; 2
    2102:	09 95       	icall
	i2c.Write(var_sec_u8);			        // Write sec from RAM address 02H
    2104:	ec 81       	ldd	r30, Y+4	; 0x04
    2106:	fd 81       	ldd	r31, Y+5	; 0x05
    2108:	81 2f       	mov	r24, r17
    210a:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    210c:	ea 81       	ldd	r30, Y+2	; 0x02
    210e:	fb 81       	ldd	r31, Y+3	; 0x03
    2110:	09 95       	icall
}
    2112:	df 91       	pop	r29
    2114:	cf 91       	pop	r28
    2116:	1f 91       	pop	r17
    2118:	08 95       	ret

0000211a <PCF8563RTC_SetClkOut>:
/***void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)***/
void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)
{
    211a:	1f 93       	push	r17
    211c:	cf 93       	push	r28
    211e:	df 93       	push	r29
	uint8_t word=0;
	if(onoff)
    2120:	88 23       	and	r24, r24
    2122:	21 f0       	breq	.+8      	; 0x212c <PCF8563RTC_SetClkOut+0x12>
		word=0x80 | (freq & 0x03);
    2124:	63 70       	andi	r22, 0x03	; 3
    2126:	16 2f       	mov	r17, r22
    2128:	10 68       	ori	r17, 0x80	; 128
    212a:	01 c0       	rjmp	.+2      	; 0x212e <PCF8563RTC_SetClkOut+0x14>
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
}
/***void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)***/
void PCF8563RTC_SetClkOut(uint8_t onoff, uint8_t freq)
{
	uint8_t word=0;
    212c:	10 e0       	ldi	r17, 0x00	; 0
	if(onoff)
		word=0x80 | (freq & 0x03);
	i2c.Start();                            // Start I2C communication
    212e:	ca e0       	ldi	r28, 0x0A	; 10
    2130:	d4 e0       	ldi	r29, 0x04	; 4
    2132:	e8 81       	ld	r30, Y
    2134:	f9 81       	ldd	r31, Y+1	; 0x01
    2136:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			// connect to PCF8563 by sending its ID on I2c Bus
    2138:	ec 81       	ldd	r30, Y+4	; 0x04
    213a:	fd 81       	ldd	r31, Y+5	; 0x05
    213c:	82 ea       	ldi	r24, 0xA2	; 162
    213e:	09 95       	icall
	i2c.Write(PCF8563CLKOUT_control_U8);	// Select the CLKOUT RAM address
    2140:	ec 81       	ldd	r30, Y+4	; 0x04
    2142:	fd 81       	ldd	r31, Y+5	; 0x05
    2144:	8d e0       	ldi	r24, 0x0D	; 13
    2146:	09 95       	icall
	i2c.Write(word);						// Write Clock from RAM address 0DH						
    2148:	ec 81       	ldd	r30, Y+4	; 0x04
    214a:	fd 81       	ldd	r31, Y+5	; 0x05
    214c:	81 2f       	mov	r24, r17
    214e:	09 95       	icall
	i2c.Stop();           	                // Stop I2C communication after Setting the Time
    2150:	ea 81       	ldd	r30, Y+2	; 0x02
    2152:	fb 81       	ldd	r31, Y+3	; 0x03
    2154:	09 95       	icall
}
    2156:	df 91       	pop	r29
    2158:	cf 91       	pop	r28
    215a:	1f 91       	pop	r17
    215c:	08 95       	ret

0000215e <PCF8563RTC_SetDate>:
/***void PCF8563RTC_SetDate(uint8_t var_day_u8, uint8_t var_weekday_u8, uint8_t var_month_u8, uint8_t var_year_u8)***/
void PCF8563RTC_SetDate(uint8_t var_day_u8, uint8_t var_weekday_u8, uint8_t var_month_u8, uint8_t var_year_u8)
{
    215e:	ef 92       	push	r14
    2160:	ff 92       	push	r15
    2162:	0f 93       	push	r16
    2164:	1f 93       	push	r17
    2166:	cf 93       	push	r28
    2168:	df 93       	push	r29
    216a:	e8 2e       	mov	r14, r24
    216c:	f6 2e       	mov	r15, r22
    216e:	04 2f       	mov	r16, r20
    2170:	12 2f       	mov	r17, r18
	i2c.Start();                          // Start I2C communication
    2172:	ca e0       	ldi	r28, 0x0A	; 10
    2174:	d4 e0       	ldi	r29, 0x04	; 4
    2176:	e8 81       	ld	r30, Y
    2178:	f9 81       	ldd	r31, Y+1	; 0x01
    217a:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	      // connect to PCF8563 by sending its ID on I2c Bus
    217c:	ec 81       	ldd	r30, Y+4	; 0x04
    217e:	fd 81       	ldd	r31, Y+5	; 0x05
    2180:	82 ea       	ldi	r24, 0xA2	; 162
    2182:	09 95       	icall
	i2c.Write(PCF8563DayRegAddress_U8);  // Request DAY RAM address at 05H
    2184:	ec 81       	ldd	r30, Y+4	; 0x04
    2186:	fd 81       	ldd	r31, Y+5	; 0x05
    2188:	85 e0       	ldi	r24, 0x05	; 5
    218a:	09 95       	icall
	i2c.Write(var_day_u8);			      // Write date on RAM address 05H
    218c:	ec 81       	ldd	r30, Y+4	; 0x04
    218e:	fd 81       	ldd	r31, Y+5	; 0x05
    2190:	8e 2d       	mov	r24, r14
    2192:	09 95       	icall
	i2c.Write(var_weekday_u8);            // Write date on RAM address 06H
    2194:	ec 81       	ldd	r30, Y+4	; 0x04
    2196:	fd 81       	ldd	r31, Y+5	; 0x05
    2198:	8f 2d       	mov	r24, r15
    219a:	09 95       	icall
	i2c.Write(var_month_u8);			  // Write month on RAM address 07H
    219c:	ec 81       	ldd	r30, Y+4	; 0x04
    219e:	fd 81       	ldd	r31, Y+5	; 0x05
    21a0:	80 2f       	mov	r24, r16
    21a2:	09 95       	icall
	i2c.Write(var_year_u8);			      // Write year on RAM address 08h
    21a4:	ec 81       	ldd	r30, Y+4	; 0x04
    21a6:	fd 81       	ldd	r31, Y+5	; 0x05
    21a8:	81 2f       	mov	r24, r17
    21aa:	09 95       	icall
	i2c.Stop();				              // Stop I2C communication after Setting the Date
    21ac:	ea 81       	ldd	r30, Y+2	; 0x02
    21ae:	fb 81       	ldd	r31, Y+3	; 0x03
    21b0:	09 95       	icall
}
    21b2:	df 91       	pop	r29
    21b4:	cf 91       	pop	r28
    21b6:	1f 91       	pop	r17
    21b8:	0f 91       	pop	r16
    21ba:	ff 90       	pop	r15
    21bc:	ef 90       	pop	r14
    21be:	08 95       	ret

000021c0 <PCF8563RTC_SetYear>:
/***void PCF8563RTC_SetYear(uint8_t var_year_u8)***/
void PCF8563RTC_SetYear(uint8_t var_year_u8)
{
    21c0:	1f 93       	push	r17
    21c2:	cf 93       	push	r28
    21c4:	df 93       	push	r29
    21c6:	18 2f       	mov	r17, r24
	i2c.Start();                          // Start I2C communication
    21c8:	ca e0       	ldi	r28, 0x0A	; 10
    21ca:	d4 e0       	ldi	r29, 0x04	; 4
    21cc:	e8 81       	ld	r30, Y
    21ce:	f9 81       	ldd	r31, Y+1	; 0x01
    21d0:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	      // connect to PCF8563 by sending its ID on I2c Bus
    21d2:	ec 81       	ldd	r30, Y+4	; 0x04
    21d4:	fd 81       	ldd	r31, Y+5	; 0x05
    21d6:	82 ea       	ldi	r24, 0xA2	; 162
    21d8:	09 95       	icall
	i2c.Write(PCF8563YearRegAddress_U8);  // Request DAY RAM address at 08H
    21da:	ec 81       	ldd	r30, Y+4	; 0x04
    21dc:	fd 81       	ldd	r31, Y+5	; 0x05
    21de:	88 e0       	ldi	r24, 0x08	; 8
    21e0:	09 95       	icall
	i2c.Write(var_year_u8);			      // Write year on RAM address 08h
    21e2:	ec 81       	ldd	r30, Y+4	; 0x04
    21e4:	fd 81       	ldd	r31, Y+5	; 0x05
    21e6:	81 2f       	mov	r24, r17
    21e8:	09 95       	icall
	i2c.Stop();				              // Stop I2C communication after Setting the Date
    21ea:	ea 81       	ldd	r30, Y+2	; 0x02
    21ec:	fb 81       	ldd	r31, Y+3	; 0x03
    21ee:	09 95       	icall
}
    21f0:	df 91       	pop	r29
    21f2:	cf 91       	pop	r28
    21f4:	1f 91       	pop	r17
    21f6:	08 95       	ret

000021f8 <PCF8563RTC_SetMonth>:
/***void PCF8563RTC_SetMonth(uint8_t var_month_u8)***/
void PCF8563RTC_SetMonth(uint8_t var_month_u8)
{
    21f8:	1f 93       	push	r17
    21fa:	cf 93       	push	r28
    21fc:	df 93       	push	r29
    21fe:	18 2f       	mov	r17, r24
	i2c.Start();                           // Start I2C communication
    2200:	ca e0       	ldi	r28, 0x0A	; 10
    2202:	d4 e0       	ldi	r29, 0x04	; 4
    2204:	e8 81       	ld	r30, Y
    2206:	f9 81       	ldd	r31, Y+1	; 0x01
    2208:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	       // connect to PCF8563 by sending its ID on I2c Bus
    220a:	ec 81       	ldd	r30, Y+4	; 0x04
    220c:	fd 81       	ldd	r31, Y+5	; 0x05
    220e:	82 ea       	ldi	r24, 0xA2	; 162
    2210:	09 95       	icall
	i2c.Write(PCF8563MonthRegAddress_U8);  // Request DAY RAM address at 07H
    2212:	ec 81       	ldd	r30, Y+4	; 0x04
    2214:	fd 81       	ldd	r31, Y+5	; 0x05
    2216:	87 e0       	ldi	r24, 0x07	; 7
    2218:	09 95       	icall
	i2c.Write(var_month_u8);			   // Write month on RAM address 07H
    221a:	ec 81       	ldd	r30, Y+4	; 0x04
    221c:	fd 81       	ldd	r31, Y+5	; 0x05
    221e:	81 2f       	mov	r24, r17
    2220:	09 95       	icall
	i2c.Stop();				               // Stop I2C communication after Setting the Date
    2222:	ea 81       	ldd	r30, Y+2	; 0x02
    2224:	fb 81       	ldd	r31, Y+3	; 0x03
    2226:	09 95       	icall
}
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	1f 91       	pop	r17
    222e:	08 95       	ret

00002230 <PCF8563RTC_SetWeekday>:
/***void PCF8563RTC_SetWeekday(uint8_t var_weekday_u8)***/
void PCF8563RTC_SetWeekday(uint8_t var_weekday_u8)
{
    2230:	1f 93       	push	r17
    2232:	cf 93       	push	r28
    2234:	df 93       	push	r29
    2236:	18 2f       	mov	r17, r24
	i2c.Start();                             // Start I2C communication
    2238:	ca e0       	ldi	r28, 0x0A	; 10
    223a:	d4 e0       	ldi	r29, 0x04	; 4
    223c:	e8 81       	ld	r30, Y
    223e:	f9 81       	ldd	r31, Y+1	; 0x01
    2240:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	         // connect to PCF8563 by sending its ID on I2c Bus
    2242:	ec 81       	ldd	r30, Y+4	; 0x04
    2244:	fd 81       	ldd	r31, Y+5	; 0x05
    2246:	82 ea       	ldi	r24, 0xA2	; 162
    2248:	09 95       	icall
	i2c.Write(PCF8563WeekdayRegAddress_U8);  // Request DAY RAM address at 06H
    224a:	ec 81       	ldd	r30, Y+4	; 0x04
    224c:	fd 81       	ldd	r31, Y+5	; 0x05
    224e:	86 e0       	ldi	r24, 0x06	; 6
    2250:	09 95       	icall
	i2c.Write(var_weekday_u8);               // Write date on RAM address 06H
    2252:	ec 81       	ldd	r30, Y+4	; 0x04
    2254:	fd 81       	ldd	r31, Y+5	; 0x05
    2256:	81 2f       	mov	r24, r17
    2258:	09 95       	icall
	i2c.Stop();				                 // Stop I2C communication after Setting the Date
    225a:	ea 81       	ldd	r30, Y+2	; 0x02
    225c:	fb 81       	ldd	r31, Y+3	; 0x03
    225e:	09 95       	icall
}
    2260:	df 91       	pop	r29
    2262:	cf 91       	pop	r28
    2264:	1f 91       	pop	r17
    2266:	08 95       	ret

00002268 <PCF8563RTC_SetDay>:
/***void PCF8563RTC_SetDay(uint8_t var_day_u8)***/
void PCF8563RTC_SetDay(uint8_t var_day_u8)
{
    2268:	1f 93       	push	r17
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	18 2f       	mov	r17, r24
	i2c.Start();                          // Start I2C communication
    2270:	ca e0       	ldi	r28, 0x0A	; 10
    2272:	d4 e0       	ldi	r29, 0x04	; 4
    2274:	e8 81       	ld	r30, Y
    2276:	f9 81       	ldd	r31, Y+1	; 0x01
    2278:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);	      // connect to PCF8563 by sending its ID on I2c Bus
    227a:	ec 81       	ldd	r30, Y+4	; 0x04
    227c:	fd 81       	ldd	r31, Y+5	; 0x05
    227e:	82 ea       	ldi	r24, 0xA2	; 162
    2280:	09 95       	icall
	i2c.Write(PCF8563DayRegAddress_U8);  // Request DAY RAM address at 05H
    2282:	ec 81       	ldd	r30, Y+4	; 0x04
    2284:	fd 81       	ldd	r31, Y+5	; 0x05
    2286:	85 e0       	ldi	r24, 0x05	; 5
    2288:	09 95       	icall
	i2c.Write(var_day_u8);			      // Write date on RAM address 05H
    228a:	ec 81       	ldd	r30, Y+4	; 0x04
    228c:	fd 81       	ldd	r31, Y+5	; 0x05
    228e:	81 2f       	mov	r24, r17
    2290:	09 95       	icall
	i2c.Stop();				              // Stop I2C communication after Setting the Date
    2292:	ea 81       	ldd	r30, Y+2	; 0x02
    2294:	fb 81       	ldd	r31, Y+3	; 0x03
    2296:	09 95       	icall
}
    2298:	df 91       	pop	r29
    229a:	cf 91       	pop	r28
    229c:	1f 91       	pop	r17
    229e:	08 95       	ret

000022a0 <PCF8563RTC_GetTime>:
/***struct time PCF8563RTC_GetTime(void)***/
struct time PCF8563RTC_GetTime(void)
{
    22a0:	ff 92       	push	r15
    22a2:	0f 93       	push	r16
    22a4:	1f 93       	push	r17
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
	struct time result;
	i2c.Start();							       // Start I2C communication
    22aa:	ca e0       	ldi	r28, 0x0A	; 10
    22ac:	d4 e0       	ldi	r29, 0x04	; 4
    22ae:	e8 81       	ld	r30, Y
    22b0:	f9 81       	ldd	r31, Y+1	; 0x01
    22b2:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			       // connect to PCF8563 by sending its ID on I2c Bus
    22b4:	ec 81       	ldd	r30, Y+4	; 0x04
    22b6:	fd 81       	ldd	r31, Y+5	; 0x05
    22b8:	82 ea       	ldi	r24, 0xA2	; 162
    22ba:	09 95       	icall
	i2c.Write(PCF8563SecondRegAddress_U8);	       // Request Sec RAM address at 00H
    22bc:	ec 81       	ldd	r30, Y+4	; 0x04
    22be:	fd 81       	ldd	r31, Y+5	; 0x05
    22c0:	82 e0       	ldi	r24, 0x02	; 2
    22c2:	09 95       	icall
	i2c.Stop();								       // Stop I2C communication after selecting Sec Register
    22c4:	ea 81       	ldd	r30, Y+2	; 0x02
    22c6:	fb 81       	ldd	r31, Y+3	; 0x03
    22c8:	09 95       	icall
	i2c.Start();							       // Start I2C communication
    22ca:	e8 81       	ld	r30, Y
    22cc:	f9 81       	ldd	r31, Y+1	; 0x01
    22ce:	09 95       	icall
	i2c.Write(PCF8563ReadMode_U8);			       // connect to PCF8563(Read mode) by sending its ID
    22d0:	ec 81       	ldd	r30, Y+4	; 0x04
    22d2:	fd 81       	ldd	r31, Y+5	; 0x05
    22d4:	83 ea       	ldi	r24, 0xA3	; 163
    22d6:	09 95       	icall
	result.VL_seconds = i2c.Read(1) & ~0x80;	   // read second and return Positive ACK
    22d8:	ee 81       	ldd	r30, Y+6	; 0x06
    22da:	ff 81       	ldd	r31, Y+7	; 0x07
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	09 95       	icall
    22e0:	f8 2e       	mov	r15, r24
	result.minutes = i2c.Read(1) & ~0x80;		   // read minute and return Positive ACK
    22e2:	ee 81       	ldd	r30, Y+6	; 0x06
    22e4:	ff 81       	ldd	r31, Y+7	; 0x07
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	09 95       	icall
    22ea:	18 2f       	mov	r17, r24
	result.hours = i2c.Read(0) & ~0xC0;			   // read hour and return Negative/No ACK
    22ec:	ee 81       	ldd	r30, Y+6	; 0x06
    22ee:	ff 81       	ldd	r31, Y+7	; 0x07
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	09 95       	icall
    22f4:	08 2f       	mov	r16, r24
	i2c.Stop();								       // Stop I2C communication after reading the Time
    22f6:	ea 81       	ldd	r30, Y+2	; 0x02
    22f8:	fb 81       	ldd	r31, Y+3	; 0x03
    22fa:	09 95       	icall
	return result;
    22fc:	60 2f       	mov	r22, r16
    22fe:	6f 73       	andi	r22, 0x3F	; 63
    2300:	71 2f       	mov	r23, r17
    2302:	7f 77       	andi	r23, 0x7F	; 127
}
    2304:	8f 2d       	mov	r24, r15
    2306:	8f 77       	andi	r24, 0x7F	; 127
    2308:	df 91       	pop	r29
    230a:	cf 91       	pop	r28
    230c:	1f 91       	pop	r17
    230e:	0f 91       	pop	r16
    2310:	ff 90       	pop	r15
    2312:	08 95       	ret

00002314 <PCF8563RTC_GetDate>:
/***struct date PCF8563RTC_GetDate(void)***/
struct date PCF8563RTC_GetDate(void)
{
    2314:	ef 92       	push	r14
    2316:	ff 92       	push	r15
    2318:	0f 93       	push	r16
    231a:	1f 93       	push	r17
    231c:	cf 93       	push	r28
    231e:	df 93       	push	r29
	struct date result;
	i2c.Start();							        // Start I2C communication
    2320:	ca e0       	ldi	r28, 0x0A	; 10
    2322:	d4 e0       	ldi	r29, 0x04	; 4
    2324:	e8 81       	ld	r30, Y
    2326:	f9 81       	ldd	r31, Y+1	; 0x01
    2328:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			        // connect to PCF8563 by sending its ID on I2c Bus
    232a:	ec 81       	ldd	r30, Y+4	; 0x04
    232c:	fd 81       	ldd	r31, Y+5	; 0x05
    232e:	82 ea       	ldi	r24, 0xA2	; 162
    2330:	09 95       	icall
	i2c.Write(PCF8563DayRegAddress_U8);	            // Request DAY RAM address at 04H
    2332:	ec 81       	ldd	r30, Y+4	; 0x04
    2334:	fd 81       	ldd	r31, Y+5	; 0x05
    2336:	85 e0       	ldi	r24, 0x05	; 5
    2338:	09 95       	icall
	i2c.Stop();								        // Stop I2C communication after selecting DAY Register
    233a:	ea 81       	ldd	r30, Y+2	; 0x02
    233c:	fb 81       	ldd	r31, Y+3	; 0x03
    233e:	09 95       	icall
	i2c.Start();							        // Start I2C communication
    2340:	e8 81       	ld	r30, Y
    2342:	f9 81       	ldd	r31, Y+1	; 0x01
    2344:	09 95       	icall
	i2c.Write(PCF8563ReadMode_U8);			        // connect to PCF8563 (Read mode) by sending its ID
    2346:	ec 81       	ldd	r30, Y+4	; 0x04
    2348:	fd 81       	ldd	r31, Y+5	; 0x05
    234a:	83 ea       	ldi	r24, 0xA3	; 163
    234c:	09 95       	icall
	result.days = i2c.Read(1) & ~0xC0;				// read Day and return Positive ACK
    234e:	ee 81       	ldd	r30, Y+6	; 0x06
    2350:	ff 81       	ldd	r31, Y+7	; 0x07
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	09 95       	icall
    2356:	08 2f       	mov	r16, r24
	result.weekdays = i2c.Read(1) & ~0xF8;			// read Month and return Positive ACK
    2358:	ee 81       	ldd	r30, Y+6	; 0x06
    235a:	ff 81       	ldd	r31, Y+7	; 0x07
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	09 95       	icall
    2360:	f8 2e       	mov	r15, r24
	result.century_months = i2c.Read(1) & ~0xE0;
    2362:	ee 81       	ldd	r30, Y+6	; 0x06
    2364:	ff 81       	ldd	r31, Y+7	; 0x07
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	09 95       	icall
    236a:	18 2f       	mov	r17, r24
	result.years = i2c.Read(0);				        // read Year and return Negative/No ACK
    236c:	ee 81       	ldd	r30, Y+6	; 0x06
    236e:	ff 81       	ldd	r31, Y+7	; 0x07
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	09 95       	icall
    2374:	e8 2e       	mov	r14, r24
	i2c.Stop();								        // Stop I2C communication after reading the Date
    2376:	ea 81       	ldd	r30, Y+2	; 0x02
    2378:	fb 81       	ldd	r31, Y+3	; 0x03
    237a:	09 95       	icall
	return result;
    237c:	71 2f       	mov	r23, r17
    237e:	7f 71       	andi	r23, 0x1F	; 31
}
    2380:	6e 2d       	mov	r22, r14
    2382:	8f 2d       	mov	r24, r15
    2384:	87 70       	andi	r24, 0x07	; 7
    2386:	90 2f       	mov	r25, r16
    2388:	9f 73       	andi	r25, 0x3F	; 63
    238a:	df 91       	pop	r29
    238c:	cf 91       	pop	r28
    238e:	1f 91       	pop	r17
    2390:	0f 91       	pop	r16
    2392:	ff 90       	pop	r15
    2394:	ef 90       	pop	r14
    2396:	08 95       	ret

00002398 <PCF8563RTC_bcd2dec>:
/***uint8_t PCF8563RTC_bcd2dec(uint8_t num)***/
uint8_t PCF8563RTC_bcd2dec(uint8_t num)
{
	return ((num/16 * 10) + (num % 16));
    2398:	98 2f       	mov	r25, r24
    239a:	92 95       	swap	r25
    239c:	9f 70       	andi	r25, 0x0F	; 15
    239e:	99 0f       	add	r25, r25
    23a0:	29 2f       	mov	r18, r25
    23a2:	22 0f       	add	r18, r18
    23a4:	22 0f       	add	r18, r18
    23a6:	92 0f       	add	r25, r18
    23a8:	8f 70       	andi	r24, 0x0F	; 15
}
    23aa:	89 0f       	add	r24, r25
    23ac:	08 95       	ret

000023ae <PCF8563RTC_bintobcd>:
/***uint8_t PCF8563RTC_bintobcd(uint8_t bin)***/
uint8_t PCF8563RTC_bintobcd(uint8_t bin)
{
	return (((bin) / 10) << 4) + ((bin) % 10);
    23ae:	9d ec       	ldi	r25, 0xCD	; 205
    23b0:	89 9f       	mul	r24, r25
    23b2:	91 2d       	mov	r25, r1
    23b4:	11 24       	eor	r1, r1
    23b6:	96 95       	lsr	r25
    23b8:	96 95       	lsr	r25
    23ba:	96 95       	lsr	r25
    23bc:	39 2f       	mov	r19, r25
    23be:	33 0f       	add	r19, r19
    23c0:	23 2f       	mov	r18, r19
    23c2:	22 0f       	add	r18, r18
    23c4:	22 0f       	add	r18, r18
    23c6:	23 0f       	add	r18, r19
    23c8:	82 1b       	sub	r24, r18
}
    23ca:	20 e1       	ldi	r18, 0x10	; 16
    23cc:	92 9f       	mul	r25, r18
    23ce:	80 0d       	add	r24, r0
    23d0:	11 24       	eor	r1, r1
    23d2:	08 95       	ret

000023d4 <PCF8563RTC_Init>:
	SREG=tSREG;
	return pcf;
}
/***void PCF8563RTC_Init(uint8_t prescaler)***/
void PCF8563RTC_Init(void)
{
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
	i2c.Start();							// Start I2C communication
    23d8:	ca e0       	ldi	r28, 0x0A	; 10
    23da:	d4 e0       	ldi	r29, 0x04	; 4
    23dc:	e8 81       	ld	r30, Y
    23de:	f9 81       	ldd	r31, Y+1	; 0x01
    23e0:	09 95       	icall
	i2c.Write(PCF8563WriteMode_U8);			// Connect to PCF8563 by sending its ID on I2c Bus
    23e2:	ec 81       	ldd	r30, Y+4	; 0x04
    23e4:	fd 81       	ldd	r31, Y+5	; 0x05
    23e6:	82 ea       	ldi	r24, 0xA2	; 162
    23e8:	09 95       	icall
	i2c.Write(PCF8563ControlRegAddress_U8);	// Select the PCF8563 ControlRegister to configure PCF8563
    23ea:	ec 81       	ldd	r30, Y+4	; 0x04
    23ec:	fd 81       	ldd	r31, Y+5	; 0x05
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	09 95       	icall
	i2c.Write(0x00);						// Write 0x00 to Control register to disable SQW-Out
    23f2:	ec 81       	ldd	r30, Y+4	; 0x04
    23f4:	fd 81       	ldd	r31, Y+5	; 0x05
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	09 95       	icall
	i2c.Stop();								// Stop I2C communication after initializing PCF8563
    23fa:	ea 81       	ldd	r30, Y+2	; 0x02
    23fc:	fb 81       	ldd	r31, Y+3	; 0x03
    23fe:	09 95       	icall
}
    2400:	df 91       	pop	r29
    2402:	cf 91       	pop	r28
    2404:	08 95       	ret

00002406 <PCF8563RTCenable>:
struct date PCF8563RTC_GetDate(void);
uint8_t PCF8563RTC_bcd2dec(uint8_t num);
uint8_t PCF8563RTC_bintobcd(uint8_t bin);
/***PCF8563RTC PCF8563RTCenable(uint8_t prescaler)***/
PCF8563RTC PCF8563RTCenable(uint8_t prescaler)
{
    2406:	ff 92       	push	r15
    2408:	0f 93       	push	r16
    240a:	1f 93       	push	r17
    240c:	cf 93       	push	r28
    240e:	df 93       	push	r29
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
    2414:	2a 97       	sbiw	r28, 0x0a	; 10
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	f8 94       	cli
    241a:	de bf       	out	0x3e, r29	; 62
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	cd bf       	out	0x3d, r28	; 61
    2420:	8c 01       	movw	r16, r24
	uint8_t tSREG;
	tSREG=SREG;
    2422:	ff b6       	in	r15, 0x3f	; 63
	SREG&=~(1<<GLOBAL_INTERRUPT_ENABLE);
    2424:	8f b7       	in	r24, 0x3f	; 63
    2426:	8f 77       	andi	r24, 0x7F	; 127
    2428:	8f bf       	out	0x3f, r24	; 63
	PCF8563RTC pcf;
	i2c = I2Cenable(prescaler);  			// Initialize the I2c module.
    242a:	ce 01       	movw	r24, r28
    242c:	01 96       	adiw	r24, 0x01	; 1
    242e:	0e 94 34 03 	call	0x668	; 0x668 <I2Cenable>
    2432:	8a e0       	ldi	r24, 0x0A	; 10
    2434:	fe 01       	movw	r30, r28
    2436:	31 96       	adiw	r30, 0x01	; 1
    2438:	aa e0       	ldi	r26, 0x0A	; 10
    243a:	b4 e0       	ldi	r27, 0x04	; 4
    243c:	01 90       	ld	r0, Z+
    243e:	0d 92       	st	X+, r0
    2440:	8a 95       	dec	r24
    2442:	e1 f7       	brne	.-8      	; 0x243c <PCF8563RTCenable+0x36>
	PCF8563RTC_Init();                      //Initialize RTC
    2444:	c7 df       	rcall	.-114    	; 0x23d4 <PCF8563RTC_Init>
	pcf.GetTime=PCF8563RTC_GetTime;
	pcf.GetDate=PCF8563RTC_GetDate;
	pcf.bcd2dec=PCF8563RTC_bcd2dec;
	pcf.bintobcd=PCF8563RTC_bintobcd;
	/******/
	SREG=tSREG;
    2446:	ff be       	out	0x3f, r15	; 63
	return pcf;
    2448:	8f e0       	ldi	r24, 0x0F	; 15
    244a:	90 e1       	ldi	r25, 0x10	; 16
    244c:	f8 01       	movw	r30, r16
    244e:	91 83       	std	Z+1, r25	; 0x01
    2450:	80 83       	st	Z, r24
    2452:	89 e3       	ldi	r24, 0x39	; 57
    2454:	90 e1       	ldi	r25, 0x10	; 16
    2456:	93 83       	std	Z+3, r25	; 0x03
    2458:	82 83       	std	Z+2, r24	; 0x02
    245a:	85 e5       	ldi	r24, 0x55	; 85
    245c:	90 e1       	ldi	r25, 0x10	; 16
    245e:	95 83       	std	Z+5, r25	; 0x05
    2460:	84 83       	std	Z+4, r24	; 0x04
    2462:	81 e7       	ldi	r24, 0x71	; 113
    2464:	90 e1       	ldi	r25, 0x10	; 16
    2466:	97 83       	std	Z+7, r25	; 0x07
    2468:	86 83       	std	Z+6, r24	; 0x06
    246a:	8d e8       	ldi	r24, 0x8D	; 141
    246c:	90 e1       	ldi	r25, 0x10	; 16
    246e:	91 87       	std	Z+9, r25	; 0x09
    2470:	80 87       	std	Z+8, r24	; 0x08
    2472:	8f ea       	ldi	r24, 0xAF	; 175
    2474:	90 e1       	ldi	r25, 0x10	; 16
    2476:	93 87       	std	Z+11, r25	; 0x0b
    2478:	82 87       	std	Z+10, r24	; 0x0a
    247a:	84 e3       	ldi	r24, 0x34	; 52
    247c:	91 e1       	ldi	r25, 0x11	; 17
    247e:	95 87       	std	Z+13, r25	; 0x0d
    2480:	84 87       	std	Z+12, r24	; 0x0c
    2482:	88 e1       	ldi	r24, 0x18	; 24
    2484:	91 e1       	ldi	r25, 0x11	; 17
    2486:	97 87       	std	Z+15, r25	; 0x0f
    2488:	86 87       	std	Z+14, r24	; 0x0e
    248a:	8c ef       	ldi	r24, 0xFC	; 252
    248c:	90 e1       	ldi	r25, 0x10	; 16
    248e:	91 8b       	std	Z+17, r25	; 0x11
    2490:	80 8b       	std	Z+16, r24	; 0x10
    2492:	80 ee       	ldi	r24, 0xE0	; 224
    2494:	90 e1       	ldi	r25, 0x10	; 16
    2496:	93 8b       	std	Z+19, r25	; 0x13
    2498:	82 8b       	std	Z+18, r24	; 0x12
    249a:	80 e5       	ldi	r24, 0x50	; 80
    249c:	91 e1       	ldi	r25, 0x11	; 17
    249e:	95 8b       	std	Z+21, r25	; 0x15
    24a0:	84 8b       	std	Z+20, r24	; 0x14
    24a2:	8a e8       	ldi	r24, 0x8A	; 138
    24a4:	91 e1       	ldi	r25, 0x11	; 17
    24a6:	97 8b       	std	Z+23, r25	; 0x17
    24a8:	86 8b       	std	Z+22, r24	; 0x16
    24aa:	8c ec       	ldi	r24, 0xCC	; 204
    24ac:	91 e1       	ldi	r25, 0x11	; 17
    24ae:	91 8f       	std	Z+25, r25	; 0x19
    24b0:	80 8f       	std	Z+24, r24	; 0x18
    24b2:	87 ed       	ldi	r24, 0xD7	; 215
    24b4:	91 e1       	ldi	r25, 0x11	; 17
    24b6:	93 8f       	std	Z+27, r25	; 0x1b
    24b8:	82 8f       	std	Z+26, r24	; 0x1a
}
    24ba:	c8 01       	movw	r24, r16
    24bc:	2a 96       	adiw	r28, 0x0a	; 10
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	de bf       	out	0x3e, r29	; 62
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	cd bf       	out	0x3d, r28	; 61
    24c8:	df 91       	pop	r29
    24ca:	cf 91       	pop	r28
    24cc:	1f 91       	pop	r17
    24ce:	0f 91       	pop	r16
    24d0:	ff 90       	pop	r15
    24d2:	08 95       	ret

000024d4 <ZNPID_set_kc>:
	return (value_1 + value_2);
}
float product(float value_1, float value_2)
{
	return (value_1 * value_2);
}
    24d4:	fc 01       	movw	r30, r24
    24d6:	40 83       	st	Z, r20
    24d8:	51 83       	std	Z+1, r21	; 0x01
    24da:	62 83       	std	Z+2, r22	; 0x02
    24dc:	73 83       	std	Z+3, r23	; 0x03
    24de:	08 95       	ret

000024e0 <ZNPID_set_ki>:
    24e0:	fc 01       	movw	r30, r24
    24e2:	44 83       	std	Z+4, r20	; 0x04
    24e4:	55 83       	std	Z+5, r21	; 0x05
    24e6:	66 83       	std	Z+6, r22	; 0x06
    24e8:	77 83       	std	Z+7, r23	; 0x07
    24ea:	08 95       	ret

000024ec <ZNPID_set_kd>:
    24ec:	fc 01       	movw	r30, r24
    24ee:	40 87       	std	Z+8, r20	; 0x08
    24f0:	51 87       	std	Z+9, r21	; 0x09
    24f2:	62 87       	std	Z+10, r22	; 0x0a
    24f4:	73 87       	std	Z+11, r23	; 0x0b
    24f6:	08 95       	ret

000024f8 <ZNPID_set_SP>:
    24f8:	fc 01       	movw	r30, r24
    24fa:	40 a7       	std	Z+40, r20	; 0x28
    24fc:	51 a7       	std	Z+41, r21	; 0x29
    24fe:	62 a7       	std	Z+42, r22	; 0x2a
    2500:	73 a7       	std	Z+43, r23	; 0x2b
    2502:	08 95       	ret

00002504 <ZNPIDenable>:
    2504:	fc 01       	movw	r30, r24
    2506:	9f b7       	in	r25, 0x3f	; 63
    2508:	8f b7       	in	r24, 0x3f	; 63
    250a:	8f 77       	andi	r24, 0x7F	; 127
    250c:	8f bf       	out	0x3f, r24	; 63
    250e:	9f bf       	out	0x3f, r25	; 63
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	a0 e8       	ldi	r26, 0x80	; 128
    2516:	bf e3       	ldi	r27, 0x3F	; 63
    2518:	80 83       	st	Z, r24
    251a:	91 83       	std	Z+1, r25	; 0x01
    251c:	a2 83       	std	Z+2, r26	; 0x02
    251e:	b3 83       	std	Z+3, r27	; 0x03
    2520:	14 82       	std	Z+4, r1	; 0x04
    2522:	15 82       	std	Z+5, r1	; 0x05
    2524:	16 82       	std	Z+6, r1	; 0x06
    2526:	17 82       	std	Z+7, r1	; 0x07
    2528:	10 86       	std	Z+8, r1	; 0x08
    252a:	11 86       	std	Z+9, r1	; 0x09
    252c:	12 86       	std	Z+10, r1	; 0x0a
    252e:	13 86       	std	Z+11, r1	; 0x0b
    2530:	14 8a       	std	Z+20, r1	; 0x14
    2532:	15 8a       	std	Z+21, r1	; 0x15
    2534:	16 8a       	std	Z+22, r1	; 0x16
    2536:	17 8a       	std	Z+23, r1	; 0x17
    2538:	10 a2       	std	Z+32, r1	; 0x20
    253a:	11 a2       	std	Z+33, r1	; 0x21
    253c:	12 a2       	std	Z+34, r1	; 0x22
    253e:	13 a2       	std	Z+35, r1	; 0x23
    2540:	14 a2       	std	Z+36, r1	; 0x24
    2542:	15 a2       	std	Z+37, r1	; 0x25
    2544:	16 a2       	std	Z+38, r1	; 0x26
    2546:	17 a2       	std	Z+39, r1	; 0x27
    2548:	10 aa       	std	Z+48, r1	; 0x30
    254a:	11 aa       	std	Z+49, r1	; 0x31
    254c:	12 aa       	std	Z+50, r1	; 0x32
    254e:	13 aa       	std	Z+51, r1	; 0x33
    2550:	8a e6       	ldi	r24, 0x6A	; 106
    2552:	92 e1       	ldi	r25, 0x12	; 18
    2554:	95 ab       	std	Z+53, r25	; 0x35
    2556:	84 ab       	std	Z+52, r24	; 0x34
    2558:	80 e7       	ldi	r24, 0x70	; 112
    255a:	92 e1       	ldi	r25, 0x12	; 18
    255c:	97 ab       	std	Z+55, r25	; 0x37
    255e:	86 ab       	std	Z+54, r24	; 0x36
    2560:	86 e7       	ldi	r24, 0x76	; 118
    2562:	92 e1       	ldi	r25, 0x12	; 18
    2564:	91 af       	std	Z+57, r25	; 0x39
    2566:	80 af       	std	Z+56, r24	; 0x38
    2568:	8c e7       	ldi	r24, 0x7C	; 124
    256a:	92 e1       	ldi	r25, 0x12	; 18
    256c:	93 af       	std	Z+59, r25	; 0x3b
    256e:	82 af       	std	Z+58, r24	; 0x3a
    2570:	82 e3       	ldi	r24, 0x32	; 50
    2572:	93 e1       	ldi	r25, 0x13	; 19
    2574:	95 af       	std	Z+61, r25	; 0x3d
    2576:	84 af       	std	Z+60, r24	; 0x3c
    2578:	cf 01       	movw	r24, r30
    257a:	08 95       	ret

0000257c <integral>:
float integral(ZNPID* self, float PV, float timelapse)
{
    257c:	cf 92       	push	r12
    257e:	df 92       	push	r13
    2580:	ef 92       	push	r14
    2582:	ff 92       	push	r15
    2584:	0f 93       	push	r16
    2586:	1f 93       	push	r17
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
    258c:	ec 01       	movw	r28, r24
    258e:	68 01       	movw	r12, r16
    2590:	79 01       	movw	r14, r18
	tmp=product(sum(delta(self->SetP, PV), self->Ep), timelapse);
	tmp/=2;
    2592:	9a 01       	movw	r18, r20
    2594:	ab 01       	movw	r20, r22
    2596:	68 a5       	ldd	r22, Y+40	; 0x28
    2598:	79 a5       	ldd	r23, Y+41	; 0x29
    259a:	8a a5       	ldd	r24, Y+42	; 0x2a
    259c:	9b a5       	ldd	r25, Y+43	; 0x2b
    259e:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__subsf3>
    25a2:	2c 89       	ldd	r18, Y+20	; 0x14
    25a4:	3d 89       	ldd	r19, Y+21	; 0x15
    25a6:	4e 89       	ldd	r20, Y+22	; 0x16
    25a8:	5f 89       	ldd	r21, Y+23	; 0x17
    25aa:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__addsf3>
    25ae:	a7 01       	movw	r20, r14
    25b0:	96 01       	movw	r18, r12
    25b2:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <__mulsf3>
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	40 e0       	ldi	r20, 0x00	; 0
    25bc:	5f e3       	ldi	r21, 0x3F	; 63
    25be:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <__mulsf3>
    25c2:	60 93 14 04 	sts	0x0414, r22	; 0x800414 <tmp>
    25c6:	70 93 15 04 	sts	0x0415, r23	; 0x800415 <tmp+0x1>
    25ca:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <tmp+0x2>
    25ce:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <tmp+0x3>
	return (self->integral += tmp);
    25d2:	2c a1       	ldd	r18, Y+36	; 0x24
    25d4:	3d a1       	ldd	r19, Y+37	; 0x25
    25d6:	4e a1       	ldd	r20, Y+38	; 0x26
    25d8:	5f a1       	ldd	r21, Y+39	; 0x27
    25da:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__addsf3>
    25de:	6c a3       	std	Y+36, r22	; 0x24
    25e0:	7d a3       	std	Y+37, r23	; 0x25
    25e2:	8e a3       	std	Y+38, r24	; 0x26
    25e4:	9f a3       	std	Y+39, r25	; 0x27
}
    25e6:	df 91       	pop	r29
    25e8:	cf 91       	pop	r28
    25ea:	1f 91       	pop	r17
    25ec:	0f 91       	pop	r16
    25ee:	ff 90       	pop	r15
    25f0:	ef 90       	pop	r14
    25f2:	df 90       	pop	r13
    25f4:	cf 90       	pop	r12
    25f6:	08 95       	ret

000025f8 <derivative>:
float derivative(ZNPID* self, float PV, float timelapse)
{
    25f8:	cf 92       	push	r12
    25fa:	df 92       	push	r13
    25fc:	ef 92       	push	r14
    25fe:	ff 92       	push	r15
    2600:	0f 93       	push	r16
    2602:	1f 93       	push	r17
    2604:	cf 93       	push	r28
    2606:	df 93       	push	r29
    2608:	ec 01       	movw	r28, r24
    260a:	68 01       	movw	r12, r16
    260c:	79 01       	movw	r14, r18
	tmp=delta(delta(self->SetP, PV),self->Ep);
    260e:	9a 01       	movw	r18, r20
    2610:	ab 01       	movw	r20, r22
    2612:	68 a5       	ldd	r22, Y+40	; 0x28
    2614:	79 a5       	ldd	r23, Y+41	; 0x29
    2616:	8a a5       	ldd	r24, Y+42	; 0x2a
    2618:	9b a5       	ldd	r25, Y+43	; 0x2b
    261a:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__subsf3>
    261e:	2c 89       	ldd	r18, Y+20	; 0x14
    2620:	3d 89       	ldd	r19, Y+21	; 0x15
    2622:	4e 89       	ldd	r20, Y+22	; 0x16
    2624:	5f 89       	ldd	r21, Y+23	; 0x17
    2626:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__subsf3>
    262a:	60 93 14 04 	sts	0x0414, r22	; 0x800414 <tmp>
    262e:	70 93 15 04 	sts	0x0415, r23	; 0x800415 <tmp+0x1>
    2632:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <tmp+0x2>
    2636:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <tmp+0x3>
	return (self->derivative /= timelapse);
    263a:	a7 01       	movw	r20, r14
    263c:	96 01       	movw	r18, r12
    263e:	68 a1       	ldd	r22, Y+32	; 0x20
    2640:	79 a1       	ldd	r23, Y+33	; 0x21
    2642:	8a a1       	ldd	r24, Y+34	; 0x22
    2644:	9b a1       	ldd	r25, Y+35	; 0x23
    2646:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__divsf3>
    264a:	68 a3       	std	Y+32, r22	; 0x20
    264c:	79 a3       	std	Y+33, r23	; 0x21
    264e:	8a a3       	std	Y+34, r24	; 0x22
    2650:	9b a3       	std	Y+35, r25	; 0x23
}
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	1f 91       	pop	r17
    2658:	0f 91       	pop	r16
    265a:	ff 90       	pop	r15
    265c:	ef 90       	pop	r14
    265e:	df 90       	pop	r13
    2660:	cf 90       	pop	r12
    2662:	08 95       	ret

00002664 <ZNPID_output>:
float ZNPID_output(ZNPID* self, float PV, float timelapse)
{
    2664:	4f 92       	push	r4
    2666:	5f 92       	push	r5
    2668:	6f 92       	push	r6
    266a:	7f 92       	push	r7
    266c:	8f 92       	push	r8
    266e:	9f 92       	push	r9
    2670:	af 92       	push	r10
    2672:	bf 92       	push	r11
    2674:	cf 92       	push	r12
    2676:	df 92       	push	r13
    2678:	ef 92       	push	r14
    267a:	ff 92       	push	r15
    267c:	0f 93       	push	r16
    267e:	1f 93       	push	r17
    2680:	cf 93       	push	r28
    2682:	df 93       	push	r29
    2684:	ec 01       	movw	r28, r24
    2686:	6a 01       	movw	r12, r20
    2688:	7b 01       	movw	r14, r22
    268a:	28 01       	movw	r4, r16
    268c:	39 01       	movw	r6, r18
{
	return (value_1 + value_2);
}
float product(float value_1, float value_2)
{
	return (value_1 * value_2);
    268e:	28 81       	ld	r18, Y
    2690:	39 81       	ldd	r19, Y+1	; 0x01
    2692:	4a 81       	ldd	r20, Y+2	; 0x02
    2694:	5b 81       	ldd	r21, Y+3	; 0x03
    2696:	6c 89       	ldd	r22, Y+20	; 0x14
    2698:	7d 89       	ldd	r23, Y+21	; 0x15
    269a:	8e 89       	ldd	r24, Y+22	; 0x16
    269c:	9f 89       	ldd	r25, Y+23	; 0x17
    269e:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <__mulsf3>
    26a2:	4b 01       	movw	r8, r22
    26a4:	5c 01       	movw	r10, r24
}
float ZNPID_output(ZNPID* self, float PV, float timelapse)
{
	float result;
	result=product(self->kc, self->Ep);
	tmp=product(self->ki, integral(self, PV, timelapse));
    26a6:	93 01       	movw	r18, r6
    26a8:	82 01       	movw	r16, r4
    26aa:	b7 01       	movw	r22, r14
    26ac:	a6 01       	movw	r20, r12
    26ae:	ce 01       	movw	r24, r28
    26b0:	65 df       	rcall	.-310    	; 0x257c <integral>
{
	return (value_1 + value_2);
}
float product(float value_1, float value_2)
{
	return (value_1 * value_2);
    26b2:	2c 81       	ldd	r18, Y+4	; 0x04
    26b4:	3d 81       	ldd	r19, Y+5	; 0x05
    26b6:	4e 81       	ldd	r20, Y+6	; 0x06
    26b8:	5f 81       	ldd	r21, Y+7	; 0x07
    26ba:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <__mulsf3>
}
float ZNPID_output(ZNPID* self, float PV, float timelapse)
{
	float result;
	result=product(self->kc, self->Ep);
	tmp=product(self->ki, integral(self, PV, timelapse));
    26be:	60 93 14 04 	sts	0x0414, r22	; 0x800414 <tmp>
    26c2:	70 93 15 04 	sts	0x0415, r23	; 0x800415 <tmp+0x1>
    26c6:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <tmp+0x2>
    26ca:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <tmp+0x3>
{
	return (present_value - past_value);
}
float sum(float value_1, float value_2)
{
	return (value_1 + value_2);
    26ce:	a5 01       	movw	r20, r10
    26d0:	94 01       	movw	r18, r8
    26d2:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__addsf3>
    26d6:	4b 01       	movw	r8, r22
    26d8:	5c 01       	movw	r10, r24
{
	float result;
	result=product(self->kc, self->Ep);
	tmp=product(self->ki, integral(self, PV, timelapse));
	result=sum(result, tmp);
	tmp=product(self->kd, derivative(self, PV, timelapse));
    26da:	93 01       	movw	r18, r6
    26dc:	82 01       	movw	r16, r4
    26de:	b7 01       	movw	r22, r14
    26e0:	a6 01       	movw	r20, r12
    26e2:	ce 01       	movw	r24, r28
    26e4:	89 df       	rcall	.-238    	; 0x25f8 <derivative>
{
	return (value_1 + value_2);
}
float product(float value_1, float value_2)
{
	return (value_1 * value_2);
    26e6:	28 85       	ldd	r18, Y+8	; 0x08
    26e8:	39 85       	ldd	r19, Y+9	; 0x09
    26ea:	4a 85       	ldd	r20, Y+10	; 0x0a
    26ec:	5b 85       	ldd	r21, Y+11	; 0x0b
    26ee:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <__mulsf3>
{
	float result;
	result=product(self->kc, self->Ep);
	tmp=product(self->ki, integral(self, PV, timelapse));
	result=sum(result, tmp);
	tmp=product(self->kd, derivative(self, PV, timelapse));
    26f2:	60 93 14 04 	sts	0x0414, r22	; 0x800414 <tmp>
    26f6:	70 93 15 04 	sts	0x0415, r23	; 0x800415 <tmp+0x1>
    26fa:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <tmp+0x2>
    26fe:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <tmp+0x3>
{
	return (present_value - past_value);
}
float sum(float value_1, float value_2)
{
	return (value_1 + value_2);
    2702:	a5 01       	movw	r20, r10
    2704:	94 01       	movw	r18, r8
    2706:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__addsf3>
    270a:	4b 01       	movw	r8, r22
    270c:	5c 01       	movw	r10, r24
	result=product(self->kc, self->Ep);
	tmp=product(self->ki, integral(self, PV, timelapse));
	result=sum(result, tmp);
	tmp=product(self->kd, derivative(self, PV, timelapse));
	result=sum(result, tmp);;
	self->Ep = self->SetP - PV;
    270e:	a7 01       	movw	r20, r14
    2710:	96 01       	movw	r18, r12
    2712:	68 a5       	ldd	r22, Y+40	; 0x28
    2714:	79 a5       	ldd	r23, Y+41	; 0x29
    2716:	8a a5       	ldd	r24, Y+42	; 0x2a
    2718:	9b a5       	ldd	r25, Y+43	; 0x2b
    271a:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__subsf3>
    271e:	6c 8b       	std	Y+20, r22	; 0x14
    2720:	7d 8b       	std	Y+21, r23	; 0x15
    2722:	8e 8b       	std	Y+22, r24	; 0x16
    2724:	9f 8b       	std	Y+23, r25	; 0x17
	self->OP=result;
    2726:	88 aa       	std	Y+48, r8	; 0x30
    2728:	99 aa       	std	Y+49, r9	; 0x31
    272a:	aa aa       	std	Y+50, r10	; 0x32
    272c:	bb aa       	std	Y+51, r11	; 0x33
	return result;
}
    272e:	c5 01       	movw	r24, r10
    2730:	b4 01       	movw	r22, r8
    2732:	df 91       	pop	r29
    2734:	cf 91       	pop	r28
    2736:	1f 91       	pop	r17
    2738:	0f 91       	pop	r16
    273a:	ff 90       	pop	r15
    273c:	ef 90       	pop	r14
    273e:	df 90       	pop	r13
    2740:	cf 90       	pop	r12
    2742:	bf 90       	pop	r11
    2744:	af 90       	pop	r10
    2746:	9f 90       	pop	r9
    2748:	8f 90       	pop	r8
    274a:	7f 90       	pop	r7
    274c:	6f 90       	pop	r6
    274e:	5f 90       	pop	r5
    2750:	4f 90       	pop	r4
    2752:	08 95       	ret

00002754 <PORTINIT>:
** procedure and function
*/
void PORTINIT(void)
{
	//INPUT
	DDRF=0x00;
    2754:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTF=0x0F;
    2758:	8f e0       	ldi	r24, 0x0F	; 15
    275a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	//OUTPUT
	DDRB|=(1<<5) | (1<<6) | (1<<7);
    275e:	87 b3       	in	r24, 0x17	; 23
    2760:	80 6e       	ori	r24, 0xE0	; 224
    2762:	87 bb       	out	0x17, r24	; 23
    2764:	08 95       	ret

00002766 <main>:
** Header
*/
void PORTINIT();
/****MAIN****/
int main(void)
{
    2766:	cf 93       	push	r28
    2768:	df 93       	push	r29
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
    276e:	ca 57       	subi	r28, 0x7A	; 122
    2770:	d1 40       	sbci	r29, 0x01	; 1
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
	PORTINIT(); // Inic Ports
    277c:	eb df       	rcall	.-42     	; 0x2754 <PORTINIT>
	/***INICIALIZE OBJECTS***/
	function= FUNCenable(); // Function Library
    277e:	ce 01       	movw	r24, r28
    2780:	80 5e       	subi	r24, 0xE0	; 224
    2782:	9e 4f       	sbci	r25, 0xFE	; 254
    2784:	0e 94 ce 0a 	call	0x159c	; 0x159c <FUNCenable>
    2788:	8a e4       	ldi	r24, 0x4A	; 74
    278a:	fe 01       	movw	r30, r28
    278c:	e0 5e       	subi	r30, 0xE0	; 224
    278e:	fe 4f       	sbci	r31, 0xFE	; 254
    2790:	ae e1       	ldi	r26, 0x1E	; 30
    2792:	b4 e0       	ldi	r27, 0x04	; 4
    2794:	01 90       	ld	r0, Z+
    2796:	0d 92       	st	X+, r0
    2798:	8a 95       	dec	r24
    279a:	e1 f7       	brne	.-8      	; 0x2794 <main+0x2e>
	LCD0 lcd0 = LCD0enable(&DDRA,&PINA,&PORTA); // LCD Display 4X20
    279c:	2b e3       	ldi	r18, 0x3B	; 59
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	49 e3       	ldi	r20, 0x39	; 57
    27a2:	50 e0       	ldi	r21, 0x00	; 0
    27a4:	6a e3       	ldi	r22, 0x3A	; 58
    27a6:	70 e0       	ldi	r23, 0x00	; 0
    27a8:	ce 01       	movw	r24, r28
    27aa:	8e 56       	subi	r24, 0x6E	; 110
    27ac:	9f 4f       	sbci	r25, 0xFF	; 255
    27ae:	cf db       	rcall	.-2146   	; 0x1f4e <LCD0enable>
    27b0:	c8 56       	subi	r28, 0x68	; 104
    27b2:	df 4f       	sbci	r29, 0xFF	; 255
    27b4:	28 81       	ld	r18, Y
    27b6:	39 81       	ldd	r19, Y+1	; 0x01
    27b8:	c8 59       	subi	r28, 0x98	; 152
    27ba:	d0 40       	sbci	r29, 0x00	; 0
    27bc:	c6 59       	subi	r28, 0x96	; 150
    27be:	de 4f       	sbci	r29, 0xFE	; 254
    27c0:	39 83       	std	Y+1, r19	; 0x01
    27c2:	28 83       	st	Y, r18
    27c4:	ca 56       	subi	r28, 0x6A	; 106
    27c6:	d1 40       	sbci	r29, 0x01	; 1
    27c8:	c2 56       	subi	r28, 0x62	; 98
    27ca:	df 4f       	sbci	r29, 0xFF	; 255
    27cc:	48 80       	ld	r4, Y
    27ce:	59 80       	ldd	r5, Y+1	; 0x01
    27d0:	ce 59       	subi	r28, 0x9E	; 158
    27d2:	d0 40       	sbci	r29, 0x00	; 0
    27d4:	ce 55       	subi	r28, 0x5E	; 94
    27d6:	df 4f       	sbci	r29, 0xFF	; 255
    27d8:	88 81       	ld	r24, Y
    27da:	99 81       	ldd	r25, Y+1	; 0x01
    27dc:	c2 5a       	subi	r28, 0xA2	; 162
    27de:	d0 40       	sbci	r29, 0x00	; 0
    27e0:	c2 59       	subi	r28, 0x92	; 146
    27e2:	de 4f       	sbci	r29, 0xFE	; 254
    27e4:	99 83       	std	Y+1, r25	; 0x01
    27e6:	88 83       	st	Y, r24
    27e8:	ce 56       	subi	r28, 0x6E	; 110
    27ea:	d1 40       	sbci	r29, 0x01	; 1
    27ec:	cc 55       	subi	r28, 0x5C	; 92
    27ee:	df 4f       	sbci	r29, 0xFF	; 255
    27f0:	28 80       	ld	r2, Y
    27f2:	39 80       	ldd	r3, Y+1	; 0x01
    27f4:	c4 5a       	subi	r28, 0xA4	; 164
    27f6:	d0 40       	sbci	r29, 0x00	; 0
	KEYPAD keypad = KEYPADenable(&DDRE,&PINE,&PORTE); // Keyboard
    27f8:	43 e2       	ldi	r20, 0x23	; 35
    27fa:	50 e0       	ldi	r21, 0x00	; 0
    27fc:	61 e2       	ldi	r22, 0x21	; 33
    27fe:	70 e0       	ldi	r23, 0x00	; 0
    2800:	82 e2       	ldi	r24, 0x22	; 34
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	25 d9       	rcall	.-3510   	; 0x1a50 <KEYPADenable>
    2806:	c8 55       	subi	r28, 0x58	; 88
    2808:	df 4f       	sbci	r29, 0xFF	; 255
    280a:	28 83       	st	Y, r18
    280c:	c8 5a       	subi	r28, 0xA8	; 168
    280e:	d0 40       	sbci	r29, 0x00	; 0
    2810:	c7 55       	subi	r28, 0x57	; 87
    2812:	df 4f       	sbci	r29, 0xFF	; 255
    2814:	38 83       	st	Y, r19
    2816:	c9 5a       	subi	r28, 0xA9	; 169
    2818:	d0 40       	sbci	r29, 0x00	; 0
    281a:	c6 55       	subi	r28, 0x56	; 86
    281c:	df 4f       	sbci	r29, 0xFF	; 255
    281e:	48 83       	st	Y, r20
    2820:	ca 5a       	subi	r28, 0xAA	; 170
    2822:	d0 40       	sbci	r29, 0x00	; 0
    2824:	c5 55       	subi	r28, 0x55	; 85
    2826:	df 4f       	sbci	r29, 0xFF	; 255
    2828:	58 83       	st	Y, r21
    282a:	cb 5a       	subi	r28, 0xAB	; 171
    282c:	d0 40       	sbci	r29, 0x00	; 0
    282e:	c4 55       	subi	r28, 0x54	; 84
    2830:	df 4f       	sbci	r29, 0xFF	; 255
    2832:	68 83       	st	Y, r22
    2834:	cc 5a       	subi	r28, 0xAC	; 172
    2836:	d0 40       	sbci	r29, 0x00	; 0
    2838:	c3 55       	subi	r28, 0x53	; 83
    283a:	df 4f       	sbci	r29, 0xFF	; 255
    283c:	78 83       	st	Y, r23
    283e:	cd 5a       	subi	r28, 0xAD	; 173
    2840:	d0 40       	sbci	r29, 0x00	; 0
    2842:	c2 55       	subi	r28, 0x52	; 82
    2844:	df 4f       	sbci	r29, 0xFF	; 255
    2846:	88 83       	st	Y, r24
    2848:	ce 5a       	subi	r28, 0xAE	; 174
    284a:	d0 40       	sbci	r29, 0x00	; 0
    284c:	c1 55       	subi	r28, 0x51	; 81
    284e:	df 4f       	sbci	r29, 0xFF	; 255
    2850:	98 83       	st	Y, r25
    2852:	cf 5a       	subi	r28, 0xAF	; 175
    2854:	d0 40       	sbci	r29, 0x00	; 0
    2856:	c4 55       	subi	r28, 0x54	; 84
    2858:	df 4f       	sbci	r29, 0xFF	; 255
    285a:	88 80       	ld	r8, Y
    285c:	99 80       	ldd	r9, Y+1	; 0x01
    285e:	cc 5a       	subi	r28, 0xAC	; 172
    2860:	d0 40       	sbci	r29, 0x00	; 0
    2862:	c2 55       	subi	r28, 0x52	; 82
    2864:	df 4f       	sbci	r29, 0xFF	; 255
    2866:	a8 81       	ld	r26, Y
    2868:	b9 81       	ldd	r27, Y+1	; 0x01
    286a:	ce 5a       	subi	r28, 0xAE	; 174
    286c:	d0 40       	sbci	r29, 0x00	; 0
    286e:	c4 59       	subi	r28, 0x94	; 148
    2870:	de 4f       	sbci	r29, 0xFE	; 254
    2872:	b9 83       	std	Y+1, r27	; 0x01
    2874:	a8 83       	st	Y, r26
    2876:	cc 56       	subi	r28, 0x6C	; 108
    2878:	d1 40       	sbci	r29, 0x01	; 1
	ANALOG analog = ANALOGenable(1, 128, 1, 0); // Channel 0 for Position
    287a:	1f 92       	push	r1
    287c:	1f 92       	push	r1
    287e:	1f 92       	push	r1
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	8f 93       	push	r24
    2884:	90 e8       	ldi	r25, 0x80	; 128
    2886:	9f 93       	push	r25
    2888:	8f 93       	push	r24
    288a:	0e 94 6f 01 	call	0x2de	; 0x2de <ANALOGenable>
    288e:	c9 58       	subi	r28, 0x89	; 137
    2890:	de 4f       	sbci	r29, 0xFE	; 254
    2892:	68 83       	st	Y, r22
    2894:	79 83       	std	Y+1, r23	; 0x01
    2896:	8a 83       	std	Y+2, r24	; 0x02
    2898:	9b 83       	std	Y+3, r25	; 0x03
    289a:	c7 57       	subi	r28, 0x77	; 119
    289c:	d1 40       	sbci	r29, 0x01	; 1
	TIMER_COUNTER0 timer0 = TIMER_COUNTER0enable(2,2); // 1Hz to HC595
    289e:	42 e0       	ldi	r20, 0x02	; 2
    28a0:	62 e0       	ldi	r22, 0x02	; 2
    28a2:	ce 01       	movw	r24, r28
    28a4:	80 55       	subi	r24, 0x50	; 80
    28a6:	9f 4f       	sbci	r25, 0xFF	; 255
    28a8:	0e 94 54 04 	call	0x8a8	; 0x8a8 <TIMER_COUNTER0enable>
	TIMER_COUNTER1 timer1 = TIMER_COUNTER1enable(9,0); // PWM Positioning
    28ac:	40 e0       	ldi	r20, 0x00	; 0
    28ae:	69 e0       	ldi	r22, 0x09	; 9
    28b0:	ce 01       	movw	r24, r28
    28b2:	80 54       	subi	r24, 0x40	; 64
    28b4:	9f 4f       	sbci	r25, 0xFF	; 255
    28b6:	0e 94 96 04 	call	0x92c	; 0x92c <TIMER_COUNTER1enable>
    28ba:	c8 53       	subi	r28, 0x38	; 56
    28bc:	df 4f       	sbci	r29, 0xFF	; 255
    28be:	e8 81       	ld	r30, Y
    28c0:	f9 81       	ldd	r31, Y+1	; 0x01
    28c2:	c8 5c       	subi	r28, 0xC8	; 200
    28c4:	d0 40       	sbci	r29, 0x00	; 0
    28c6:	cb 58       	subi	r28, 0x8B	; 139
    28c8:	de 4f       	sbci	r29, 0xFE	; 254
    28ca:	f9 83       	std	Y+1, r31	; 0x01
    28cc:	e8 83       	st	Y, r30
    28ce:	c5 57       	subi	r28, 0x75	; 117
    28d0:	d1 40       	sbci	r29, 0x01	; 1
	rtc = PCF8563RTCenable(16); // RTC with I2C
    28d2:	60 e1       	ldi	r22, 0x10	; 16
    28d4:	ce 01       	movw	r24, r28
    28d6:	80 5e       	subi	r24, 0xE0	; 224
    28d8:	9e 4f       	sbci	r25, 0xFE	; 254
    28da:	95 dd       	rcall	.-1238   	; 0x2406 <PCF8563RTCenable>
    28dc:	8c e1       	ldi	r24, 0x1C	; 28
    28de:	fe 01       	movw	r30, r28
    28e0:	e0 5e       	subi	r30, 0xE0	; 224
    28e2:	fe 4f       	sbci	r31, 0xFE	; 254
    28e4:	ab e6       	ldi	r26, 0x6B	; 107
    28e6:	b4 e0       	ldi	r27, 0x04	; 4
    28e8:	01 90       	ld	r0, Z+
    28ea:	0d 92       	st	X+, r0
    28ec:	8a 95       	dec	r24
    28ee:	e1 f7       	brne	.-8      	; 0x28e8 <main+0x182>
	shift = HC595enable(&DDRG,&PORTG,2,0,1);
    28f0:	01 e0       	ldi	r16, 0x01	; 1
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	42 e0       	ldi	r20, 0x02	; 2
    28f6:	65 e6       	ldi	r22, 0x65	; 101
    28f8:	70 e0       	ldi	r23, 0x00	; 0
    28fa:	84 e6       	ldi	r24, 0x64	; 100
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	0e 94 0c 01 	call	0x218	; 0x218 <HC595enable>
    2902:	20 93 18 04 	sts	0x0418, r18	; 0x800418 <shift>
    2906:	30 93 19 04 	sts	0x0419, r19	; 0x800419 <shift+0x1>
    290a:	40 93 1a 04 	sts	0x041A, r20	; 0x80041a <shift+0x2>
    290e:	50 93 1b 04 	sts	0x041B, r21	; 0x80041b <shift+0x3>
    2912:	60 93 1c 04 	sts	0x041C, r22	; 0x80041c <shift+0x4>
    2916:	70 93 1d 04 	sts	0x041D, r23	; 0x80041d <shift+0x5>
	//uart = UART1enable(103,8,1,NONE);//UART 103 para 9600, 68 para 14400
	ZNPID pid = ZNPIDenable();
    291a:	ce 01       	movw	r24, r28
    291c:	80 53       	subi	r24, 0x30	; 48
    291e:	9f 4f       	sbci	r25, 0xFF	; 255
    2920:	f1 dd       	rcall	.-1054   	; 0x2504 <ZNPIDenable>
	/******/
	char Menu='1'; // Main menu selector
	uint16_t adcvalue; // analog reading
	char str[6]="0"; // analog vector
    2922:	ce 01       	movw	r24, r28
    2924:	82 5f       	subi	r24, 0xF2	; 242
    2926:	9e 4f       	sbci	r25, 0xFE	; 254
    2928:	fc 01       	movw	r30, r24
    292a:	20 e3       	ldi	r18, 0x30	; 48
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	21 93       	st	Z+, r18
    2930:	31 93       	st	Z+, r19
    2932:	24 e0       	ldi	r18, 0x04	; 4
    2934:	df 01       	movw	r26, r30
    2936:	1d 92       	st	X+, r1
    2938:	2a 95       	dec	r18
    293a:	e9 f7       	brne	.-6      	; 0x2936 <main+0x1d0>
	int16_t mvalue=90; // manual position reading
	int16_t m_value; // manual positioning
	char mstr[6]="90"; // manual position vector
    293c:	29 e3       	ldi	r18, 0x39	; 57
    293e:	30 e3       	ldi	r19, 0x30	; 48
    2940:	cc 5e       	subi	r28, 0xEC	; 236
    2942:	de 4f       	sbci	r29, 0xFE	; 254
    2944:	39 83       	std	Y+1, r19	; 0x01
    2946:	28 83       	st	Y, r18
    2948:	c4 51       	subi	r28, 0x14	; 20
    294a:	d1 40       	sbci	r29, 0x01	; 1
    294c:	ca 5e       	subi	r28, 0xEA	; 234
    294e:	de 4f       	sbci	r29, 0xFE	; 254
    2950:	19 82       	std	Y+1, r1	; 0x01
    2952:	18 82       	st	Y, r1
    2954:	c6 51       	subi	r28, 0x16	; 22
    2956:	d1 40       	sbci	r29, 0x01	; 1
    2958:	c8 5e       	subi	r28, 0xE8	; 232
    295a:	de 4f       	sbci	r29, 0xFE	; 254
    295c:	19 82       	std	Y+1, r1	; 0x01
    295e:	18 82       	st	Y, r1
    2960:	c8 51       	subi	r28, 0x18	; 24
    2962:	d1 40       	sbci	r29, 0x01	; 1
	char tstr[6]; // time vector
	char cal='0'; // Sub Menu for setting up date and time
	uint16_t set;
	//char uartmessage[64];
	ptr=str;
    2964:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <ptr+0x1>
    2968:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <ptr>
	uint16_t positionhour=12;
	/***Parameters timers***/
	timer0.compare(249);
    296c:	ca 54       	subi	r28, 0x4A	; 74
    296e:	df 4f       	sbci	r29, 0xFF	; 255
    2970:	e8 81       	ld	r30, Y
    2972:	f9 81       	ldd	r31, Y+1	; 0x01
    2974:	c6 5b       	subi	r28, 0xB6	; 182
    2976:	d0 40       	sbci	r29, 0x00	; 0
    2978:	89 ef       	ldi	r24, 0xF9	; 249
    297a:	09 95       	icall
	timer0.start(64);
    297c:	c4 54       	subi	r28, 0x44	; 68
    297e:	df 4f       	sbci	r29, 0xFF	; 255
    2980:	e8 81       	ld	r30, Y
    2982:	f9 81       	ldd	r31, Y+1	; 0x01
    2984:	cc 5b       	subi	r28, 0xBC	; 188
    2986:	d0 40       	sbci	r29, 0x00	; 0
    2988:	80 e4       	ldi	r24, 0x40	; 64
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	09 95       	icall
	timer1.compoutmodeB(2);
    298e:	ce 53       	subi	r28, 0x3E	; 62
    2990:	df 4f       	sbci	r29, 0xFF	; 255
    2992:	e8 81       	ld	r30, Y
    2994:	f9 81       	ldd	r31, Y+1	; 0x01
    2996:	c2 5c       	subi	r28, 0xC2	; 194
    2998:	d0 40       	sbci	r29, 0x00	; 0
    299a:	82 e0       	ldi	r24, 0x02	; 2
    299c:	09 95       	icall
	timer1.compareA(20000);
    299e:	ca 53       	subi	r28, 0x3A	; 58
    29a0:	df 4f       	sbci	r29, 0xFF	; 255
    29a2:	e8 81       	ld	r30, Y
    29a4:	f9 81       	ldd	r31, Y+1	; 0x01
    29a6:	c6 5c       	subi	r28, 0xC6	; 198
    29a8:	d0 40       	sbci	r29, 0x00	; 0
    29aa:	80 e2       	ldi	r24, 0x20	; 32
    29ac:	9e e4       	ldi	r25, 0x4E	; 78
    29ae:	09 95       	icall
	timer1.start(8);
    29b0:	c4 53       	subi	r28, 0x34	; 52
    29b2:	df 4f       	sbci	r29, 0xFF	; 255
    29b4:	e8 81       	ld	r30, Y
    29b6:	f9 81       	ldd	r31, Y+1	; 0x01
    29b8:	cc 5c       	subi	r28, 0xCC	; 204
    29ba:	d0 40       	sbci	r29, 0x00	; 0
    29bc:	88 e0       	ldi	r24, 0x08	; 8
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	09 95       	icall
	rtc.SetClkOut(1, 2); // oscillate pin at 1 sec
    29c2:	e0 91 73 04 	lds	r30, 0x0473	; 0x800473 <rtc+0x8>
    29c6:	f0 91 74 04 	lds	r31, 0x0474	; 0x800474 <rtc+0x9>
    29ca:	62 e0       	ldi	r22, 0x02	; 2
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	09 95       	icall
	pid.set_SP(&pid, 10);
    29d0:	c6 5f       	subi	r28, 0xF6	; 246
    29d2:	de 4f       	sbci	r29, 0xFE	; 254
    29d4:	e8 81       	ld	r30, Y
    29d6:	f9 81       	ldd	r31, Y+1	; 0x01
    29d8:	ca 50       	subi	r28, 0x0A	; 10
    29da:	d1 40       	sbci	r29, 0x01	; 1
    29dc:	40 e0       	ldi	r20, 0x00	; 0
    29de:	50 e0       	ldi	r21, 0x00	; 0
    29e0:	60 e2       	ldi	r22, 0x20	; 32
    29e2:	71 e4       	ldi	r23, 0x41	; 65
    29e4:	ce 01       	movw	r24, r28
    29e6:	80 53       	subi	r24, 0x30	; 48
    29e8:	9f 4f       	sbci	r25, 0xFF	; 255
    29ea:	09 95       	icall
	pid.set_kd(&pid, 6);
    29ec:	c8 5f       	subi	r28, 0xF8	; 248
    29ee:	de 4f       	sbci	r29, 0xFE	; 254
    29f0:	e8 81       	ld	r30, Y
    29f2:	f9 81       	ldd	r31, Y+1	; 0x01
    29f4:	c8 50       	subi	r28, 0x08	; 8
    29f6:	d1 40       	sbci	r29, 0x01	; 1
    29f8:	40 e0       	ldi	r20, 0x00	; 0
    29fa:	50 e0       	ldi	r21, 0x00	; 0
    29fc:	60 ec       	ldi	r22, 0xC0	; 192
    29fe:	70 e4       	ldi	r23, 0x40	; 64
    2a00:	ce 01       	movw	r24, r28
    2a02:	80 53       	subi	r24, 0x30	; 48
    2a04:	9f 4f       	sbci	r25, 0xFF	; 255
    2a06:	09 95       	icall
	pid.set_ki(&pid, 12);
    2a08:	ca 5f       	subi	r28, 0xFA	; 250
    2a0a:	de 4f       	sbci	r29, 0xFE	; 254
    2a0c:	e8 81       	ld	r30, Y
    2a0e:	f9 81       	ldd	r31, Y+1	; 0x01
    2a10:	c6 50       	subi	r28, 0x06	; 6
    2a12:	d1 40       	sbci	r29, 0x01	; 1
    2a14:	40 e0       	ldi	r20, 0x00	; 0
    2a16:	50 e0       	ldi	r21, 0x00	; 0
    2a18:	60 e4       	ldi	r22, 0x40	; 64
    2a1a:	71 e4       	ldi	r23, 0x41	; 65
    2a1c:	ce 01       	movw	r24, r28
    2a1e:	80 53       	subi	r24, 0x30	; 48
    2a20:	9f 4f       	sbci	r25, 0xFF	; 255
    2a22:	09 95       	icall
    2a24:	0f 90       	pop	r0
    2a26:	0f 90       	pop	r0
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	0f 90       	pop	r0
	char tstr[6]; // time vector
	char cal='0'; // Sub Menu for setting up date and time
	uint16_t set;
	//char uartmessage[64];
	ptr=str;
	uint16_t positionhour=12;
    2a30:	ec e0       	ldi	r30, 0x0C	; 12
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	c0 59       	subi	r28, 0x90	; 144
    2a36:	de 4f       	sbci	r29, 0xFE	; 254
    2a38:	f9 83       	std	Y+1, r31	; 0x01
    2a3a:	e8 83       	st	Y, r30
    2a3c:	c0 57       	subi	r28, 0x70	; 112
    2a3e:	d1 40       	sbci	r29, 0x01	; 1
	char str[6]="0"; // analog vector
	int16_t mvalue=90; // manual position reading
	int16_t m_value; // manual positioning
	char mstr[6]="90"; // manual position vector
	char tstr[6]; // time vector
	char cal='0'; // Sub Menu for setting up date and time
    2a40:	f0 e3       	ldi	r31, 0x30	; 48
    2a42:	cc 58       	subi	r28, 0x8C	; 140
    2a44:	de 4f       	sbci	r29, 0xFE	; 254
    2a46:	f8 83       	st	Y, r31
    2a48:	c4 57       	subi	r28, 0x74	; 116
    2a4a:	d1 40       	sbci	r29, 0x01	; 1
	rtc = PCF8563RTCenable(16); // RTC with I2C
	shift = HC595enable(&DDRG,&PORTG,2,0,1);
	//uart = UART1enable(103,8,1,NONE);//UART 103 para 9600, 68 para 14400
	ZNPID pid = ZNPIDenable();
	/******/
	char Menu='1'; // Main menu selector
    2a4c:	0f 2e       	mov	r0, r31
    2a4e:	f1 e3       	ldi	r31, 0x31	; 49
    2a50:	7f 2e       	mov	r7, r31
    2a52:	f0 2d       	mov	r31, r0
    2a54:	06 c0       	rjmp	.+12     	; 0x2a62 <main+0x2fc>
								}
								keypad.flush();
							}
						break;
						default:
							cal='0';
    2a56:	20 e3       	ldi	r18, 0x30	; 48
    2a58:	cc 58       	subi	r28, 0x8C	; 140
    2a5a:	de 4f       	sbci	r29, 0xFE	; 254
    2a5c:	28 83       	st	Y, r18
    2a5e:	c4 57       	subi	r28, 0x74	; 116
    2a60:	d1 40       	sbci	r29, 0x01	; 1
	pid.set_ki(&pid, 12);
	/**********/
	//TODO:: Please write your application code
	while(TRUE){
		/***PREAMBLE***/
		lcd0.reboot();
    2a62:	ca 55       	subi	r28, 0x5A	; 90
    2a64:	df 4f       	sbci	r29, 0xFF	; 255
    2a66:	e8 80       	ld	r14, Y
    2a68:	f9 80       	ldd	r15, Y+1	; 0x01
    2a6a:	c6 5a       	subi	r28, 0xA6	; 166
    2a6c:	d0 40       	sbci	r29, 0x00	; 0
    2a6e:	f7 01       	movw	r30, r14
    2a70:	09 95       	icall
		keypad.read();
    2a72:	c6 55       	subi	r28, 0x56	; 86
    2a74:	df 4f       	sbci	r29, 0xFF	; 255
    2a76:	08 81       	ld	r16, Y
    2a78:	19 81       	ldd	r17, Y+1	; 0x01
    2a7a:	ca 5a       	subi	r28, 0xAA	; 170
    2a7c:	d0 40       	sbci	r29, 0x00	; 0
    2a7e:	f8 01       	movw	r30, r16
    2a80:	09 95       	icall
		//uartreceive=uart.read();
		/***Reading input***/
		lcd0.gotoxy(3,13);
    2a82:	6d e0       	ldi	r22, 0x0D	; 13
    2a84:	70 e0       	ldi	r23, 0x00	; 0
    2a86:	83 e0       	ldi	r24, 0x03	; 3
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	f1 01       	movw	r30, r2
    2a8c:	09 95       	icall
		lcd0.putch(':');
    2a8e:	8a e3       	ldi	r24, 0x3A	; 58
    2a90:	c6 59       	subi	r28, 0x96	; 150
    2a92:	de 4f       	sbci	r29, 0xFE	; 254
    2a94:	e8 81       	ld	r30, Y
    2a96:	f9 81       	ldd	r31, Y+1	; 0x01
    2a98:	ca 56       	subi	r28, 0x6A	; 106
    2a9a:	d1 40       	sbci	r29, 0x01	; 1
    2a9c:	09 95       	icall
		lcd0.string_size(keypad.get().printstring,6);
    2a9e:	f4 01       	movw	r30, r8
    2aa0:	09 95       	icall
    2aa2:	c2 57       	subi	r28, 0x72	; 114
    2aa4:	df 4f       	sbci	r29, 0xFF	; 255
    2aa6:	38 83       	st	Y, r19
    2aa8:	ce 58       	subi	r28, 0x8E	; 142
    2aaa:	d0 40       	sbci	r29, 0x00	; 0
    2aac:	c1 57       	subi	r28, 0x71	; 113
    2aae:	df 4f       	sbci	r29, 0xFF	; 255
    2ab0:	48 83       	st	Y, r20
    2ab2:	cf 58       	subi	r28, 0x8F	; 143
    2ab4:	d0 40       	sbci	r29, 0x00	; 0
    2ab6:	66 e0       	ldi	r22, 0x06	; 6
    2ab8:	c2 57       	subi	r28, 0x72	; 114
    2aba:	df 4f       	sbci	r29, 0xFF	; 255
    2abc:	88 81       	ld	r24, Y
    2abe:	99 81       	ldd	r25, Y+1	; 0x01
    2ac0:	ce 58       	subi	r28, 0x8E	; 142
    2ac2:	d0 40       	sbci	r29, 0x00	; 0
    2ac4:	f2 01       	movw	r30, r4
    2ac6:	09 95       	icall
		/***ENTRY END***/
		switch(Menu){
    2ac8:	f2 e3       	ldi	r31, 0x32	; 50
    2aca:	7f 16       	cp	r7, r31
    2acc:	09 f4       	brne	.+2      	; 0x2ad0 <main+0x36a>
    2ace:	06 c2       	rjmp	.+1036   	; 0x2edc <main+0x776>
    2ad0:	23 e3       	ldi	r18, 0x33	; 51
    2ad2:	72 16       	cp	r7, r18
    2ad4:	09 f4       	brne	.+2      	; 0x2ad8 <main+0x372>
    2ad6:	fe c2       	rjmp	.+1532   	; 0x30d4 <main+0x96e>
    2ad8:	31 e3       	ldi	r19, 0x31	; 49
    2ada:	73 12       	cpse	r7, r19
    2adc:	b3 c6       	rjmp	.+3430   	; 0x3844 <main+0x10de>
			/***MENU 1***/
			case '1': // Main Program Menu
				if(!strcmp(keypad.get().string,"A")){Menu='2';keypad.flush();lcd0.clear();break;}
    2ade:	f4 01       	movw	r30, r8
    2ae0:	09 95       	icall
    2ae2:	c5 57       	subi	r28, 0x75	; 117
    2ae4:	df 4f       	sbci	r29, 0xFF	; 255
    2ae6:	58 83       	st	Y, r21
    2ae8:	cb 58       	subi	r28, 0x8B	; 139
    2aea:	d0 40       	sbci	r29, 0x00	; 0
    2aec:	c4 57       	subi	r28, 0x74	; 116
    2aee:	df 4f       	sbci	r29, 0xFF	; 255
    2af0:	68 83       	st	Y, r22
    2af2:	cc 58       	subi	r28, 0x8C	; 140
    2af4:	d0 40       	sbci	r29, 0x00	; 0
    2af6:	62 e1       	ldi	r22, 0x12	; 18
    2af8:	71 e0       	ldi	r23, 0x01	; 1
    2afa:	c5 57       	subi	r28, 0x75	; 117
    2afc:	df 4f       	sbci	r29, 0xFF	; 255
    2afe:	88 81       	ld	r24, Y
    2b00:	99 81       	ldd	r25, Y+1	; 0x01
    2b02:	cb 58       	subi	r28, 0x8B	; 139
    2b04:	d0 40       	sbci	r29, 0x00	; 0
    2b06:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <strcmp>
    2b0a:	89 2b       	or	r24, r25
    2b0c:	99 f4       	brne	.+38     	; 0x2b34 <main+0x3ce>
    2b0e:	c4 59       	subi	r28, 0x94	; 148
    2b10:	de 4f       	sbci	r29, 0xFE	; 254
    2b12:	e8 81       	ld	r30, Y
    2b14:	f9 81       	ldd	r31, Y+1	; 0x01
    2b16:	cc 56       	subi	r28, 0x6C	; 108
    2b18:	d1 40       	sbci	r29, 0x01	; 1
    2b1a:	09 95       	icall
    2b1c:	c2 59       	subi	r28, 0x92	; 146
    2b1e:	de 4f       	sbci	r29, 0xFE	; 254
    2b20:	e8 81       	ld	r30, Y
    2b22:	f9 81       	ldd	r31, Y+1	; 0x01
    2b24:	ce 56       	subi	r28, 0x6E	; 110
    2b26:	d1 40       	sbci	r29, 0x01	; 1
    2b28:	09 95       	icall
    2b2a:	0f 2e       	mov	r0, r31
    2b2c:	f2 e3       	ldi	r31, 0x32	; 50
    2b2e:	7f 2e       	mov	r7, r31
    2b30:	f0 2d       	mov	r31, r0
    2b32:	97 cf       	rjmp	.-210    	; 0x2a62 <main+0x2fc>
				if(!strcmp(keypad.get().string,"B")){Menu='3';keypad.flush();lcd0.clear();break;}
    2b34:	f4 01       	movw	r30, r8
    2b36:	09 95       	icall
    2b38:	ca 57       	subi	r28, 0x7A	; 122
    2b3a:	df 4f       	sbci	r29, 0xFF	; 255
    2b3c:	58 83       	st	Y, r21
    2b3e:	c6 58       	subi	r28, 0x86	; 134
    2b40:	d0 40       	sbci	r29, 0x00	; 0
    2b42:	c9 57       	subi	r28, 0x79	; 121
    2b44:	df 4f       	sbci	r29, 0xFF	; 255
    2b46:	68 83       	st	Y, r22
    2b48:	c7 58       	subi	r28, 0x87	; 135
    2b4a:	d0 40       	sbci	r29, 0x00	; 0
    2b4c:	64 e1       	ldi	r22, 0x14	; 20
    2b4e:	71 e0       	ldi	r23, 0x01	; 1
    2b50:	ca 57       	subi	r28, 0x7A	; 122
    2b52:	df 4f       	sbci	r29, 0xFF	; 255
    2b54:	88 81       	ld	r24, Y
    2b56:	99 81       	ldd	r25, Y+1	; 0x01
    2b58:	c6 58       	subi	r28, 0x86	; 134
    2b5a:	d0 40       	sbci	r29, 0x00	; 0
    2b5c:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <strcmp>
    2b60:	89 2b       	or	r24, r25
    2b62:	99 f4       	brne	.+38     	; 0x2b8a <main+0x424>
    2b64:	c4 59       	subi	r28, 0x94	; 148
    2b66:	de 4f       	sbci	r29, 0xFE	; 254
    2b68:	e8 81       	ld	r30, Y
    2b6a:	f9 81       	ldd	r31, Y+1	; 0x01
    2b6c:	cc 56       	subi	r28, 0x6C	; 108
    2b6e:	d1 40       	sbci	r29, 0x01	; 1
    2b70:	09 95       	icall
    2b72:	c2 59       	subi	r28, 0x92	; 146
    2b74:	de 4f       	sbci	r29, 0xFE	; 254
    2b76:	e8 81       	ld	r30, Y
    2b78:	f9 81       	ldd	r31, Y+1	; 0x01
    2b7a:	ce 56       	subi	r28, 0x6E	; 110
    2b7c:	d1 40       	sbci	r29, 0x01	; 1
    2b7e:	09 95       	icall
    2b80:	0f 2e       	mov	r0, r31
    2b82:	f3 e3       	ldi	r31, 0x33	; 51
    2b84:	7f 2e       	mov	r7, r31
    2b86:	f0 2d       	mov	r31, r0
    2b88:	6c cf       	rjmp	.-296    	; 0x2a62 <main+0x2fc>
					/***RTC***/
					tm=rtc.GetTime();
    2b8a:	0b e6       	ldi	r16, 0x6B	; 107
    2b8c:	14 e0       	ldi	r17, 0x04	; 4
    2b8e:	d8 01       	movw	r26, r16
    2b90:	54 96       	adiw	r26, 0x14	; 20
    2b92:	ed 91       	ld	r30, X+
    2b94:	fc 91       	ld	r31, X
    2b96:	55 97       	sbiw	r26, 0x15	; 21
    2b98:	09 95       	icall
    2b9a:	60 93 68 04 	sts	0x0468, r22	; 0x800468 <tm>
    2b9e:	70 93 69 04 	sts	0x0469, r23	; 0x800469 <tm+0x1>
    2ba2:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <tm+0x2>
					dt=rtc.GetDate();
    2ba6:	d8 01       	movw	r26, r16
    2ba8:	56 96       	adiw	r26, 0x16	; 22
    2baa:	ed 91       	ld	r30, X+
    2bac:	fc 91       	ld	r31, X
    2bae:	57 97       	sbiw	r26, 0x17	; 23
    2bb0:	09 95       	icall
    2bb2:	60 93 87 04 	sts	0x0487, r22	; 0x800487 <dt>
    2bb6:	70 93 88 04 	sts	0x0488, r23	; 0x800488 <dt+0x1>
    2bba:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <dt+0x2>
    2bbe:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <dt+0x3>
					/***Reading analog***/
					adcvalue=analog.read(0);
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	c7 58       	subi	r28, 0x87	; 135
    2bc8:	de 4f       	sbci	r29, 0xFE	; 254
    2bca:	e8 81       	ld	r30, Y
    2bcc:	f9 81       	ldd	r31, Y+1	; 0x01
    2bce:	c9 57       	subi	r28, 0x79	; 121
    2bd0:	d1 40       	sbci	r29, 0x01	; 1
    2bd2:	09 95       	icall
    2bd4:	3c 01       	movw	r6, r24
					/***Set Position***/
					if(positionhour>5 && positionhour<21)
    2bd6:	c0 59       	subi	r28, 0x90	; 144
    2bd8:	de 4f       	sbci	r29, 0xFE	; 254
    2bda:	88 81       	ld	r24, Y
    2bdc:	99 81       	ldd	r25, Y+1	; 0x01
    2bde:	c0 57       	subi	r28, 0x70	; 112
    2be0:	d1 40       	sbci	r29, 0x01	; 1
    2be2:	06 97       	sbiw	r24, 0x06	; 6
    2be4:	0f 97       	sbiw	r24, 0x0f	; 15
    2be6:	08 f0       	brcs	.+2      	; 0x2bea <main+0x484>
    2be8:	62 c0       	rjmp	.+196    	; 0x2cae <main+0x548>
						timer1.compareB(function.trimmer(positionhour,2,23,Min,Max)+function.trimmer(adcvalue,0,1023,SMIN,SMAX));
    2bea:	c0 59       	subi	r28, 0x90	; 144
    2bec:	de 4f       	sbci	r29, 0xFE	; 254
    2bee:	28 81       	ld	r18, Y
    2bf0:	39 81       	ldd	r19, Y+1	; 0x01
    2bf2:	c0 57       	subi	r28, 0x70	; 112
    2bf4:	d1 40       	sbci	r29, 0x01	; 1
    2bf6:	b9 01       	movw	r22, r18
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	1f 92       	push	r1
    2bfe:	1f 92       	push	r1
    2c00:	29 e0       	ldi	r18, 0x09	; 9
    2c02:	2f 93       	push	r18
    2c04:	2e e2       	ldi	r18, 0x2E	; 46
    2c06:	2f 93       	push	r18
    2c08:	e0 91 5c 04 	lds	r30, 0x045C	; 0x80045c <function+0x3e>
    2c0c:	f0 91 5d 04 	lds	r31, 0x045D	; 0x80045d <function+0x3f>
    2c10:	0f 2e       	mov	r0, r31
    2c12:	f4 ef       	ldi	r31, 0xF4	; 244
    2c14:	af 2e       	mov	r10, r31
    2c16:	bb 24       	eor	r11, r11
    2c18:	b3 94       	inc	r11
    2c1a:	c1 2c       	mov	r12, r1
    2c1c:	d1 2c       	mov	r13, r1
    2c1e:	f0 2d       	mov	r31, r0
    2c20:	17 e1       	ldi	r17, 0x17	; 23
    2c22:	e1 2e       	mov	r14, r17
    2c24:	f1 2c       	mov	r15, r1
    2c26:	00 e0       	ldi	r16, 0x00	; 0
    2c28:	10 e0       	ldi	r17, 0x00	; 0
    2c2a:	22 e0       	ldi	r18, 0x02	; 2
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	40 e0       	ldi	r20, 0x00	; 0
    2c30:	50 e0       	ldi	r21, 0x00	; 0
    2c32:	09 95       	icall
    2c34:	c0 59       	subi	r28, 0x90	; 144
    2c36:	de 4f       	sbci	r29, 0xFE	; 254
    2c38:	68 83       	st	Y, r22
    2c3a:	79 83       	std	Y+1, r23	; 0x01
    2c3c:	8a 83       	std	Y+2, r24	; 0x02
    2c3e:	9b 83       	std	Y+3, r25	; 0x03
    2c40:	c0 57       	subi	r28, 0x70	; 112
    2c42:	d1 40       	sbci	r29, 0x01	; 1
    2c44:	c3 01       	movw	r24, r6
    2c46:	a0 e0       	ldi	r26, 0x00	; 0
    2c48:	b0 e0       	ldi	r27, 0x00	; 0
    2c4a:	1f 92       	push	r1
    2c4c:	1f 92       	push	r1
    2c4e:	1f 92       	push	r1
    2c50:	28 ec       	ldi	r18, 0xC8	; 200
    2c52:	2f 93       	push	r18
    2c54:	e0 91 5c 04 	lds	r30, 0x045C	; 0x80045c <function+0x3e>
    2c58:	f0 91 5d 04 	lds	r31, 0x045D	; 0x80045d <function+0x3f>
    2c5c:	0f 2e       	mov	r0, r31
    2c5e:	f8 e3       	ldi	r31, 0x38	; 56
    2c60:	af 2e       	mov	r10, r31
    2c62:	bb 24       	eor	r11, r11
    2c64:	ba 94       	dec	r11
    2c66:	cb 2c       	mov	r12, r11
    2c68:	db 2c       	mov	r13, r11
    2c6a:	f0 2d       	mov	r31, r0
    2c6c:	ee 24       	eor	r14, r14
    2c6e:	ea 94       	dec	r14
    2c70:	13 e0       	ldi	r17, 0x03	; 3
    2c72:	f1 2e       	mov	r15, r17
    2c74:	00 e0       	ldi	r16, 0x00	; 0
    2c76:	10 e0       	ldi	r17, 0x00	; 0
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	a9 01       	movw	r20, r18
    2c7e:	bc 01       	movw	r22, r24
    2c80:	cd 01       	movw	r24, r26
    2c82:	09 95       	icall
    2c84:	c0 59       	subi	r28, 0x90	; 144
    2c86:	de 4f       	sbci	r29, 0xFE	; 254
    2c88:	88 81       	ld	r24, Y
    2c8a:	99 81       	ldd	r25, Y+1	; 0x01
    2c8c:	c0 57       	subi	r28, 0x70	; 112
    2c8e:	d1 40       	sbci	r29, 0x01	; 1
    2c90:	86 0f       	add	r24, r22
    2c92:	97 1f       	adc	r25, r23
    2c94:	cb 58       	subi	r28, 0x8B	; 139
    2c96:	de 4f       	sbci	r29, 0xFE	; 254
    2c98:	e8 81       	ld	r30, Y
    2c9a:	f9 81       	ldd	r31, Y+1	; 0x01
    2c9c:	c5 57       	subi	r28, 0x75	; 117
    2c9e:	d1 40       	sbci	r29, 0x01	; 1
    2ca0:	09 95       	icall
    2ca2:	0f b6       	in	r0, 0x3f	; 63
    2ca4:	f8 94       	cli
    2ca6:	de bf       	out	0x3e, r29	; 62
    2ca8:	0f be       	out	0x3f, r0	; 63
    2caa:	cd bf       	out	0x3d, r28	; 61
    2cac:	2c c0       	rjmp	.+88     	; 0x2d06 <main+0x5a0>
					else
						timer1.compareB(function.trimmer(6,2,23,Min,Max));
    2cae:	1f 92       	push	r1
    2cb0:	1f 92       	push	r1
    2cb2:	89 e0       	ldi	r24, 0x09	; 9
    2cb4:	8f 93       	push	r24
    2cb6:	8e e2       	ldi	r24, 0x2E	; 46
    2cb8:	8f 93       	push	r24
    2cba:	e0 91 5c 04 	lds	r30, 0x045C	; 0x80045c <function+0x3e>
    2cbe:	f0 91 5d 04 	lds	r31, 0x045D	; 0x80045d <function+0x3f>
    2cc2:	0f 2e       	mov	r0, r31
    2cc4:	f4 ef       	ldi	r31, 0xF4	; 244
    2cc6:	af 2e       	mov	r10, r31
    2cc8:	bb 24       	eor	r11, r11
    2cca:	b3 94       	inc	r11
    2ccc:	c1 2c       	mov	r12, r1
    2cce:	d1 2c       	mov	r13, r1
    2cd0:	f0 2d       	mov	r31, r0
    2cd2:	17 e1       	ldi	r17, 0x17	; 23
    2cd4:	e1 2e       	mov	r14, r17
    2cd6:	f1 2c       	mov	r15, r1
    2cd8:	00 e0       	ldi	r16, 0x00	; 0
    2cda:	10 e0       	ldi	r17, 0x00	; 0
    2cdc:	22 e0       	ldi	r18, 0x02	; 2
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	40 e0       	ldi	r20, 0x00	; 0
    2ce2:	50 e0       	ldi	r21, 0x00	; 0
    2ce4:	66 e0       	ldi	r22, 0x06	; 6
    2ce6:	70 e0       	ldi	r23, 0x00	; 0
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	09 95       	icall
    2cee:	cb 01       	movw	r24, r22
    2cf0:	cb 58       	subi	r28, 0x8B	; 139
    2cf2:	de 4f       	sbci	r29, 0xFE	; 254
    2cf4:	e8 81       	ld	r30, Y
    2cf6:	f9 81       	ldd	r31, Y+1	; 0x01
    2cf8:	c5 57       	subi	r28, 0x75	; 117
    2cfa:	d1 40       	sbci	r29, 0x01	; 1
    2cfc:	09 95       	icall
    2cfe:	0f 90       	pop	r0
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	0f 90       	pop	r0
					lcd0.gotoxy(0,0);
    2d06:	60 e0       	ldi	r22, 0x00	; 0
    2d08:	70 e0       	ldi	r23, 0x00	; 0
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	f1 01       	movw	r30, r2
    2d10:	09 95       	icall
					lcd0.string_size("Sense: ",7);
    2d12:	67 e0       	ldi	r22, 0x07	; 7
    2d14:	86 e1       	ldi	r24, 0x16	; 22
    2d16:	91 e0       	ldi	r25, 0x01	; 1
    2d18:	f2 01       	movw	r30, r4
    2d1a:	09 95       	icall
					//lcd0.hspace(1);
					strcpy(str,function.i16toa(adcvalue));
    2d1c:	0e e1       	ldi	r16, 0x1E	; 30
    2d1e:	14 e0       	ldi	r17, 0x04	; 4
    2d20:	d8 01       	movw	r26, r16
    2d22:	90 96       	adiw	r26, 0x20	; 32
    2d24:	ed 91       	ld	r30, X+
    2d26:	fc 91       	ld	r31, X
    2d28:	91 97       	sbiw	r26, 0x21	; 33
    2d2a:	c3 01       	movw	r24, r6
    2d2c:	09 95       	icall
    2d2e:	bc 01       	movw	r22, r24
    2d30:	ce 01       	movw	r24, r28
    2d32:	82 5f       	subi	r24, 0xF2	; 242
    2d34:	9e 4f       	sbci	r25, 0xFE	; 254
    2d36:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <strcpy>
					lcd0.string_size(str,4);
    2d3a:	64 e0       	ldi	r22, 0x04	; 4
    2d3c:	ce 01       	movw	r24, r28
    2d3e:	82 5f       	subi	r24, 0xF2	; 242
    2d40:	9e 4f       	sbci	r25, 0xFE	; 254
    2d42:	f2 01       	movw	r30, r4
    2d44:	09 95       	icall
					lcd0.gotoxy(0,12);
    2d46:	6c e0       	ldi	r22, 0x0C	; 12
    2d48:	70 e0       	ldi	r23, 0x00	; 0
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	f1 01       	movw	r30, r2
    2d50:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(dt.days)),2);
    2d52:	d8 01       	movw	r26, r16
    2d54:	92 96       	adiw	r26, 0x22	; 34
    2d56:	cd 90       	ld	r12, X+
    2d58:	dc 90       	ld	r13, X
    2d5a:	93 97       	sbiw	r26, 0x23	; 35
    2d5c:	0f 2e       	mov	r0, r31
    2d5e:	f7 e8       	ldi	r31, 0x87	; 135
    2d60:	ef 2e       	mov	r14, r31
    2d62:	f4 e0       	ldi	r31, 0x04	; 4
    2d64:	ff 2e       	mov	r15, r31
    2d66:	f0 2d       	mov	r31, r0
    2d68:	0f 2e       	mov	r0, r31
    2d6a:	fb e6       	ldi	r31, 0x6B	; 107
    2d6c:	6f 2e       	mov	r6, r31
    2d6e:	f4 e0       	ldi	r31, 0x04	; 4
    2d70:	7f 2e       	mov	r7, r31
    2d72:	f0 2d       	mov	r31, r0
    2d74:	d3 01       	movw	r26, r6
    2d76:	58 96       	adiw	r26, 0x18	; 24
    2d78:	ed 91       	ld	r30, X+
    2d7a:	fc 91       	ld	r31, X
    2d7c:	59 97       	sbiw	r26, 0x19	; 25
    2d7e:	d7 01       	movw	r26, r14
    2d80:	13 96       	adiw	r26, 0x03	; 3
    2d82:	8c 91       	ld	r24, X
    2d84:	09 95       	icall
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	f6 01       	movw	r30, r12
    2d8a:	09 95       	icall
    2d8c:	62 e0       	ldi	r22, 0x02	; 2
    2d8e:	f2 01       	movw	r30, r4
    2d90:	09 95       	icall
					lcd0.putch(':');
    2d92:	8a e3       	ldi	r24, 0x3A	; 58
    2d94:	c6 59       	subi	r28, 0x96	; 150
    2d96:	de 4f       	sbci	r29, 0xFE	; 254
    2d98:	e8 81       	ld	r30, Y
    2d9a:	f9 81       	ldd	r31, Y+1	; 0x01
    2d9c:	ca 56       	subi	r28, 0x6A	; 106
    2d9e:	d1 40       	sbci	r29, 0x01	; 1
    2da0:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(dt.century_months)),2);
    2da2:	d8 01       	movw	r26, r16
    2da4:	92 96       	adiw	r26, 0x22	; 34
    2da6:	cd 90       	ld	r12, X+
    2da8:	dc 90       	ld	r13, X
    2daa:	93 97       	sbiw	r26, 0x23	; 35
    2dac:	d3 01       	movw	r26, r6
    2dae:	58 96       	adiw	r26, 0x18	; 24
    2db0:	ed 91       	ld	r30, X+
    2db2:	fc 91       	ld	r31, X
    2db4:	59 97       	sbiw	r26, 0x19	; 25
    2db6:	d7 01       	movw	r26, r14
    2db8:	11 96       	adiw	r26, 0x01	; 1
    2dba:	8c 91       	ld	r24, X
    2dbc:	09 95       	icall
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	f6 01       	movw	r30, r12
    2dc2:	09 95       	icall
    2dc4:	62 e0       	ldi	r22, 0x02	; 2
    2dc6:	f2 01       	movw	r30, r4
    2dc8:	09 95       	icall
					lcd0.putch(':');
    2dca:	8a e3       	ldi	r24, 0x3A	; 58
    2dcc:	c6 59       	subi	r28, 0x96	; 150
    2dce:	de 4f       	sbci	r29, 0xFE	; 254
    2dd0:	e8 81       	ld	r30, Y
    2dd2:	f9 81       	ldd	r31, Y+1	; 0x01
    2dd4:	ca 56       	subi	r28, 0x6A	; 106
    2dd6:	d1 40       	sbci	r29, 0x01	; 1
    2dd8:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(dt.years)),2);
    2dda:	d8 01       	movw	r26, r16
    2ddc:	92 96       	adiw	r26, 0x22	; 34
    2dde:	cd 90       	ld	r12, X+
    2de0:	dc 90       	ld	r13, X
    2de2:	93 97       	sbiw	r26, 0x23	; 35
    2de4:	d3 01       	movw	r26, r6
    2de6:	58 96       	adiw	r26, 0x18	; 24
    2de8:	ed 91       	ld	r30, X+
    2dea:	fc 91       	ld	r31, X
    2dec:	59 97       	sbiw	r26, 0x19	; 25
    2dee:	d7 01       	movw	r26, r14
    2df0:	8c 91       	ld	r24, X
    2df2:	09 95       	icall
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	f6 01       	movw	r30, r12
    2df8:	09 95       	icall
    2dfa:	62 e0       	ldi	r22, 0x02	; 2
    2dfc:	f2 01       	movw	r30, r4
    2dfe:	09 95       	icall
					lcd0.gotoxy(1,12);
    2e00:	6c e0       	ldi	r22, 0x0C	; 12
    2e02:	70 e0       	ldi	r23, 0x00	; 0
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	f1 01       	movw	r30, r2
    2e0a:	09 95       	icall
					/***set hour for positioning***/
					positionhour=rtc.bcd2dec(tm.hours);
    2e0c:	0f 2e       	mov	r0, r31
    2e0e:	f8 e6       	ldi	r31, 0x68	; 104
    2e10:	ef 2e       	mov	r14, r31
    2e12:	f4 e0       	ldi	r31, 0x04	; 4
    2e14:	ff 2e       	mov	r15, r31
    2e16:	f0 2d       	mov	r31, r0
    2e18:	d3 01       	movw	r26, r6
    2e1a:	58 96       	adiw	r26, 0x18	; 24
    2e1c:	ed 91       	ld	r30, X+
    2e1e:	fc 91       	ld	r31, X
    2e20:	59 97       	sbiw	r26, 0x19	; 25
    2e22:	d7 01       	movw	r26, r14
    2e24:	8c 91       	ld	r24, X
    2e26:	09 95       	icall
    2e28:	e8 2f       	mov	r30, r24
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	c0 59       	subi	r28, 0x90	; 144
    2e2e:	de 4f       	sbci	r29, 0xFE	; 254
    2e30:	f9 83       	std	Y+1, r31	; 0x01
    2e32:	e8 83       	st	Y, r30
    2e34:	c0 57       	subi	r28, 0x70	; 112
    2e36:	d1 40       	sbci	r29, 0x01	; 1
					lcd0.string_size(function.ui16toa(positionhour),2);
    2e38:	d8 01       	movw	r26, r16
    2e3a:	92 96       	adiw	r26, 0x22	; 34
    2e3c:	ed 91       	ld	r30, X+
    2e3e:	fc 91       	ld	r31, X
    2e40:	93 97       	sbiw	r26, 0x23	; 35
    2e42:	c0 59       	subi	r28, 0x90	; 144
    2e44:	de 4f       	sbci	r29, 0xFE	; 254
    2e46:	88 81       	ld	r24, Y
    2e48:	99 81       	ldd	r25, Y+1	; 0x01
    2e4a:	c0 57       	subi	r28, 0x70	; 112
    2e4c:	d1 40       	sbci	r29, 0x01	; 1
    2e4e:	09 95       	icall
    2e50:	62 e0       	ldi	r22, 0x02	; 2
    2e52:	f2 01       	movw	r30, r4
    2e54:	09 95       	icall
					lcd0.putch(':');
    2e56:	8a e3       	ldi	r24, 0x3A	; 58
    2e58:	c6 59       	subi	r28, 0x96	; 150
    2e5a:	de 4f       	sbci	r29, 0xFE	; 254
    2e5c:	e8 81       	ld	r30, Y
    2e5e:	f9 81       	ldd	r31, Y+1	; 0x01
    2e60:	ca 56       	subi	r28, 0x6A	; 106
    2e62:	d1 40       	sbci	r29, 0x01	; 1
    2e64:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(tm.minutes)),2);
    2e66:	d8 01       	movw	r26, r16
    2e68:	92 96       	adiw	r26, 0x22	; 34
    2e6a:	cd 90       	ld	r12, X+
    2e6c:	dc 90       	ld	r13, X
    2e6e:	93 97       	sbiw	r26, 0x23	; 35
    2e70:	d3 01       	movw	r26, r6
    2e72:	58 96       	adiw	r26, 0x18	; 24
    2e74:	ed 91       	ld	r30, X+
    2e76:	fc 91       	ld	r31, X
    2e78:	59 97       	sbiw	r26, 0x19	; 25
    2e7a:	d7 01       	movw	r26, r14
    2e7c:	11 96       	adiw	r26, 0x01	; 1
    2e7e:	8c 91       	ld	r24, X
    2e80:	09 95       	icall
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	f6 01       	movw	r30, r12
    2e86:	09 95       	icall
    2e88:	62 e0       	ldi	r22, 0x02	; 2
    2e8a:	f2 01       	movw	r30, r4
    2e8c:	09 95       	icall
					lcd0.putch(':');
    2e8e:	8a e3       	ldi	r24, 0x3A	; 58
    2e90:	c6 59       	subi	r28, 0x96	; 150
    2e92:	de 4f       	sbci	r29, 0xFE	; 254
    2e94:	e8 81       	ld	r30, Y
    2e96:	f9 81       	ldd	r31, Y+1	; 0x01
    2e98:	ca 56       	subi	r28, 0x6A	; 106
    2e9a:	d1 40       	sbci	r29, 0x01	; 1
    2e9c:	09 95       	icall
					lcd0.string_size(function.ui16toa(rtc.bcd2dec(tm.VL_seconds)),2);
    2e9e:	d8 01       	movw	r26, r16
    2ea0:	92 96       	adiw	r26, 0x22	; 34
    2ea2:	0d 91       	ld	r16, X+
    2ea4:	1c 91       	ld	r17, X
    2ea6:	93 97       	sbiw	r26, 0x23	; 35
    2ea8:	d3 01       	movw	r26, r6
    2eaa:	58 96       	adiw	r26, 0x18	; 24
    2eac:	ed 91       	ld	r30, X+
    2eae:	fc 91       	ld	r31, X
    2eb0:	59 97       	sbiw	r26, 0x19	; 25
    2eb2:	d7 01       	movw	r26, r14
    2eb4:	12 96       	adiw	r26, 0x02	; 2
    2eb6:	8c 91       	ld	r24, X
    2eb8:	09 95       	icall
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	f8 01       	movw	r30, r16
    2ebe:	09 95       	icall
    2ec0:	62 e0       	ldi	r22, 0x02	; 2
    2ec2:	f2 01       	movw	r30, r4
    2ec4:	09 95       	icall
					/***Message from uart***/
					lcd0.gotoxy(2,0);
    2ec6:	60 e0       	ldi	r22, 0x00	; 0
    2ec8:	70 e0       	ldi	r23, 0x00	; 0
    2eca:	82 e0       	ldi	r24, 0x02	; 2
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	f1 01       	movw	r30, r2
    2ed0:	09 95       	icall
						//uart.putc(':');
						//uart.puts(function.ui16toa(rtc.bcd2dec(tm.VL_seconds)));
						//uart.puts("\r\n");
						//uart.Rxflush();
					//}
				break;
    2ed2:	0f 2e       	mov	r0, r31
    2ed4:	f1 e3       	ldi	r31, 0x31	; 49
    2ed6:	7f 2e       	mov	r7, r31
    2ed8:	f0 2d       	mov	r31, r0
    2eda:	c3 cd       	rjmp	.-1146   	; 0x2a62 <main+0x2fc>
			/***MENU 2***/
			case '2': // Manual position override 
				if(!strcmp(keypad.get().string,"A")){Menu='3';keypad.flush();lcd0.clear();break;}
    2edc:	f4 01       	movw	r30, r8
    2ede:	09 95       	icall
    2ee0:	cf 57       	subi	r28, 0x7F	; 127
    2ee2:	df 4f       	sbci	r29, 0xFF	; 255
    2ee4:	58 83       	st	Y, r21
    2ee6:	c1 58       	subi	r28, 0x81	; 129
    2ee8:	d0 40       	sbci	r29, 0x00	; 0
    2eea:	ce 57       	subi	r28, 0x7E	; 126
    2eec:	df 4f       	sbci	r29, 0xFF	; 255
    2eee:	68 83       	st	Y, r22
    2ef0:	c2 58       	subi	r28, 0x82	; 130
    2ef2:	d0 40       	sbci	r29, 0x00	; 0
    2ef4:	62 e1       	ldi	r22, 0x12	; 18
    2ef6:	71 e0       	ldi	r23, 0x01	; 1
    2ef8:	cf 57       	subi	r28, 0x7F	; 127
    2efa:	df 4f       	sbci	r29, 0xFF	; 255
    2efc:	88 81       	ld	r24, Y
    2efe:	99 81       	ldd	r25, Y+1	; 0x01
    2f00:	c1 58       	subi	r28, 0x81	; 129
    2f02:	d0 40       	sbci	r29, 0x00	; 0
    2f04:	3d d7       	rcall	.+3706   	; 0x3d80 <strcmp>
    2f06:	89 2b       	or	r24, r25
    2f08:	99 f4       	brne	.+38     	; 0x2f30 <main+0x7ca>
    2f0a:	c4 59       	subi	r28, 0x94	; 148
    2f0c:	de 4f       	sbci	r29, 0xFE	; 254
    2f0e:	e8 81       	ld	r30, Y
    2f10:	f9 81       	ldd	r31, Y+1	; 0x01
    2f12:	cc 56       	subi	r28, 0x6C	; 108
    2f14:	d1 40       	sbci	r29, 0x01	; 1
    2f16:	09 95       	icall
    2f18:	c2 59       	subi	r28, 0x92	; 146
    2f1a:	de 4f       	sbci	r29, 0xFE	; 254
    2f1c:	e8 81       	ld	r30, Y
    2f1e:	f9 81       	ldd	r31, Y+1	; 0x01
    2f20:	ce 56       	subi	r28, 0x6E	; 110
    2f22:	d1 40       	sbci	r29, 0x01	; 1
    2f24:	09 95       	icall
    2f26:	0f 2e       	mov	r0, r31
    2f28:	f3 e3       	ldi	r31, 0x33	; 51
    2f2a:	7f 2e       	mov	r7, r31
    2f2c:	f0 2d       	mov	r31, r0
    2f2e:	99 cd       	rjmp	.-1230   	; 0x2a62 <main+0x2fc>
				if(!strcmp(keypad.get().string,"B")){Menu='1';keypad.flush();lcd0.clear();break;}
    2f30:	f4 01       	movw	r30, r8
    2f32:	09 95       	icall
    2f34:	ed 96       	adiw	r28, 0x3d	; 61
    2f36:	5f af       	std	Y+63, r21	; 0x3f
    2f38:	ed 97       	sbiw	r28, 0x3d	; 61
    2f3a:	ee 96       	adiw	r28, 0x3e	; 62
    2f3c:	6f af       	std	Y+63, r22	; 0x3f
    2f3e:	ee 97       	sbiw	r28, 0x3e	; 62
    2f40:	64 e1       	ldi	r22, 0x14	; 20
    2f42:	71 e0       	ldi	r23, 0x01	; 1
    2f44:	ee 96       	adiw	r28, 0x3e	; 62
    2f46:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f48:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f4a:	ee 97       	sbiw	r28, 0x3e	; 62
    2f4c:	19 d7       	rcall	.+3634   	; 0x3d80 <strcmp>
    2f4e:	89 2b       	or	r24, r25
    2f50:	99 f4       	brne	.+38     	; 0x2f78 <main+0x812>
    2f52:	c4 59       	subi	r28, 0x94	; 148
    2f54:	de 4f       	sbci	r29, 0xFE	; 254
    2f56:	e8 81       	ld	r30, Y
    2f58:	f9 81       	ldd	r31, Y+1	; 0x01
    2f5a:	cc 56       	subi	r28, 0x6C	; 108
    2f5c:	d1 40       	sbci	r29, 0x01	; 1
    2f5e:	09 95       	icall
    2f60:	c2 59       	subi	r28, 0x92	; 146
    2f62:	de 4f       	sbci	r29, 0xFE	; 254
    2f64:	e8 81       	ld	r30, Y
    2f66:	f9 81       	ldd	r31, Y+1	; 0x01
    2f68:	ce 56       	subi	r28, 0x6E	; 110
    2f6a:	d1 40       	sbci	r29, 0x01	; 1
    2f6c:	09 95       	icall
    2f6e:	0f 2e       	mov	r0, r31
    2f70:	f1 e3       	ldi	r31, 0x31	; 49
    2f72:	7f 2e       	mov	r7, r31
    2f74:	f0 2d       	mov	r31, r0
    2f76:	75 cd       	rjmp	.-1302   	; 0x2a62 <main+0x2fc>
				if(!strcmp(keypad.get().string,"C")){Menu='1';keypad.flush();lcd0.clear();break;}
    2f78:	f4 01       	movw	r30, r8
    2f7a:	09 95       	icall
    2f7c:	e8 96       	adiw	r28, 0x38	; 56
    2f7e:	5f af       	std	Y+63, r21	; 0x3f
    2f80:	e8 97       	sbiw	r28, 0x38	; 56
    2f82:	e9 96       	adiw	r28, 0x39	; 57
    2f84:	6f af       	std	Y+63, r22	; 0x3f
    2f86:	e9 97       	sbiw	r28, 0x39	; 57
    2f88:	6e e1       	ldi	r22, 0x1E	; 30
    2f8a:	71 e0       	ldi	r23, 0x01	; 1
    2f8c:	e9 96       	adiw	r28, 0x39	; 57
    2f8e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f90:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f92:	e9 97       	sbiw	r28, 0x39	; 57
    2f94:	f5 d6       	rcall	.+3562   	; 0x3d80 <strcmp>
    2f96:	89 2b       	or	r24, r25
    2f98:	99 f4       	brne	.+38     	; 0x2fc0 <main+0x85a>
    2f9a:	c4 59       	subi	r28, 0x94	; 148
    2f9c:	de 4f       	sbci	r29, 0xFE	; 254
    2f9e:	e8 81       	ld	r30, Y
    2fa0:	f9 81       	ldd	r31, Y+1	; 0x01
    2fa2:	cc 56       	subi	r28, 0x6C	; 108
    2fa4:	d1 40       	sbci	r29, 0x01	; 1
    2fa6:	09 95       	icall
    2fa8:	c2 59       	subi	r28, 0x92	; 146
    2faa:	de 4f       	sbci	r29, 0xFE	; 254
    2fac:	e8 81       	ld	r30, Y
    2fae:	f9 81       	ldd	r31, Y+1	; 0x01
    2fb0:	ce 56       	subi	r28, 0x6E	; 110
    2fb2:	d1 40       	sbci	r29, 0x01	; 1
    2fb4:	09 95       	icall
    2fb6:	0f 2e       	mov	r0, r31
    2fb8:	f1 e3       	ldi	r31, 0x31	; 49
    2fba:	7f 2e       	mov	r7, r31
    2fbc:	f0 2d       	mov	r31, r0
    2fbe:	51 cd       	rjmp	.-1374   	; 0x2a62 <main+0x2fc>
					lcd0.gotoxy(0,0);
    2fc0:	60 e0       	ldi	r22, 0x00	; 0
    2fc2:	70 e0       	ldi	r23, 0x00	; 0
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	f1 01       	movw	r30, r2
    2fca:	09 95       	icall
					lcd0.string_size("Manual: ",8);
    2fcc:	68 e0       	ldi	r22, 0x08	; 8
    2fce:	80 e2       	ldi	r24, 0x20	; 32
    2fd0:	91 e0       	ldi	r25, 0x01	; 1
    2fd2:	f2 01       	movw	r30, r4
    2fd4:	09 95       	icall
					lcd0.string_size(mstr,3);
    2fd6:	63 e0       	ldi	r22, 0x03	; 3
    2fd8:	ce 01       	movw	r24, r28
    2fda:	8c 5e       	subi	r24, 0xEC	; 236
    2fdc:	9e 4f       	sbci	r25, 0xFE	; 254
    2fde:	f2 01       	movw	r30, r4
    2fe0:	09 95       	icall
					lcd0.gotoxy(1,0);
    2fe2:	60 e0       	ldi	r22, 0x00	; 0
    2fe4:	70 e0       	ldi	r23, 0x00	; 0
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	f1 01       	movw	r30, r2
    2fec:	09 95       	icall
					lcd0.string_size("Enter Angle",11);
    2fee:	6b e0       	ldi	r22, 0x0B	; 11
    2ff0:	89 e2       	ldi	r24, 0x29	; 41
    2ff2:	91 e0       	ldi	r25, 0x01	; 1
    2ff4:	f2 01       	movw	r30, r4
    2ff6:	09 95       	icall
					if(keypad.get().character==KEYPADENTERKEY){
    2ff8:	f4 01       	movw	r30, r8
    2ffa:	09 95       	icall
    2ffc:	24 34       	cpi	r18, 0x44	; 68
    2ffe:	09 f0       	breq	.+2      	; 0x3002 <main+0x89c>
    3000:	5d c0       	rjmp	.+186    	; 0x30bc <main+0x956>
						strncpy(mstr,keypad.get().string,6);
    3002:	f4 01       	movw	r30, r8
    3004:	09 95       	icall
    3006:	ae 96       	adiw	r28, 0x2e	; 46
    3008:	5f af       	std	Y+63, r21	; 0x3f
    300a:	ae 97       	sbiw	r28, 0x2e	; 46
    300c:	af 96       	adiw	r28, 0x2f	; 47
    300e:	6f af       	std	Y+63, r22	; 0x3f
    3010:	af 97       	sbiw	r28, 0x2f	; 47
    3012:	af 96       	adiw	r28, 0x2f	; 47
    3014:	6e ad       	ldd	r22, Y+62	; 0x3e
    3016:	7f ad       	ldd	r23, Y+63	; 0x3f
    3018:	af 97       	sbiw	r28, 0x2f	; 47
    301a:	46 e0       	ldi	r20, 0x06	; 6
    301c:	50 e0       	ldi	r21, 0x00	; 0
    301e:	ce 01       	movw	r24, r28
    3020:	8c 5e       	subi	r24, 0xEC	; 236
    3022:	9e 4f       	sbci	r25, 0xFE	; 254
    3024:	bd d6       	rcall	.+3450   	; 0x3da0 <strncpy>
						mvalue=function.strToInt(mstr);
    3026:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <function+0x2c>
    302a:	f0 91 4b 04 	lds	r31, 0x044B	; 0x80044b <function+0x2d>
    302e:	ce 01       	movw	r24, r28
    3030:	8c 5e       	subi	r24, 0xEC	; 236
    3032:	9e 4f       	sbci	r25, 0xFE	; 254
    3034:	09 95       	icall
						if(mvalue >=0 && mvalue <181){
    3036:	85 3b       	cpi	r24, 0xB5	; 181
    3038:	91 05       	cpc	r25, r1
    303a:	a0 f5       	brcc	.+104    	; 0x30a4 <main+0x93e>
							m_value=mvalue;
							timer1.compareB(function.trimmer(m_value,0,180,Min,Max));
    303c:	bc 01       	movw	r22, r24
    303e:	99 0f       	add	r25, r25
    3040:	88 0b       	sbc	r24, r24
    3042:	99 0b       	sbc	r25, r25
    3044:	1f 92       	push	r1
    3046:	1f 92       	push	r1
    3048:	29 e0       	ldi	r18, 0x09	; 9
    304a:	2f 93       	push	r18
    304c:	2e e2       	ldi	r18, 0x2E	; 46
    304e:	2f 93       	push	r18
    3050:	e0 91 5c 04 	lds	r30, 0x045C	; 0x80045c <function+0x3e>
    3054:	f0 91 5d 04 	lds	r31, 0x045D	; 0x80045d <function+0x3f>
    3058:	0f 2e       	mov	r0, r31
    305a:	f4 ef       	ldi	r31, 0xF4	; 244
    305c:	af 2e       	mov	r10, r31
    305e:	bb 24       	eor	r11, r11
    3060:	b3 94       	inc	r11
    3062:	c1 2c       	mov	r12, r1
    3064:	d1 2c       	mov	r13, r1
    3066:	f0 2d       	mov	r31, r0
    3068:	14 eb       	ldi	r17, 0xB4	; 180
    306a:	e1 2e       	mov	r14, r17
    306c:	f1 2c       	mov	r15, r1
    306e:	00 e0       	ldi	r16, 0x00	; 0
    3070:	10 e0       	ldi	r17, 0x00	; 0
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	a9 01       	movw	r20, r18
    3078:	09 95       	icall
    307a:	cb 01       	movw	r24, r22
    307c:	cb 58       	subi	r28, 0x8B	; 139
    307e:	de 4f       	sbci	r29, 0xFE	; 254
    3080:	e8 81       	ld	r30, Y
    3082:	f9 81       	ldd	r31, Y+1	; 0x01
    3084:	c5 57       	subi	r28, 0x75	; 117
    3086:	d1 40       	sbci	r29, 0x01	; 1
    3088:	09 95       	icall
							lcd0.hspace(5);
    308a:	c0 56       	subi	r28, 0x60	; 96
    308c:	df 4f       	sbci	r29, 0xFF	; 255
    308e:	e8 81       	ld	r30, Y
    3090:	f9 81       	ldd	r31, Y+1	; 0x01
    3092:	c0 5a       	subi	r28, 0xA0	; 160
    3094:	d0 40       	sbci	r29, 0x00	; 0
    3096:	85 e0       	ldi	r24, 0x05	; 5
    3098:	09 95       	icall
    309a:	0f 90       	pop	r0
    309c:	0f 90       	pop	r0
    309e:	0f 90       	pop	r0
    30a0:	0f 90       	pop	r0
    30a2:	05 c0       	rjmp	.+10     	; 0x30ae <main+0x948>
						}else{
							lcd0.string_size("  err",5);
    30a4:	65 e0       	ldi	r22, 0x05	; 5
    30a6:	85 e3       	ldi	r24, 0x35	; 53
    30a8:	91 e0       	ldi	r25, 0x01	; 1
    30aa:	f2 01       	movw	r30, r4
    30ac:	09 95       	icall
						}
						keypad.flush();
    30ae:	c4 59       	subi	r28, 0x94	; 148
    30b0:	de 4f       	sbci	r29, 0xFE	; 254
    30b2:	e8 81       	ld	r30, Y
    30b4:	f9 81       	ldd	r31, Y+1	; 0x01
    30b6:	cc 56       	subi	r28, 0x6C	; 108
    30b8:	d1 40       	sbci	r29, 0x01	; 1
    30ba:	09 95       	icall
					}
					//else
					//	timer1.compareB(function.trimmer(m_value,0,180,Min,Max));
					lcd0.gotoxy(3,0);
    30bc:	60 e0       	ldi	r22, 0x00	; 0
    30be:	70 e0       	ldi	r23, 0x00	; 0
    30c0:	83 e0       	ldi	r24, 0x03	; 3
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	f1 01       	movw	r30, r2
    30c6:	09 95       	icall
					lcd0.string_size("C - exit",8);
    30c8:	68 e0       	ldi	r22, 0x08	; 8
    30ca:	8b e3       	ldi	r24, 0x3B	; 59
    30cc:	91 e0       	ldi	r25, 0x01	; 1
    30ce:	f2 01       	movw	r30, r4
    30d0:	09 95       	icall
				break;
    30d2:	c7 cc       	rjmp	.-1650   	; 0x2a62 <main+0x2fc>
			/***MENU 3***/
			case '3': //Set Time and Date
				if(!strcmp(keypad.get().string,"A")){Menu='1';keypad.flush();lcd0.clear();break;}
    30d4:	f4 01       	movw	r30, r8
    30d6:	09 95       	icall
    30d8:	a9 96       	adiw	r28, 0x29	; 41
    30da:	5f af       	std	Y+63, r21	; 0x3f
    30dc:	a9 97       	sbiw	r28, 0x29	; 41
    30de:	aa 96       	adiw	r28, 0x2a	; 42
    30e0:	6f af       	std	Y+63, r22	; 0x3f
    30e2:	aa 97       	sbiw	r28, 0x2a	; 42
    30e4:	62 e1       	ldi	r22, 0x12	; 18
    30e6:	71 e0       	ldi	r23, 0x01	; 1
    30e8:	aa 96       	adiw	r28, 0x2a	; 42
    30ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    30ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    30ee:	aa 97       	sbiw	r28, 0x2a	; 42
    30f0:	47 d6       	rcall	.+3214   	; 0x3d80 <strcmp>
    30f2:	89 2b       	or	r24, r25
    30f4:	99 f4       	brne	.+38     	; 0x311c <main+0x9b6>
    30f6:	c4 59       	subi	r28, 0x94	; 148
    30f8:	de 4f       	sbci	r29, 0xFE	; 254
    30fa:	e8 81       	ld	r30, Y
    30fc:	f9 81       	ldd	r31, Y+1	; 0x01
    30fe:	cc 56       	subi	r28, 0x6C	; 108
    3100:	d1 40       	sbci	r29, 0x01	; 1
    3102:	09 95       	icall
    3104:	c2 59       	subi	r28, 0x92	; 146
    3106:	de 4f       	sbci	r29, 0xFE	; 254
    3108:	e8 81       	ld	r30, Y
    310a:	f9 81       	ldd	r31, Y+1	; 0x01
    310c:	ce 56       	subi	r28, 0x6E	; 110
    310e:	d1 40       	sbci	r29, 0x01	; 1
    3110:	09 95       	icall
    3112:	0f 2e       	mov	r0, r31
    3114:	f1 e3       	ldi	r31, 0x31	; 49
    3116:	7f 2e       	mov	r7, r31
    3118:	f0 2d       	mov	r31, r0
    311a:	a3 cc       	rjmp	.-1722   	; 0x2a62 <main+0x2fc>
				if(!strcmp(keypad.get().string,"B")){Menu='2';keypad.flush();lcd0.clear();break;}
    311c:	f4 01       	movw	r30, r8
    311e:	09 95       	icall
    3120:	a4 96       	adiw	r28, 0x24	; 36
    3122:	5f af       	std	Y+63, r21	; 0x3f
    3124:	a4 97       	sbiw	r28, 0x24	; 36
    3126:	a5 96       	adiw	r28, 0x25	; 37
    3128:	6f af       	std	Y+63, r22	; 0x3f
    312a:	a5 97       	sbiw	r28, 0x25	; 37
    312c:	64 e1       	ldi	r22, 0x14	; 20
    312e:	71 e0       	ldi	r23, 0x01	; 1
    3130:	a5 96       	adiw	r28, 0x25	; 37
    3132:	8e ad       	ldd	r24, Y+62	; 0x3e
    3134:	9f ad       	ldd	r25, Y+63	; 0x3f
    3136:	a5 97       	sbiw	r28, 0x25	; 37
    3138:	23 d6       	rcall	.+3142   	; 0x3d80 <strcmp>
    313a:	89 2b       	or	r24, r25
    313c:	99 f4       	brne	.+38     	; 0x3164 <main+0x9fe>
    313e:	c4 59       	subi	r28, 0x94	; 148
    3140:	de 4f       	sbci	r29, 0xFE	; 254
    3142:	e8 81       	ld	r30, Y
    3144:	f9 81       	ldd	r31, Y+1	; 0x01
    3146:	cc 56       	subi	r28, 0x6C	; 108
    3148:	d1 40       	sbci	r29, 0x01	; 1
    314a:	09 95       	icall
    314c:	c2 59       	subi	r28, 0x92	; 146
    314e:	de 4f       	sbci	r29, 0xFE	; 254
    3150:	e8 81       	ld	r30, Y
    3152:	f9 81       	ldd	r31, Y+1	; 0x01
    3154:	ce 56       	subi	r28, 0x6E	; 110
    3156:	d1 40       	sbci	r29, 0x01	; 1
    3158:	09 95       	icall
    315a:	0f 2e       	mov	r0, r31
    315c:	f2 e3       	ldi	r31, 0x32	; 50
    315e:	7f 2e       	mov	r7, r31
    3160:	f0 2d       	mov	r31, r0
    3162:	7f cc       	rjmp	.-1794   	; 0x2a62 <main+0x2fc>
				if(!strcmp(keypad.get().string,"C")){Menu='1';cal='0';keypad.flush();lcd0.clear();break;}
    3164:	f4 01       	movw	r30, r8
    3166:	09 95       	icall
    3168:	6f 96       	adiw	r28, 0x1f	; 31
    316a:	5f af       	std	Y+63, r21	; 0x3f
    316c:	6f 97       	sbiw	r28, 0x1f	; 31
    316e:	a0 96       	adiw	r28, 0x20	; 32
    3170:	6f af       	std	Y+63, r22	; 0x3f
    3172:	a0 97       	sbiw	r28, 0x20	; 32
    3174:	6e e1       	ldi	r22, 0x1E	; 30
    3176:	71 e0       	ldi	r23, 0x01	; 1
    3178:	a0 96       	adiw	r28, 0x20	; 32
    317a:	8e ad       	ldd	r24, Y+62	; 0x3e
    317c:	9f ad       	ldd	r25, Y+63	; 0x3f
    317e:	a0 97       	sbiw	r28, 0x20	; 32
    3180:	ff d5       	rcall	.+3070   	; 0x3d80 <strcmp>
    3182:	89 2b       	or	r24, r25
    3184:	c9 f4       	brne	.+50     	; 0x31b8 <main+0xa52>
    3186:	c4 59       	subi	r28, 0x94	; 148
    3188:	de 4f       	sbci	r29, 0xFE	; 254
    318a:	e8 81       	ld	r30, Y
    318c:	f9 81       	ldd	r31, Y+1	; 0x01
    318e:	cc 56       	subi	r28, 0x6C	; 108
    3190:	d1 40       	sbci	r29, 0x01	; 1
    3192:	09 95       	icall
    3194:	c2 59       	subi	r28, 0x92	; 146
    3196:	de 4f       	sbci	r29, 0xFE	; 254
    3198:	e8 81       	ld	r30, Y
    319a:	f9 81       	ldd	r31, Y+1	; 0x01
    319c:	ce 56       	subi	r28, 0x6E	; 110
    319e:	d1 40       	sbci	r29, 0x01	; 1
    31a0:	09 95       	icall
    31a2:	f0 e3       	ldi	r31, 0x30	; 48
    31a4:	cc 58       	subi	r28, 0x8C	; 140
    31a6:	de 4f       	sbci	r29, 0xFE	; 254
    31a8:	f8 83       	st	Y, r31
    31aa:	c4 57       	subi	r28, 0x74	; 116
    31ac:	d1 40       	sbci	r29, 0x01	; 1
    31ae:	0f 2e       	mov	r0, r31
    31b0:	f1 e3       	ldi	r31, 0x31	; 49
    31b2:	7f 2e       	mov	r7, r31
    31b4:	f0 2d       	mov	r31, r0
    31b6:	55 cc       	rjmp	.-1878   	; 0x2a62 <main+0x2fc>
					/*** Menu to set RTC Time and Date ***/
					lcd0.gotoxy(0,0);
    31b8:	60 e0       	ldi	r22, 0x00	; 0
    31ba:	70 e0       	ldi	r23, 0x00	; 0
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	f1 01       	movw	r30, r2
    31c2:	09 95       	icall
					lcd0.string_size("Date and Time Setup",19);
    31c4:	63 e1       	ldi	r22, 0x13	; 19
    31c6:	84 e4       	ldi	r24, 0x44	; 68
    31c8:	91 e0       	ldi	r25, 0x01	; 1
    31ca:	f2 01       	movw	r30, r4
    31cc:	09 95       	icall
					/***Calibrate Menu***/
					switch(cal){
    31ce:	cc 58       	subi	r28, 0x8C	; 140
    31d0:	de 4f       	sbci	r29, 0xFE	; 254
    31d2:	f8 81       	ld	r31, Y
    31d4:	c4 57       	subi	r28, 0x74	; 116
    31d6:	d1 40       	sbci	r29, 0x01	; 1
    31d8:	8f 2f       	mov	r24, r31
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	fc 01       	movw	r30, r24
    31de:	f0 97       	sbiw	r30, 0x30	; 48
    31e0:	e7 30       	cpi	r30, 0x07	; 7
    31e2:	f1 05       	cpc	r31, r1
    31e4:	08 f0       	brcs	.+2      	; 0x31e8 <main+0xa82>
    31e6:	37 cc       	rjmp	.-1938   	; 0x2a56 <main+0x2f0>
    31e8:	ef 59       	subi	r30, 0x9F	; 159
    31ea:	ff 4f       	sbci	r31, 0xFF	; 255
    31ec:	a7 c5       	rjmp	.+2894   	; 0x3d3c <__tablejump2__>
						case '0': // choice
							lcd0.gotoxy(1,0);
    31ee:	60 e0       	ldi	r22, 0x00	; 0
    31f0:	70 e0       	ldi	r23, 0x00	; 0
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	f1 01       	movw	r30, r2
    31f8:	09 95       	icall
							lcd0.string_size("1-Year",7);
    31fa:	67 e0       	ldi	r22, 0x07	; 7
    31fc:	88 e5       	ldi	r24, 0x58	; 88
    31fe:	91 e0       	ldi	r25, 0x01	; 1
    3200:	f2 01       	movw	r30, r4
    3202:	09 95       	icall
							lcd0.string_size("2-Month",8);
    3204:	68 e0       	ldi	r22, 0x08	; 8
    3206:	8f e5       	ldi	r24, 0x5F	; 95
    3208:	91 e0       	ldi	r25, 0x01	; 1
    320a:	f2 01       	movw	r30, r4
    320c:	09 95       	icall
							lcd0.string_size("3-Day",5);
    320e:	65 e0       	ldi	r22, 0x05	; 5
    3210:	87 e6       	ldi	r24, 0x67	; 103
    3212:	91 e0       	ldi	r25, 0x01	; 1
    3214:	f2 01       	movw	r30, r4
    3216:	09 95       	icall
							lcd0.gotoxy(2,0);
    3218:	60 e0       	ldi	r22, 0x00	; 0
    321a:	70 e0       	ldi	r23, 0x00	; 0
    321c:	82 e0       	ldi	r24, 0x02	; 2
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	f1 01       	movw	r30, r2
    3222:	09 95       	icall
							lcd0.string_size("4-Hour",7);
    3224:	67 e0       	ldi	r22, 0x07	; 7
    3226:	8d e6       	ldi	r24, 0x6D	; 109
    3228:	91 e0       	ldi	r25, 0x01	; 1
    322a:	f2 01       	movw	r30, r4
    322c:	09 95       	icall
							lcd0.string_size("5-Min",8);
    322e:	68 e0       	ldi	r22, 0x08	; 8
    3230:	84 e7       	ldi	r24, 0x74	; 116
    3232:	91 e0       	ldi	r25, 0x01	; 1
    3234:	f2 01       	movw	r30, r4
    3236:	09 95       	icall
							lcd0.string_size("6-Sec",5);
    3238:	65 e0       	ldi	r22, 0x05	; 5
    323a:	8a e7       	ldi	r24, 0x7A	; 122
    323c:	91 e0       	ldi	r25, 0x01	; 1
    323e:	f2 01       	movw	r30, r4
    3240:	09 95       	icall
							lcd0.gotoxy(3,0);
    3242:	60 e0       	ldi	r22, 0x00	; 0
    3244:	70 e0       	ldi	r23, 0x00	; 0
    3246:	83 e0       	ldi	r24, 0x03	; 3
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	f1 01       	movw	r30, r2
    324c:	09 95       	icall
							lcd0.string_size("C - exit",8);
    324e:	68 e0       	ldi	r22, 0x08	; 8
    3250:	8b e3       	ldi	r24, 0x3B	; 59
    3252:	91 e0       	ldi	r25, 0x01	; 1
    3254:	f2 01       	movw	r30, r4
    3256:	09 95       	icall
							if(!strcmp(keypad.get().string,"1")){cal='1';keypad.flush();lcd0.clear();}
    3258:	f4 01       	movw	r30, r8
    325a:	09 95       	icall
    325c:	6a 96       	adiw	r28, 0x1a	; 26
    325e:	5f af       	std	Y+63, r21	; 0x3f
    3260:	6a 97       	sbiw	r28, 0x1a	; 26
    3262:	6b 96       	adiw	r28, 0x1b	; 27
    3264:	6f af       	std	Y+63, r22	; 0x3f
    3266:	6b 97       	sbiw	r28, 0x1b	; 27
    3268:	60 e8       	ldi	r22, 0x80	; 128
    326a:	71 e0       	ldi	r23, 0x01	; 1
    326c:	6b 96       	adiw	r28, 0x1b	; 27
    326e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3270:	9f ad       	ldd	r25, Y+63	; 0x3f
    3272:	6b 97       	sbiw	r28, 0x1b	; 27
    3274:	85 d5       	rcall	.+2826   	; 0x3d80 <strcmp>
    3276:	89 2b       	or	r24, r25
    3278:	a1 f4       	brne	.+40     	; 0x32a2 <main+0xb3c>
    327a:	c4 59       	subi	r28, 0x94	; 148
    327c:	de 4f       	sbci	r29, 0xFE	; 254
    327e:	e8 81       	ld	r30, Y
    3280:	f9 81       	ldd	r31, Y+1	; 0x01
    3282:	cc 56       	subi	r28, 0x6C	; 108
    3284:	d1 40       	sbci	r29, 0x01	; 1
    3286:	09 95       	icall
    3288:	c2 59       	subi	r28, 0x92	; 146
    328a:	de 4f       	sbci	r29, 0xFE	; 254
    328c:	e8 81       	ld	r30, Y
    328e:	f9 81       	ldd	r31, Y+1	; 0x01
    3290:	ce 56       	subi	r28, 0x6E	; 110
    3292:	d1 40       	sbci	r29, 0x01	; 1
    3294:	09 95       	icall
    3296:	f1 e3       	ldi	r31, 0x31	; 49
    3298:	cc 58       	subi	r28, 0x8C	; 140
    329a:	de 4f       	sbci	r29, 0xFE	; 254
    329c:	f8 83       	st	Y, r31
    329e:	c4 57       	subi	r28, 0x74	; 116
    32a0:	d1 40       	sbci	r29, 0x01	; 1
							if(!strcmp(keypad.get().string,"2")){cal='2';keypad.flush();lcd0.clear();}
    32a2:	f4 01       	movw	r30, r8
    32a4:	09 95       	icall
    32a6:	65 96       	adiw	r28, 0x15	; 21
    32a8:	5f af       	std	Y+63, r21	; 0x3f
    32aa:	65 97       	sbiw	r28, 0x15	; 21
    32ac:	66 96       	adiw	r28, 0x16	; 22
    32ae:	6f af       	std	Y+63, r22	; 0x3f
    32b0:	66 97       	sbiw	r28, 0x16	; 22
    32b2:	62 e8       	ldi	r22, 0x82	; 130
    32b4:	71 e0       	ldi	r23, 0x01	; 1
    32b6:	66 96       	adiw	r28, 0x16	; 22
    32b8:	8e ad       	ldd	r24, Y+62	; 0x3e
    32ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    32bc:	66 97       	sbiw	r28, 0x16	; 22
    32be:	60 d5       	rcall	.+2752   	; 0x3d80 <strcmp>
    32c0:	89 2b       	or	r24, r25
    32c2:	a1 f4       	brne	.+40     	; 0x32ec <main+0xb86>
    32c4:	c4 59       	subi	r28, 0x94	; 148
    32c6:	de 4f       	sbci	r29, 0xFE	; 254
    32c8:	e8 81       	ld	r30, Y
    32ca:	f9 81       	ldd	r31, Y+1	; 0x01
    32cc:	cc 56       	subi	r28, 0x6C	; 108
    32ce:	d1 40       	sbci	r29, 0x01	; 1
    32d0:	09 95       	icall
    32d2:	c2 59       	subi	r28, 0x92	; 146
    32d4:	de 4f       	sbci	r29, 0xFE	; 254
    32d6:	e8 81       	ld	r30, Y
    32d8:	f9 81       	ldd	r31, Y+1	; 0x01
    32da:	ce 56       	subi	r28, 0x6E	; 110
    32dc:	d1 40       	sbci	r29, 0x01	; 1
    32de:	09 95       	icall
    32e0:	f2 e3       	ldi	r31, 0x32	; 50
    32e2:	cc 58       	subi	r28, 0x8C	; 140
    32e4:	de 4f       	sbci	r29, 0xFE	; 254
    32e6:	f8 83       	st	Y, r31
    32e8:	c4 57       	subi	r28, 0x74	; 116
							if(!strcmp(keypad.get().string,"3")){cal='3';keypad.flush();lcd0.clear();}
    32ea:	d1 40       	sbci	r29, 0x01	; 1
    32ec:	f4 01       	movw	r30, r8
    32ee:	09 95       	icall
    32f0:	60 96       	adiw	r28, 0x10	; 16
    32f2:	5f af       	std	Y+63, r21	; 0x3f
    32f4:	60 97       	sbiw	r28, 0x10	; 16
    32f6:	61 96       	adiw	r28, 0x11	; 17
    32f8:	6f af       	std	Y+63, r22	; 0x3f
    32fa:	61 97       	sbiw	r28, 0x11	; 17
    32fc:	64 e8       	ldi	r22, 0x84	; 132
    32fe:	71 e0       	ldi	r23, 0x01	; 1
    3300:	61 96       	adiw	r28, 0x11	; 17
    3302:	8e ad       	ldd	r24, Y+62	; 0x3e
    3304:	9f ad       	ldd	r25, Y+63	; 0x3f
    3306:	61 97       	sbiw	r28, 0x11	; 17
    3308:	3b d5       	rcall	.+2678   	; 0x3d80 <strcmp>
    330a:	89 2b       	or	r24, r25
    330c:	a1 f4       	brne	.+40     	; 0x3336 <main+0xbd0>
    330e:	c4 59       	subi	r28, 0x94	; 148
    3310:	de 4f       	sbci	r29, 0xFE	; 254
    3312:	e8 81       	ld	r30, Y
    3314:	f9 81       	ldd	r31, Y+1	; 0x01
    3316:	cc 56       	subi	r28, 0x6C	; 108
    3318:	d1 40       	sbci	r29, 0x01	; 1
    331a:	09 95       	icall
    331c:	c2 59       	subi	r28, 0x92	; 146
    331e:	de 4f       	sbci	r29, 0xFE	; 254
    3320:	e8 81       	ld	r30, Y
    3322:	f9 81       	ldd	r31, Y+1	; 0x01
    3324:	ce 56       	subi	r28, 0x6E	; 110
    3326:	d1 40       	sbci	r29, 0x01	; 1
    3328:	09 95       	icall
    332a:	f3 e3       	ldi	r31, 0x33	; 51
    332c:	cc 58       	subi	r28, 0x8C	; 140
    332e:	de 4f       	sbci	r29, 0xFE	; 254
    3330:	f8 83       	st	Y, r31
    3332:	c4 57       	subi	r28, 0x74	; 116
							if(!strcmp(keypad.get().string,"4")){cal='4';keypad.flush();lcd0.clear();}
    3334:	d1 40       	sbci	r29, 0x01	; 1
    3336:	f4 01       	movw	r30, r8
    3338:	09 95       	icall
    333a:	2b 96       	adiw	r28, 0x0b	; 11
    333c:	5f af       	std	Y+63, r21	; 0x3f
    333e:	2b 97       	sbiw	r28, 0x0b	; 11
    3340:	2c 96       	adiw	r28, 0x0c	; 12
    3342:	6f af       	std	Y+63, r22	; 0x3f
    3344:	2c 97       	sbiw	r28, 0x0c	; 12
    3346:	66 e8       	ldi	r22, 0x86	; 134
    3348:	71 e0       	ldi	r23, 0x01	; 1
    334a:	2c 96       	adiw	r28, 0x0c	; 12
    334c:	8e ad       	ldd	r24, Y+62	; 0x3e
    334e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3350:	2c 97       	sbiw	r28, 0x0c	; 12
    3352:	16 d5       	rcall	.+2604   	; 0x3d80 <strcmp>
    3354:	89 2b       	or	r24, r25
    3356:	a1 f4       	brne	.+40     	; 0x3380 <main+0xc1a>
    3358:	c4 59       	subi	r28, 0x94	; 148
    335a:	de 4f       	sbci	r29, 0xFE	; 254
    335c:	e8 81       	ld	r30, Y
    335e:	f9 81       	ldd	r31, Y+1	; 0x01
    3360:	cc 56       	subi	r28, 0x6C	; 108
    3362:	d1 40       	sbci	r29, 0x01	; 1
    3364:	09 95       	icall
    3366:	c2 59       	subi	r28, 0x92	; 146
    3368:	de 4f       	sbci	r29, 0xFE	; 254
    336a:	e8 81       	ld	r30, Y
    336c:	f9 81       	ldd	r31, Y+1	; 0x01
    336e:	ce 56       	subi	r28, 0x6E	; 110
    3370:	d1 40       	sbci	r29, 0x01	; 1
    3372:	09 95       	icall
    3374:	f4 e3       	ldi	r31, 0x34	; 52
    3376:	cc 58       	subi	r28, 0x8C	; 140
    3378:	de 4f       	sbci	r29, 0xFE	; 254
    337a:	f8 83       	st	Y, r31
    337c:	c4 57       	subi	r28, 0x74	; 116
							if(!strcmp(keypad.get().string,"5")){cal='5';keypad.flush();lcd0.clear();}
    337e:	d1 40       	sbci	r29, 0x01	; 1
    3380:	f4 01       	movw	r30, r8
    3382:	09 95       	icall
    3384:	26 96       	adiw	r28, 0x06	; 6
    3386:	5f af       	std	Y+63, r21	; 0x3f
    3388:	26 97       	sbiw	r28, 0x06	; 6
    338a:	27 96       	adiw	r28, 0x07	; 7
    338c:	6f af       	std	Y+63, r22	; 0x3f
    338e:	27 97       	sbiw	r28, 0x07	; 7
    3390:	68 e8       	ldi	r22, 0x88	; 136
    3392:	71 e0       	ldi	r23, 0x01	; 1
    3394:	27 96       	adiw	r28, 0x07	; 7
    3396:	8e ad       	ldd	r24, Y+62	; 0x3e
    3398:	9f ad       	ldd	r25, Y+63	; 0x3f
    339a:	27 97       	sbiw	r28, 0x07	; 7
    339c:	f1 d4       	rcall	.+2530   	; 0x3d80 <strcmp>
    339e:	89 2b       	or	r24, r25
    33a0:	a1 f4       	brne	.+40     	; 0x33ca <main+0xc64>
    33a2:	c4 59       	subi	r28, 0x94	; 148
    33a4:	de 4f       	sbci	r29, 0xFE	; 254
    33a6:	e8 81       	ld	r30, Y
    33a8:	f9 81       	ldd	r31, Y+1	; 0x01
    33aa:	cc 56       	subi	r28, 0x6C	; 108
    33ac:	d1 40       	sbci	r29, 0x01	; 1
    33ae:	09 95       	icall
    33b0:	c2 59       	subi	r28, 0x92	; 146
    33b2:	de 4f       	sbci	r29, 0xFE	; 254
    33b4:	e8 81       	ld	r30, Y
    33b6:	f9 81       	ldd	r31, Y+1	; 0x01
    33b8:	ce 56       	subi	r28, 0x6E	; 110
    33ba:	d1 40       	sbci	r29, 0x01	; 1
    33bc:	09 95       	icall
    33be:	f5 e3       	ldi	r31, 0x35	; 53
    33c0:	cc 58       	subi	r28, 0x8C	; 140
    33c2:	de 4f       	sbci	r29, 0xFE	; 254
    33c4:	f8 83       	st	Y, r31
    33c6:	c4 57       	subi	r28, 0x74	; 116
							if(!strcmp(keypad.get().string,"6")){cal='6';keypad.flush();lcd0.clear();}
    33c8:	d1 40       	sbci	r29, 0x01	; 1
    33ca:	f4 01       	movw	r30, r8
    33cc:	09 95       	icall
    33ce:	21 96       	adiw	r28, 0x01	; 1
    33d0:	5f af       	std	Y+63, r21	; 0x3f
    33d2:	21 97       	sbiw	r28, 0x01	; 1
    33d4:	22 96       	adiw	r28, 0x02	; 2
    33d6:	6f af       	std	Y+63, r22	; 0x3f
    33d8:	22 97       	sbiw	r28, 0x02	; 2
    33da:	6a e8       	ldi	r22, 0x8A	; 138
    33dc:	71 e0       	ldi	r23, 0x01	; 1
    33de:	22 96       	adiw	r28, 0x02	; 2
    33e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    33e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    33e4:	22 97       	sbiw	r28, 0x02	; 2
    33e6:	cc d4       	rcall	.+2456   	; 0x3d80 <strcmp>
    33e8:	89 2b       	or	r24, r25
    33ea:	09 f0       	breq	.+2      	; 0x33ee <main+0xc88>
    33ec:	3a cb       	rjmp	.-2444   	; 0x2a62 <main+0x2fc>
    33ee:	c4 59       	subi	r28, 0x94	; 148
    33f0:	de 4f       	sbci	r29, 0xFE	; 254
    33f2:	e8 81       	ld	r30, Y
    33f4:	f9 81       	ldd	r31, Y+1	; 0x01
    33f6:	cc 56       	subi	r28, 0x6C	; 108
    33f8:	d1 40       	sbci	r29, 0x01	; 1
    33fa:	09 95       	icall
    33fc:	c2 59       	subi	r28, 0x92	; 146
    33fe:	de 4f       	sbci	r29, 0xFE	; 254
    3400:	e8 81       	ld	r30, Y
    3402:	f9 81       	ldd	r31, Y+1	; 0x01
    3404:	ce 56       	subi	r28, 0x6E	; 110
    3406:	d1 40       	sbci	r29, 0x01	; 1
    3408:	09 95       	icall
    340a:	f6 e3       	ldi	r31, 0x36	; 54
    340c:	cc 58       	subi	r28, 0x8C	; 140
    340e:	de 4f       	sbci	r29, 0xFE	; 254
    3410:	f8 83       	st	Y, r31
    3412:	c4 57       	subi	r28, 0x74	; 116
    3414:	d1 40       	sbci	r29, 0x01	; 1
    3416:	25 cb       	rjmp	.-2486   	; 0x2a62 <main+0x2fc>
							//if(keypad.get().character=='1'){cal='1';keypad.flush();lcd0.clear();}
							break;
						/********************************************************************/
						case '1': // YEAR
							lcd0.gotoxy(1,0);
    3418:	60 e0       	ldi	r22, 0x00	; 0
    341a:	70 e0       	ldi	r23, 0x00	; 0
    341c:	81 e0       	ldi	r24, 0x01	; 1
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	f1 01       	movw	r30, r2
    3422:	09 95       	icall
							lcd0.string_size("Enter Year:",11);
    3424:	6b e0       	ldi	r22, 0x0B	; 11
    3426:	8c e8       	ldi	r24, 0x8C	; 140
    3428:	91 e0       	ldi	r25, 0x01	; 1
    342a:	f2 01       	movw	r30, r4
    342c:	09 95       	icall
							lcd0.gotoxy(3,0);
    342e:	60 e0       	ldi	r22, 0x00	; 0
    3430:	70 e0       	ldi	r23, 0x00	; 0
    3432:	83 e0       	ldi	r24, 0x03	; 3
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	f1 01       	movw	r30, r2
    3438:	09 95       	icall
							lcd0.string_size("C - exit",8);	
    343a:	68 e0       	ldi	r22, 0x08	; 8
    343c:	8b e3       	ldi	r24, 0x3B	; 59
    343e:	91 e0       	ldi	r25, 0x01	; 1
    3440:	f2 01       	movw	r30, r4
							/***YEAR***/
							if(keypad.get().character==KEYPADENTERKEY){
    3442:	09 95       	icall
    3444:	f4 01       	movw	r30, r8
    3446:	09 95       	icall
    3448:	24 34       	cpi	r18, 0x44	; 68
    344a:	09 f0       	breq	.+2      	; 0x344e <main+0xce8>
								strcpy(tstr,keypad.get().string);
    344c:	0a cb       	rjmp	.-2540   	; 0x2a62 <main+0x2fc>
    344e:	f4 01       	movw	r30, r8
    3450:	09 95       	icall
    3452:	5e ab       	std	Y+54, r21	; 0x36
    3454:	6f ab       	std	Y+55, r22	; 0x37
    3456:	6e a9       	ldd	r22, Y+54	; 0x36
    3458:	7f a9       	ldd	r23, Y+55	; 0x37
    345a:	ce 01       	movw	r24, r28
    345c:	86 5e       	subi	r24, 0xE6	; 230
    345e:	9e 4f       	sbci	r25, 0xFE	; 254
    3460:	98 d4       	rcall	.+2352   	; 0x3d92 <strcpy>
								set=function.strToInt(tstr);
    3462:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <function+0x2c>
    3466:	f0 91 4b 04 	lds	r31, 0x044B	; 0x80044b <function+0x2d>
    346a:	ce 01       	movw	r24, r28
    346c:	86 5e       	subi	r24, 0xE6	; 230
    346e:	9e 4f       	sbci	r25, 0xFE	; 254
    3470:	09 95       	icall
								if(set >=0 && set <100){
    3472:	84 36       	cpi	r24, 0x64	; 100
    3474:	91 05       	cpc	r25, r1
    3476:	88 f4       	brcc	.+34     	; 0x349a <main+0xd34>
									rtc.SetYear(rtc.bintobcd(set));
    3478:	eb e6       	ldi	r30, 0x6B	; 107
    347a:	f4 e0       	ldi	r31, 0x04	; 4
    347c:	02 89       	ldd	r16, Z+18	; 0x12
    347e:	13 89       	ldd	r17, Z+19	; 0x13
    3480:	02 8c       	ldd	r0, Z+26	; 0x1a
    3482:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3484:	e0 2d       	mov	r30, r0
    3486:	09 95       	icall
    3488:	f8 01       	movw	r30, r16
    348a:	09 95       	icall
									cal='0';
    348c:	f0 e3       	ldi	r31, 0x30	; 48
    348e:	cc 58       	subi	r28, 0x8C	; 140
    3490:	de 4f       	sbci	r29, 0xFE	; 254
    3492:	f8 83       	st	Y, r31
    3494:	c4 57       	subi	r28, 0x74	; 116
    3496:	d1 40       	sbci	r29, 0x01	; 1
    3498:	10 c0       	rjmp	.+32     	; 0x34ba <main+0xd54>
									}else{
									strcpy(tstr,"err");
    349a:	85 e6       	ldi	r24, 0x65	; 101
    349c:	92 e7       	ldi	r25, 0x72	; 114
    349e:	c6 5e       	subi	r28, 0xE6	; 230
    34a0:	de 4f       	sbci	r29, 0xFE	; 254
    34a2:	99 83       	std	Y+1, r25	; 0x01
    34a4:	88 83       	st	Y, r24
    34a6:	ca 51       	subi	r28, 0x1A	; 26
    34a8:	d1 40       	sbci	r29, 0x01	; 1
    34aa:	82 e7       	ldi	r24, 0x72	; 114
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	c4 5e       	subi	r28, 0xE4	; 228
    34b0:	de 4f       	sbci	r29, 0xFE	; 254
    34b2:	99 83       	std	Y+1, r25	; 0x01
    34b4:	88 83       	st	Y, r24
    34b6:	cc 51       	subi	r28, 0x1C	; 28
    34b8:	d1 40       	sbci	r29, 0x01	; 1
								}
								keypad.flush();
    34ba:	c4 59       	subi	r28, 0x94	; 148
    34bc:	de 4f       	sbci	r29, 0xFE	; 254
    34be:	e8 81       	ld	r30, Y
    34c0:	f9 81       	ldd	r31, Y+1	; 0x01
    34c2:	cc 56       	subi	r28, 0x6C	; 108
    34c4:	d1 40       	sbci	r29, 0x01	; 1
    34c6:	09 95       	icall
    34c8:	cc ca       	rjmp	.-2664   	; 0x2a62 <main+0x2fc>
							}
						break;
						/********************************************************************/
						case '2': // MONTH
							lcd0.gotoxy(1,0);
    34ca:	60 e0       	ldi	r22, 0x00	; 0
    34cc:	70 e0       	ldi	r23, 0x00	; 0
    34ce:	81 e0       	ldi	r24, 0x01	; 1
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	f1 01       	movw	r30, r2
    34d4:	09 95       	icall
							lcd0.string_size("Enter Month:",12);
    34d6:	6c e0       	ldi	r22, 0x0C	; 12
    34d8:	88 e9       	ldi	r24, 0x98	; 152
    34da:	91 e0       	ldi	r25, 0x01	; 1
    34dc:	f2 01       	movw	r30, r4
    34de:	09 95       	icall
							lcd0.gotoxy(3,0);
    34e0:	60 e0       	ldi	r22, 0x00	; 0
    34e2:	70 e0       	ldi	r23, 0x00	; 0
    34e4:	83 e0       	ldi	r24, 0x03	; 3
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	f1 01       	movw	r30, r2
							lcd0.string_size("C - exit",8);
    34ea:	09 95       	icall
    34ec:	68 e0       	ldi	r22, 0x08	; 8
    34ee:	8b e3       	ldi	r24, 0x3B	; 59
    34f0:	91 e0       	ldi	r25, 0x01	; 1
    34f2:	f2 01       	movw	r30, r4
							/***MONTH***/
							if(keypad.get().character==KEYPADENTERKEY){
    34f4:	09 95       	icall
    34f6:	f4 01       	movw	r30, r8
    34f8:	09 95       	icall
    34fa:	24 34       	cpi	r18, 0x44	; 68
    34fc:	09 f0       	breq	.+2      	; 0x3500 <main+0xd9a>
								strcpy(tstr,keypad.get().string);
    34fe:	b1 ca       	rjmp	.-2718   	; 0x2a62 <main+0x2fc>
    3500:	f4 01       	movw	r30, r8
    3502:	09 95       	icall
    3504:	5c a7       	std	Y+44, r21	; 0x2c
    3506:	6d a7       	std	Y+45, r22	; 0x2d
    3508:	6c a5       	ldd	r22, Y+44	; 0x2c
    350a:	7d a5       	ldd	r23, Y+45	; 0x2d
    350c:	ce 01       	movw	r24, r28
    350e:	86 5e       	subi	r24, 0xE6	; 230
    3510:	9e 4f       	sbci	r25, 0xFE	; 254
    3512:	3f d4       	rcall	.+2174   	; 0x3d92 <strcpy>
								set=function.strToInt(tstr);
    3514:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <function+0x2c>
    3518:	f0 91 4b 04 	lds	r31, 0x044B	; 0x80044b <function+0x2d>
    351c:	ce 01       	movw	r24, r28
    351e:	86 5e       	subi	r24, 0xE6	; 230
    3520:	9e 4f       	sbci	r25, 0xFE	; 254
    3522:	09 95       	icall
								if(set >=0 && set <13){
    3524:	8d 30       	cpi	r24, 0x0D	; 13
    3526:	91 05       	cpc	r25, r1
    3528:	88 f4       	brcc	.+34     	; 0x354c <main+0xde6>
									rtc.SetMonth(rtc.bintobcd(set));
    352a:	eb e6       	ldi	r30, 0x6B	; 107
    352c:	f4 e0       	ldi	r31, 0x04	; 4
    352e:	00 89       	ldd	r16, Z+16	; 0x10
    3530:	11 89       	ldd	r17, Z+17	; 0x11
    3532:	02 8c       	ldd	r0, Z+26	; 0x1a
    3534:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3536:	e0 2d       	mov	r30, r0
    3538:	09 95       	icall
    353a:	f8 01       	movw	r30, r16
    353c:	09 95       	icall
									cal='0';
    353e:	f0 e3       	ldi	r31, 0x30	; 48
    3540:	cc 58       	subi	r28, 0x8C	; 140
    3542:	de 4f       	sbci	r29, 0xFE	; 254
    3544:	f8 83       	st	Y, r31
    3546:	c4 57       	subi	r28, 0x74	; 116
    3548:	d1 40       	sbci	r29, 0x01	; 1
    354a:	10 c0       	rjmp	.+32     	; 0x356c <main+0xe06>
								}else{
									strcpy(tstr,"err");
    354c:	85 e6       	ldi	r24, 0x65	; 101
    354e:	92 e7       	ldi	r25, 0x72	; 114
    3550:	c6 5e       	subi	r28, 0xE6	; 230
    3552:	de 4f       	sbci	r29, 0xFE	; 254
    3554:	99 83       	std	Y+1, r25	; 0x01
    3556:	88 83       	st	Y, r24
    3558:	ca 51       	subi	r28, 0x1A	; 26
    355a:	d1 40       	sbci	r29, 0x01	; 1
    355c:	82 e7       	ldi	r24, 0x72	; 114
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	c4 5e       	subi	r28, 0xE4	; 228
    3562:	de 4f       	sbci	r29, 0xFE	; 254
    3564:	99 83       	std	Y+1, r25	; 0x01
    3566:	88 83       	st	Y, r24
    3568:	cc 51       	subi	r28, 0x1C	; 28
    356a:	d1 40       	sbci	r29, 0x01	; 1
								}
								keypad.flush();
    356c:	c4 59       	subi	r28, 0x94	; 148
    356e:	de 4f       	sbci	r29, 0xFE	; 254
    3570:	e8 81       	ld	r30, Y
    3572:	f9 81       	ldd	r31, Y+1	; 0x01
    3574:	cc 56       	subi	r28, 0x6C	; 108
    3576:	d1 40       	sbci	r29, 0x01	; 1
    3578:	09 95       	icall
    357a:	73 ca       	rjmp	.-2842   	; 0x2a62 <main+0x2fc>
							}
							break;
						/********************************************************************/
						case '3': // DAY
							lcd0.gotoxy(1,0);
    357c:	60 e0       	ldi	r22, 0x00	; 0
    357e:	70 e0       	ldi	r23, 0x00	; 0
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	f1 01       	movw	r30, r2
    3586:	09 95       	icall
							lcd0.string_size("Enter Day:",10);
    3588:	6a e0       	ldi	r22, 0x0A	; 10
    358a:	85 ea       	ldi	r24, 0xA5	; 165
    358c:	91 e0       	ldi	r25, 0x01	; 1
    358e:	f2 01       	movw	r30, r4
    3590:	09 95       	icall
							lcd0.gotoxy(3,0);
    3592:	60 e0       	ldi	r22, 0x00	; 0
    3594:	70 e0       	ldi	r23, 0x00	; 0
    3596:	83 e0       	ldi	r24, 0x03	; 3
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	f1 01       	movw	r30, r2
							lcd0.string_size("C - exit",8);
    359c:	09 95       	icall
    359e:	68 e0       	ldi	r22, 0x08	; 8
    35a0:	8b e3       	ldi	r24, 0x3B	; 59
    35a2:	91 e0       	ldi	r25, 0x01	; 1
    35a4:	f2 01       	movw	r30, r4
							/***DAY***/
							if(keypad.get().character==KEYPADENTERKEY){
    35a6:	09 95       	icall
    35a8:	f4 01       	movw	r30, r8
    35aa:	09 95       	icall
    35ac:	24 34       	cpi	r18, 0x44	; 68
    35ae:	09 f0       	breq	.+2      	; 0x35b2 <main+0xe4c>
								strcpy(tstr,keypad.get().string);
    35b0:	58 ca       	rjmp	.-2896   	; 0x2a62 <main+0x2fc>
    35b2:	f4 01       	movw	r30, r8
    35b4:	09 95       	icall
    35b6:	5a a3       	std	Y+34, r21	; 0x22
    35b8:	6b a3       	std	Y+35, r22	; 0x23
    35ba:	6a a1       	ldd	r22, Y+34	; 0x22
    35bc:	7b a1       	ldd	r23, Y+35	; 0x23
    35be:	ce 01       	movw	r24, r28
    35c0:	86 5e       	subi	r24, 0xE6	; 230
    35c2:	9e 4f       	sbci	r25, 0xFE	; 254
    35c4:	e6 d3       	rcall	.+1996   	; 0x3d92 <strcpy>
								set=function.strToInt(tstr);
    35c6:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <function+0x2c>
    35ca:	f0 91 4b 04 	lds	r31, 0x044B	; 0x80044b <function+0x2d>
    35ce:	ce 01       	movw	r24, r28
    35d0:	86 5e       	subi	r24, 0xE6	; 230
    35d2:	9e 4f       	sbci	r25, 0xFE	; 254
    35d4:	09 95       	icall
								if(set >=0 && set <32){
    35d6:	80 32       	cpi	r24, 0x20	; 32
    35d8:	91 05       	cpc	r25, r1
    35da:	88 f4       	brcc	.+34     	; 0x35fe <main+0xe98>
									rtc.SetDay(rtc.bintobcd(set));
    35dc:	eb e6       	ldi	r30, 0x6B	; 107
    35de:	f4 e0       	ldi	r31, 0x04	; 4
    35e0:	04 85       	ldd	r16, Z+12	; 0x0c
    35e2:	15 85       	ldd	r17, Z+13	; 0x0d
    35e4:	02 8c       	ldd	r0, Z+26	; 0x1a
    35e6:	f3 8d       	ldd	r31, Z+27	; 0x1b
    35e8:	e0 2d       	mov	r30, r0
    35ea:	09 95       	icall
    35ec:	f8 01       	movw	r30, r16
    35ee:	09 95       	icall
									cal='0';
    35f0:	f0 e3       	ldi	r31, 0x30	; 48
    35f2:	cc 58       	subi	r28, 0x8C	; 140
    35f4:	de 4f       	sbci	r29, 0xFE	; 254
    35f6:	f8 83       	st	Y, r31
    35f8:	c4 57       	subi	r28, 0x74	; 116
    35fa:	d1 40       	sbci	r29, 0x01	; 1
    35fc:	10 c0       	rjmp	.+32     	; 0x361e <main+0xeb8>
								}else{
									strcpy(tstr,"err");
    35fe:	85 e6       	ldi	r24, 0x65	; 101
    3600:	92 e7       	ldi	r25, 0x72	; 114
    3602:	c6 5e       	subi	r28, 0xE6	; 230
    3604:	de 4f       	sbci	r29, 0xFE	; 254
    3606:	99 83       	std	Y+1, r25	; 0x01
    3608:	88 83       	st	Y, r24
    360a:	ca 51       	subi	r28, 0x1A	; 26
    360c:	d1 40       	sbci	r29, 0x01	; 1
    360e:	82 e7       	ldi	r24, 0x72	; 114
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	c4 5e       	subi	r28, 0xE4	; 228
    3614:	de 4f       	sbci	r29, 0xFE	; 254
    3616:	99 83       	std	Y+1, r25	; 0x01
    3618:	88 83       	st	Y, r24
    361a:	cc 51       	subi	r28, 0x1C	; 28
    361c:	d1 40       	sbci	r29, 0x01	; 1
								}
								keypad.flush();
    361e:	c4 59       	subi	r28, 0x94	; 148
    3620:	de 4f       	sbci	r29, 0xFE	; 254
    3622:	e8 81       	ld	r30, Y
    3624:	f9 81       	ldd	r31, Y+1	; 0x01
    3626:	cc 56       	subi	r28, 0x6C	; 108
    3628:	d1 40       	sbci	r29, 0x01	; 1
    362a:	09 95       	icall
    362c:	1a ca       	rjmp	.-3020   	; 0x2a62 <main+0x2fc>
							}
						break;
						/********************************************************************/
						case '4': // HOUR
							lcd0.gotoxy(1,0);
    362e:	60 e0       	ldi	r22, 0x00	; 0
    3630:	70 e0       	ldi	r23, 0x00	; 0
    3632:	81 e0       	ldi	r24, 0x01	; 1
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	f1 01       	movw	r30, r2
    3638:	09 95       	icall
							lcd0.string_size("Enter Hour:",11);
    363a:	6b e0       	ldi	r22, 0x0B	; 11
    363c:	80 eb       	ldi	r24, 0xB0	; 176
    363e:	91 e0       	ldi	r25, 0x01	; 1
    3640:	f2 01       	movw	r30, r4
    3642:	09 95       	icall
							lcd0.gotoxy(3,0);
    3644:	60 e0       	ldi	r22, 0x00	; 0
    3646:	70 e0       	ldi	r23, 0x00	; 0
    3648:	83 e0       	ldi	r24, 0x03	; 3
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	f1 01       	movw	r30, r2
							lcd0.string_size("C - exit",8);
    364e:	09 95       	icall
    3650:	68 e0       	ldi	r22, 0x08	; 8
    3652:	8b e3       	ldi	r24, 0x3B	; 59
    3654:	91 e0       	ldi	r25, 0x01	; 1
    3656:	f2 01       	movw	r30, r4
							/***HOUR***/
							if(keypad.get().character==KEYPADENTERKEY){
    3658:	09 95       	icall
    365a:	f4 01       	movw	r30, r8
    365c:	09 95       	icall
    365e:	24 34       	cpi	r18, 0x44	; 68
    3660:	09 f0       	breq	.+2      	; 0x3664 <main+0xefe>
								strcpy(tstr,keypad.get().string);
    3662:	ff c9       	rjmp	.-3074   	; 0x2a62 <main+0x2fc>
    3664:	f4 01       	movw	r30, r8
    3666:	09 95       	icall
    3668:	58 8f       	std	Y+24, r21	; 0x18
    366a:	69 8f       	std	Y+25, r22	; 0x19
    366c:	68 8d       	ldd	r22, Y+24	; 0x18
    366e:	79 8d       	ldd	r23, Y+25	; 0x19
    3670:	ce 01       	movw	r24, r28
    3672:	86 5e       	subi	r24, 0xE6	; 230
    3674:	9e 4f       	sbci	r25, 0xFE	; 254
    3676:	8d d3       	rcall	.+1818   	; 0x3d92 <strcpy>
								set=function.strToInt(tstr);
    3678:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <function+0x2c>
    367c:	f0 91 4b 04 	lds	r31, 0x044B	; 0x80044b <function+0x2d>
    3680:	ce 01       	movw	r24, r28
    3682:	86 5e       	subi	r24, 0xE6	; 230
    3684:	9e 4f       	sbci	r25, 0xFE	; 254
    3686:	09 95       	icall
								if(set >=0 && set <24){
    3688:	88 31       	cpi	r24, 0x18	; 24
    368a:	91 05       	cpc	r25, r1
    368c:	88 f4       	brcc	.+34     	; 0x36b0 <main+0xf4a>
									rtc.SetHour(rtc.bintobcd(set));
    368e:	eb e6       	ldi	r30, 0x6B	; 107
    3690:	f4 e0       	ldi	r31, 0x04	; 4
    3692:	02 81       	ldd	r16, Z+2	; 0x02
    3694:	13 81       	ldd	r17, Z+3	; 0x03
    3696:	02 8c       	ldd	r0, Z+26	; 0x1a
    3698:	f3 8d       	ldd	r31, Z+27	; 0x1b
    369a:	e0 2d       	mov	r30, r0
    369c:	09 95       	icall
    369e:	f8 01       	movw	r30, r16
    36a0:	09 95       	icall
									cal='0';
    36a2:	f0 e3       	ldi	r31, 0x30	; 48
    36a4:	cc 58       	subi	r28, 0x8C	; 140
    36a6:	de 4f       	sbci	r29, 0xFE	; 254
    36a8:	f8 83       	st	Y, r31
    36aa:	c4 57       	subi	r28, 0x74	; 116
    36ac:	d1 40       	sbci	r29, 0x01	; 1
    36ae:	10 c0       	rjmp	.+32     	; 0x36d0 <main+0xf6a>
								}else{
									strcpy(tstr,"err");
    36b0:	85 e6       	ldi	r24, 0x65	; 101
    36b2:	92 e7       	ldi	r25, 0x72	; 114
    36b4:	c6 5e       	subi	r28, 0xE6	; 230
    36b6:	de 4f       	sbci	r29, 0xFE	; 254
    36b8:	99 83       	std	Y+1, r25	; 0x01
    36ba:	88 83       	st	Y, r24
    36bc:	ca 51       	subi	r28, 0x1A	; 26
    36be:	d1 40       	sbci	r29, 0x01	; 1
    36c0:	82 e7       	ldi	r24, 0x72	; 114
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	c4 5e       	subi	r28, 0xE4	; 228
    36c6:	de 4f       	sbci	r29, 0xFE	; 254
    36c8:	99 83       	std	Y+1, r25	; 0x01
    36ca:	88 83       	st	Y, r24
    36cc:	cc 51       	subi	r28, 0x1C	; 28
    36ce:	d1 40       	sbci	r29, 0x01	; 1
								}
								keypad.flush();
    36d0:	c4 59       	subi	r28, 0x94	; 148
    36d2:	de 4f       	sbci	r29, 0xFE	; 254
    36d4:	e8 81       	ld	r30, Y
    36d6:	f9 81       	ldd	r31, Y+1	; 0x01
    36d8:	cc 56       	subi	r28, 0x6C	; 108
    36da:	d1 40       	sbci	r29, 0x01	; 1
    36dc:	09 95       	icall
    36de:	c1 c9       	rjmp	.-3198   	; 0x2a62 <main+0x2fc>
							}
						break;
						/********************************************************************/
						case '5': // MINUTE
							lcd0.gotoxy(1,0);
    36e0:	60 e0       	ldi	r22, 0x00	; 0
    36e2:	70 e0       	ldi	r23, 0x00	; 0
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	f1 01       	movw	r30, r2
    36ea:	09 95       	icall
							lcd0.string_size("Enter Minutes:",13);
    36ec:	6d e0       	ldi	r22, 0x0D	; 13
    36ee:	8c eb       	ldi	r24, 0xBC	; 188
    36f0:	91 e0       	ldi	r25, 0x01	; 1
    36f2:	f2 01       	movw	r30, r4
    36f4:	09 95       	icall
							lcd0.gotoxy(3,0);
    36f6:	60 e0       	ldi	r22, 0x00	; 0
    36f8:	70 e0       	ldi	r23, 0x00	; 0
    36fa:	83 e0       	ldi	r24, 0x03	; 3
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	f1 01       	movw	r30, r2
							lcd0.string_size("C - exit",8);
    3700:	09 95       	icall
    3702:	68 e0       	ldi	r22, 0x08	; 8
    3704:	8b e3       	ldi	r24, 0x3B	; 59
    3706:	91 e0       	ldi	r25, 0x01	; 1
    3708:	f2 01       	movw	r30, r4
							/***MINUTE***/
							if(keypad.get().character==KEYPADENTERKEY){
    370a:	09 95       	icall
    370c:	f4 01       	movw	r30, r8
    370e:	09 95       	icall
    3710:	24 34       	cpi	r18, 0x44	; 68
    3712:	09 f0       	breq	.+2      	; 0x3716 <main+0xfb0>
								strcpy(tstr,keypad.get().string);
    3714:	a6 c9       	rjmp	.-3252   	; 0x2a62 <main+0x2fc>
    3716:	f4 01       	movw	r30, r8
    3718:	09 95       	icall
    371a:	5e 87       	std	Y+14, r21	; 0x0e
    371c:	6f 87       	std	Y+15, r22	; 0x0f
    371e:	6e 85       	ldd	r22, Y+14	; 0x0e
    3720:	7f 85       	ldd	r23, Y+15	; 0x0f
    3722:	ce 01       	movw	r24, r28
    3724:	86 5e       	subi	r24, 0xE6	; 230
    3726:	9e 4f       	sbci	r25, 0xFE	; 254
    3728:	34 d3       	rcall	.+1640   	; 0x3d92 <strcpy>
								set=function.strToInt(tstr);
    372a:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <function+0x2c>
    372e:	f0 91 4b 04 	lds	r31, 0x044B	; 0x80044b <function+0x2d>
    3732:	ce 01       	movw	r24, r28
    3734:	86 5e       	subi	r24, 0xE6	; 230
    3736:	9e 4f       	sbci	r25, 0xFE	; 254
    3738:	09 95       	icall
								if(set >=0 && set <60){
    373a:	8c 33       	cpi	r24, 0x3C	; 60
    373c:	91 05       	cpc	r25, r1
    373e:	88 f4       	brcc	.+34     	; 0x3762 <main+0xffc>
									rtc.SetMinute(rtc.bintobcd(set));
    3740:	eb e6       	ldi	r30, 0x6B	; 107
    3742:	f4 e0       	ldi	r31, 0x04	; 4
    3744:	04 81       	ldd	r16, Z+4	; 0x04
    3746:	15 81       	ldd	r17, Z+5	; 0x05
    3748:	02 8c       	ldd	r0, Z+26	; 0x1a
    374a:	f3 8d       	ldd	r31, Z+27	; 0x1b
    374c:	e0 2d       	mov	r30, r0
    374e:	09 95       	icall
    3750:	f8 01       	movw	r30, r16
    3752:	09 95       	icall
									cal='0';
    3754:	f0 e3       	ldi	r31, 0x30	; 48
    3756:	cc 58       	subi	r28, 0x8C	; 140
    3758:	de 4f       	sbci	r29, 0xFE	; 254
    375a:	f8 83       	st	Y, r31
    375c:	c4 57       	subi	r28, 0x74	; 116
    375e:	d1 40       	sbci	r29, 0x01	; 1
    3760:	10 c0       	rjmp	.+32     	; 0x3782 <main+0x101c>
								}else{
									strcpy(tstr,"err");
    3762:	85 e6       	ldi	r24, 0x65	; 101
    3764:	92 e7       	ldi	r25, 0x72	; 114
    3766:	c6 5e       	subi	r28, 0xE6	; 230
    3768:	de 4f       	sbci	r29, 0xFE	; 254
    376a:	99 83       	std	Y+1, r25	; 0x01
    376c:	88 83       	st	Y, r24
    376e:	ca 51       	subi	r28, 0x1A	; 26
    3770:	d1 40       	sbci	r29, 0x01	; 1
    3772:	82 e7       	ldi	r24, 0x72	; 114
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	c4 5e       	subi	r28, 0xE4	; 228
    3778:	de 4f       	sbci	r29, 0xFE	; 254
    377a:	99 83       	std	Y+1, r25	; 0x01
    377c:	88 83       	st	Y, r24
    377e:	cc 51       	subi	r28, 0x1C	; 28
    3780:	d1 40       	sbci	r29, 0x01	; 1
								}
								keypad.flush();
    3782:	c4 59       	subi	r28, 0x94	; 148
    3784:	de 4f       	sbci	r29, 0xFE	; 254
    3786:	e8 81       	ld	r30, Y
    3788:	f9 81       	ldd	r31, Y+1	; 0x01
    378a:	cc 56       	subi	r28, 0x6C	; 108
    378c:	d1 40       	sbci	r29, 0x01	; 1
    378e:	09 95       	icall
    3790:	68 c9       	rjmp	.-3376   	; 0x2a62 <main+0x2fc>
							}
						break;
						/********************************************************************/
						case '6': // SECOND
							lcd0.gotoxy(1,0);
    3792:	60 e0       	ldi	r22, 0x00	; 0
    3794:	70 e0       	ldi	r23, 0x00	; 0
    3796:	81 e0       	ldi	r24, 0x01	; 1
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	f1 01       	movw	r30, r2
    379c:	09 95       	icall
							lcd0.string_size("Enter Seconds:",13);
    379e:	6d e0       	ldi	r22, 0x0D	; 13
    37a0:	8b ec       	ldi	r24, 0xCB	; 203
    37a2:	91 e0       	ldi	r25, 0x01	; 1
    37a4:	f2 01       	movw	r30, r4
    37a6:	09 95       	icall
							lcd0.gotoxy(3,0);
    37a8:	60 e0       	ldi	r22, 0x00	; 0
    37aa:	70 e0       	ldi	r23, 0x00	; 0
    37ac:	83 e0       	ldi	r24, 0x03	; 3
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	f1 01       	movw	r30, r2
							lcd0.string_size("C - exit",8);
    37b2:	09 95       	icall
    37b4:	68 e0       	ldi	r22, 0x08	; 8
    37b6:	8b e3       	ldi	r24, 0x3B	; 59
    37b8:	91 e0       	ldi	r25, 0x01	; 1
    37ba:	f2 01       	movw	r30, r4
							/***SECOND***/
							if(keypad.get().character==KEYPADENTERKEY){
    37bc:	09 95       	icall
    37be:	f4 01       	movw	r30, r8
    37c0:	09 95       	icall
    37c2:	24 34       	cpi	r18, 0x44	; 68
    37c4:	09 f0       	breq	.+2      	; 0x37c8 <main+0x1062>
								strcpy(tstr,keypad.get().string);
    37c6:	4d c9       	rjmp	.-3430   	; 0x2a62 <main+0x2fc>
    37c8:	f4 01       	movw	r30, r8
    37ca:	09 95       	icall
    37cc:	5c 83       	std	Y+4, r21	; 0x04
    37ce:	6d 83       	std	Y+5, r22	; 0x05
    37d0:	6c 81       	ldd	r22, Y+4	; 0x04
    37d2:	7d 81       	ldd	r23, Y+5	; 0x05
    37d4:	ce 01       	movw	r24, r28
    37d6:	86 5e       	subi	r24, 0xE6	; 230
    37d8:	9e 4f       	sbci	r25, 0xFE	; 254
    37da:	db d2       	rcall	.+1462   	; 0x3d92 <strcpy>
								set=function.strToInt(tstr);
    37dc:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <function+0x2c>
    37e0:	f0 91 4b 04 	lds	r31, 0x044B	; 0x80044b <function+0x2d>
    37e4:	ce 01       	movw	r24, r28
    37e6:	86 5e       	subi	r24, 0xE6	; 230
    37e8:	9e 4f       	sbci	r25, 0xFE	; 254
    37ea:	09 95       	icall
								if(set >=0 && set <60){
    37ec:	8c 33       	cpi	r24, 0x3C	; 60
    37ee:	91 05       	cpc	r25, r1
    37f0:	88 f4       	brcc	.+34     	; 0x3814 <main+0x10ae>
									rtc.SetSecond(rtc.bintobcd(set));
    37f2:	eb e6       	ldi	r30, 0x6B	; 107
    37f4:	f4 e0       	ldi	r31, 0x04	; 4
    37f6:	06 81       	ldd	r16, Z+6	; 0x06
    37f8:	17 81       	ldd	r17, Z+7	; 0x07
    37fa:	02 8c       	ldd	r0, Z+26	; 0x1a
    37fc:	f3 8d       	ldd	r31, Z+27	; 0x1b
    37fe:	e0 2d       	mov	r30, r0
    3800:	09 95       	icall
    3802:	f8 01       	movw	r30, r16
    3804:	09 95       	icall
									cal='0';
    3806:	f0 e3       	ldi	r31, 0x30	; 48
    3808:	cc 58       	subi	r28, 0x8C	; 140
    380a:	de 4f       	sbci	r29, 0xFE	; 254
    380c:	f8 83       	st	Y, r31
    380e:	c4 57       	subi	r28, 0x74	; 116
    3810:	d1 40       	sbci	r29, 0x01	; 1
    3812:	10 c0       	rjmp	.+32     	; 0x3834 <main+0x10ce>
								}else{
									strcpy(tstr,"err");
    3814:	85 e6       	ldi	r24, 0x65	; 101
    3816:	92 e7       	ldi	r25, 0x72	; 114
    3818:	c6 5e       	subi	r28, 0xE6	; 230
    381a:	de 4f       	sbci	r29, 0xFE	; 254
    381c:	99 83       	std	Y+1, r25	; 0x01
    381e:	88 83       	st	Y, r24
    3820:	ca 51       	subi	r28, 0x1A	; 26
    3822:	d1 40       	sbci	r29, 0x01	; 1
    3824:	82 e7       	ldi	r24, 0x72	; 114
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	c4 5e       	subi	r28, 0xE4	; 228
    382a:	de 4f       	sbci	r29, 0xFE	; 254
    382c:	99 83       	std	Y+1, r25	; 0x01
    382e:	88 83       	st	Y, r24
    3830:	cc 51       	subi	r28, 0x1C	; 28
    3832:	d1 40       	sbci	r29, 0x01	; 1
								}
								keypad.flush();
    3834:	c4 59       	subi	r28, 0x94	; 148
    3836:	de 4f       	sbci	r29, 0xFE	; 254
    3838:	e8 81       	ld	r30, Y
    383a:	f9 81       	ldd	r31, Y+1	; 0x01
    383c:	cc 56       	subi	r28, 0x6C	; 108
    383e:	d1 40       	sbci	r29, 0x01	; 1
    3840:	09 95       	icall
    3842:	0f c9       	rjmp	.-3554   	; 0x2a62 <main+0x2fc>
	pid.set_ki(&pid, 12);
	/**********/
	//TODO:: Please write your application code
	while(TRUE){
		/***PREAMBLE***/
		lcd0.reboot();
    3844:	f7 01       	movw	r30, r14
    3846:	09 95       	icall
		keypad.read();
    3848:	f8 01       	movw	r30, r16
    384a:	09 95       	icall
		//uartreceive=uart.read();
		/***Reading input***/
		lcd0.gotoxy(3,13);
    384c:	6d e0       	ldi	r22, 0x0D	; 13
    384e:	70 e0       	ldi	r23, 0x00	; 0
    3850:	83 e0       	ldi	r24, 0x03	; 3
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	f1 01       	movw	r30, r2
    3856:	09 95       	icall
		lcd0.putch(':');
    3858:	8a e3       	ldi	r24, 0x3A	; 58
    385a:	c6 59       	subi	r28, 0x96	; 150
    385c:	de 4f       	sbci	r29, 0xFE	; 254
    385e:	e8 81       	ld	r30, Y
    3860:	f9 81       	ldd	r31, Y+1	; 0x01
    3862:	ca 56       	subi	r28, 0x6A	; 106
    3864:	d1 40       	sbci	r29, 0x01	; 1
    3866:	09 95       	icall
		lcd0.string_size(keypad.get().printstring,6);
    3868:	f4 01       	movw	r30, r8
    386a:	09 95       	icall
    386c:	c2 57       	subi	r28, 0x72	; 114
    386e:	df 4f       	sbci	r29, 0xFF	; 255
    3870:	38 83       	st	Y, r19
    3872:	ce 58       	subi	r28, 0x8E	; 142
    3874:	d0 40       	sbci	r29, 0x00	; 0
    3876:	c1 57       	subi	r28, 0x71	; 113
    3878:	df 4f       	sbci	r29, 0xFF	; 255
    387a:	48 83       	st	Y, r20
    387c:	cf 58       	subi	r28, 0x8F	; 143
    387e:	d0 40       	sbci	r29, 0x00	; 0
    3880:	66 e0       	ldi	r22, 0x06	; 6
    3882:	c2 57       	subi	r28, 0x72	; 114
    3884:	df 4f       	sbci	r29, 0xFF	; 255
    3886:	88 81       	ld	r24, Y
    3888:	99 81       	ldd	r25, Y+1	; 0x01
    388a:	ce 58       	subi	r28, 0x8E	; 142
    388c:	d0 40       	sbci	r29, 0x00	; 0
    388e:	f2 01       	movw	r30, r4
    3890:	09 95       	icall
    3892:	25 c9       	rjmp	.-3510   	; 0x2ade <main+0x378>

00003894 <__vector_15>:
}
/*
** interrupt
*/
ISR(TIMER0_COMP_vect) // 1Hz and usart Tx
{
    3894:	1f 92       	push	r1
    3896:	0f 92       	push	r0
    3898:	0f b6       	in	r0, 0x3f	; 63
    389a:	0f 92       	push	r0
    389c:	11 24       	eor	r1, r1
    389e:	0b b6       	in	r0, 0x3b	; 59
    38a0:	0f 92       	push	r0
    38a2:	0f 93       	push	r16
    38a4:	1f 93       	push	r17
    38a6:	2f 93       	push	r18
    38a8:	3f 93       	push	r19
    38aa:	4f 93       	push	r20
    38ac:	5f 93       	push	r21
    38ae:	6f 93       	push	r22
    38b0:	7f 93       	push	r23
    38b2:	8f 93       	push	r24
    38b4:	9f 93       	push	r25
    38b6:	af 93       	push	r26
    38b8:	bf 93       	push	r27
    38ba:	cf 93       	push	r28
    38bc:	ef 93       	push	r30
    38be:	ff 93       	push	r31
	uint8_t Sreg;
	Sreg=SREG;
    38c0:	cf b7       	in	r28, 0x3f	; 63
	SREG&=~(1<<7);
    38c2:	8f b7       	in	r24, 0x3f	; 63
    38c4:	8f 77       	andi	r24, 0x7F	; 127
    38c6:	8f bf       	out	0x3f, r24	; 63
	if(count>59){ //59 -> 1Hz
    38c8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <count>
    38cc:	8c 33       	cpi	r24, 0x3C	; 60
    38ce:	38 f1       	brcs	.+78     	; 0x391e <__vector_15+0x8a>
		increment++;
    38d0:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <increment>
    38d4:	8f 5f       	subi	r24, 0xFF	; 255
    38d6:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <increment>
		if((increment & 0x0F) < 8){
    38da:	8f 70       	andi	r24, 0x0F	; 15
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	08 97       	sbiw	r24, 0x08	; 8
    38e0:	74 f4       	brge	.+28     	; 0x38fe <__vector_15+0x6a>
			shift.bit(0);
    38e2:	08 e1       	ldi	r16, 0x18	; 24
    38e4:	14 e0       	ldi	r17, 0x04	; 4
    38e6:	d8 01       	movw	r26, r16
    38e8:	ed 91       	ld	r30, X+
    38ea:	fc 91       	ld	r31, X
    38ec:	80 e0       	ldi	r24, 0x00	; 0
    38ee:	09 95       	icall
			shift.out();
    38f0:	d8 01       	movw	r26, r16
    38f2:	14 96       	adiw	r26, 0x04	; 4
    38f4:	ed 91       	ld	r30, X+
    38f6:	fc 91       	ld	r31, X
    38f8:	15 97       	sbiw	r26, 0x05	; 5
    38fa:	09 95       	icall
    38fc:	0d c0       	rjmp	.+26     	; 0x3918 <__vector_15+0x84>
		}else{
			shift.bit(1);
    38fe:	08 e1       	ldi	r16, 0x18	; 24
    3900:	14 e0       	ldi	r17, 0x04	; 4
    3902:	d8 01       	movw	r26, r16
    3904:	ed 91       	ld	r30, X+
    3906:	fc 91       	ld	r31, X
    3908:	81 e0       	ldi	r24, 0x01	; 1
    390a:	09 95       	icall
			shift.out();
    390c:	d8 01       	movw	r26, r16
    390e:	14 96       	adiw	r26, 0x04	; 4
    3910:	ed 91       	ld	r30, X+
    3912:	fc 91       	ld	r31, X
    3914:	15 97       	sbiw	r26, 0x05	; 5
    3916:	09 95       	icall
		}
		count=0;
    3918:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <count>
    391c:	03 c0       	rjmp	.+6      	; 0x3924 <__vector_15+0x90>
	}else
		count++;
    391e:	8f 5f       	subi	r24, 0xFF	; 255
    3920:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <count>
	SREG=Sreg;
    3924:	cf bf       	out	0x3f, r28	; 63
}
    3926:	ff 91       	pop	r31
    3928:	ef 91       	pop	r30
    392a:	cf 91       	pop	r28
    392c:	bf 91       	pop	r27
    392e:	af 91       	pop	r26
    3930:	9f 91       	pop	r25
    3932:	8f 91       	pop	r24
    3934:	7f 91       	pop	r23
    3936:	6f 91       	pop	r22
    3938:	5f 91       	pop	r21
    393a:	4f 91       	pop	r20
    393c:	3f 91       	pop	r19
    393e:	2f 91       	pop	r18
    3940:	1f 91       	pop	r17
    3942:	0f 91       	pop	r16
    3944:	0f 90       	pop	r0
    3946:	0b be       	out	0x3b, r0	; 59
    3948:	0f 90       	pop	r0
    394a:	0f be       	out	0x3f, r0	; 63
    394c:	0f 90       	pop	r0
    394e:	1f 90       	pop	r1
    3950:	18 95       	reti

00003952 <__subsf3>:
    3952:	50 58       	subi	r21, 0x80	; 128

00003954 <__addsf3>:
    3954:	bb 27       	eor	r27, r27
    3956:	aa 27       	eor	r26, r26
    3958:	0e d0       	rcall	.+28     	; 0x3976 <__addsf3x>
    395a:	df c0       	rjmp	.+446    	; 0x3b1a <__fp_round>
    395c:	d0 d0       	rcall	.+416    	; 0x3afe <__fp_pscA>
    395e:	30 f0       	brcs	.+12     	; 0x396c <__addsf3+0x18>
    3960:	d5 d0       	rcall	.+426    	; 0x3b0c <__fp_pscB>
    3962:	20 f0       	brcs	.+8      	; 0x396c <__addsf3+0x18>
    3964:	31 f4       	brne	.+12     	; 0x3972 <__addsf3+0x1e>
    3966:	9f 3f       	cpi	r25, 0xFF	; 255
    3968:	11 f4       	brne	.+4      	; 0x396e <__addsf3+0x1a>
    396a:	1e f4       	brtc	.+6      	; 0x3972 <__addsf3+0x1e>
    396c:	c5 c0       	rjmp	.+394    	; 0x3af8 <__fp_nan>
    396e:	0e f4       	brtc	.+2      	; 0x3972 <__addsf3+0x1e>
    3970:	e0 95       	com	r30
    3972:	e7 fb       	bst	r30, 7
    3974:	bb c0       	rjmp	.+374    	; 0x3aec <__fp_inf>

00003976 <__addsf3x>:
    3976:	e9 2f       	mov	r30, r25
    3978:	e1 d0       	rcall	.+450    	; 0x3b3c <__fp_split3>
    397a:	80 f3       	brcs	.-32     	; 0x395c <__addsf3+0x8>
    397c:	ba 17       	cp	r27, r26
    397e:	62 07       	cpc	r22, r18
    3980:	73 07       	cpc	r23, r19
    3982:	84 07       	cpc	r24, r20
    3984:	95 07       	cpc	r25, r21
    3986:	18 f0       	brcs	.+6      	; 0x398e <__addsf3x+0x18>
    3988:	71 f4       	brne	.+28     	; 0x39a6 <__addsf3x+0x30>
    398a:	9e f5       	brtc	.+102    	; 0x39f2 <__addsf3x+0x7c>
    398c:	f9 c0       	rjmp	.+498    	; 0x3b80 <__fp_zero>
    398e:	0e f4       	brtc	.+2      	; 0x3992 <__addsf3x+0x1c>
    3990:	e0 95       	com	r30
    3992:	0b 2e       	mov	r0, r27
    3994:	ba 2f       	mov	r27, r26
    3996:	a0 2d       	mov	r26, r0
    3998:	0b 01       	movw	r0, r22
    399a:	b9 01       	movw	r22, r18
    399c:	90 01       	movw	r18, r0
    399e:	0c 01       	movw	r0, r24
    39a0:	ca 01       	movw	r24, r20
    39a2:	a0 01       	movw	r20, r0
    39a4:	11 24       	eor	r1, r1
    39a6:	ff 27       	eor	r31, r31
    39a8:	59 1b       	sub	r21, r25
    39aa:	99 f0       	breq	.+38     	; 0x39d2 <__addsf3x+0x5c>
    39ac:	59 3f       	cpi	r21, 0xF9	; 249
    39ae:	50 f4       	brcc	.+20     	; 0x39c4 <__addsf3x+0x4e>
    39b0:	50 3e       	cpi	r21, 0xE0	; 224
    39b2:	68 f1       	brcs	.+90     	; 0x3a0e <__addsf3x+0x98>
    39b4:	1a 16       	cp	r1, r26
    39b6:	f0 40       	sbci	r31, 0x00	; 0
    39b8:	a2 2f       	mov	r26, r18
    39ba:	23 2f       	mov	r18, r19
    39bc:	34 2f       	mov	r19, r20
    39be:	44 27       	eor	r20, r20
    39c0:	58 5f       	subi	r21, 0xF8	; 248
    39c2:	f3 cf       	rjmp	.-26     	; 0x39aa <__addsf3x+0x34>
    39c4:	46 95       	lsr	r20
    39c6:	37 95       	ror	r19
    39c8:	27 95       	ror	r18
    39ca:	a7 95       	ror	r26
    39cc:	f0 40       	sbci	r31, 0x00	; 0
    39ce:	53 95       	inc	r21
    39d0:	c9 f7       	brne	.-14     	; 0x39c4 <__addsf3x+0x4e>
    39d2:	7e f4       	brtc	.+30     	; 0x39f2 <__addsf3x+0x7c>
    39d4:	1f 16       	cp	r1, r31
    39d6:	ba 0b       	sbc	r27, r26
    39d8:	62 0b       	sbc	r22, r18
    39da:	73 0b       	sbc	r23, r19
    39dc:	84 0b       	sbc	r24, r20
    39de:	ba f0       	brmi	.+46     	; 0x3a0e <__addsf3x+0x98>
    39e0:	91 50       	subi	r25, 0x01	; 1
    39e2:	a1 f0       	breq	.+40     	; 0x3a0c <__addsf3x+0x96>
    39e4:	ff 0f       	add	r31, r31
    39e6:	bb 1f       	adc	r27, r27
    39e8:	66 1f       	adc	r22, r22
    39ea:	77 1f       	adc	r23, r23
    39ec:	88 1f       	adc	r24, r24
    39ee:	c2 f7       	brpl	.-16     	; 0x39e0 <__addsf3x+0x6a>
    39f0:	0e c0       	rjmp	.+28     	; 0x3a0e <__addsf3x+0x98>
    39f2:	ba 0f       	add	r27, r26
    39f4:	62 1f       	adc	r22, r18
    39f6:	73 1f       	adc	r23, r19
    39f8:	84 1f       	adc	r24, r20
    39fa:	48 f4       	brcc	.+18     	; 0x3a0e <__addsf3x+0x98>
    39fc:	87 95       	ror	r24
    39fe:	77 95       	ror	r23
    3a00:	67 95       	ror	r22
    3a02:	b7 95       	ror	r27
    3a04:	f7 95       	ror	r31
    3a06:	9e 3f       	cpi	r25, 0xFE	; 254
    3a08:	08 f0       	brcs	.+2      	; 0x3a0c <__addsf3x+0x96>
    3a0a:	b3 cf       	rjmp	.-154    	; 0x3972 <__addsf3+0x1e>
    3a0c:	93 95       	inc	r25
    3a0e:	88 0f       	add	r24, r24
    3a10:	08 f0       	brcs	.+2      	; 0x3a14 <__addsf3x+0x9e>
    3a12:	99 27       	eor	r25, r25
    3a14:	ee 0f       	add	r30, r30
    3a16:	97 95       	ror	r25
    3a18:	87 95       	ror	r24
    3a1a:	08 95       	ret

00003a1c <__divsf3>:
    3a1c:	0c d0       	rcall	.+24     	; 0x3a36 <__divsf3x>
    3a1e:	7d c0       	rjmp	.+250    	; 0x3b1a <__fp_round>
    3a20:	75 d0       	rcall	.+234    	; 0x3b0c <__fp_pscB>
    3a22:	40 f0       	brcs	.+16     	; 0x3a34 <__divsf3+0x18>
    3a24:	6c d0       	rcall	.+216    	; 0x3afe <__fp_pscA>
    3a26:	30 f0       	brcs	.+12     	; 0x3a34 <__divsf3+0x18>
    3a28:	21 f4       	brne	.+8      	; 0x3a32 <__divsf3+0x16>
    3a2a:	5f 3f       	cpi	r21, 0xFF	; 255
    3a2c:	19 f0       	breq	.+6      	; 0x3a34 <__divsf3+0x18>
    3a2e:	5e c0       	rjmp	.+188    	; 0x3aec <__fp_inf>
    3a30:	51 11       	cpse	r21, r1
    3a32:	a7 c0       	rjmp	.+334    	; 0x3b82 <__fp_szero>
    3a34:	61 c0       	rjmp	.+194    	; 0x3af8 <__fp_nan>

00003a36 <__divsf3x>:
    3a36:	82 d0       	rcall	.+260    	; 0x3b3c <__fp_split3>
    3a38:	98 f3       	brcs	.-26     	; 0x3a20 <__divsf3+0x4>

00003a3a <__divsf3_pse>:
    3a3a:	99 23       	and	r25, r25
    3a3c:	c9 f3       	breq	.-14     	; 0x3a30 <__divsf3+0x14>
    3a3e:	55 23       	and	r21, r21
    3a40:	b1 f3       	breq	.-20     	; 0x3a2e <__divsf3+0x12>
    3a42:	95 1b       	sub	r25, r21
    3a44:	55 0b       	sbc	r21, r21
    3a46:	bb 27       	eor	r27, r27
    3a48:	aa 27       	eor	r26, r26
    3a4a:	62 17       	cp	r22, r18
    3a4c:	73 07       	cpc	r23, r19
    3a4e:	84 07       	cpc	r24, r20
    3a50:	38 f0       	brcs	.+14     	; 0x3a60 <__divsf3_pse+0x26>
    3a52:	9f 5f       	subi	r25, 0xFF	; 255
    3a54:	5f 4f       	sbci	r21, 0xFF	; 255
    3a56:	22 0f       	add	r18, r18
    3a58:	33 1f       	adc	r19, r19
    3a5a:	44 1f       	adc	r20, r20
    3a5c:	aa 1f       	adc	r26, r26
    3a5e:	a9 f3       	breq	.-22     	; 0x3a4a <__divsf3_pse+0x10>
    3a60:	33 d0       	rcall	.+102    	; 0x3ac8 <__divsf3_pse+0x8e>
    3a62:	0e 2e       	mov	r0, r30
    3a64:	3a f0       	brmi	.+14     	; 0x3a74 <__divsf3_pse+0x3a>
    3a66:	e0 e8       	ldi	r30, 0x80	; 128
    3a68:	30 d0       	rcall	.+96     	; 0x3aca <__divsf3_pse+0x90>
    3a6a:	91 50       	subi	r25, 0x01	; 1
    3a6c:	50 40       	sbci	r21, 0x00	; 0
    3a6e:	e6 95       	lsr	r30
    3a70:	00 1c       	adc	r0, r0
    3a72:	ca f7       	brpl	.-14     	; 0x3a66 <__divsf3_pse+0x2c>
    3a74:	29 d0       	rcall	.+82     	; 0x3ac8 <__divsf3_pse+0x8e>
    3a76:	fe 2f       	mov	r31, r30
    3a78:	27 d0       	rcall	.+78     	; 0x3ac8 <__divsf3_pse+0x8e>
    3a7a:	66 0f       	add	r22, r22
    3a7c:	77 1f       	adc	r23, r23
    3a7e:	88 1f       	adc	r24, r24
    3a80:	bb 1f       	adc	r27, r27
    3a82:	26 17       	cp	r18, r22
    3a84:	37 07       	cpc	r19, r23
    3a86:	48 07       	cpc	r20, r24
    3a88:	ab 07       	cpc	r26, r27
    3a8a:	b0 e8       	ldi	r27, 0x80	; 128
    3a8c:	09 f0       	breq	.+2      	; 0x3a90 <__divsf3_pse+0x56>
    3a8e:	bb 0b       	sbc	r27, r27
    3a90:	80 2d       	mov	r24, r0
    3a92:	bf 01       	movw	r22, r30
    3a94:	ff 27       	eor	r31, r31
    3a96:	93 58       	subi	r25, 0x83	; 131
    3a98:	5f 4f       	sbci	r21, 0xFF	; 255
    3a9a:	2a f0       	brmi	.+10     	; 0x3aa6 <__divsf3_pse+0x6c>
    3a9c:	9e 3f       	cpi	r25, 0xFE	; 254
    3a9e:	51 05       	cpc	r21, r1
    3aa0:	68 f0       	brcs	.+26     	; 0x3abc <__divsf3_pse+0x82>
    3aa2:	24 c0       	rjmp	.+72     	; 0x3aec <__fp_inf>
    3aa4:	6e c0       	rjmp	.+220    	; 0x3b82 <__fp_szero>
    3aa6:	5f 3f       	cpi	r21, 0xFF	; 255
    3aa8:	ec f3       	brlt	.-6      	; 0x3aa4 <__divsf3_pse+0x6a>
    3aaa:	98 3e       	cpi	r25, 0xE8	; 232
    3aac:	dc f3       	brlt	.-10     	; 0x3aa4 <__divsf3_pse+0x6a>
    3aae:	86 95       	lsr	r24
    3ab0:	77 95       	ror	r23
    3ab2:	67 95       	ror	r22
    3ab4:	b7 95       	ror	r27
    3ab6:	f7 95       	ror	r31
    3ab8:	9f 5f       	subi	r25, 0xFF	; 255
    3aba:	c9 f7       	brne	.-14     	; 0x3aae <__divsf3_pse+0x74>
    3abc:	88 0f       	add	r24, r24
    3abe:	91 1d       	adc	r25, r1
    3ac0:	96 95       	lsr	r25
    3ac2:	87 95       	ror	r24
    3ac4:	97 f9       	bld	r25, 7
    3ac6:	08 95       	ret
    3ac8:	e1 e0       	ldi	r30, 0x01	; 1
    3aca:	66 0f       	add	r22, r22
    3acc:	77 1f       	adc	r23, r23
    3ace:	88 1f       	adc	r24, r24
    3ad0:	bb 1f       	adc	r27, r27
    3ad2:	62 17       	cp	r22, r18
    3ad4:	73 07       	cpc	r23, r19
    3ad6:	84 07       	cpc	r24, r20
    3ad8:	ba 07       	cpc	r27, r26
    3ada:	20 f0       	brcs	.+8      	; 0x3ae4 <__divsf3_pse+0xaa>
    3adc:	62 1b       	sub	r22, r18
    3ade:	73 0b       	sbc	r23, r19
    3ae0:	84 0b       	sbc	r24, r20
    3ae2:	ba 0b       	sbc	r27, r26
    3ae4:	ee 1f       	adc	r30, r30
    3ae6:	88 f7       	brcc	.-30     	; 0x3aca <__divsf3_pse+0x90>
    3ae8:	e0 95       	com	r30
    3aea:	08 95       	ret

00003aec <__fp_inf>:
    3aec:	97 f9       	bld	r25, 7
    3aee:	9f 67       	ori	r25, 0x7F	; 127
    3af0:	80 e8       	ldi	r24, 0x80	; 128
    3af2:	70 e0       	ldi	r23, 0x00	; 0
    3af4:	60 e0       	ldi	r22, 0x00	; 0
    3af6:	08 95       	ret

00003af8 <__fp_nan>:
    3af8:	9f ef       	ldi	r25, 0xFF	; 255
    3afa:	80 ec       	ldi	r24, 0xC0	; 192
    3afc:	08 95       	ret

00003afe <__fp_pscA>:
    3afe:	00 24       	eor	r0, r0
    3b00:	0a 94       	dec	r0
    3b02:	16 16       	cp	r1, r22
    3b04:	17 06       	cpc	r1, r23
    3b06:	18 06       	cpc	r1, r24
    3b08:	09 06       	cpc	r0, r25
    3b0a:	08 95       	ret

00003b0c <__fp_pscB>:
    3b0c:	00 24       	eor	r0, r0
    3b0e:	0a 94       	dec	r0
    3b10:	12 16       	cp	r1, r18
    3b12:	13 06       	cpc	r1, r19
    3b14:	14 06       	cpc	r1, r20
    3b16:	05 06       	cpc	r0, r21
    3b18:	08 95       	ret

00003b1a <__fp_round>:
    3b1a:	09 2e       	mov	r0, r25
    3b1c:	03 94       	inc	r0
    3b1e:	00 0c       	add	r0, r0
    3b20:	11 f4       	brne	.+4      	; 0x3b26 <__fp_round+0xc>
    3b22:	88 23       	and	r24, r24
    3b24:	52 f0       	brmi	.+20     	; 0x3b3a <__fp_round+0x20>
    3b26:	bb 0f       	add	r27, r27
    3b28:	40 f4       	brcc	.+16     	; 0x3b3a <__fp_round+0x20>
    3b2a:	bf 2b       	or	r27, r31
    3b2c:	11 f4       	brne	.+4      	; 0x3b32 <__fp_round+0x18>
    3b2e:	60 ff       	sbrs	r22, 0
    3b30:	04 c0       	rjmp	.+8      	; 0x3b3a <__fp_round+0x20>
    3b32:	6f 5f       	subi	r22, 0xFF	; 255
    3b34:	7f 4f       	sbci	r23, 0xFF	; 255
    3b36:	8f 4f       	sbci	r24, 0xFF	; 255
    3b38:	9f 4f       	sbci	r25, 0xFF	; 255
    3b3a:	08 95       	ret

00003b3c <__fp_split3>:
    3b3c:	57 fd       	sbrc	r21, 7
    3b3e:	90 58       	subi	r25, 0x80	; 128
    3b40:	44 0f       	add	r20, r20
    3b42:	55 1f       	adc	r21, r21
    3b44:	59 f0       	breq	.+22     	; 0x3b5c <__fp_splitA+0x10>
    3b46:	5f 3f       	cpi	r21, 0xFF	; 255
    3b48:	71 f0       	breq	.+28     	; 0x3b66 <__fp_splitA+0x1a>
    3b4a:	47 95       	ror	r20

00003b4c <__fp_splitA>:
    3b4c:	88 0f       	add	r24, r24
    3b4e:	97 fb       	bst	r25, 7
    3b50:	99 1f       	adc	r25, r25
    3b52:	61 f0       	breq	.+24     	; 0x3b6c <__fp_splitA+0x20>
    3b54:	9f 3f       	cpi	r25, 0xFF	; 255
    3b56:	79 f0       	breq	.+30     	; 0x3b76 <__fp_splitA+0x2a>
    3b58:	87 95       	ror	r24
    3b5a:	08 95       	ret
    3b5c:	12 16       	cp	r1, r18
    3b5e:	13 06       	cpc	r1, r19
    3b60:	14 06       	cpc	r1, r20
    3b62:	55 1f       	adc	r21, r21
    3b64:	f2 cf       	rjmp	.-28     	; 0x3b4a <__fp_split3+0xe>
    3b66:	46 95       	lsr	r20
    3b68:	f1 df       	rcall	.-30     	; 0x3b4c <__fp_splitA>
    3b6a:	08 c0       	rjmp	.+16     	; 0x3b7c <__fp_splitA+0x30>
    3b6c:	16 16       	cp	r1, r22
    3b6e:	17 06       	cpc	r1, r23
    3b70:	18 06       	cpc	r1, r24
    3b72:	99 1f       	adc	r25, r25
    3b74:	f1 cf       	rjmp	.-30     	; 0x3b58 <__fp_splitA+0xc>
    3b76:	86 95       	lsr	r24
    3b78:	71 05       	cpc	r23, r1
    3b7a:	61 05       	cpc	r22, r1
    3b7c:	08 94       	sec
    3b7e:	08 95       	ret

00003b80 <__fp_zero>:
    3b80:	e8 94       	clt

00003b82 <__fp_szero>:
    3b82:	bb 27       	eor	r27, r27
    3b84:	66 27       	eor	r22, r22
    3b86:	77 27       	eor	r23, r23
    3b88:	cb 01       	movw	r24, r22
    3b8a:	97 f9       	bld	r25, 7
    3b8c:	08 95       	ret

00003b8e <__mulsf3>:
    3b8e:	0b d0       	rcall	.+22     	; 0x3ba6 <__mulsf3x>
    3b90:	c4 cf       	rjmp	.-120    	; 0x3b1a <__fp_round>
    3b92:	b5 df       	rcall	.-150    	; 0x3afe <__fp_pscA>
    3b94:	28 f0       	brcs	.+10     	; 0x3ba0 <__mulsf3+0x12>
    3b96:	ba df       	rcall	.-140    	; 0x3b0c <__fp_pscB>
    3b98:	18 f0       	brcs	.+6      	; 0x3ba0 <__mulsf3+0x12>
    3b9a:	95 23       	and	r25, r21
    3b9c:	09 f0       	breq	.+2      	; 0x3ba0 <__mulsf3+0x12>
    3b9e:	a6 cf       	rjmp	.-180    	; 0x3aec <__fp_inf>
    3ba0:	ab cf       	rjmp	.-170    	; 0x3af8 <__fp_nan>
    3ba2:	11 24       	eor	r1, r1
    3ba4:	ee cf       	rjmp	.-36     	; 0x3b82 <__fp_szero>

00003ba6 <__mulsf3x>:
    3ba6:	ca df       	rcall	.-108    	; 0x3b3c <__fp_split3>
    3ba8:	a0 f3       	brcs	.-24     	; 0x3b92 <__mulsf3+0x4>

00003baa <__mulsf3_pse>:
    3baa:	95 9f       	mul	r25, r21
    3bac:	d1 f3       	breq	.-12     	; 0x3ba2 <__mulsf3+0x14>
    3bae:	95 0f       	add	r25, r21
    3bb0:	50 e0       	ldi	r21, 0x00	; 0
    3bb2:	55 1f       	adc	r21, r21
    3bb4:	62 9f       	mul	r22, r18
    3bb6:	f0 01       	movw	r30, r0
    3bb8:	72 9f       	mul	r23, r18
    3bba:	bb 27       	eor	r27, r27
    3bbc:	f0 0d       	add	r31, r0
    3bbe:	b1 1d       	adc	r27, r1
    3bc0:	63 9f       	mul	r22, r19
    3bc2:	aa 27       	eor	r26, r26
    3bc4:	f0 0d       	add	r31, r0
    3bc6:	b1 1d       	adc	r27, r1
    3bc8:	aa 1f       	adc	r26, r26
    3bca:	64 9f       	mul	r22, r20
    3bcc:	66 27       	eor	r22, r22
    3bce:	b0 0d       	add	r27, r0
    3bd0:	a1 1d       	adc	r26, r1
    3bd2:	66 1f       	adc	r22, r22
    3bd4:	82 9f       	mul	r24, r18
    3bd6:	22 27       	eor	r18, r18
    3bd8:	b0 0d       	add	r27, r0
    3bda:	a1 1d       	adc	r26, r1
    3bdc:	62 1f       	adc	r22, r18
    3bde:	73 9f       	mul	r23, r19
    3be0:	b0 0d       	add	r27, r0
    3be2:	a1 1d       	adc	r26, r1
    3be4:	62 1f       	adc	r22, r18
    3be6:	83 9f       	mul	r24, r19
    3be8:	a0 0d       	add	r26, r0
    3bea:	61 1d       	adc	r22, r1
    3bec:	22 1f       	adc	r18, r18
    3bee:	74 9f       	mul	r23, r20
    3bf0:	33 27       	eor	r19, r19
    3bf2:	a0 0d       	add	r26, r0
    3bf4:	61 1d       	adc	r22, r1
    3bf6:	23 1f       	adc	r18, r19
    3bf8:	84 9f       	mul	r24, r20
    3bfa:	60 0d       	add	r22, r0
    3bfc:	21 1d       	adc	r18, r1
    3bfe:	82 2f       	mov	r24, r18
    3c00:	76 2f       	mov	r23, r22
    3c02:	6a 2f       	mov	r22, r26
    3c04:	11 24       	eor	r1, r1
    3c06:	9f 57       	subi	r25, 0x7F	; 127
    3c08:	50 40       	sbci	r21, 0x00	; 0
    3c0a:	8a f0       	brmi	.+34     	; 0x3c2e <__mulsf3_pse+0x84>
    3c0c:	e1 f0       	breq	.+56     	; 0x3c46 <__mulsf3_pse+0x9c>
    3c0e:	88 23       	and	r24, r24
    3c10:	4a f0       	brmi	.+18     	; 0x3c24 <__mulsf3_pse+0x7a>
    3c12:	ee 0f       	add	r30, r30
    3c14:	ff 1f       	adc	r31, r31
    3c16:	bb 1f       	adc	r27, r27
    3c18:	66 1f       	adc	r22, r22
    3c1a:	77 1f       	adc	r23, r23
    3c1c:	88 1f       	adc	r24, r24
    3c1e:	91 50       	subi	r25, 0x01	; 1
    3c20:	50 40       	sbci	r21, 0x00	; 0
    3c22:	a9 f7       	brne	.-22     	; 0x3c0e <__mulsf3_pse+0x64>
    3c24:	9e 3f       	cpi	r25, 0xFE	; 254
    3c26:	51 05       	cpc	r21, r1
    3c28:	70 f0       	brcs	.+28     	; 0x3c46 <__mulsf3_pse+0x9c>
    3c2a:	60 cf       	rjmp	.-320    	; 0x3aec <__fp_inf>
    3c2c:	aa cf       	rjmp	.-172    	; 0x3b82 <__fp_szero>
    3c2e:	5f 3f       	cpi	r21, 0xFF	; 255
    3c30:	ec f3       	brlt	.-6      	; 0x3c2c <__mulsf3_pse+0x82>
    3c32:	98 3e       	cpi	r25, 0xE8	; 232
    3c34:	dc f3       	brlt	.-10     	; 0x3c2c <__mulsf3_pse+0x82>
    3c36:	86 95       	lsr	r24
    3c38:	77 95       	ror	r23
    3c3a:	67 95       	ror	r22
    3c3c:	b7 95       	ror	r27
    3c3e:	f7 95       	ror	r31
    3c40:	e7 95       	ror	r30
    3c42:	9f 5f       	subi	r25, 0xFF	; 255
    3c44:	c1 f7       	brne	.-16     	; 0x3c36 <__mulsf3_pse+0x8c>
    3c46:	fe 2b       	or	r31, r30
    3c48:	88 0f       	add	r24, r24
    3c4a:	91 1d       	adc	r25, r1
    3c4c:	96 95       	lsr	r25
    3c4e:	87 95       	ror	r24
    3c50:	97 f9       	bld	r25, 7
    3c52:	08 95       	ret

00003c54 <__mulsi3>:
    3c54:	db 01       	movw	r26, r22
    3c56:	8f 93       	push	r24
    3c58:	9f 93       	push	r25
    3c5a:	88 d0       	rcall	.+272    	; 0x3d6c <__muluhisi3>
    3c5c:	bf 91       	pop	r27
    3c5e:	af 91       	pop	r26
    3c60:	a2 9f       	mul	r26, r18
    3c62:	80 0d       	add	r24, r0
    3c64:	91 1d       	adc	r25, r1
    3c66:	a3 9f       	mul	r26, r19
    3c68:	90 0d       	add	r25, r0
    3c6a:	b2 9f       	mul	r27, r18
    3c6c:	90 0d       	add	r25, r0
    3c6e:	11 24       	eor	r1, r1
    3c70:	08 95       	ret

00003c72 <__udivmodhi4>:
    3c72:	aa 1b       	sub	r26, r26
    3c74:	bb 1b       	sub	r27, r27
    3c76:	51 e1       	ldi	r21, 0x11	; 17
    3c78:	07 c0       	rjmp	.+14     	; 0x3c88 <__udivmodhi4_ep>

00003c7a <__udivmodhi4_loop>:
    3c7a:	aa 1f       	adc	r26, r26
    3c7c:	bb 1f       	adc	r27, r27
    3c7e:	a6 17       	cp	r26, r22
    3c80:	b7 07       	cpc	r27, r23
    3c82:	10 f0       	brcs	.+4      	; 0x3c88 <__udivmodhi4_ep>
    3c84:	a6 1b       	sub	r26, r22
    3c86:	b7 0b       	sbc	r27, r23

00003c88 <__udivmodhi4_ep>:
    3c88:	88 1f       	adc	r24, r24
    3c8a:	99 1f       	adc	r25, r25
    3c8c:	5a 95       	dec	r21
    3c8e:	a9 f7       	brne	.-22     	; 0x3c7a <__udivmodhi4_loop>
    3c90:	80 95       	com	r24
    3c92:	90 95       	com	r25
    3c94:	bc 01       	movw	r22, r24
    3c96:	cd 01       	movw	r24, r26
    3c98:	08 95       	ret

00003c9a <__divmodhi4>:
    3c9a:	97 fb       	bst	r25, 7
    3c9c:	07 2e       	mov	r0, r23
    3c9e:	16 f4       	brtc	.+4      	; 0x3ca4 <__divmodhi4+0xa>
    3ca0:	00 94       	com	r0
    3ca2:	06 d0       	rcall	.+12     	; 0x3cb0 <__divmodhi4_neg1>
    3ca4:	77 fd       	sbrc	r23, 7
    3ca6:	08 d0       	rcall	.+16     	; 0x3cb8 <__divmodhi4_neg2>
    3ca8:	e4 df       	rcall	.-56     	; 0x3c72 <__udivmodhi4>
    3caa:	07 fc       	sbrc	r0, 7
    3cac:	05 d0       	rcall	.+10     	; 0x3cb8 <__divmodhi4_neg2>
    3cae:	3e f4       	brtc	.+14     	; 0x3cbe <__divmodhi4_exit>

00003cb0 <__divmodhi4_neg1>:
    3cb0:	90 95       	com	r25
    3cb2:	81 95       	neg	r24
    3cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    3cb6:	08 95       	ret

00003cb8 <__divmodhi4_neg2>:
    3cb8:	70 95       	com	r23
    3cba:	61 95       	neg	r22
    3cbc:	7f 4f       	sbci	r23, 0xFF	; 255

00003cbe <__divmodhi4_exit>:
    3cbe:	08 95       	ret

00003cc0 <__udivmodsi4>:
    3cc0:	a1 e2       	ldi	r26, 0x21	; 33
    3cc2:	1a 2e       	mov	r1, r26
    3cc4:	aa 1b       	sub	r26, r26
    3cc6:	bb 1b       	sub	r27, r27
    3cc8:	fd 01       	movw	r30, r26
    3cca:	0d c0       	rjmp	.+26     	; 0x3ce6 <__udivmodsi4_ep>

00003ccc <__udivmodsi4_loop>:
    3ccc:	aa 1f       	adc	r26, r26
    3cce:	bb 1f       	adc	r27, r27
    3cd0:	ee 1f       	adc	r30, r30
    3cd2:	ff 1f       	adc	r31, r31
    3cd4:	a2 17       	cp	r26, r18
    3cd6:	b3 07       	cpc	r27, r19
    3cd8:	e4 07       	cpc	r30, r20
    3cda:	f5 07       	cpc	r31, r21
    3cdc:	20 f0       	brcs	.+8      	; 0x3ce6 <__udivmodsi4_ep>
    3cde:	a2 1b       	sub	r26, r18
    3ce0:	b3 0b       	sbc	r27, r19
    3ce2:	e4 0b       	sbc	r30, r20
    3ce4:	f5 0b       	sbc	r31, r21

00003ce6 <__udivmodsi4_ep>:
    3ce6:	66 1f       	adc	r22, r22
    3ce8:	77 1f       	adc	r23, r23
    3cea:	88 1f       	adc	r24, r24
    3cec:	99 1f       	adc	r25, r25
    3cee:	1a 94       	dec	r1
    3cf0:	69 f7       	brne	.-38     	; 0x3ccc <__udivmodsi4_loop>
    3cf2:	60 95       	com	r22
    3cf4:	70 95       	com	r23
    3cf6:	80 95       	com	r24
    3cf8:	90 95       	com	r25
    3cfa:	9b 01       	movw	r18, r22
    3cfc:	ac 01       	movw	r20, r24
    3cfe:	bd 01       	movw	r22, r26
    3d00:	cf 01       	movw	r24, r30
    3d02:	08 95       	ret

00003d04 <__divmodsi4>:
    3d04:	05 2e       	mov	r0, r21
    3d06:	97 fb       	bst	r25, 7
    3d08:	16 f4       	brtc	.+4      	; 0x3d0e <__divmodsi4+0xa>
    3d0a:	00 94       	com	r0
    3d0c:	0f d0       	rcall	.+30     	; 0x3d2c <__negsi2>
    3d0e:	57 fd       	sbrc	r21, 7
    3d10:	05 d0       	rcall	.+10     	; 0x3d1c <__divmodsi4_neg2>
    3d12:	d6 df       	rcall	.-84     	; 0x3cc0 <__udivmodsi4>
    3d14:	07 fc       	sbrc	r0, 7
    3d16:	02 d0       	rcall	.+4      	; 0x3d1c <__divmodsi4_neg2>
    3d18:	46 f4       	brtc	.+16     	; 0x3d2a <__divmodsi4_exit>
    3d1a:	08 c0       	rjmp	.+16     	; 0x3d2c <__negsi2>

00003d1c <__divmodsi4_neg2>:
    3d1c:	50 95       	com	r21
    3d1e:	40 95       	com	r20
    3d20:	30 95       	com	r19
    3d22:	21 95       	neg	r18
    3d24:	3f 4f       	sbci	r19, 0xFF	; 255
    3d26:	4f 4f       	sbci	r20, 0xFF	; 255
    3d28:	5f 4f       	sbci	r21, 0xFF	; 255

00003d2a <__divmodsi4_exit>:
    3d2a:	08 95       	ret

00003d2c <__negsi2>:
    3d2c:	90 95       	com	r25
    3d2e:	80 95       	com	r24
    3d30:	70 95       	com	r23
    3d32:	61 95       	neg	r22
    3d34:	7f 4f       	sbci	r23, 0xFF	; 255
    3d36:	8f 4f       	sbci	r24, 0xFF	; 255
    3d38:	9f 4f       	sbci	r25, 0xFF	; 255
    3d3a:	08 95       	ret

00003d3c <__tablejump2__>:
    3d3c:	ee 0f       	add	r30, r30
    3d3e:	ff 1f       	adc	r31, r31
    3d40:	00 24       	eor	r0, r0
    3d42:	00 1c       	adc	r0, r0
    3d44:	0b be       	out	0x3b, r0	; 59
    3d46:	07 90       	elpm	r0, Z+
    3d48:	f6 91       	elpm	r31, Z
    3d4a:	e0 2d       	mov	r30, r0
    3d4c:	09 94       	ijmp

00003d4e <__umulhisi3>:
    3d4e:	a2 9f       	mul	r26, r18
    3d50:	b0 01       	movw	r22, r0
    3d52:	b3 9f       	mul	r27, r19
    3d54:	c0 01       	movw	r24, r0
    3d56:	a3 9f       	mul	r26, r19
    3d58:	70 0d       	add	r23, r0
    3d5a:	81 1d       	adc	r24, r1
    3d5c:	11 24       	eor	r1, r1
    3d5e:	91 1d       	adc	r25, r1
    3d60:	b2 9f       	mul	r27, r18
    3d62:	70 0d       	add	r23, r0
    3d64:	81 1d       	adc	r24, r1
    3d66:	11 24       	eor	r1, r1
    3d68:	91 1d       	adc	r25, r1
    3d6a:	08 95       	ret

00003d6c <__muluhisi3>:
    3d6c:	f0 df       	rcall	.-32     	; 0x3d4e <__umulhisi3>
    3d6e:	a5 9f       	mul	r26, r21
    3d70:	90 0d       	add	r25, r0
    3d72:	b4 9f       	mul	r27, r20
    3d74:	90 0d       	add	r25, r0
    3d76:	a4 9f       	mul	r26, r20
    3d78:	80 0d       	add	r24, r0
    3d7a:	91 1d       	adc	r25, r1
    3d7c:	11 24       	eor	r1, r1
    3d7e:	08 95       	ret

00003d80 <strcmp>:
    3d80:	fb 01       	movw	r30, r22
    3d82:	dc 01       	movw	r26, r24
    3d84:	8d 91       	ld	r24, X+
    3d86:	01 90       	ld	r0, Z+
    3d88:	80 19       	sub	r24, r0
    3d8a:	01 10       	cpse	r0, r1
    3d8c:	d9 f3       	breq	.-10     	; 0x3d84 <strcmp+0x4>
    3d8e:	99 0b       	sbc	r25, r25
    3d90:	08 95       	ret

00003d92 <strcpy>:
    3d92:	fb 01       	movw	r30, r22
    3d94:	dc 01       	movw	r26, r24
    3d96:	01 90       	ld	r0, Z+
    3d98:	0d 92       	st	X+, r0
    3d9a:	00 20       	and	r0, r0
    3d9c:	e1 f7       	brne	.-8      	; 0x3d96 <strcpy+0x4>
    3d9e:	08 95       	ret

00003da0 <strncpy>:
    3da0:	fb 01       	movw	r30, r22
    3da2:	dc 01       	movw	r26, r24
    3da4:	41 50       	subi	r20, 0x01	; 1
    3da6:	50 40       	sbci	r21, 0x00	; 0
    3da8:	48 f0       	brcs	.+18     	; 0x3dbc <strncpy+0x1c>
    3daa:	01 90       	ld	r0, Z+
    3dac:	0d 92       	st	X+, r0
    3dae:	00 20       	and	r0, r0
    3db0:	c9 f7       	brne	.-14     	; 0x3da4 <strncpy+0x4>
    3db2:	01 c0       	rjmp	.+2      	; 0x3db6 <strncpy+0x16>
    3db4:	1d 92       	st	X+, r1
    3db6:	41 50       	subi	r20, 0x01	; 1
    3db8:	50 40       	sbci	r21, 0x00	; 0
    3dba:	e0 f7       	brcc	.-8      	; 0x3db4 <strncpy+0x14>
    3dbc:	08 95       	ret

00003dbe <_exit>:
    3dbe:	f8 94       	cli

00003dc0 <__stop_program>:
    3dc0:	ff cf       	rjmp	.-2      	; 0x3dc0 <__stop_program>
